(function(){const e=document.createElement("link").relList;if(e&&e.supports&&e.supports("modulepreload"))return;for(const i of document.querySelectorAll('link[rel="modulepreload"]'))s(i);new MutationObserver(i=>{for(const r of i)if(r.type==="childList")for(const a of r.addedNodes)a.tagName==="LINK"&&a.rel==="modulepreload"&&s(a)}).observe(document,{childList:!0,subtree:!0});function t(i){const r={};return i.integrity&&(r.integrity=i.integrity),i.referrerPolicy&&(r.referrerPolicy=i.referrerPolicy),i.crossOrigin==="use-credentials"?r.credentials="include":i.crossOrigin==="anonymous"?r.credentials="omit":r.credentials="same-origin",r}function s(i){if(i.ep)return;i.ep=!0;const r=t(i);fetch(i.href,r)}})();var St="top",Ut="bottom",Bt="right",yt="left",vd="auto",ho=[St,Ut,Bt,yt],aa="start",Bn="end",Ky="clippingParents",Sm="viewport",on="popper",Zy="reference",Du=ho.reduce(function(o,e){return o.concat([e+"-"+aa,e+"-"+Bn])},[]),ym=[].concat(ho,[vd]).reduce(function(o,e){return o.concat([e,e+"-"+aa,e+"-"+Bn])},[]),Qy="beforeRead",Jy="read",e0="afterRead",t0="beforeMain",s0="main",i0="afterMain",r0="beforeWrite",a0="write",n0="afterWrite",o0=[Qy,Jy,e0,t0,s0,i0,r0,a0,n0];function js(o){return o?(o.nodeName||"").toLowerCase():null}function Vt(o){if(o==null)return window;if(o.toString()!=="[object Window]"){var e=o.ownerDocument;return e&&e.defaultView||window}return o}function na(o){var e=Vt(o).Element;return o instanceof e||o instanceof Element}function es(o){var e=Vt(o).HTMLElement;return o instanceof e||o instanceof HTMLElement}function Tm(o){if(typeof ShadowRoot>"u")return!1;var e=Vt(o).ShadowRoot;return o instanceof e||o instanceof ShadowRoot}function FE(o){var e=o.state;Object.keys(e.elements).forEach(function(t){var s=e.styles[t]||{},i=e.attributes[t]||{},r=e.elements[t];!es(r)||!js(r)||(Object.assign(r.style,s),Object.keys(i).forEach(function(a){var n=i[a];n===!1?r.removeAttribute(a):r.setAttribute(a,n===!0?"":n)}))})}function kE(o){var e=o.state,t={popper:{position:e.options.strategy,left:"0",top:"0",margin:"0"},arrow:{position:"absolute"},reference:{}};return Object.assign(e.elements.popper.style,t.popper),e.styles=t,e.elements.arrow&&Object.assign(e.elements.arrow.style,t.arrow),function(){Object.keys(e.elements).forEach(function(s){var i=e.elements[s],r=e.attributes[s]||{},a=Object.keys(e.styles.hasOwnProperty(s)?e.styles[s]:t[s]),n=a.reduce(function(l,h){return l[h]="",l},{});!es(i)||!js(i)||(Object.assign(i.style,n),Object.keys(r).forEach(function(l){i.removeAttribute(l)}))})}}const xm={name:"applyStyles",enabled:!0,phase:"write",fn:FE,effect:kE,requires:["computeStyles"]};function Xs(o){return o.split("-")[0]}var Yr=Math.max,fc=Math.min,Vn=Math.round;function Ru(){var o=navigator.userAgentData;return o!=null&&o.brands&&Array.isArray(o.brands)?o.brands.map(function(e){return e.brand+"/"+e.version}).join(" "):navigator.userAgent}function l0(){return!/^((?!chrome|android).)*safari/i.test(Ru())}function zn(o,e,t){e===void 0&&(e=!1),t===void 0&&(t=!1);var s=o.getBoundingClientRect(),i=1,r=1;e&&es(o)&&(i=o.offsetWidth>0&&Vn(s.width)/o.offsetWidth||1,r=o.offsetHeight>0&&Vn(s.height)/o.offsetHeight||1);var a=na(o)?Vt(o):window,n=a.visualViewport,l=!l0()&&t,h=(s.left+(l&&n?n.offsetLeft:0))/i,c=(s.top+(l&&n?n.offsetTop:0))/r,d=s.width/i,f=s.height/r;return{width:d,height:f,top:c,right:h+d,bottom:c+f,left:h,x:h,y:c}}function Em(o){var e=zn(o),t=o.offsetWidth,s=o.offsetHeight;return Math.abs(e.width-t)<=1&&(t=e.width),Math.abs(e.height-s)<=1&&(s=e.height),{x:o.offsetLeft,y:o.offsetTop,width:t,height:s}}function h0(o,e){var t=e.getRootNode&&e.getRootNode();if(o.contains(e))return!0;if(t&&Tm(t)){var s=e;do{if(s&&o.isSameNode(s))return!0;s=s.parentNode||s.host}while(s)}return!1}function Ii(o){return Vt(o).getComputedStyle(o)}function UE(o){return["table","td","th"].indexOf(js(o))>=0}function ur(o){return((na(o)?o.ownerDocument:o.document)||window.document).documentElement}function Sd(o){return js(o)==="html"?o:o.assignedSlot||o.parentNode||(Tm(o)?o.host:null)||ur(o)}function Sg(o){return!es(o)||Ii(o).position==="fixed"?null:o.offsetParent}function BE(o){var e=/firefox/i.test(Ru()),t=/Trident/i.test(Ru());if(t&&es(o)){var s=Ii(o);if(s.position==="fixed")return null}var i=Sd(o);for(Tm(i)&&(i=i.host);es(i)&&["html","body"].indexOf(js(i))<0;){var r=Ii(i);if(r.transform!=="none"||r.perspective!=="none"||r.contain==="paint"||["transform","perspective"].indexOf(r.willChange)!==-1||e&&r.willChange==="filter"||e&&r.filter&&r.filter!=="none")return i;i=i.parentNode}return null}function wl(o){for(var e=Vt(o),t=Sg(o);t&&UE(t)&&Ii(t).position==="static";)t=Sg(t);return t&&(js(t)==="html"||js(t)==="body"&&Ii(t).position==="static")?e:t||BE(o)||e}function Am(o){return["top","bottom"].indexOf(o)>=0?"x":"y"}function Wo(o,e,t){return Yr(o,fc(e,t))}function VE(o,e,t){var s=Wo(o,e,t);return s>t?t:s}function c0(){return{top:0,right:0,bottom:0,left:0}}function d0(o){return Object.assign({},c0(),o)}function f0(o,e){return e.reduce(function(t,s){return t[s]=o,t},{})}var zE=function(e,t){return e=typeof e=="function"?e(Object.assign({},t.rects,{placement:t.placement})):e,d0(typeof e!="number"?e:f0(e,ho))};function HE(o){var e,t=o.state,s=o.name,i=o.options,r=t.elements.arrow,a=t.modifiersData.popperOffsets,n=Xs(t.placement),l=Am(n),h=[yt,Bt].indexOf(n)>=0,c=h?"height":"width";if(!(!r||!a)){var d=zE(i.padding,t),f=Em(r),u=l==="y"?St:yt,p=l==="y"?Ut:Bt,m=t.rects.reference[c]+t.rects.reference[l]-a[l]-t.rects.popper[c],_=a[l]-t.rects.reference[l],g=wl(r),y=g?l==="y"?g.clientHeight||0:g.clientWidth||0:0,A=m/2-_/2,v=d[u],S=y-f[c]-d[p],b=y/2-f[c]/2+A,E=Wo(v,b,S),T=l;t.modifiersData[s]=(e={},e[T]=E,e.centerOffset=E-b,e)}}function GE(o){var e=o.state,t=o.options,s=t.element,i=s===void 0?"[data-popper-arrow]":s;i!=null&&(typeof i=="string"&&(i=e.elements.popper.querySelector(i),!i)||h0(e.elements.popper,i)&&(e.elements.arrow=i))}const u0={name:"arrow",enabled:!0,phase:"main",fn:HE,effect:GE,requires:["popperOffsets"],requiresIfExists:["preventOverflow"]};function Hn(o){return o.split("-")[1]}var WE={top:"auto",right:"auto",bottom:"auto",left:"auto"};function $E(o,e){var t=o.x,s=o.y,i=e.devicePixelRatio||1;return{x:Vn(t*i)/i||0,y:Vn(s*i)/i||0}}function yg(o){var e,t=o.popper,s=o.popperRect,i=o.placement,r=o.variation,a=o.offsets,n=o.position,l=o.gpuAcceleration,h=o.adaptive,c=o.roundOffsets,d=o.isFixed,f=a.x,u=f===void 0?0:f,p=a.y,m=p===void 0?0:p,_=typeof c=="function"?c({x:u,y:m}):{x:u,y:m};u=_.x,m=_.y;var g=a.hasOwnProperty("x"),y=a.hasOwnProperty("y"),A=yt,v=St,S=window;if(h){var b=wl(t),E="clientHeight",T="clientWidth";if(b===Vt(t)&&(b=ur(t),Ii(b).position!=="static"&&n==="absolute"&&(E="scrollHeight",T="scrollWidth")),b=b,i===St||(i===yt||i===Bt)&&r===Bn){v=Ut;var w=d&&b===S&&S.visualViewport?S.visualViewport.height:b[E];m-=w-s.height,m*=l?1:-1}if(i===yt||(i===St||i===Ut)&&r===Bn){A=Bt;var P=d&&b===S&&S.visualViewport?S.visualViewport.width:b[T];u-=P-s.width,u*=l?1:-1}}var M=Object.assign({position:n},h&&WE),L=c===!0?$E({x:u,y:m},Vt(t)):{x:u,y:m};if(u=L.x,m=L.y,l){var D;return Object.assign({},M,(D={},D[v]=y?"0":"",D[A]=g?"0":"",D.transform=(S.devicePixelRatio||1)<=1?"translate("+u+"px, "+m+"px)":"translate3d("+u+"px, "+m+"px, 0)",D))}return Object.assign({},M,(e={},e[v]=y?m+"px":"",e[A]=g?u+"px":"",e.transform="",e))}function XE(o){var e=o.state,t=o.options,s=t.gpuAcceleration,i=s===void 0?!0:s,r=t.adaptive,a=r===void 0?!0:r,n=t.roundOffsets,l=n===void 0?!0:n,h={placement:Xs(e.placement),variation:Hn(e.placement),popper:e.elements.popper,popperRect:e.rects.popper,gpuAcceleration:i,isFixed:e.options.strategy==="fixed"};e.modifiersData.popperOffsets!=null&&(e.styles.popper=Object.assign({},e.styles.popper,yg(Object.assign({},h,{offsets:e.modifiersData.popperOffsets,position:e.options.strategy,adaptive:a,roundOffsets:l})))),e.modifiersData.arrow!=null&&(e.styles.arrow=Object.assign({},e.styles.arrow,yg(Object.assign({},h,{offsets:e.modifiersData.arrow,position:"absolute",adaptive:!1,roundOffsets:l})))),e.attributes.popper=Object.assign({},e.attributes.popper,{"data-popper-placement":e.placement})}const bm={name:"computeStyles",enabled:!0,phase:"beforeWrite",fn:XE,data:{}};var sh={passive:!0};function qE(o){var e=o.state,t=o.instance,s=o.options,i=s.scroll,r=i===void 0?!0:i,a=s.resize,n=a===void 0?!0:a,l=Vt(e.elements.popper),h=[].concat(e.scrollParents.reference,e.scrollParents.popper);return r&&h.forEach(function(c){c.addEventListener("scroll",t.update,sh)}),n&&l.addEventListener("resize",t.update,sh),function(){r&&h.forEach(function(c){c.removeEventListener("scroll",t.update,sh)}),n&&l.removeEventListener("resize",t.update,sh)}}const wm={name:"eventListeners",enabled:!0,phase:"write",fn:function(){},effect:qE,data:{}};var YE={left:"right",right:"left",bottom:"top",top:"bottom"};function Yh(o){return o.replace(/left|right|bottom|top/g,function(e){return YE[e]})}var jE={start:"end",end:"start"};function Tg(o){return o.replace(/start|end/g,function(e){return jE[e]})}function Cm(o){var e=Vt(o),t=e.pageXOffset,s=e.pageYOffset;return{scrollLeft:t,scrollTop:s}}function Pm(o){return zn(ur(o)).left+Cm(o).scrollLeft}function KE(o,e){var t=Vt(o),s=ur(o),i=t.visualViewport,r=s.clientWidth,a=s.clientHeight,n=0,l=0;if(i){r=i.width,a=i.height;var h=l0();(h||!h&&e==="fixed")&&(n=i.offsetLeft,l=i.offsetTop)}return{width:r,height:a,x:n+Pm(o),y:l}}function ZE(o){var e,t=ur(o),s=Cm(o),i=(e=o.ownerDocument)==null?void 0:e.body,r=Yr(t.scrollWidth,t.clientWidth,i?i.scrollWidth:0,i?i.clientWidth:0),a=Yr(t.scrollHeight,t.clientHeight,i?i.scrollHeight:0,i?i.clientHeight:0),n=-s.scrollLeft+Pm(o),l=-s.scrollTop;return Ii(i||t).direction==="rtl"&&(n+=Yr(t.clientWidth,i?i.clientWidth:0)-r),{width:r,height:a,x:n,y:l}}function Lm(o){var e=Ii(o),t=e.overflow,s=e.overflowX,i=e.overflowY;return/auto|scroll|overlay|hidden/.test(t+i+s)}function p0(o){return["html","body","#document"].indexOf(js(o))>=0?o.ownerDocument.body:es(o)&&Lm(o)?o:p0(Sd(o))}function $o(o,e){var t;e===void 0&&(e=[]);var s=p0(o),i=s===((t=o.ownerDocument)==null?void 0:t.body),r=Vt(s),a=i?[r].concat(r.visualViewport||[],Lm(s)?s:[]):s,n=e.concat(a);return i?n:n.concat($o(Sd(a)))}function Ou(o){return Object.assign({},o,{left:o.x,top:o.y,right:o.x+o.width,bottom:o.y+o.height})}function QE(o,e){var t=zn(o,!1,e==="fixed");return t.top=t.top+o.clientTop,t.left=t.left+o.clientLeft,t.bottom=t.top+o.clientHeight,t.right=t.left+o.clientWidth,t.width=o.clientWidth,t.height=o.clientHeight,t.x=t.left,t.y=t.top,t}function xg(o,e,t){return e===Sm?Ou(KE(o,t)):na(e)?QE(e,t):Ou(ZE(ur(o)))}function JE(o){var e=$o(Sd(o)),t=["absolute","fixed"].indexOf(Ii(o).position)>=0,s=t&&es(o)?wl(o):o;return na(s)?e.filter(function(i){return na(i)&&h0(i,s)&&js(i)!=="body"}):[]}function eA(o,e,t,s){var i=e==="clippingParents"?JE(o):[].concat(e),r=[].concat(i,[t]),a=r[0],n=r.reduce(function(l,h){var c=xg(o,h,s);return l.top=Yr(c.top,l.top),l.right=fc(c.right,l.right),l.bottom=fc(c.bottom,l.bottom),l.left=Yr(c.left,l.left),l},xg(o,a,s));return n.width=n.right-n.left,n.height=n.bottom-n.top,n.x=n.left,n.y=n.top,n}function m0(o){var e=o.reference,t=o.element,s=o.placement,i=s?Xs(s):null,r=s?Hn(s):null,a=e.x+e.width/2-t.width/2,n=e.y+e.height/2-t.height/2,l;switch(i){case St:l={x:a,y:e.y-t.height};break;case Ut:l={x:a,y:e.y+e.height};break;case Bt:l={x:e.x+e.width,y:n};break;case yt:l={x:e.x-t.width,y:n};break;default:l={x:e.x,y:e.y}}var h=i?Am(i):null;if(h!=null){var c=h==="y"?"height":"width";switch(r){case aa:l[h]=l[h]-(e[c]/2-t[c]/2);break;case Bn:l[h]=l[h]+(e[c]/2-t[c]/2);break}}return l}function Gn(o,e){e===void 0&&(e={});var t=e,s=t.placement,i=s===void 0?o.placement:s,r=t.strategy,a=r===void 0?o.strategy:r,n=t.boundary,l=n===void 0?Ky:n,h=t.rootBoundary,c=h===void 0?Sm:h,d=t.elementContext,f=d===void 0?on:d,u=t.altBoundary,p=u===void 0?!1:u,m=t.padding,_=m===void 0?0:m,g=d0(typeof _!="number"?_:f0(_,ho)),y=f===on?Zy:on,A=o.rects.popper,v=o.elements[p?y:f],S=eA(na(v)?v:v.contextElement||ur(o.elements.popper),l,c,a),b=zn(o.elements.reference),E=m0({reference:b,element:A,placement:i}),T=Ou(Object.assign({},A,E)),w=f===on?T:b,P={top:S.top-w.top+g.top,bottom:w.bottom-S.bottom+g.bottom,left:S.left-w.left+g.left,right:w.right-S.right+g.right},M=o.modifiersData.offset;if(f===on&&M){var L=M[i];Object.keys(P).forEach(function(D){var k=[Bt,Ut].indexOf(D)>=0?1:-1,G=[St,Ut].indexOf(D)>=0?"y":"x";P[D]+=L[G]*k})}return P}function tA(o,e){e===void 0&&(e={});var t=e,s=t.placement,i=t.boundary,r=t.rootBoundary,a=t.padding,n=t.flipVariations,l=t.allowedAutoPlacements,h=l===void 0?ym:l,c=Hn(s),d=c?n?Du:Du.filter(function(p){return Hn(p)===c}):ho,f=d.filter(function(p){return h.indexOf(p)>=0});f.length===0&&(f=d);var u=f.reduce(function(p,m){return p[m]=Gn(o,{placement:m,boundary:i,rootBoundary:r,padding:a})[Xs(m)],p},{});return Object.keys(u).sort(function(p,m){return u[p]-u[m]})}function sA(o){if(Xs(o)===vd)return[];var e=Yh(o);return[Tg(o),e,Tg(e)]}function iA(o){var e=o.state,t=o.options,s=o.name;if(!e.modifiersData[s]._skip){for(var i=t.mainAxis,r=i===void 0?!0:i,a=t.altAxis,n=a===void 0?!0:a,l=t.fallbackPlacements,h=t.padding,c=t.boundary,d=t.rootBoundary,f=t.altBoundary,u=t.flipVariations,p=u===void 0?!0:u,m=t.allowedAutoPlacements,_=e.options.placement,g=Xs(_),y=g===_,A=l||(y||!p?[Yh(_)]:sA(_)),v=[_].concat(A).reduce(function(X,V){return X.concat(Xs(V)===vd?tA(e,{placement:V,boundary:c,rootBoundary:d,padding:h,flipVariations:p,allowedAutoPlacements:m}):V)},[]),S=e.rects.reference,b=e.rects.popper,E=new Map,T=!0,w=v[0],P=0;P<v.length;P++){var M=v[P],L=Xs(M),D=Hn(M)===aa,k=[St,Ut].indexOf(L)>=0,G=k?"width":"height",U=Gn(e,{placement:M,boundary:c,rootBoundary:d,altBoundary:f,padding:h}),C=k?D?Bt:yt:D?Ut:St;S[G]>b[G]&&(C=Yh(C));var I=Yh(C),R=[];if(r&&R.push(U[L]<=0),n&&R.push(U[C]<=0,U[I]<=0),R.every(function(X){return X})){w=M,T=!1;break}E.set(M,R)}if(T)for(var O=p?3:1,N=function(V){var Y=v.find(function(j){var re=E.get(j);if(re)return re.slice(0,V).every(function(Ie){return Ie})});if(Y)return w=Y,"break"},F=O;F>0;F--){var W=N(F);if(W==="break")break}e.placement!==w&&(e.modifiersData[s]._skip=!0,e.placement=w,e.reset=!0)}}const _0={name:"flip",enabled:!0,phase:"main",fn:iA,requiresIfExists:["offset"],data:{_skip:!1}};function Eg(o,e,t){return t===void 0&&(t={x:0,y:0}),{top:o.top-e.height-t.y,right:o.right-e.width+t.x,bottom:o.bottom-e.height+t.y,left:o.left-e.width-t.x}}function Ag(o){return[St,Bt,Ut,yt].some(function(e){return o[e]>=0})}function rA(o){var e=o.state,t=o.name,s=e.rects.reference,i=e.rects.popper,r=e.modifiersData.preventOverflow,a=Gn(e,{elementContext:"reference"}),n=Gn(e,{altBoundary:!0}),l=Eg(a,s),h=Eg(n,i,r),c=Ag(l),d=Ag(h);e.modifiersData[t]={referenceClippingOffsets:l,popperEscapeOffsets:h,isReferenceHidden:c,hasPopperEscaped:d},e.attributes.popper=Object.assign({},e.attributes.popper,{"data-popper-reference-hidden":c,"data-popper-escaped":d})}const g0={name:"hide",enabled:!0,phase:"main",requiresIfExists:["preventOverflow"],fn:rA};function aA(o,e,t){var s=Xs(o),i=[yt,St].indexOf(s)>=0?-1:1,r=typeof t=="function"?t(Object.assign({},e,{placement:o})):t,a=r[0],n=r[1];return a=a||0,n=(n||0)*i,[yt,Bt].indexOf(s)>=0?{x:n,y:a}:{x:a,y:n}}function nA(o){var e=o.state,t=o.options,s=o.name,i=t.offset,r=i===void 0?[0,0]:i,a=ym.reduce(function(c,d){return c[d]=aA(d,e.rects,r),c},{}),n=a[e.placement],l=n.x,h=n.y;e.modifiersData.popperOffsets!=null&&(e.modifiersData.popperOffsets.x+=l,e.modifiersData.popperOffsets.y+=h),e.modifiersData[s]=a}const v0={name:"offset",enabled:!0,phase:"main",requires:["popperOffsets"],fn:nA};function oA(o){var e=o.state,t=o.name;e.modifiersData[t]=m0({reference:e.rects.reference,element:e.rects.popper,placement:e.placement})}const Im={name:"popperOffsets",enabled:!0,phase:"read",fn:oA,data:{}};function lA(o){return o==="x"?"y":"x"}function hA(o){var e=o.state,t=o.options,s=o.name,i=t.mainAxis,r=i===void 0?!0:i,a=t.altAxis,n=a===void 0?!1:a,l=t.boundary,h=t.rootBoundary,c=t.altBoundary,d=t.padding,f=t.tether,u=f===void 0?!0:f,p=t.tetherOffset,m=p===void 0?0:p,_=Gn(e,{boundary:l,rootBoundary:h,padding:d,altBoundary:c}),g=Xs(e.placement),y=Hn(e.placement),A=!y,v=Am(g),S=lA(v),b=e.modifiersData.popperOffsets,E=e.rects.reference,T=e.rects.popper,w=typeof m=="function"?m(Object.assign({},e.rects,{placement:e.placement})):m,P=typeof w=="number"?{mainAxis:w,altAxis:w}:Object.assign({mainAxis:0,altAxis:0},w),M=e.modifiersData.offset?e.modifiersData.offset[e.placement]:null,L={x:0,y:0};if(b){if(r){var D,k=v==="y"?St:yt,G=v==="y"?Ut:Bt,U=v==="y"?"height":"width",C=b[v],I=C+_[k],R=C-_[G],O=u?-T[U]/2:0,N=y===aa?E[U]:T[U],F=y===aa?-T[U]:-E[U],W=e.elements.arrow,X=u&&W?Em(W):{width:0,height:0},V=e.modifiersData["arrow#persistent"]?e.modifiersData["arrow#persistent"].padding:c0(),Y=V[k],j=V[G],re=Wo(0,E[U],X[U]),Ie=A?E[U]/2-O-re-Y-P.mainAxis:N-re-Y-P.mainAxis,Ge=A?-E[U]/2+O+re+j+P.mainAxis:F+re+j+P.mainAxis,We=e.elements.arrow&&wl(e.elements.arrow),Cs=We?v==="y"?We.clientTop||0:We.clientLeft||0:0,ri=(D=M?.[v])!=null?D:0,Ql=C+Ie-ri-Cs,Jl=C+Ge-ri,Pa=Wo(u?fc(I,Ql):I,C,u?Yr(R,Jl):R);b[v]=Pa,L[v]=Pa-C}if(n){var eh,Z=v==="x"?St:yt,th=v==="x"?Ut:Bt,Xt=b[S],ki=S==="y"?"height":"width",La=Xt+_[Z],go=Xt-_[th],qt=[St,yt].indexOf(g)!==-1,ls=(eh=M?.[S])!=null?eh:0,me=qt?La:Xt-E[ki]-T[ki]-ls+P.altAxis,Sr=qt?Xt+E[ki]+T[ki]-ls-P.altAxis:go,yr=u&&qt?VE(me,Xt,Sr):Wo(u?me:La,Xt,u?Sr:go);b[S]=yr,L[S]=yr-Xt}e.modifiersData[s]=L}}const S0={name:"preventOverflow",enabled:!0,phase:"main",fn:hA,requiresIfExists:["offset"]};function cA(o){return{scrollLeft:o.scrollLeft,scrollTop:o.scrollTop}}function dA(o){return o===Vt(o)||!es(o)?Cm(o):cA(o)}function fA(o){var e=o.getBoundingClientRect(),t=Vn(e.width)/o.offsetWidth||1,s=Vn(e.height)/o.offsetHeight||1;return t!==1||s!==1}function uA(o,e,t){t===void 0&&(t=!1);var s=es(e),i=es(e)&&fA(e),r=ur(e),a=zn(o,i,t),n={scrollLeft:0,scrollTop:0},l={x:0,y:0};return(s||!s&&!t)&&((js(e)!=="body"||Lm(r))&&(n=dA(e)),es(e)?(l=zn(e,!0),l.x+=e.clientLeft,l.y+=e.clientTop):r&&(l.x=Pm(r))),{x:a.left+n.scrollLeft-l.x,y:a.top+n.scrollTop-l.y,width:a.width,height:a.height}}function pA(o){var e=new Map,t=new Set,s=[];o.forEach(function(r){e.set(r.name,r)});function i(r){t.add(r.name);var a=[].concat(r.requires||[],r.requiresIfExists||[]);a.forEach(function(n){if(!t.has(n)){var l=e.get(n);l&&i(l)}}),s.push(r)}return o.forEach(function(r){t.has(r.name)||i(r)}),s}function mA(o){var e=pA(o);return o0.reduce(function(t,s){return t.concat(e.filter(function(i){return i.phase===s}))},[])}function _A(o){var e;return function(){return e||(e=new Promise(function(t){Promise.resolve().then(function(){e=void 0,t(o())})})),e}}function gA(o){var e=o.reduce(function(t,s){var i=t[s.name];return t[s.name]=i?Object.assign({},i,s,{options:Object.assign({},i.options,s.options),data:Object.assign({},i.data,s.data)}):s,t},{});return Object.keys(e).map(function(t){return e[t]})}var bg={placement:"bottom",modifiers:[],strategy:"absolute"};function wg(){for(var o=arguments.length,e=new Array(o),t=0;t<o;t++)e[t]=arguments[t];return!e.some(function(s){return!(s&&typeof s.getBoundingClientRect=="function")})}function yd(o){o===void 0&&(o={});var e=o,t=e.defaultModifiers,s=t===void 0?[]:t,i=e.defaultOptions,r=i===void 0?bg:i;return function(n,l,h){h===void 0&&(h=r);var c={placement:"bottom",orderedModifiers:[],options:Object.assign({},bg,r),modifiersData:{},elements:{reference:n,popper:l},attributes:{},styles:{}},d=[],f=!1,u={state:c,setOptions:function(g){var y=typeof g=="function"?g(c.options):g;m(),c.options=Object.assign({},r,c.options,y),c.scrollParents={reference:na(n)?$o(n):n.contextElement?$o(n.contextElement):[],popper:$o(l)};var A=mA(gA([].concat(s,c.options.modifiers)));return c.orderedModifiers=A.filter(function(v){return v.enabled}),p(),u.update()},forceUpdate:function(){if(!f){var g=c.elements,y=g.reference,A=g.popper;if(wg(y,A)){c.rects={reference:uA(y,wl(A),c.options.strategy==="fixed"),popper:Em(A)},c.reset=!1,c.placement=c.options.placement,c.orderedModifiers.forEach(function(P){return c.modifiersData[P.name]=Object.assign({},P.data)});for(var v=0;v<c.orderedModifiers.length;v++){if(c.reset===!0){c.reset=!1,v=-1;continue}var S=c.orderedModifiers[v],b=S.fn,E=S.options,T=E===void 0?{}:E,w=S.name;typeof b=="function"&&(c=b({state:c,options:T,name:w,instance:u})||c)}}}},update:_A(function(){return new Promise(function(_){u.forceUpdate(),_(c)})}),destroy:function(){m(),f=!0}};if(!wg(n,l))return u;u.setOptions(h).then(function(_){!f&&h.onFirstUpdate&&h.onFirstUpdate(_)});function p(){c.orderedModifiers.forEach(function(_){var g=_.name,y=_.options,A=y===void 0?{}:y,v=_.effect;if(typeof v=="function"){var S=v({state:c,name:g,instance:u,options:A}),b=function(){};d.push(S||b)}})}function m(){d.forEach(function(_){return _()}),d=[]}return u}}var vA=yd(),SA=[wm,Im,bm,xm],yA=yd({defaultModifiers:SA}),TA=[wm,Im,bm,xm,v0,_0,S0,u0,g0],Mm=yd({defaultModifiers:TA});const y0=Object.freeze(Object.defineProperty({__proto__:null,afterMain:i0,afterRead:e0,afterWrite:n0,applyStyles:xm,arrow:u0,auto:vd,basePlacements:ho,beforeMain:t0,beforeRead:Qy,beforeWrite:r0,bottom:Ut,clippingParents:Ky,computeStyles:bm,createPopper:Mm,createPopperBase:vA,createPopperLite:yA,detectOverflow:Gn,end:Bn,eventListeners:wm,flip:_0,hide:g0,left:yt,main:s0,modifierPhases:o0,offset:v0,placements:ym,popper:on,popperGenerator:yd,popperOffsets:Im,preventOverflow:S0,read:Jy,reference:Zy,right:Bt,start:aa,top:St,variationPlacements:Du,viewport:Sm,write:a0},Symbol.toStringTag,{value:"Module"}));/*!
  * Bootstrap v5.3.7 (https://getbootstrap.com/)
  * Copyright 2011-2025 The Bootstrap Authors (https://github.com/twbs/bootstrap/graphs/contributors)
  * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
  */const Ui=new Map,vf={set(o,e,t){Ui.has(o)||Ui.set(o,new Map);const s=Ui.get(o);if(!s.has(e)&&s.size!==0){console.error(`Bootstrap doesn't allow more than one instance per element. Bound instance: ${Array.from(s.keys())[0]}.`);return}s.set(e,t)},get(o,e){return Ui.has(o)&&Ui.get(o).get(e)||null},remove(o,e){if(!Ui.has(o))return;const t=Ui.get(o);t.delete(e),t.size===0&&Ui.delete(o)}},xA=1e6,EA=1e3,Nu="transitionend",T0=o=>(o&&window.CSS&&window.CSS.escape&&(o=o.replace(/#([^\s"#']+)/g,(e,t)=>`#${CSS.escape(t)}`)),o),AA=o=>o==null?`${o}`:Object.prototype.toString.call(o).match(/\s([a-z]+)/i)[1].toLowerCase(),bA=o=>{do o+=Math.floor(Math.random()*xA);while(document.getElementById(o));return o},wA=o=>{if(!o)return 0;let{transitionDuration:e,transitionDelay:t}=window.getComputedStyle(o);const s=Number.parseFloat(e),i=Number.parseFloat(t);return!s&&!i?0:(e=e.split(",")[0],t=t.split(",")[0],(Number.parseFloat(e)+Number.parseFloat(t))*EA)},x0=o=>{o.dispatchEvent(new Event(Nu))},Ai=o=>!o||typeof o!="object"?!1:(typeof o.jquery<"u"&&(o=o[0]),typeof o.nodeType<"u"),nr=o=>Ai(o)?o.jquery?o[0]:o:typeof o=="string"&&o.length>0?document.querySelector(T0(o)):null,co=o=>{if(!Ai(o)||o.getClientRects().length===0)return!1;const e=getComputedStyle(o).getPropertyValue("visibility")==="visible",t=o.closest("details:not([open])");if(!t)return e;if(t!==o){const s=o.closest("summary");if(s&&s.parentNode!==t||s===null)return!1}return e},or=o=>!o||o.nodeType!==Node.ELEMENT_NODE||o.classList.contains("disabled")?!0:typeof o.disabled<"u"?o.disabled:o.hasAttribute("disabled")&&o.getAttribute("disabled")!=="false",E0=o=>{if(!document.documentElement.attachShadow)return null;if(typeof o.getRootNode=="function"){const e=o.getRootNode();return e instanceof ShadowRoot?e:null}return o instanceof ShadowRoot?o:o.parentNode?E0(o.parentNode):null},uc=()=>{},Cl=o=>{o.offsetHeight},A0=()=>window.jQuery&&!document.body.hasAttribute("data-bs-no-jquery")?window.jQuery:null,Sf=[],CA=o=>{document.readyState==="loading"?(Sf.length||document.addEventListener("DOMContentLoaded",()=>{for(const e of Sf)e()}),Sf.push(o)):o()},is=()=>document.documentElement.dir==="rtl",ns=o=>{CA(()=>{const e=A0();if(e){const t=o.NAME,s=e.fn[t];e.fn[t]=o.jQueryInterface,e.fn[t].Constructor=o,e.fn[t].noConflict=()=>(e.fn[t]=s,o.jQueryInterface)}})},bt=(o,e=[],t=o)=>typeof o=="function"?o.call(...e):t,b0=(o,e,t=!0)=>{if(!t){bt(o);return}const i=wA(e)+5;let r=!1;const a=({target:n})=>{n===e&&(r=!0,e.removeEventListener(Nu,a),bt(o))};e.addEventListener(Nu,a),setTimeout(()=>{r||x0(e)},i)},Dm=(o,e,t,s)=>{const i=o.length;let r=o.indexOf(e);return r===-1?!t&&s?o[i-1]:o[0]:(r+=t?1:-1,s&&(r=(r+i)%i),o[Math.max(0,Math.min(r,i-1))])},PA=/[^.]*(?=\..*)\.|.*/,LA=/\..*/,IA=/::\d+$/,yf={};let Cg=1;const w0={mouseenter:"mouseover",mouseleave:"mouseout"},MA=new Set(["click","dblclick","mouseup","mousedown","contextmenu","mousewheel","DOMMouseScroll","mouseover","mouseout","mousemove","selectstart","selectend","keydown","keypress","keyup","orientationchange","touchstart","touchmove","touchend","touchcancel","pointerdown","pointermove","pointerup","pointerleave","pointercancel","gesturestart","gesturechange","gestureend","focus","blur","change","reset","select","submit","focusin","focusout","load","unload","beforeunload","resize","move","DOMContentLoaded","readystatechange","error","abort","scroll"]);function C0(o,e){return e&&`${e}::${Cg++}`||o.uidEvent||Cg++}function P0(o){const e=C0(o);return o.uidEvent=e,yf[e]=yf[e]||{},yf[e]}function DA(o,e){return function t(s){return Rm(s,{delegateTarget:o}),t.oneOff&&H.off(o,s.type,e),e.apply(o,[s])}}function RA(o,e,t){return function s(i){const r=o.querySelectorAll(e);for(let{target:a}=i;a&&a!==this;a=a.parentNode)for(const n of r)if(n===a)return Rm(i,{delegateTarget:a}),s.oneOff&&H.off(o,i.type,e,t),t.apply(a,[i])}}function L0(o,e,t=null){return Object.values(o).find(s=>s.callable===e&&s.delegationSelector===t)}function I0(o,e,t){const s=typeof e=="string",i=s?t:e||t;let r=M0(o);return MA.has(r)||(r=o),[s,i,r]}function Pg(o,e,t,s,i){if(typeof e!="string"||!o)return;let[r,a,n]=I0(e,t,s);e in w0&&(a=(p=>function(m){if(!m.relatedTarget||m.relatedTarget!==m.delegateTarget&&!m.delegateTarget.contains(m.relatedTarget))return p.call(this,m)})(a));const l=P0(o),h=l[n]||(l[n]={}),c=L0(h,a,r?t:null);if(c){c.oneOff=c.oneOff&&i;return}const d=C0(a,e.replace(PA,"")),f=r?RA(o,t,a):DA(o,a);f.delegationSelector=r?t:null,f.callable=a,f.oneOff=i,f.uidEvent=d,h[d]=f,o.addEventListener(n,f,r)}function Fu(o,e,t,s,i){const r=L0(e[t],s,i);r&&(o.removeEventListener(t,r,!!i),delete e[t][r.uidEvent])}function OA(o,e,t,s){const i=e[t]||{};for(const[r,a]of Object.entries(i))r.includes(s)&&Fu(o,e,t,a.callable,a.delegationSelector)}function M0(o){return o=o.replace(LA,""),w0[o]||o}const H={on(o,e,t,s){Pg(o,e,t,s,!1)},one(o,e,t,s){Pg(o,e,t,s,!0)},off(o,e,t,s){if(typeof e!="string"||!o)return;const[i,r,a]=I0(e,t,s),n=a!==e,l=P0(o),h=l[a]||{},c=e.startsWith(".");if(typeof r<"u"){if(!Object.keys(h).length)return;Fu(o,l,a,r,i?t:null);return}if(c)for(const d of Object.keys(l))OA(o,l,d,e.slice(1));for(const[d,f]of Object.entries(h)){const u=d.replace(IA,"");(!n||e.includes(u))&&Fu(o,l,a,f.callable,f.delegationSelector)}},trigger(o,e,t){if(typeof e!="string"||!o)return null;const s=A0(),i=M0(e),r=e!==i;let a=null,n=!0,l=!0,h=!1;r&&s&&(a=s.Event(e,t),s(o).trigger(a),n=!a.isPropagationStopped(),l=!a.isImmediatePropagationStopped(),h=a.isDefaultPrevented());const c=Rm(new Event(e,{bubbles:n,cancelable:!0}),t);return h&&c.preventDefault(),l&&o.dispatchEvent(c),c.defaultPrevented&&a&&a.preventDefault(),c}};function Rm(o,e={}){for(const[t,s]of Object.entries(e))try{o[t]=s}catch{Object.defineProperty(o,t,{configurable:!0,get(){return s}})}return o}function Lg(o){if(o==="true")return!0;if(o==="false")return!1;if(o===Number(o).toString())return Number(o);if(o===""||o==="null")return null;if(typeof o!="string")return o;try{return JSON.parse(decodeURIComponent(o))}catch{return o}}function Tf(o){return o.replace(/[A-Z]/g,e=>`-${e.toLowerCase()}`)}const bi={setDataAttribute(o,e,t){o.setAttribute(`data-bs-${Tf(e)}`,t)},removeDataAttribute(o,e){o.removeAttribute(`data-bs-${Tf(e)}`)},getDataAttributes(o){if(!o)return{};const e={},t=Object.keys(o.dataset).filter(s=>s.startsWith("bs")&&!s.startsWith("bsConfig"));for(const s of t){let i=s.replace(/^bs/,"");i=i.charAt(0).toLowerCase()+i.slice(1),e[i]=Lg(o.dataset[s])}return e},getDataAttribute(o,e){return Lg(o.getAttribute(`data-bs-${Tf(e)}`))}};class Pl{static get Default(){return{}}static get DefaultType(){return{}}static get NAME(){throw new Error('You have to implement the static method "NAME", for each component!')}_getConfig(e){return e=this._mergeConfigObj(e),e=this._configAfterMerge(e),this._typeCheckConfig(e),e}_configAfterMerge(e){return e}_mergeConfigObj(e,t){const s=Ai(t)?bi.getDataAttribute(t,"config"):{};return{...this.constructor.Default,...typeof s=="object"?s:{},...Ai(t)?bi.getDataAttributes(t):{},...typeof e=="object"?e:{}}}_typeCheckConfig(e,t=this.constructor.DefaultType){for(const[s,i]of Object.entries(t)){const r=e[s],a=Ai(r)?"element":AA(r);if(!new RegExp(i).test(a))throw new TypeError(`${this.constructor.NAME.toUpperCase()}: Option "${s}" provided type "${a}" but expected type "${i}".`)}}}const NA="5.3.7";class ws extends Pl{constructor(e,t){super(),e=nr(e),e&&(this._element=e,this._config=this._getConfig(t),vf.set(this._element,this.constructor.DATA_KEY,this))}dispose(){vf.remove(this._element,this.constructor.DATA_KEY),H.off(this._element,this.constructor.EVENT_KEY);for(const e of Object.getOwnPropertyNames(this))this[e]=null}_queueCallback(e,t,s=!0){b0(e,t,s)}_getConfig(e){return e=this._mergeConfigObj(e,this._element),e=this._configAfterMerge(e),this._typeCheckConfig(e),e}static getInstance(e){return vf.get(nr(e),this.DATA_KEY)}static getOrCreateInstance(e,t={}){return this.getInstance(e)||new this(e,typeof t=="object"?t:null)}static get VERSION(){return NA}static get DATA_KEY(){return`bs.${this.NAME}`}static get EVENT_KEY(){return`.${this.DATA_KEY}`}static eventName(e){return`${e}${this.EVENT_KEY}`}}const xf=o=>{let e=o.getAttribute("data-bs-target");if(!e||e==="#"){let t=o.getAttribute("href");if(!t||!t.includes("#")&&!t.startsWith("."))return null;t.includes("#")&&!t.startsWith("#")&&(t=`#${t.split("#")[1]}`),e=t&&t!=="#"?t.trim():null}return e?e.split(",").map(t=>T0(t)).join(","):null},se={find(o,e=document.documentElement){return[].concat(...Element.prototype.querySelectorAll.call(e,o))},findOne(o,e=document.documentElement){return Element.prototype.querySelector.call(e,o)},children(o,e){return[].concat(...o.children).filter(t=>t.matches(e))},parents(o,e){const t=[];let s=o.parentNode.closest(e);for(;s;)t.push(s),s=s.parentNode.closest(e);return t},prev(o,e){let t=o.previousElementSibling;for(;t;){if(t.matches(e))return[t];t=t.previousElementSibling}return[]},next(o,e){let t=o.nextElementSibling;for(;t;){if(t.matches(e))return[t];t=t.nextElementSibling}return[]},focusableChildren(o){const e=["a","button","input","textarea","select","details","[tabindex]",'[contenteditable="true"]'].map(t=>`${t}:not([tabindex^="-"])`).join(",");return this.find(e,o).filter(t=>!or(t)&&co(t))},getSelectorFromElement(o){const e=xf(o);return e&&se.findOne(e)?e:null},getElementFromSelector(o){const e=xf(o);return e?se.findOne(e):null},getMultipleElementsFromSelector(o){const e=xf(o);return e?se.find(e):[]}},Td=(o,e="hide")=>{const t=`click.dismiss${o.EVENT_KEY}`,s=o.NAME;H.on(document,t,`[data-bs-dismiss="${s}"]`,function(i){if(["A","AREA"].includes(this.tagName)&&i.preventDefault(),or(this))return;const r=se.getElementFromSelector(this)||this.closest(`.${s}`);o.getOrCreateInstance(r)[e]()})},FA="alert",kA="bs.alert",D0=`.${kA}`,UA=`close${D0}`,BA=`closed${D0}`,VA="fade",zA="show";class xd extends ws{static get NAME(){return FA}close(){if(H.trigger(this._element,UA).defaultPrevented)return;this._element.classList.remove(zA);const t=this._element.classList.contains(VA);this._queueCallback(()=>this._destroyElement(),this._element,t)}_destroyElement(){this._element.remove(),H.trigger(this._element,BA),this.dispose()}static jQueryInterface(e){return this.each(function(){const t=xd.getOrCreateInstance(this);if(typeof e=="string"){if(t[e]===void 0||e.startsWith("_")||e==="constructor")throw new TypeError(`No method named "${e}"`);t[e](this)}})}}Td(xd,"close");ns(xd);const HA="button",GA="bs.button",WA=`.${GA}`,$A=".data-api",XA="active",Ig='[data-bs-toggle="button"]',qA=`click${WA}${$A}`;class Ed extends ws{static get NAME(){return HA}toggle(){this._element.setAttribute("aria-pressed",this._element.classList.toggle(XA))}static jQueryInterface(e){return this.each(function(){const t=Ed.getOrCreateInstance(this);e==="toggle"&&t[e]()})}}H.on(document,qA,Ig,o=>{o.preventDefault();const e=o.target.closest(Ig);Ed.getOrCreateInstance(e).toggle()});ns(Ed);const YA="swipe",fo=".bs.swipe",jA=`touchstart${fo}`,KA=`touchmove${fo}`,ZA=`touchend${fo}`,QA=`pointerdown${fo}`,JA=`pointerup${fo}`,eb="touch",tb="pen",sb="pointer-event",ib=40,rb={endCallback:null,leftCallback:null,rightCallback:null},ab={endCallback:"(function|null)",leftCallback:"(function|null)",rightCallback:"(function|null)"};class pc extends Pl{constructor(e,t){super(),this._element=e,!(!e||!pc.isSupported())&&(this._config=this._getConfig(t),this._deltaX=0,this._supportPointerEvents=!!window.PointerEvent,this._initEvents())}static get Default(){return rb}static get DefaultType(){return ab}static get NAME(){return YA}dispose(){H.off(this._element,fo)}_start(e){if(!this._supportPointerEvents){this._deltaX=e.touches[0].clientX;return}this._eventIsPointerPenTouch(e)&&(this._deltaX=e.clientX)}_end(e){this._eventIsPointerPenTouch(e)&&(this._deltaX=e.clientX-this._deltaX),this._handleSwipe(),bt(this._config.endCallback)}_move(e){this._deltaX=e.touches&&e.touches.length>1?0:e.touches[0].clientX-this._deltaX}_handleSwipe(){const e=Math.abs(this._deltaX);if(e<=ib)return;const t=e/this._deltaX;this._deltaX=0,t&&bt(t>0?this._config.rightCallback:this._config.leftCallback)}_initEvents(){this._supportPointerEvents?(H.on(this._element,QA,e=>this._start(e)),H.on(this._element,JA,e=>this._end(e)),this._element.classList.add(sb)):(H.on(this._element,jA,e=>this._start(e)),H.on(this._element,KA,e=>this._move(e)),H.on(this._element,ZA,e=>this._end(e)))}_eventIsPointerPenTouch(e){return this._supportPointerEvents&&(e.pointerType===tb||e.pointerType===eb)}static isSupported(){return"ontouchstart"in document.documentElement||navigator.maxTouchPoints>0}}const nb="carousel",ob="bs.carousel",pr=`.${ob}`,R0=".data-api",lb="ArrowLeft",hb="ArrowRight",cb=500,vo="next",Ia="prev",ln="left",jh="right",db=`slide${pr}`,Ef=`slid${pr}`,fb=`keydown${pr}`,ub=`mouseenter${pr}`,pb=`mouseleave${pr}`,mb=`dragstart${pr}`,_b=`load${pr}${R0}`,gb=`click${pr}${R0}`,O0="carousel",ih="active",vb="slide",Sb="carousel-item-end",yb="carousel-item-start",Tb="carousel-item-next",xb="carousel-item-prev",N0=".active",F0=".carousel-item",Eb=N0+F0,Ab=".carousel-item img",bb=".carousel-indicators",wb="[data-bs-slide], [data-bs-slide-to]",Cb='[data-bs-ride="carousel"]',Pb={[lb]:jh,[hb]:ln},Lb={interval:5e3,keyboard:!0,pause:"hover",ride:!1,touch:!0,wrap:!0},Ib={interval:"(number|boolean)",keyboard:"boolean",pause:"(string|boolean)",ride:"(boolean|string)",touch:"boolean",wrap:"boolean"};class Ll extends ws{constructor(e,t){super(e,t),this._interval=null,this._activeElement=null,this._isSliding=!1,this.touchTimeout=null,this._swipeHelper=null,this._indicatorsElement=se.findOne(bb,this._element),this._addEventListeners(),this._config.ride===O0&&this.cycle()}static get Default(){return Lb}static get DefaultType(){return Ib}static get NAME(){return nb}next(){this._slide(vo)}nextWhenVisible(){!document.hidden&&co(this._element)&&this.next()}prev(){this._slide(Ia)}pause(){this._isSliding&&x0(this._element),this._clearInterval()}cycle(){this._clearInterval(),this._updateInterval(),this._interval=setInterval(()=>this.nextWhenVisible(),this._config.interval)}_maybeEnableCycle(){if(this._config.ride){if(this._isSliding){H.one(this._element,Ef,()=>this.cycle());return}this.cycle()}}to(e){const t=this._getItems();if(e>t.length-1||e<0)return;if(this._isSliding){H.one(this._element,Ef,()=>this.to(e));return}const s=this._getItemIndex(this._getActive());if(s===e)return;const i=e>s?vo:Ia;this._slide(i,t[e])}dispose(){this._swipeHelper&&this._swipeHelper.dispose(),super.dispose()}_configAfterMerge(e){return e.defaultInterval=e.interval,e}_addEventListeners(){this._config.keyboard&&H.on(this._element,fb,e=>this._keydown(e)),this._config.pause==="hover"&&(H.on(this._element,ub,()=>this.pause()),H.on(this._element,pb,()=>this._maybeEnableCycle())),this._config.touch&&pc.isSupported()&&this._addTouchEventListeners()}_addTouchEventListeners(){for(const s of se.find(Ab,this._element))H.on(s,mb,i=>i.preventDefault());const t={leftCallback:()=>this._slide(this._directionToOrder(ln)),rightCallback:()=>this._slide(this._directionToOrder(jh)),endCallback:()=>{this._config.pause==="hover"&&(this.pause(),this.touchTimeout&&clearTimeout(this.touchTimeout),this.touchTimeout=setTimeout(()=>this._maybeEnableCycle(),cb+this._config.interval))}};this._swipeHelper=new pc(this._element,t)}_keydown(e){if(/input|textarea/i.test(e.target.tagName))return;const t=Pb[e.key];t&&(e.preventDefault(),this._slide(this._directionToOrder(t)))}_getItemIndex(e){return this._getItems().indexOf(e)}_setActiveIndicatorElement(e){if(!this._indicatorsElement)return;const t=se.findOne(N0,this._indicatorsElement);t.classList.remove(ih),t.removeAttribute("aria-current");const s=se.findOne(`[data-bs-slide-to="${e}"]`,this._indicatorsElement);s&&(s.classList.add(ih),s.setAttribute("aria-current","true"))}_updateInterval(){const e=this._activeElement||this._getActive();if(!e)return;const t=Number.parseInt(e.getAttribute("data-bs-interval"),10);this._config.interval=t||this._config.defaultInterval}_slide(e,t=null){if(this._isSliding)return;const s=this._getActive(),i=e===vo,r=t||Dm(this._getItems(),s,i,this._config.wrap);if(r===s)return;const a=this._getItemIndex(r),n=u=>H.trigger(this._element,u,{relatedTarget:r,direction:this._orderToDirection(e),from:this._getItemIndex(s),to:a});if(n(db).defaultPrevented||!s||!r)return;const h=!!this._interval;this.pause(),this._isSliding=!0,this._setActiveIndicatorElement(a),this._activeElement=r;const c=i?yb:Sb,d=i?Tb:xb;r.classList.add(d),Cl(r),s.classList.add(c),r.classList.add(c);const f=()=>{r.classList.remove(c,d),r.classList.add(ih),s.classList.remove(ih,d,c),this._isSliding=!1,n(Ef)};this._queueCallback(f,s,this._isAnimated()),h&&this.cycle()}_isAnimated(){return this._element.classList.contains(vb)}_getActive(){return se.findOne(Eb,this._element)}_getItems(){return se.find(F0,this._element)}_clearInterval(){this._interval&&(clearInterval(this._interval),this._interval=null)}_directionToOrder(e){return is()?e===ln?Ia:vo:e===ln?vo:Ia}_orderToDirection(e){return is()?e===Ia?ln:jh:e===Ia?jh:ln}static jQueryInterface(e){return this.each(function(){const t=Ll.getOrCreateInstance(this,e);if(typeof e=="number"){t.to(e);return}if(typeof e=="string"){if(t[e]===void 0||e.startsWith("_")||e==="constructor")throw new TypeError(`No method named "${e}"`);t[e]()}})}}H.on(document,gb,wb,function(o){const e=se.getElementFromSelector(this);if(!e||!e.classList.contains(O0))return;o.preventDefault();const t=Ll.getOrCreateInstance(e),s=this.getAttribute("data-bs-slide-to");if(s){t.to(s),t._maybeEnableCycle();return}if(bi.getDataAttribute(this,"slide")==="next"){t.next(),t._maybeEnableCycle();return}t.prev(),t._maybeEnableCycle()});H.on(window,_b,()=>{const o=se.find(Cb);for(const e of o)Ll.getOrCreateInstance(e)});ns(Ll);const Mb="collapse",Db="bs.collapse",Il=`.${Db}`,Rb=".data-api",Ob=`show${Il}`,Nb=`shown${Il}`,Fb=`hide${Il}`,kb=`hidden${Il}`,Ub=`click${Il}${Rb}`,Af="show",un="collapse",rh="collapsing",Bb="collapsed",Vb=`:scope .${un} .${un}`,zb="collapse-horizontal",Hb="width",Gb="height",Wb=".collapse.show, .collapse.collapsing",ku='[data-bs-toggle="collapse"]',$b={parent:null,toggle:!0},Xb={parent:"(null|element)",toggle:"boolean"};class ol extends ws{constructor(e,t){super(e,t),this._isTransitioning=!1,this._triggerArray=[];const s=se.find(ku);for(const i of s){const r=se.getSelectorFromElement(i),a=se.find(r).filter(n=>n===this._element);r!==null&&a.length&&this._triggerArray.push(i)}this._initializeChildren(),this._config.parent||this._addAriaAndCollapsedClass(this._triggerArray,this._isShown()),this._config.toggle&&this.toggle()}static get Default(){return $b}static get DefaultType(){return Xb}static get NAME(){return Mb}toggle(){this._isShown()?this.hide():this.show()}show(){if(this._isTransitioning||this._isShown())return;let e=[];if(this._config.parent&&(e=this._getFirstLevelChildren(Wb).filter(n=>n!==this._element).map(n=>ol.getOrCreateInstance(n,{toggle:!1}))),e.length&&e[0]._isTransitioning||H.trigger(this._element,Ob).defaultPrevented)return;for(const n of e)n.hide();const s=this._getDimension();this._element.classList.remove(un),this._element.classList.add(rh),this._element.style[s]=0,this._addAriaAndCollapsedClass(this._triggerArray,!0),this._isTransitioning=!0;const i=()=>{this._isTransitioning=!1,this._element.classList.remove(rh),this._element.classList.add(un,Af),this._element.style[s]="",H.trigger(this._element,Nb)},a=`scroll${s[0].toUpperCase()+s.slice(1)}`;this._queueCallback(i,this._element,!0),this._element.style[s]=`${this._element[a]}px`}hide(){if(this._isTransitioning||!this._isShown()||H.trigger(this._element,Fb).defaultPrevented)return;const t=this._getDimension();this._element.style[t]=`${this._element.getBoundingClientRect()[t]}px`,Cl(this._element),this._element.classList.add(rh),this._element.classList.remove(un,Af);for(const i of this._triggerArray){const r=se.getElementFromSelector(i);r&&!this._isShown(r)&&this._addAriaAndCollapsedClass([i],!1)}this._isTransitioning=!0;const s=()=>{this._isTransitioning=!1,this._element.classList.remove(rh),this._element.classList.add(un),H.trigger(this._element,kb)};this._element.style[t]="",this._queueCallback(s,this._element,!0)}_isShown(e=this._element){return e.classList.contains(Af)}_configAfterMerge(e){return e.toggle=!!e.toggle,e.parent=nr(e.parent),e}_getDimension(){return this._element.classList.contains(zb)?Hb:Gb}_initializeChildren(){if(!this._config.parent)return;const e=this._getFirstLevelChildren(ku);for(const t of e){const s=se.getElementFromSelector(t);s&&this._addAriaAndCollapsedClass([t],this._isShown(s))}}_getFirstLevelChildren(e){const t=se.find(Vb,this._config.parent);return se.find(e,this._config.parent).filter(s=>!t.includes(s))}_addAriaAndCollapsedClass(e,t){if(e.length)for(const s of e)s.classList.toggle(Bb,!t),s.setAttribute("aria-expanded",t)}static jQueryInterface(e){const t={};return typeof e=="string"&&/show|hide/.test(e)&&(t.toggle=!1),this.each(function(){const s=ol.getOrCreateInstance(this,t);if(typeof e=="string"){if(typeof s[e]>"u")throw new TypeError(`No method named "${e}"`);s[e]()}})}}H.on(document,Ub,ku,function(o){(o.target.tagName==="A"||o.delegateTarget&&o.delegateTarget.tagName==="A")&&o.preventDefault();for(const e of se.getMultipleElementsFromSelector(this))ol.getOrCreateInstance(e,{toggle:!1}).toggle()});ns(ol);const Mg="dropdown",qb="bs.dropdown",Ea=`.${qb}`,Om=".data-api",Yb="Escape",Dg="Tab",jb="ArrowUp",Rg="ArrowDown",Kb=2,Zb=`hide${Ea}`,Qb=`hidden${Ea}`,Jb=`show${Ea}`,ew=`shown${Ea}`,k0=`click${Ea}${Om}`,U0=`keydown${Ea}${Om}`,tw=`keyup${Ea}${Om}`,hn="show",sw="dropup",iw="dropend",rw="dropstart",aw="dropup-center",nw="dropdown-center",Wr='[data-bs-toggle="dropdown"]:not(.disabled):not(:disabled)',ow=`${Wr}.${hn}`,Kh=".dropdown-menu",lw=".navbar",hw=".navbar-nav",cw=".dropdown-menu .dropdown-item:not(.disabled):not(:disabled)",dw=is()?"top-end":"top-start",fw=is()?"top-start":"top-end",uw=is()?"bottom-end":"bottom-start",pw=is()?"bottom-start":"bottom-end",mw=is()?"left-start":"right-start",_w=is()?"right-start":"left-start",gw="top",vw="bottom",Sw={autoClose:!0,boundary:"clippingParents",display:"dynamic",offset:[0,2],popperConfig:null,reference:"toggle"},yw={autoClose:"(boolean|string)",boundary:"(string|element)",display:"string",offset:"(array|string|function)",popperConfig:"(null|object|function)",reference:"(string|element|object)"};class qs extends ws{constructor(e,t){super(e,t),this._popper=null,this._parent=this._element.parentNode,this._menu=se.next(this._element,Kh)[0]||se.prev(this._element,Kh)[0]||se.findOne(Kh,this._parent),this._inNavbar=this._detectNavbar()}static get Default(){return Sw}static get DefaultType(){return yw}static get NAME(){return Mg}toggle(){return this._isShown()?this.hide():this.show()}show(){if(or(this._element)||this._isShown())return;const e={relatedTarget:this._element};if(!H.trigger(this._element,Jb,e).defaultPrevented){if(this._createPopper(),"ontouchstart"in document.documentElement&&!this._parent.closest(hw))for(const s of[].concat(...document.body.children))H.on(s,"mouseover",uc);this._element.focus(),this._element.setAttribute("aria-expanded",!0),this._menu.classList.add(hn),this._element.classList.add(hn),H.trigger(this._element,ew,e)}}hide(){if(or(this._element)||!this._isShown())return;const e={relatedTarget:this._element};this._completeHide(e)}dispose(){this._popper&&this._popper.destroy(),super.dispose()}update(){this._inNavbar=this._detectNavbar(),this._popper&&this._popper.update()}_completeHide(e){if(!H.trigger(this._element,Zb,e).defaultPrevented){if("ontouchstart"in document.documentElement)for(const s of[].concat(...document.body.children))H.off(s,"mouseover",uc);this._popper&&this._popper.destroy(),this._menu.classList.remove(hn),this._element.classList.remove(hn),this._element.setAttribute("aria-expanded","false"),bi.removeDataAttribute(this._menu,"popper"),H.trigger(this._element,Qb,e),this._element.focus()}}_getConfig(e){if(e=super._getConfig(e),typeof e.reference=="object"&&!Ai(e.reference)&&typeof e.reference.getBoundingClientRect!="function")throw new TypeError(`${Mg.toUpperCase()}: Option "reference" provided type "object" without a required "getBoundingClientRect" method.`);return e}_createPopper(){if(typeof y0>"u")throw new TypeError("Bootstrap's dropdowns require Popper (https://popper.js.org/docs/v2/)");let e=this._element;this._config.reference==="parent"?e=this._parent:Ai(this._config.reference)?e=nr(this._config.reference):typeof this._config.reference=="object"&&(e=this._config.reference);const t=this._getPopperConfig();this._popper=Mm(e,this._menu,t)}_isShown(){return this._menu.classList.contains(hn)}_getPlacement(){const e=this._parent;if(e.classList.contains(iw))return mw;if(e.classList.contains(rw))return _w;if(e.classList.contains(aw))return gw;if(e.classList.contains(nw))return vw;const t=getComputedStyle(this._menu).getPropertyValue("--bs-position").trim()==="end";return e.classList.contains(sw)?t?fw:dw:t?pw:uw}_detectNavbar(){return this._element.closest(lw)!==null}_getOffset(){const{offset:e}=this._config;return typeof e=="string"?e.split(",").map(t=>Number.parseInt(t,10)):typeof e=="function"?t=>e(t,this._element):e}_getPopperConfig(){const e={placement:this._getPlacement(),modifiers:[{name:"preventOverflow",options:{boundary:this._config.boundary}},{name:"offset",options:{offset:this._getOffset()}}]};return(this._inNavbar||this._config.display==="static")&&(bi.setDataAttribute(this._menu,"popper","static"),e.modifiers=[{name:"applyStyles",enabled:!1}]),{...e,...bt(this._config.popperConfig,[void 0,e])}}_selectMenuItem({key:e,target:t}){const s=se.find(cw,this._menu).filter(i=>co(i));s.length&&Dm(s,t,e===Rg,!s.includes(t)).focus()}static jQueryInterface(e){return this.each(function(){const t=qs.getOrCreateInstance(this,e);if(typeof e=="string"){if(typeof t[e]>"u")throw new TypeError(`No method named "${e}"`);t[e]()}})}static clearMenus(e){if(e.button===Kb||e.type==="keyup"&&e.key!==Dg)return;const t=se.find(ow);for(const s of t){const i=qs.getInstance(s);if(!i||i._config.autoClose===!1)continue;const r=e.composedPath(),a=r.includes(i._menu);if(r.includes(i._element)||i._config.autoClose==="inside"&&!a||i._config.autoClose==="outside"&&a||i._menu.contains(e.target)&&(e.type==="keyup"&&e.key===Dg||/input|select|option|textarea|form/i.test(e.target.tagName)))continue;const n={relatedTarget:i._element};e.type==="click"&&(n.clickEvent=e),i._completeHide(n)}}static dataApiKeydownHandler(e){const t=/input|textarea/i.test(e.target.tagName),s=e.key===Yb,i=[jb,Rg].includes(e.key);if(!i&&!s||t&&!s)return;e.preventDefault();const r=this.matches(Wr)?this:se.prev(this,Wr)[0]||se.next(this,Wr)[0]||se.findOne(Wr,e.delegateTarget.parentNode),a=qs.getOrCreateInstance(r);if(i){e.stopPropagation(),a.show(),a._selectMenuItem(e);return}a._isShown()&&(e.stopPropagation(),a.hide(),r.focus())}}H.on(document,U0,Wr,qs.dataApiKeydownHandler);H.on(document,U0,Kh,qs.dataApiKeydownHandler);H.on(document,k0,qs.clearMenus);H.on(document,tw,qs.clearMenus);H.on(document,k0,Wr,function(o){o.preventDefault(),qs.getOrCreateInstance(this).toggle()});ns(qs);const B0="backdrop",Tw="fade",Og="show",Ng=`mousedown.bs.${B0}`,xw={className:"modal-backdrop",clickCallback:null,isAnimated:!1,isVisible:!0,rootElement:"body"},Ew={className:"string",clickCallback:"(function|null)",isAnimated:"boolean",isVisible:"boolean",rootElement:"(element|string)"};class V0 extends Pl{constructor(e){super(),this._config=this._getConfig(e),this._isAppended=!1,this._element=null}static get Default(){return xw}static get DefaultType(){return Ew}static get NAME(){return B0}show(e){if(!this._config.isVisible){bt(e);return}this._append();const t=this._getElement();this._config.isAnimated&&Cl(t),t.classList.add(Og),this._emulateAnimation(()=>{bt(e)})}hide(e){if(!this._config.isVisible){bt(e);return}this._getElement().classList.remove(Og),this._emulateAnimation(()=>{this.dispose(),bt(e)})}dispose(){this._isAppended&&(H.off(this._element,Ng),this._element.remove(),this._isAppended=!1)}_getElement(){if(!this._element){const e=document.createElement("div");e.className=this._config.className,this._config.isAnimated&&e.classList.add(Tw),this._element=e}return this._element}_configAfterMerge(e){return e.rootElement=nr(e.rootElement),e}_append(){if(this._isAppended)return;const e=this._getElement();this._config.rootElement.append(e),H.on(e,Ng,()=>{bt(this._config.clickCallback)}),this._isAppended=!0}_emulateAnimation(e){b0(e,this._getElement(),this._config.isAnimated)}}const Aw="focustrap",bw="bs.focustrap",mc=`.${bw}`,ww=`focusin${mc}`,Cw=`keydown.tab${mc}`,Pw="Tab",Lw="forward",Fg="backward",Iw={autofocus:!0,trapElement:null},Mw={autofocus:"boolean",trapElement:"element"};class z0 extends Pl{constructor(e){super(),this._config=this._getConfig(e),this._isActive=!1,this._lastTabNavDirection=null}static get Default(){return Iw}static get DefaultType(){return Mw}static get NAME(){return Aw}activate(){this._isActive||(this._config.autofocus&&this._config.trapElement.focus(),H.off(document,mc),H.on(document,ww,e=>this._handleFocusin(e)),H.on(document,Cw,e=>this._handleKeydown(e)),this._isActive=!0)}deactivate(){this._isActive&&(this._isActive=!1,H.off(document,mc))}_handleFocusin(e){const{trapElement:t}=this._config;if(e.target===document||e.target===t||t.contains(e.target))return;const s=se.focusableChildren(t);s.length===0?t.focus():this._lastTabNavDirection===Fg?s[s.length-1].focus():s[0].focus()}_handleKeydown(e){e.key===Pw&&(this._lastTabNavDirection=e.shiftKey?Fg:Lw)}}const kg=".fixed-top, .fixed-bottom, .is-fixed, .sticky-top",Ug=".sticky-top",ah="padding-right",Bg="margin-right";class Uu{constructor(){this._element=document.body}getWidth(){const e=document.documentElement.clientWidth;return Math.abs(window.innerWidth-e)}hide(){const e=this.getWidth();this._disableOverFlow(),this._setElementAttributes(this._element,ah,t=>t+e),this._setElementAttributes(kg,ah,t=>t+e),this._setElementAttributes(Ug,Bg,t=>t-e)}reset(){this._resetElementAttributes(this._element,"overflow"),this._resetElementAttributes(this._element,ah),this._resetElementAttributes(kg,ah),this._resetElementAttributes(Ug,Bg)}isOverflowing(){return this.getWidth()>0}_disableOverFlow(){this._saveInitialAttribute(this._element,"overflow"),this._element.style.overflow="hidden"}_setElementAttributes(e,t,s){const i=this.getWidth(),r=a=>{if(a!==this._element&&window.innerWidth>a.clientWidth+i)return;this._saveInitialAttribute(a,t);const n=window.getComputedStyle(a).getPropertyValue(t);a.style.setProperty(t,`${s(Number.parseFloat(n))}px`)};this._applyManipulationCallback(e,r)}_saveInitialAttribute(e,t){const s=e.style.getPropertyValue(t);s&&bi.setDataAttribute(e,t,s)}_resetElementAttributes(e,t){const s=i=>{const r=bi.getDataAttribute(i,t);if(r===null){i.style.removeProperty(t);return}bi.removeDataAttribute(i,t),i.style.setProperty(t,r)};this._applyManipulationCallback(e,s)}_applyManipulationCallback(e,t){if(Ai(e)){t(e);return}for(const s of se.find(e,this._element))t(s)}}const Dw="modal",Rw="bs.modal",rs=`.${Rw}`,Ow=".data-api",Nw="Escape",Fw=`hide${rs}`,kw=`hidePrevented${rs}`,H0=`hidden${rs}`,G0=`show${rs}`,Uw=`shown${rs}`,Bw=`resize${rs}`,Vw=`click.dismiss${rs}`,zw=`mousedown.dismiss${rs}`,Hw=`keydown.dismiss${rs}`,Gw=`click${rs}${Ow}`,Vg="modal-open",Ww="fade",zg="show",bf="modal-static",$w=".modal.show",Xw=".modal-dialog",qw=".modal-body",Yw='[data-bs-toggle="modal"]',jw={backdrop:!0,focus:!0,keyboard:!0},Kw={backdrop:"(boolean|string)",focus:"boolean",keyboard:"boolean"};class Wn extends ws{constructor(e,t){super(e,t),this._dialog=se.findOne(Xw,this._element),this._backdrop=this._initializeBackDrop(),this._focustrap=this._initializeFocusTrap(),this._isShown=!1,this._isTransitioning=!1,this._scrollBar=new Uu,this._addEventListeners()}static get Default(){return jw}static get DefaultType(){return Kw}static get NAME(){return Dw}toggle(e){return this._isShown?this.hide():this.show(e)}show(e){this._isShown||this._isTransitioning||H.trigger(this._element,G0,{relatedTarget:e}).defaultPrevented||(this._isShown=!0,this._isTransitioning=!0,this._scrollBar.hide(),document.body.classList.add(Vg),this._adjustDialog(),this._backdrop.show(()=>this._showElement(e)))}hide(){!this._isShown||this._isTransitioning||H.trigger(this._element,Fw).defaultPrevented||(this._isShown=!1,this._isTransitioning=!0,this._focustrap.deactivate(),this._element.classList.remove(zg),this._queueCallback(()=>this._hideModal(),this._element,this._isAnimated()))}dispose(){H.off(window,rs),H.off(this._dialog,rs),this._backdrop.dispose(),this._focustrap.deactivate(),super.dispose()}handleUpdate(){this._adjustDialog()}_initializeBackDrop(){return new V0({isVisible:!!this._config.backdrop,isAnimated:this._isAnimated()})}_initializeFocusTrap(){return new z0({trapElement:this._element})}_showElement(e){document.body.contains(this._element)||document.body.append(this._element),this._element.style.display="block",this._element.removeAttribute("aria-hidden"),this._element.setAttribute("aria-modal",!0),this._element.setAttribute("role","dialog"),this._element.scrollTop=0;const t=se.findOne(qw,this._dialog);t&&(t.scrollTop=0),Cl(this._element),this._element.classList.add(zg);const s=()=>{this._config.focus&&this._focustrap.activate(),this._isTransitioning=!1,H.trigger(this._element,Uw,{relatedTarget:e})};this._queueCallback(s,this._dialog,this._isAnimated())}_addEventListeners(){H.on(this._element,Hw,e=>{if(e.key===Nw){if(this._config.keyboard){this.hide();return}this._triggerBackdropTransition()}}),H.on(window,Bw,()=>{this._isShown&&!this._isTransitioning&&this._adjustDialog()}),H.on(this._element,zw,e=>{H.one(this._element,Vw,t=>{if(!(this._element!==e.target||this._element!==t.target)){if(this._config.backdrop==="static"){this._triggerBackdropTransition();return}this._config.backdrop&&this.hide()}})})}_hideModal(){this._element.style.display="none",this._element.setAttribute("aria-hidden",!0),this._element.removeAttribute("aria-modal"),this._element.removeAttribute("role"),this._isTransitioning=!1,this._backdrop.hide(()=>{document.body.classList.remove(Vg),this._resetAdjustments(),this._scrollBar.reset(),H.trigger(this._element,H0)})}_isAnimated(){return this._element.classList.contains(Ww)}_triggerBackdropTransition(){if(H.trigger(this._element,kw).defaultPrevented)return;const t=this._element.scrollHeight>document.documentElement.clientHeight,s=this._element.style.overflowY;s==="hidden"||this._element.classList.contains(bf)||(t||(this._element.style.overflowY="hidden"),this._element.classList.add(bf),this._queueCallback(()=>{this._element.classList.remove(bf),this._queueCallback(()=>{this._element.style.overflowY=s},this._dialog)},this._dialog),this._element.focus())}_adjustDialog(){const e=this._element.scrollHeight>document.documentElement.clientHeight,t=this._scrollBar.getWidth(),s=t>0;if(s&&!e){const i=is()?"paddingLeft":"paddingRight";this._element.style[i]=`${t}px`}if(!s&&e){const i=is()?"paddingRight":"paddingLeft";this._element.style[i]=`${t}px`}}_resetAdjustments(){this._element.style.paddingLeft="",this._element.style.paddingRight=""}static jQueryInterface(e,t){return this.each(function(){const s=Wn.getOrCreateInstance(this,e);if(typeof e=="string"){if(typeof s[e]>"u")throw new TypeError(`No method named "${e}"`);s[e](t)}})}}H.on(document,Gw,Yw,function(o){const e=se.getElementFromSelector(this);["A","AREA"].includes(this.tagName)&&o.preventDefault(),H.one(e,G0,i=>{i.defaultPrevented||H.one(e,H0,()=>{co(this)&&this.focus()})});const t=se.findOne($w);t&&Wn.getInstance(t).hide(),Wn.getOrCreateInstance(e).toggle(this)});Td(Wn);ns(Wn);const Zw="offcanvas",Qw="bs.offcanvas",Ri=`.${Qw}`,W0=".data-api",Jw=`load${Ri}${W0}`,eC="Escape",Hg="show",Gg="showing",Wg="hiding",tC="offcanvas-backdrop",$0=".offcanvas.show",sC=`show${Ri}`,iC=`shown${Ri}`,rC=`hide${Ri}`,$g=`hidePrevented${Ri}`,X0=`hidden${Ri}`,aC=`resize${Ri}`,nC=`click${Ri}${W0}`,oC=`keydown.dismiss${Ri}`,lC='[data-bs-toggle="offcanvas"]',hC={backdrop:!0,keyboard:!0,scroll:!1},cC={backdrop:"(boolean|string)",keyboard:"boolean",scroll:"boolean"};class lr extends ws{constructor(e,t){super(e,t),this._isShown=!1,this._backdrop=this._initializeBackDrop(),this._focustrap=this._initializeFocusTrap(),this._addEventListeners()}static get Default(){return hC}static get DefaultType(){return cC}static get NAME(){return Zw}toggle(e){return this._isShown?this.hide():this.show(e)}show(e){if(this._isShown||H.trigger(this._element,sC,{relatedTarget:e}).defaultPrevented)return;this._isShown=!0,this._backdrop.show(),this._config.scroll||new Uu().hide(),this._element.setAttribute("aria-modal",!0),this._element.setAttribute("role","dialog"),this._element.classList.add(Gg);const s=()=>{(!this._config.scroll||this._config.backdrop)&&this._focustrap.activate(),this._element.classList.add(Hg),this._element.classList.remove(Gg),H.trigger(this._element,iC,{relatedTarget:e})};this._queueCallback(s,this._element,!0)}hide(){if(!this._isShown||H.trigger(this._element,rC).defaultPrevented)return;this._focustrap.deactivate(),this._element.blur(),this._isShown=!1,this._element.classList.add(Wg),this._backdrop.hide();const t=()=>{this._element.classList.remove(Hg,Wg),this._element.removeAttribute("aria-modal"),this._element.removeAttribute("role"),this._config.scroll||new Uu().reset(),H.trigger(this._element,X0)};this._queueCallback(t,this._element,!0)}dispose(){this._backdrop.dispose(),this._focustrap.deactivate(),super.dispose()}_initializeBackDrop(){const e=()=>{if(this._config.backdrop==="static"){H.trigger(this._element,$g);return}this.hide()},t=!!this._config.backdrop;return new V0({className:tC,isVisible:t,isAnimated:!0,rootElement:this._element.parentNode,clickCallback:t?e:null})}_initializeFocusTrap(){return new z0({trapElement:this._element})}_addEventListeners(){H.on(this._element,oC,e=>{if(e.key===eC){if(this._config.keyboard){this.hide();return}H.trigger(this._element,$g)}})}static jQueryInterface(e){return this.each(function(){const t=lr.getOrCreateInstance(this,e);if(typeof e=="string"){if(t[e]===void 0||e.startsWith("_")||e==="constructor")throw new TypeError(`No method named "${e}"`);t[e](this)}})}}H.on(document,nC,lC,function(o){const e=se.getElementFromSelector(this);if(["A","AREA"].includes(this.tagName)&&o.preventDefault(),or(this))return;H.one(e,X0,()=>{co(this)&&this.focus()});const t=se.findOne($0);t&&t!==e&&lr.getInstance(t).hide(),lr.getOrCreateInstance(e).toggle(this)});H.on(window,Jw,()=>{for(const o of se.find($0))lr.getOrCreateInstance(o).show()});H.on(window,aC,()=>{for(const o of se.find("[aria-modal][class*=show][class*=offcanvas-]"))getComputedStyle(o).position!=="fixed"&&lr.getOrCreateInstance(o).hide()});Td(lr);ns(lr);const dC=/^aria-[\w-]*$/i,q0={"*":["class","dir","id","lang","role",dC],a:["target","href","title","rel"],area:[],b:[],br:[],col:[],code:[],dd:[],div:[],dl:[],dt:[],em:[],hr:[],h1:[],h2:[],h3:[],h4:[],h5:[],h6:[],i:[],img:["src","srcset","alt","title","width","height"],li:[],ol:[],p:[],pre:[],s:[],small:[],span:[],sub:[],sup:[],strong:[],u:[],ul:[]},fC=new Set(["background","cite","href","itemtype","longdesc","poster","src","xlink:href"]),uC=/^(?!javascript:)(?:[a-z0-9+.-]+:|[^&:/?#]*(?:[/?#]|$))/i,pC=(o,e)=>{const t=o.nodeName.toLowerCase();return e.includes(t)?fC.has(t)?!!uC.test(o.nodeValue):!0:e.filter(s=>s instanceof RegExp).some(s=>s.test(t))};function mC(o,e,t){if(!o.length)return o;if(t&&typeof t=="function")return t(o);const i=new window.DOMParser().parseFromString(o,"text/html"),r=[].concat(...i.body.querySelectorAll("*"));for(const a of r){const n=a.nodeName.toLowerCase();if(!Object.keys(e).includes(n)){a.remove();continue}const l=[].concat(...a.attributes),h=[].concat(e["*"]||[],e[n]||[]);for(const c of l)pC(c,h)||a.removeAttribute(c.nodeName)}return i.body.innerHTML}const _C="TemplateFactory",gC={allowList:q0,content:{},extraClass:"",html:!1,sanitize:!0,sanitizeFn:null,template:"<div></div>"},vC={allowList:"object",content:"object",extraClass:"(string|function)",html:"boolean",sanitize:"boolean",sanitizeFn:"(null|function)",template:"string"},SC={entry:"(string|element|function|null)",selector:"(string|element)"};class yC extends Pl{constructor(e){super(),this._config=this._getConfig(e)}static get Default(){return gC}static get DefaultType(){return vC}static get NAME(){return _C}getContent(){return Object.values(this._config.content).map(e=>this._resolvePossibleFunction(e)).filter(Boolean)}hasContent(){return this.getContent().length>0}changeContent(e){return this._checkContent(e),this._config.content={...this._config.content,...e},this}toHtml(){const e=document.createElement("div");e.innerHTML=this._maybeSanitize(this._config.template);for(const[i,r]of Object.entries(this._config.content))this._setContent(e,r,i);const t=e.children[0],s=this._resolvePossibleFunction(this._config.extraClass);return s&&t.classList.add(...s.split(" ")),t}_typeCheckConfig(e){super._typeCheckConfig(e),this._checkContent(e.content)}_checkContent(e){for(const[t,s]of Object.entries(e))super._typeCheckConfig({selector:t,entry:s},SC)}_setContent(e,t,s){const i=se.findOne(s,e);if(i){if(t=this._resolvePossibleFunction(t),!t){i.remove();return}if(Ai(t)){this._putElementInTemplate(nr(t),i);return}if(this._config.html){i.innerHTML=this._maybeSanitize(t);return}i.textContent=t}}_maybeSanitize(e){return this._config.sanitize?mC(e,this._config.allowList,this._config.sanitizeFn):e}_resolvePossibleFunction(e){return bt(e,[void 0,this])}_putElementInTemplate(e,t){if(this._config.html){t.innerHTML="",t.append(e);return}t.textContent=e.textContent}}const TC="tooltip",xC=new Set(["sanitize","allowList","sanitizeFn"]),wf="fade",EC="modal",nh="show",AC=".tooltip-inner",Xg=`.${EC}`,qg="hide.bs.modal",So="hover",Cf="focus",Pf="click",bC="manual",wC="hide",CC="hidden",PC="show",LC="shown",IC="inserted",MC="click",DC="focusin",RC="focusout",OC="mouseenter",NC="mouseleave",FC={AUTO:"auto",TOP:"top",RIGHT:is()?"left":"right",BOTTOM:"bottom",LEFT:is()?"right":"left"},kC={allowList:q0,animation:!0,boundary:"clippingParents",container:!1,customClass:"",delay:0,fallbackPlacements:["top","right","bottom","left"],html:!1,offset:[0,6],placement:"top",popperConfig:null,sanitize:!0,sanitizeFn:null,selector:!1,template:'<div class="tooltip" role="tooltip"><div class="tooltip-arrow"></div><div class="tooltip-inner"></div></div>',title:"",trigger:"hover focus"},UC={allowList:"object",animation:"boolean",boundary:"(string|element)",container:"(string|element|boolean)",customClass:"(string|function)",delay:"(number|object)",fallbackPlacements:"array",html:"boolean",offset:"(array|string|function)",placement:"(string|function)",popperConfig:"(null|object|function)",sanitize:"boolean",sanitizeFn:"(null|function)",selector:"(string|boolean)",template:"string",title:"(string|element|function)",trigger:"string"};class uo extends ws{constructor(e,t){if(typeof y0>"u")throw new TypeError("Bootstrap's tooltips require Popper (https://popper.js.org/docs/v2/)");super(e,t),this._isEnabled=!0,this._timeout=0,this._isHovered=null,this._activeTrigger={},this._popper=null,this._templateFactory=null,this._newContent=null,this.tip=null,this._setListeners(),this._config.selector||this._fixTitle()}static get Default(){return kC}static get DefaultType(){return UC}static get NAME(){return TC}enable(){this._isEnabled=!0}disable(){this._isEnabled=!1}toggleEnabled(){this._isEnabled=!this._isEnabled}toggle(){if(this._isEnabled){if(this._isShown()){this._leave();return}this._enter()}}dispose(){clearTimeout(this._timeout),H.off(this._element.closest(Xg),qg,this._hideModalHandler),this._element.getAttribute("data-bs-original-title")&&this._element.setAttribute("title",this._element.getAttribute("data-bs-original-title")),this._disposePopper(),super.dispose()}show(){if(this._element.style.display==="none")throw new Error("Please use show on visible elements");if(!(this._isWithContent()&&this._isEnabled))return;const e=H.trigger(this._element,this.constructor.eventName(PC)),s=(E0(this._element)||this._element.ownerDocument.documentElement).contains(this._element);if(e.defaultPrevented||!s)return;this._disposePopper();const i=this._getTipElement();this._element.setAttribute("aria-describedby",i.getAttribute("id"));const{container:r}=this._config;if(this._element.ownerDocument.documentElement.contains(this.tip)||(r.append(i),H.trigger(this._element,this.constructor.eventName(IC))),this._popper=this._createPopper(i),i.classList.add(nh),"ontouchstart"in document.documentElement)for(const n of[].concat(...document.body.children))H.on(n,"mouseover",uc);const a=()=>{H.trigger(this._element,this.constructor.eventName(LC)),this._isHovered===!1&&this._leave(),this._isHovered=!1};this._queueCallback(a,this.tip,this._isAnimated())}hide(){if(!this._isShown()||H.trigger(this._element,this.constructor.eventName(wC)).defaultPrevented)return;if(this._getTipElement().classList.remove(nh),"ontouchstart"in document.documentElement)for(const i of[].concat(...document.body.children))H.off(i,"mouseover",uc);this._activeTrigger[Pf]=!1,this._activeTrigger[Cf]=!1,this._activeTrigger[So]=!1,this._isHovered=null;const s=()=>{this._isWithActiveTrigger()||(this._isHovered||this._disposePopper(),this._element.removeAttribute("aria-describedby"),H.trigger(this._element,this.constructor.eventName(CC)))};this._queueCallback(s,this.tip,this._isAnimated())}update(){this._popper&&this._popper.update()}_isWithContent(){return!!this._getTitle()}_getTipElement(){return this.tip||(this.tip=this._createTipElement(this._newContent||this._getContentForTemplate())),this.tip}_createTipElement(e){const t=this._getTemplateFactory(e).toHtml();if(!t)return null;t.classList.remove(wf,nh),t.classList.add(`bs-${this.constructor.NAME}-auto`);const s=bA(this.constructor.NAME).toString();return t.setAttribute("id",s),this._isAnimated()&&t.classList.add(wf),t}setContent(e){this._newContent=e,this._isShown()&&(this._disposePopper(),this.show())}_getTemplateFactory(e){return this._templateFactory?this._templateFactory.changeContent(e):this._templateFactory=new yC({...this._config,content:e,extraClass:this._resolvePossibleFunction(this._config.customClass)}),this._templateFactory}_getContentForTemplate(){return{[AC]:this._getTitle()}}_getTitle(){return this._resolvePossibleFunction(this._config.title)||this._element.getAttribute("data-bs-original-title")}_initializeOnDelegatedTarget(e){return this.constructor.getOrCreateInstance(e.delegateTarget,this._getDelegateConfig())}_isAnimated(){return this._config.animation||this.tip&&this.tip.classList.contains(wf)}_isShown(){return this.tip&&this.tip.classList.contains(nh)}_createPopper(e){const t=bt(this._config.placement,[this,e,this._element]),s=FC[t.toUpperCase()];return Mm(this._element,e,this._getPopperConfig(s))}_getOffset(){const{offset:e}=this._config;return typeof e=="string"?e.split(",").map(t=>Number.parseInt(t,10)):typeof e=="function"?t=>e(t,this._element):e}_resolvePossibleFunction(e){return bt(e,[this._element,this._element])}_getPopperConfig(e){const t={placement:e,modifiers:[{name:"flip",options:{fallbackPlacements:this._config.fallbackPlacements}},{name:"offset",options:{offset:this._getOffset()}},{name:"preventOverflow",options:{boundary:this._config.boundary}},{name:"arrow",options:{element:`.${this.constructor.NAME}-arrow`}},{name:"preSetPlacement",enabled:!0,phase:"beforeMain",fn:s=>{this._getTipElement().setAttribute("data-popper-placement",s.state.placement)}}]};return{...t,...bt(this._config.popperConfig,[void 0,t])}}_setListeners(){const e=this._config.trigger.split(" ");for(const t of e)if(t==="click")H.on(this._element,this.constructor.eventName(MC),this._config.selector,s=>{const i=this._initializeOnDelegatedTarget(s);i._activeTrigger[Pf]=!(i._isShown()&&i._activeTrigger[Pf]),i.toggle()});else if(t!==bC){const s=t===So?this.constructor.eventName(OC):this.constructor.eventName(DC),i=t===So?this.constructor.eventName(NC):this.constructor.eventName(RC);H.on(this._element,s,this._config.selector,r=>{const a=this._initializeOnDelegatedTarget(r);a._activeTrigger[r.type==="focusin"?Cf:So]=!0,a._enter()}),H.on(this._element,i,this._config.selector,r=>{const a=this._initializeOnDelegatedTarget(r);a._activeTrigger[r.type==="focusout"?Cf:So]=a._element.contains(r.relatedTarget),a._leave()})}this._hideModalHandler=()=>{this._element&&this.hide()},H.on(this._element.closest(Xg),qg,this._hideModalHandler)}_fixTitle(){const e=this._element.getAttribute("title");e&&(!this._element.getAttribute("aria-label")&&!this._element.textContent.trim()&&this._element.setAttribute("aria-label",e),this._element.setAttribute("data-bs-original-title",e),this._element.removeAttribute("title"))}_enter(){if(this._isShown()||this._isHovered){this._isHovered=!0;return}this._isHovered=!0,this._setTimeout(()=>{this._isHovered&&this.show()},this._config.delay.show)}_leave(){this._isWithActiveTrigger()||(this._isHovered=!1,this._setTimeout(()=>{this._isHovered||this.hide()},this._config.delay.hide))}_setTimeout(e,t){clearTimeout(this._timeout),this._timeout=setTimeout(e,t)}_isWithActiveTrigger(){return Object.values(this._activeTrigger).includes(!0)}_getConfig(e){const t=bi.getDataAttributes(this._element);for(const s of Object.keys(t))xC.has(s)&&delete t[s];return e={...t,...typeof e=="object"&&e?e:{}},e=this._mergeConfigObj(e),e=this._configAfterMerge(e),this._typeCheckConfig(e),e}_configAfterMerge(e){return e.container=e.container===!1?document.body:nr(e.container),typeof e.delay=="number"&&(e.delay={show:e.delay,hide:e.delay}),typeof e.title=="number"&&(e.title=e.title.toString()),typeof e.content=="number"&&(e.content=e.content.toString()),e}_getDelegateConfig(){const e={};for(const[t,s]of Object.entries(this._config))this.constructor.Default[t]!==s&&(e[t]=s);return e.selector=!1,e.trigger="manual",e}_disposePopper(){this._popper&&(this._popper.destroy(),this._popper=null),this.tip&&(this.tip.remove(),this.tip=null)}static jQueryInterface(e){return this.each(function(){const t=uo.getOrCreateInstance(this,e);if(typeof e=="string"){if(typeof t[e]>"u")throw new TypeError(`No method named "${e}"`);t[e]()}})}}ns(uo);const BC="popover",VC=".popover-header",zC=".popover-body",HC={...uo.Default,content:"",offset:[0,8],placement:"right",template:'<div class="popover" role="tooltip"><div class="popover-arrow"></div><h3 class="popover-header"></h3><div class="popover-body"></div></div>',trigger:"click"},GC={...uo.DefaultType,content:"(null|string|element|function)"};class Nm extends uo{static get Default(){return HC}static get DefaultType(){return GC}static get NAME(){return BC}_isWithContent(){return this._getTitle()||this._getContent()}_getContentForTemplate(){return{[VC]:this._getTitle(),[zC]:this._getContent()}}_getContent(){return this._resolvePossibleFunction(this._config.content)}static jQueryInterface(e){return this.each(function(){const t=Nm.getOrCreateInstance(this,e);if(typeof e=="string"){if(typeof t[e]>"u")throw new TypeError(`No method named "${e}"`);t[e]()}})}}ns(Nm);const WC="scrollspy",$C="bs.scrollspy",Fm=`.${$C}`,XC=".data-api",qC=`activate${Fm}`,Yg=`click${Fm}`,YC=`load${Fm}${XC}`,jC="dropdown-item",Ma="active",KC='[data-bs-spy="scroll"]',Lf="[href]",ZC=".nav, .list-group",jg=".nav-link",QC=".nav-item",JC=".list-group-item",eP=`${jg}, ${QC} > ${jg}, ${JC}`,tP=".dropdown",sP=".dropdown-toggle",iP={offset:null,rootMargin:"0px 0px -25%",smoothScroll:!1,target:null,threshold:[.1,.5,1]},rP={offset:"(number|null)",rootMargin:"string",smoothScroll:"boolean",target:"element",threshold:"array"};class Ad extends ws{constructor(e,t){super(e,t),this._targetLinks=new Map,this._observableSections=new Map,this._rootElement=getComputedStyle(this._element).overflowY==="visible"?null:this._element,this._activeTarget=null,this._observer=null,this._previousScrollData={visibleEntryTop:0,parentScrollTop:0},this.refresh()}static get Default(){return iP}static get DefaultType(){return rP}static get NAME(){return WC}refresh(){this._initializeTargetsAndObservables(),this._maybeEnableSmoothScroll(),this._observer?this._observer.disconnect():this._observer=this._getNewObserver();for(const e of this._observableSections.values())this._observer.observe(e)}dispose(){this._observer.disconnect(),super.dispose()}_configAfterMerge(e){return e.target=nr(e.target)||document.body,e.rootMargin=e.offset?`${e.offset}px 0px -30%`:e.rootMargin,typeof e.threshold=="string"&&(e.threshold=e.threshold.split(",").map(t=>Number.parseFloat(t))),e}_maybeEnableSmoothScroll(){this._config.smoothScroll&&(H.off(this._config.target,Yg),H.on(this._config.target,Yg,Lf,e=>{const t=this._observableSections.get(e.target.hash);if(t){e.preventDefault();const s=this._rootElement||window,i=t.offsetTop-this._element.offsetTop;if(s.scrollTo){s.scrollTo({top:i,behavior:"smooth"});return}s.scrollTop=i}}))}_getNewObserver(){const e={root:this._rootElement,threshold:this._config.threshold,rootMargin:this._config.rootMargin};return new IntersectionObserver(t=>this._observerCallback(t),e)}_observerCallback(e){const t=a=>this._targetLinks.get(`#${a.target.id}`),s=a=>{this._previousScrollData.visibleEntryTop=a.target.offsetTop,this._process(t(a))},i=(this._rootElement||document.documentElement).scrollTop,r=i>=this._previousScrollData.parentScrollTop;this._previousScrollData.parentScrollTop=i;for(const a of e){if(!a.isIntersecting){this._activeTarget=null,this._clearActiveClass(t(a));continue}const n=a.target.offsetTop>=this._previousScrollData.visibleEntryTop;if(r&&n){if(s(a),!i)return;continue}!r&&!n&&s(a)}}_initializeTargetsAndObservables(){this._targetLinks=new Map,this._observableSections=new Map;const e=se.find(Lf,this._config.target);for(const t of e){if(!t.hash||or(t))continue;const s=se.findOne(decodeURI(t.hash),this._element);co(s)&&(this._targetLinks.set(decodeURI(t.hash),t),this._observableSections.set(t.hash,s))}}_process(e){this._activeTarget!==e&&(this._clearActiveClass(this._config.target),this._activeTarget=e,e.classList.add(Ma),this._activateParents(e),H.trigger(this._element,qC,{relatedTarget:e}))}_activateParents(e){if(e.classList.contains(jC)){se.findOne(sP,e.closest(tP)).classList.add(Ma);return}for(const t of se.parents(e,ZC))for(const s of se.prev(t,eP))s.classList.add(Ma)}_clearActiveClass(e){e.classList.remove(Ma);const t=se.find(`${Lf}.${Ma}`,e);for(const s of t)s.classList.remove(Ma)}static jQueryInterface(e){return this.each(function(){const t=Ad.getOrCreateInstance(this,e);if(typeof e=="string"){if(t[e]===void 0||e.startsWith("_")||e==="constructor")throw new TypeError(`No method named "${e}"`);t[e]()}})}}H.on(window,YC,()=>{for(const o of se.find(KC))Ad.getOrCreateInstance(o)});ns(Ad);const aP="tab",nP="bs.tab",Aa=`.${nP}`,oP=`hide${Aa}`,lP=`hidden${Aa}`,hP=`show${Aa}`,cP=`shown${Aa}`,dP=`click${Aa}`,fP=`keydown${Aa}`,uP=`load${Aa}`,pP="ArrowLeft",Kg="ArrowRight",mP="ArrowUp",Zg="ArrowDown",If="Home",Qg="End",$r="active",Jg="fade",Mf="show",_P="dropdown",Y0=".dropdown-toggle",gP=".dropdown-menu",Df=`:not(${Y0})`,vP='.list-group, .nav, [role="tablist"]',SP=".nav-item, .list-group-item",yP=`.nav-link${Df}, .list-group-item${Df}, [role="tab"]${Df}`,j0='[data-bs-toggle="tab"], [data-bs-toggle="pill"], [data-bs-toggle="list"]',Rf=`${yP}, ${j0}`,TP=`.${$r}[data-bs-toggle="tab"], .${$r}[data-bs-toggle="pill"], .${$r}[data-bs-toggle="list"]`;class $n extends ws{constructor(e){super(e),this._parent=this._element.closest(vP),this._parent&&(this._setInitialAttributes(this._parent,this._getChildren()),H.on(this._element,fP,t=>this._keydown(t)))}static get NAME(){return aP}show(){const e=this._element;if(this._elemIsActive(e))return;const t=this._getActiveElem(),s=t?H.trigger(t,oP,{relatedTarget:e}):null;H.trigger(e,hP,{relatedTarget:t}).defaultPrevented||s&&s.defaultPrevented||(this._deactivate(t,e),this._activate(e,t))}_activate(e,t){if(!e)return;e.classList.add($r),this._activate(se.getElementFromSelector(e));const s=()=>{if(e.getAttribute("role")!=="tab"){e.classList.add(Mf);return}e.removeAttribute("tabindex"),e.setAttribute("aria-selected",!0),this._toggleDropDown(e,!0),H.trigger(e,cP,{relatedTarget:t})};this._queueCallback(s,e,e.classList.contains(Jg))}_deactivate(e,t){if(!e)return;e.classList.remove($r),e.blur(),this._deactivate(se.getElementFromSelector(e));const s=()=>{if(e.getAttribute("role")!=="tab"){e.classList.remove(Mf);return}e.setAttribute("aria-selected",!1),e.setAttribute("tabindex","-1"),this._toggleDropDown(e,!1),H.trigger(e,lP,{relatedTarget:t})};this._queueCallback(s,e,e.classList.contains(Jg))}_keydown(e){if(![pP,Kg,mP,Zg,If,Qg].includes(e.key))return;e.stopPropagation(),e.preventDefault();const t=this._getChildren().filter(i=>!or(i));let s;if([If,Qg].includes(e.key))s=t[e.key===If?0:t.length-1];else{const i=[Kg,Zg].includes(e.key);s=Dm(t,e.target,i,!0)}s&&(s.focus({preventScroll:!0}),$n.getOrCreateInstance(s).show())}_getChildren(){return se.find(Rf,this._parent)}_getActiveElem(){return this._getChildren().find(e=>this._elemIsActive(e))||null}_setInitialAttributes(e,t){this._setAttributeIfNotExists(e,"role","tablist");for(const s of t)this._setInitialAttributesOnChild(s)}_setInitialAttributesOnChild(e){e=this._getInnerElement(e);const t=this._elemIsActive(e),s=this._getOuterElement(e);e.setAttribute("aria-selected",t),s!==e&&this._setAttributeIfNotExists(s,"role","presentation"),t||e.setAttribute("tabindex","-1"),this._setAttributeIfNotExists(e,"role","tab"),this._setInitialAttributesOnTargetPanel(e)}_setInitialAttributesOnTargetPanel(e){const t=se.getElementFromSelector(e);t&&(this._setAttributeIfNotExists(t,"role","tabpanel"),e.id&&this._setAttributeIfNotExists(t,"aria-labelledby",`${e.id}`))}_toggleDropDown(e,t){const s=this._getOuterElement(e);if(!s.classList.contains(_P))return;const i=(r,a)=>{const n=se.findOne(r,s);n&&n.classList.toggle(a,t)};i(Y0,$r),i(gP,Mf),s.setAttribute("aria-expanded",t)}_setAttributeIfNotExists(e,t,s){e.hasAttribute(t)||e.setAttribute(t,s)}_elemIsActive(e){return e.classList.contains($r)}_getInnerElement(e){return e.matches(Rf)?e:se.findOne(Rf,e)}_getOuterElement(e){return e.closest(SP)||e}static jQueryInterface(e){return this.each(function(){const t=$n.getOrCreateInstance(this);if(typeof e=="string"){if(t[e]===void 0||e.startsWith("_")||e==="constructor")throw new TypeError(`No method named "${e}"`);t[e]()}})}}H.on(document,dP,j0,function(o){["A","AREA"].includes(this.tagName)&&o.preventDefault(),!or(this)&&$n.getOrCreateInstance(this).show()});H.on(window,uP,()=>{for(const o of se.find(TP))$n.getOrCreateInstance(o)});ns($n);const xP="toast",EP="bs.toast",mr=`.${EP}`,AP=`mouseover${mr}`,bP=`mouseout${mr}`,wP=`focusin${mr}`,CP=`focusout${mr}`,PP=`hide${mr}`,LP=`hidden${mr}`,IP=`show${mr}`,MP=`shown${mr}`,DP="fade",ev="hide",oh="show",lh="showing",RP={animation:"boolean",autohide:"boolean",delay:"number"},OP={animation:!0,autohide:!0,delay:5e3};class bd extends ws{constructor(e,t){super(e,t),this._timeout=null,this._hasMouseInteraction=!1,this._hasKeyboardInteraction=!1,this._setListeners()}static get Default(){return OP}static get DefaultType(){return RP}static get NAME(){return xP}show(){if(H.trigger(this._element,IP).defaultPrevented)return;this._clearTimeout(),this._config.animation&&this._element.classList.add(DP);const t=()=>{this._element.classList.remove(lh),H.trigger(this._element,MP),this._maybeScheduleHide()};this._element.classList.remove(ev),Cl(this._element),this._element.classList.add(oh,lh),this._queueCallback(t,this._element,this._config.animation)}hide(){if(!this.isShown()||H.trigger(this._element,PP).defaultPrevented)return;const t=()=>{this._element.classList.add(ev),this._element.classList.remove(lh,oh),H.trigger(this._element,LP)};this._element.classList.add(lh),this._queueCallback(t,this._element,this._config.animation)}dispose(){this._clearTimeout(),this.isShown()&&this._element.classList.remove(oh),super.dispose()}isShown(){return this._element.classList.contains(oh)}_maybeScheduleHide(){this._config.autohide&&(this._hasMouseInteraction||this._hasKeyboardInteraction||(this._timeout=setTimeout(()=>{this.hide()},this._config.delay)))}_onInteraction(e,t){switch(e.type){case"mouseover":case"mouseout":{this._hasMouseInteraction=t;break}case"focusin":case"focusout":{this._hasKeyboardInteraction=t;break}}if(t){this._clearTimeout();return}const s=e.relatedTarget;this._element===s||this._element.contains(s)||this._maybeScheduleHide()}_setListeners(){H.on(this._element,AP,e=>this._onInteraction(e,!0)),H.on(this._element,bP,e=>this._onInteraction(e,!1)),H.on(this._element,wP,e=>this._onInteraction(e,!0)),H.on(this._element,CP,e=>this._onInteraction(e,!1))}_clearTimeout(){clearTimeout(this._timeout),this._timeout=null}static jQueryInterface(e){return this.each(function(){const t=bd.getOrCreateInstance(this,e);if(typeof e=="string"){if(typeof t[e]>"u")throw new TypeError(`No method named "${e}"`);t[e](this)}})}}Td(bd);ns(bd);const NP="GpuTimings",K0="2.10.5",FP="8959e32";function _c(o,e){for(const t in e){const s=e[t];Array.isArray(s)?o[t]=_c([],s):s&&typeof s=="object"?o[t]=_c({},s):o[t]=s}return o}const kP={create(){return"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,o=>{const e=Math.random()*16|0;return(o==="x"?e:e&3|8).toString(16)})}},le={delimiter:"/",join(...o){let e=o[0];for(let t=0;t<o.length-1;t++){const s=o[t],i=o[t+1];if(i[0]===le.delimiter){e=i;continue}s&&i&&s[s.length-1]!==le.delimiter&&i[0]!==le.delimiter?e+=le.delimiter+i:e+=i}return e},normalize(o){const e=o.startsWith(le.delimiter),t=o.endsWith(le.delimiter),s=o.split("/");let i="",r=[];for(let a=0;a<s.length;a++)if(s[a]!==""&&s[a]!=="."){if(s[a]===".."&&r.length>0){r=r.slice(0,r.length-2);continue}a>0&&r.push(le.delimiter),r.push(s[a])}return i=r.join(""),!e&&i[0]===le.delimiter&&(i=i.slice(1)),t&&i[i.length-1]!==le.delimiter&&(i+=le.delimiter),i},split(o){const e=o.lastIndexOf(le.delimiter);return e!==-1?[o.substring(0,e),o.substring(e+1)]:["",o]},getBasename(o){return le.split(o)[1]},getDirectory(o){return le.split(o)[0]},getExtension(o){const e=o.split("?")[0].split(".").pop();return e!==o?`.${e}`:""},isRelativePath(o){return o.charAt(0)!=="/"&&o.match(/:\/\//)===null},extractPath(o){let e="";const t=o.split("/");let s=0;if(t.length>1)if(le.isRelativePath(o))if(t[0]===".")for(s=0;s<t.length-1;++s)e+=s===0?t[s]:`/${t[s]}`;else if(t[0]==="..")for(s=0;s<t.length-1;++s)e+=s===0?t[s]:`/${t[s]}`;else for(e=".",s=0;s<t.length-1;++s)e+=`/${t[s]}`;else for(s=0;s<t.length-1;++s)e+=s===0?t[s]:`/${t[s]}`;return e}},UP=()=>{let o=!1;try{const e=Object.defineProperty({},"passive",{get:function(){return o=!0,!1}});window.addEventListener("testpassive",null,e),window.removeEventListener("testpassive",null,e)}catch{}return o},yi=typeof navigator<"u"?navigator.userAgent:"",Xo=typeof window<"u"?"browser":typeof global<"u"?"node":"worker",tv=/android/i.test(yi)?"android":/ip(?:[ao]d|hone)/i.test(yi)?"ios":/windows/i.test(yi)?"windows":/mac os/i.test(yi)?"osx":/linux/i.test(yi)?"linux":/cros/i.test(yi)?"cros":null,BP=Xo!=="browser"?null:/Chrome\/|Chromium\/|Edg.*\//.test(yi)?"chrome":/Safari\//.test(yi)?"safari":/Firefox\//.test(yi)?"firefox":"other",VP=Xo==="browser"&&("ontouchstart"in window||"maxTouchPoints"in navigator&&navigator.maxTouchPoints>0);UP();const Se={name:tv,environment:Xo,browser:Xo==="browser",worker:Xo==="worker",android:tv==="android",touch:VP,browserName:BP},Z0="abcdefghijklmnopqrstuvwxyz",Q0="ABCDEFGHIJKLMNOPQRSTUVWXYZ",zP=Z0+Q0,Bu=55296,J0=56319,sv=56320,HP=57343,GP=8205,iv=127462,rv=127487,WP=127995,$P=127999,XP=8400,qP=8447,Vu=65024,zu=65039;function Hu(o,e=0){const t=o.length;if(e<0||e>=t)return null;const s=o.charCodeAt(e);if(t>1&&s>=Bu&&s<=J0){const i=o.charCodeAt(e+1);if(i>=sv&&i<=HP)return{code:(s-Bu)*1024+i-sv+65536,long:!0}}return{code:s,long:!1}}function $i(o,e,t){if(!o)return!1;const s=Hu(o);if(s){const i=s.code;return i>=e&&i<=t}return!1}function YP(o,e){if(e===o.length-1)return 1;if($i(o[e],Bu,J0)){const t=o.substring(e,e+2),s=o.substring(e+2,e+4);return $i(s,WP,$P)||$i(t,iv,rv)&&$i(s,iv,rv)?4:$i(s,Vu,zu)?3:2}return $i(o[e+1],Vu,zu)?2:1}const Zh={ASCII_LOWERCASE:Z0,ASCII_UPPERCASE:Q0,ASCII_LETTERS:zP,format(o,...e){for(let t=0;t<e.length;t++)o=o.replace(`{${t}}`,e[t]);return o},getCodePoint(o,e){const t=Hu(o,e);return t&&t.code},getCodePoints(o){if(typeof o!="string")throw new TypeError("Not a string");let e=0;const t=[];let s;for(;s=Hu(o,e);)t.push(s.code),e+=s.long?2:1;return t},getSymbols(o){if(typeof o!="string")throw new TypeError("Not a string");let e=0;const t=o.length,s=[];let i=0,r;for(;e<t;){if(i+=YP(o,e+i),r=o[e+i],$i(r,XP,qP)&&(r=o[e+i++]),$i(r,Vu,zu)&&(r=o[e+i++]),r&&r.charCodeAt(0)===GP){r=o[e+i++];continue}const a=o.substring(e,e+i);s.push(a),e+=i,i=0}return s},fromCodePoint(...o){return o.map(e=>e>65535?(e-=65536,String.fromCharCode((e>>10)+55296,e%1024+56320)):String.fromCharCode(e)).join("")}};class jP{constructor(e,t,s,i,r=!1){this._removed=!1,this.handler=e,this.name=t,this.callback=s,this.scope=i,this._once=r}off(){this._removed||this.handler.offByHandle(this)}on(e,t,s=this){return this.handler._addCallback(e,t,s,!1)}once(e,t,s=this){return this.handler._addCallback(e,t,s,!0)}set removed(e){e&&(this._removed=!0)}get removed(){return this._removed}toJSON(e){}}class ne{initEventHandler(){this._callbacks=new Map,this._callbackActive=new Map}_addCallback(e,t,s,i){if(this._callbacks.has(e)||this._callbacks.set(e,[]),this._callbackActive.has(e)){const a=this._callbackActive.get(e);a&&a===this._callbacks.get(e)&&this._callbackActive.set(e,a.slice())}const r=new jP(this,e,t,s,i);return this._callbacks.get(e).push(r),r}on(e,t,s=this){return this._addCallback(e,t,s,!1)}once(e,t,s=this){return this._addCallback(e,t,s,!0)}off(e,t,s){if(e)this._callbackActive.has(e)&&this._callbackActive.get(e)===this._callbacks.get(e)&&this._callbackActive.set(e,this._callbackActive.get(e).slice());else for(const[i,r]of this._callbackActive)this._callbacks.has(i)&&this._callbacks.get(i)===r&&this._callbackActive.set(i,r.slice());if(e)if(t){const i=this._callbacks.get(e);if(!i)return this;for(let r=0;r<i.length;r++)i[r].callback===t&&(s&&i[r].scope!==s||(i[r].removed=!0,i.splice(r,1),r--));i.length===0&&this._callbacks.delete(e)}else{const i=this._callbacks.get(e);if(i){for(let r=0;r<i.length;r++)i[r].removed=!0;this._callbacks.delete(e)}}else{for(const i of this._callbacks.values())for(let r=0;r<i.length;r++)i[r].removed=!0;this._callbacks.clear()}return this}offByHandle(e){const t=e.name;e.removed=!0,this._callbackActive.has(t)&&this._callbackActive.get(t)===this._callbacks.get(t)&&this._callbackActive.set(t,this._callbackActive.get(t).slice());const s=this._callbacks.get(t);if(!s)return this;const i=s.indexOf(e);return i!==-1&&(s.splice(i,1),s.length===0&&this._callbacks.delete(t)),this}fire(e,t,s,i,r,a,n,l,h){if(!e)return this;const c=this._callbacks.get(e);if(!c)return this;let d;this._callbackActive.has(e)?this._callbackActive.get(e)!==c&&(d=c.slice()):this._callbackActive.set(e,c);for(let f=0;(d||this._callbackActive.get(e))&&f<(d||this._callbackActive.get(e)).length;f++){const u=(d||this._callbackActive.get(e))[f];if(u.callback&&(u.callback.call(u.scope,t,s,i,r,a,n,l,h),u._once)){const p=this._callbacks.get(e),m=p?p.indexOf(u):-1;if(m!==-1){this._callbackActive.get(e)===p&&this._callbackActive.set(e,this._callbackActive.get(e).slice());const _=this._callbacks.get(e);if(!_)continue;_[m].removed=!0,_.splice(m,1),_.length===0&&this._callbacks.delete(e)}}}return d||this._callbackActive.delete(e),this}hasEvent(e){return!!this._callbacks.get(e)?.length}constructor(){this._callbacks=new Map,this._callbackActive=new Map}}class KP{push(e,t){if(this._index[e])throw Error(`Key already in index ${e}`);const s=this._list.push(t)-1;this._index[e]=s}has(e){return this._index[e]!==void 0}get(e){const t=this._index[e];return t!==void 0?this._list[t]:null}remove(e){const t=this._index[e];if(t!==void 0){this._list.splice(t,1),delete this._index[e];for(e in this._index){const s=this._index[e];s>t&&(this._index[e]=s-1)}return!0}return!1}list(){return this._list}clear(){this._list.length=0;for(const e in this._index)delete this._index[e]}constructor(){this._list=[],this._index={}}}const ZP=o=>{const e={};let t=e;return()=>(t===e&&(t=o()),t)},Ds=class Ds{static loadScript(e,t){const s=document.createElement("script");s.setAttribute("src",e),s.onload=()=>{t(null)},s.onerror=()=>{t(`Failed to load script='${e}'`)},document.body.appendChild(s)}static loadWasm(e,t,s){const i=Ds.wasmSupported()&&t.glueUrl&&t.wasmUrl?t.glueUrl:t.fallbackUrl;i?Ds.loadScript(i,r=>{if(r)s(r,null);else{const a=window[e];window[e]=void 0,a({locateFile:()=>t.wasmUrl,onAbort:()=>{s("wasm module aborted.")}}).then(n=>{s(null,n)})}}):s("No supported wasm modules found.",null)}static getModule(e){return Ds.modules.hasOwnProperty(e)||(Ds.modules[e]={config:null,initializing:!1,instance:null,callbacks:[]}),Ds.modules[e]}static initialize(e,t){if(t.initializing)return;const s=t.config;(s.glueUrl||s.wasmUrl||s.fallbackUrl)&&(t.initializing=!0,Ds.loadWasm(e,s,(i,r)=>{i?s.errorHandler?s.errorHandler(i):console.error(`failed to initialize module=${e} error=${i}`):(t.instance=r,t.callbacks.forEach(a=>{a(r)}))}))}};Ds.modules={},Ds.wasmSupported=ZP(()=>{try{if(typeof WebAssembly=="object"&&typeof WebAssembly.instantiate=="function"){const e=new WebAssembly.Module(Uint8Array.of(0,97,115,109,1,0,0,0));if(e instanceof WebAssembly.Module)return new WebAssembly.Instance(e)instanceof WebAssembly.Instance}}catch{}return!1});let Nr=Ds;class eT{static setConfig(e,t){const s=Nr.getModule(e);s.config=t,s.callbacks.length>0&&Nr.initialize(e,s)}static getConfig(e){return Nr.modules?.[e]?.config}static getInstance(e,t){const s=Nr.getModule(e);s.instance?t(s.instance):(s.callbacks.push(t),s.config&&Nr.initialize(e,s))}}class tT{constructor(e){this.offset=0,this.arraybuffer=e,this.dataView=new DataView(e)}get remainingBytes(){return this.dataView.byteLength-this.offset}reset(e=0){this.offset=e}skip(e){this.offset+=e}align(e){this.offset=this.offset+e-1&~(e-1)}_inc(e){return this.offset+=e,this.offset-e}readChar(){return String.fromCharCode(this.dataView.getUint8(this.offset++))}readChars(e){let t="";for(let s=0;s<e;++s)t+=this.readChar();return t}readU8(){return this.dataView.getUint8(this.offset++)}readU16(){return this.dataView.getUint16(this._inc(2),!0)}readU32(){return this.dataView.getUint32(this._inc(4),!0)}readU64(){return this.readU32()+2**32*this.readU32()}readU32be(){return this.dataView.getUint32(this._inc(4),!1)}readArray(e){for(let t=0;t<e.length;++t)e[t]=this.readU8()}readLine(){const e=this.dataView;let t="";for(;!(this.offset>=e.byteLength);){const s=String.fromCharCode(this.readU8());if(s===`
`)break;t+=s}return t}}class gc{constructor(e){this.items=[],this.length=0,this.loopIndex=-1,this._sortBy=e.sortBy,this._sortHandler=this._doSort.bind(this)}_binarySearch(e){let t=0,s=this.items.length-1;const i=e[this._sortBy];let r,a;for(;t<=s;)r=Math.floor((t+s)/2),a=this.items[r][this._sortBy],a<=i?t=r+1:a>i&&(s=r-1);return t}_doSort(e,t){const s=this._sortBy;return e[s]-t[s]}insert(e){const t=this._binarySearch(e);this.items.splice(t,0,e),this.length++,this.loopIndex>=t&&this.loopIndex++}append(e){this.items.push(e),this.length++}remove(e){const t=this.items.indexOf(e);t<0||(this.items.splice(t,1),this.length--,this.loopIndex>=t&&this.loopIndex--)}sort(){const e=this.loopIndex>=0?this.items[this.loopIndex]:null;this.items.sort(this._sortHandler),e!==null&&(this.loopIndex=this.items.indexOf(e))}}const il=class il extends ne{constructor(e){super(),this._index={},this._list=[],this._parent=e}add(...e){let t=!1;const s=this._processArguments(e,!0);if(!s.length)return t;for(let i=0;i<s.length;i++)this._index[s[i]]||(t=!0,this._index[s[i]]=!0,this._list.push(s[i]),this.fire("add",s[i],this._parent));return t&&this.fire("change",this._parent),t}remove(...e){let t=!1;if(!this._list.length)return t;const s=this._processArguments(e,!0);if(!s.length)return t;for(let i=0;i<s.length;i++)this._index[s[i]]&&(t=!0,delete this._index[s[i]],this._list.splice(this._list.indexOf(s[i]),1),this.fire("remove",s[i],this._parent));return t&&this.fire("change",this._parent),t}clear(){if(!this._list.length)return;const e=this._list.slice(0);this._list=[],this._index={};for(let t=0;t<e.length;t++)this.fire("remove",e[t],this._parent);this.fire("change",this._parent)}has(...e){return this._list.length?this._has(this._processArguments(e)):!1}_has(e){if(!this._list.length||!e.length)return!1;for(let t=0;t<e.length;t++)if(e[t].length===1){if(this._index[e[t][0]])return!0}else{let s=!0;for(let i=0;i<e[t].length;i++)if(!this._index[e[t][i]]){s=!1;break}if(s)return!0}return!1}list(){return this._list.slice(0)}_processArguments(e,t){const s=[];let i=[];if(!e||!e.length)return s;for(let r=0;r<e.length;r++)if(e[r]instanceof Array){t||(i=[]);for(let a=0;a<e[r].length;a++)typeof e[r][a]=="string"&&(t?s.push(e[r][a]):i.push(e[r][a]));!t&&i.length&&s.push(i)}else typeof e[r]=="string"&&(t?s.push(e[r]):s.push([e[r]]));return s}get size(){return this._list.length}};il.EVENT_ADD="add",il.EVENT_REMOVE="remove",il.EVENT_CHANGE="change";let vc=il;const Mi=typeof window<"u"&&window.performance&&window.performance.now?performance.now.bind(performance):Date.now,QP=/^(([^:/?#]+):)?(\/\/([^/?#]*))?([^?#]*)(\?([^#]*))?(#(.*))?/;class Of{constructor(e){const t=e.match(QP);this.scheme=t[2],this.authority=t[4],this.path=t[5],this.query=t[7],this.fragment=t[9]}toString(){let e="";return this.scheme&&(e+=`${this.scheme}:`),this.authority&&(e+=`//${this.authority}`),e+=this.path,this.query&&(e+=`?${this.query}`),this.fragment&&(e+=`#${this.fragment}`),e}getQuery(){const e={};if(this.query){const t=decodeURIComponent(this.query).split("&");for(const s of t){const i=s.split("=");e[i[0]]=i[1]}}return e}setQuery(e){let t="";for(const s in e)e.hasOwnProperty(s)&&(t!==""&&(t+="&"),t+=`${encodeURIComponent(s)}=${encodeURIComponent(e[s])}`);this.query=t}}const rl=class rl{static set(e,t=!0){}static get(e){return rl._traceChannels.has(e)}};rl._traceChannels=new Set,rl.stack=!1;let Gu=rl;const JP=0,km=1,av=4,eL=5,B={DEG_TO_RAD:Math.PI/180,RAD_TO_DEG:180/Math.PI,clamp(o,e,t){return o>=t?t:o<=e?e:o},intToBytes24(o){const e=o>>16&255,t=o>>8&255,s=o&255;return[e,t,s]},intToBytes32(o){const e=o>>24&255,t=o>>16&255,s=o>>8&255,i=o&255;return[e,t,s,i]},bytesToInt24(o,e,t){return o.length&&(t=o[2],e=o[1],o=o[0]),o<<16|e<<8|t},bytesToInt32(o,e,t,s){return o.length&&(s=o[3],t=o[2],e=o[1],o=o[0]),(o<<24|e<<16|t<<8|s)>>>0},lerp(o,e,t){return o+(e-o)*B.clamp(t,0,1)},lerpAngle(o,e,t){return e-o>180&&(e-=360),e-o<-180&&(e+=360),B.lerp(o,e,B.clamp(t,0,1))},powerOfTwo(o){return o!==0&&!(o&o-1)},nextPowerOfTwo(o){return o--,o|=o>>1,o|=o>>2,o|=o>>4,o|=o>>8,o|=o>>16,o++,o},nearestPowerOfTwo(o){return Math.pow(2,Math.round(Math.log2(o)))},random(o,e){const t=e-o;return Math.random()*t+o},smoothstep(o,e,t){return t<=o?0:t>=e?1:(t=(t-o)/(e-o),t*t*(3-2*t))},smootherstep(o,e,t){return t<=o?0:t>=e?1:(t=(t-o)/(e-o),t*t*t*(t*(t*6-15)+10))},roundUp(o,e){return e===0?o:Math.ceil(o/e)*e},between(o,e,t,s){const i=Math.min(e,t),r=Math.max(e,t);return s?o>=i&&o<=r:o>i&&o<r}},Qe=class Qe{constructor(e=0,t=0,s=0,i=1){const r=e.length;r===3||r===4?(this.r=e[0],this.g=e[1],this.b=e[2],this.a=e[3]??1):(this.r=e,this.g=t,this.b=s,this.a=i)}clone(){const e=this.constructor;return new e(this.r,this.g,this.b,this.a)}copy(e){return this.r=e.r,this.g=e.g,this.b=e.b,this.a=e.a,this}equals(e){return this.r===e.r&&this.g===e.g&&this.b===e.b&&this.a===e.a}set(e,t,s,i=1){return this.r=e,this.g=t,this.b=s,this.a=i,this}lerp(e,t,s){return this.r=e.r+s*(t.r-e.r),this.g=e.g+s*(t.g-e.g),this.b=e.b+s*(t.b-e.b),this.a=e.a+s*(t.a-e.a),this}linear(e=this){return this.r=Math.pow(e.r,2.2),this.g=Math.pow(e.g,2.2),this.b=Math.pow(e.b,2.2),this.a=e.a,this}gamma(e=this){return this.r=Math.pow(e.r,1/2.2),this.g=Math.pow(e.g,1/2.2),this.b=Math.pow(e.b,1/2.2),this.a=e.a,this}mulScalar(e){return this.r*=e,this.g*=e,this.b*=e,this}fromString(e){const t=parseInt(e.replace("#","0x"),16);let s;return e.length>7?s=B.intToBytes32(t):(s=B.intToBytes24(t),s[3]=255),this.set(s[0]/255,s[1]/255,s[2]/255,s[3]/255),this}fromArray(e,t=0){return this.r=e[t]??this.r,this.g=e[t+1]??this.g,this.b=e[t+2]??this.b,this.a=e[t+3]??this.a,this}toString(e,t){const{r:s,g:i,b:r,a}=this;if(t||s>1||i>1||r>1)return`${s.toFixed(3)}, ${i.toFixed(3)}, ${r.toFixed(3)}, ${a.toFixed(3)}`;let n=`#${((1<<24)+(Math.round(s*255)<<16)+(Math.round(i*255)<<8)+Math.round(r*255)).toString(16).slice(1)}`;if(e===!0){const l=Math.round(a*255).toString(16);this.a<16/255?n+=`0${l}`:n+=l}return n}toArray(e=[],t=0,s=!0){return e[t]=this.r,e[t+1]=this.g,e[t+2]=this.b,s&&(e[t+3]=this.a),e}};Qe.BLACK=Object.freeze(new Qe(0,0,0,1)),Qe.BLUE=Object.freeze(new Qe(0,0,1,1)),Qe.CYAN=Object.freeze(new Qe(0,1,1,1)),Qe.GRAY=Object.freeze(new Qe(.5,.5,.5,1)),Qe.GREEN=Object.freeze(new Qe(0,1,0,1)),Qe.MAGENTA=Object.freeze(new Qe(1,0,1,1)),Qe.RED=Object.freeze(new Qe(1,0,0,1)),Qe.WHITE=Object.freeze(new Qe(1,1,1,1)),Qe.YELLOW=Object.freeze(new Qe(1,1,0,1));let q=Qe;class sT{constructor(e,t=0){this._left=-1/0,this._right=1/0,this._recip=0,this._p0=0,this._p1=0,this._m0=0,this._m1=0,this._curve=e,this._reset(t)}evaluate(e,t=!1){(t||e<this._left||e>=this._right)&&this._reset(e);let s;const i=this._curve.type;if(i===eL)s=this._p0;else{const r=this._recip===0?0:(e-this._left)*this._recip;i===JP?s=B.lerp(this._p0,this._p1,r):i===km?s=B.lerp(this._p0,this._p1,r*r*(3-2*r)):s=this._evaluateHermite(this._p0,this._p1,this._m0,this._m1,r)}return s}_reset(e){const t=this._curve.keys,s=t.length;if(!s)this._left=-1/0,this._right=1/0,this._recip=0,this._p0=this._p1=this._m0=this._m1=0;else if(e<t[0][0])this._left=-1/0,this._right=t[0][0],this._recip=0,this._p0=this._p1=t[0][1],this._m0=this._m1=0;else if(e>=t[s-1][0])this._left=t[s-1][0],this._right=1/0,this._recip=0,this._p0=this._p1=t[s-1][1],this._m0=this._m1=0;else{let i=0;for(;e>=t[i+1][0];)i++;this._left=t[i][0],this._right=t[i+1][0];const r=1/(this._right-this._left);this._recip=isFinite(r)?r:0,this._p0=t[i][1],this._p1=t[i+1][1],this._curve.type===av&&this._calcTangents(t,i)}}_calcTangents(e,t){let s;const i=e[t],r=e[t+1];let a;if(t===0?s=[e[0][0]+(e[0][0]-e[1][0]),e[0][1]+(e[0][1]-e[1][1])]:s=e[t-1],t===e.length-2?a=[e[t+1][0]+(e[t+1][0]-e[t][0]),e[t+1][1]+(e[t+1][1]-e[t][1])]:a=e[t+2],this._curve.type===av){const n=2*(r[0]-i[0])/(r[0]-s[0]),l=2*(r[0]-i[0])/(a[0]-i[0]);this._m0=this._curve.tension*(isFinite(n)?n:0)*(r[1]-s[1]),this._m1=this._curve.tension*(isFinite(l)?l:0)*(a[1]-i[1])}else{const n=(r[0]-i[0])/(i[0]-s[0]),l=(r[0]-i[0])/(a[0]-r[0]),h=i[1]+(s[1]-i[1])*(isFinite(n)?n:0),c=r[1]+(a[1]-r[1])*(isFinite(l)?l:0),d=this._curve.tension;this._m0=d*(r[1]-h),this._m1=d*(c-i[1])}}_evaluateHermite(e,t,s,i,r){const a=r*r,n=r+r,l=1-r,h=l*l;return e*((1+n)*h)+s*(r*h)+t*(a*(3-n))+i*(a*(r-1))}}class ys{constructor(e){if(this.keys=[],this.type=km,this.tension=.5,this._eval=new sT(this),e)for(let t=0;t<e.length-1;t+=2)this.keys.push([e[t],e[t+1]]);this.sort()}get length(){return this.keys.length}add(e,t){const s=this.keys,i=s.length;let r=0;for(;r<i&&!(s[r][0]>e);r++);const a=[e,t];return this.keys.splice(r,0,a),a}get(e){return this.keys[e]}sort(){this.keys.sort((e,t)=>e[0]-t[0])}value(e){return this._eval.evaluate(e,!0)}closest(e){const t=this.keys,s=t.length;let i=2,r=null;for(let a=0;a<s;a++){const n=Math.abs(e-t[a][0]);if(i>=n)i=n,r=t[a];else break}return r}clone(){const e=new this.constructor;return e.keys=this.keys.map(t=>[...t]),e.type=this.type,e.tension=this.tension,e}quantize(e){e=Math.max(e,2);const t=new Float32Array(e),s=1/(e-1);t[0]=this._eval.evaluate(0,!0);for(let i=1;i<e;i++)t[i]=this._eval.evaluate(s*i);return t}quantizeClamped(e,t,s){const i=this.quantize(e);for(let r=0;r<i.length;++r)i[r]=Math.min(s,Math.max(t,i[r]));return i}}class jr{constructor(...e){if(this.curves=[],this._type=km,e.length>1)for(let t=0;t<e.length;t++)this.curves.push(new ys(e[t]));else if(e.length===0)this.curves.push(new ys);else{const t=e[0];if(typeof t=="number")for(let s=0;s<t;s++)this.curves.push(new ys);else for(let s=0;s<t.length;s++)this.curves.push(new ys(t[s]))}}get length(){return this.curves.length}set type(e){this._type=e;for(let t=0;t<this.curves.length;t++)this.curves[t].type=e}get type(){return this._type}get(e){return this.curves[e]}value(e,t=[]){const s=this.curves.length;t.length=s;for(let i=0;i<s;i++)t[i]=this.curves[i].value(e);return t}clone(){const e=new this.constructor;e.curves=[];for(let t=0;t<this.curves.length;t++)e.curves.push(this.curves[t].clone());return e._type=this._type,e}quantize(e){e=Math.max(e,2);const t=this.curves.length,s=new Float32Array(e*t),i=1/(e-1);for(let r=0;r<t;r++){const a=new sT(this.curves[r]);for(let n=0;n<e;n++)s[n*t+r]=a.evaluate(i*n)}return s}quantizeClamped(e,t,s){const i=this.quantize(e);for(let r=0;r<i.length;++r)i[r]=Math.min(s,Math.max(t,i[r]));return i}}const Wu=new Float32Array(1),nv=new Int32Array(Wu.buffer);class oa{static float2Half(e){Wu[0]=e;const t=nv[0];let s=t>>16&32768,i=t>>12&2047;const r=t>>23&255;return r<103?s:r>142?(s|=31744,s|=(r===255?0:1)&&t&8388607,s):r<113?(i|=2048,s|=(i>>114-r)+(i>>113-r&1),s):(s|=r-112<<10|i>>1,s+=i&1,s)}static float2RGBA8(e,t){Wu[0]=e;const s=nv[0];t.r=(s>>24&255)/255,t.g=(s>>16&255)/255,t.b=(s>>8&255)/255,t.a=(s&255)/255}}const Je=class Je{constructor(e=0,t=0,s=0){e.length===3?(this.x=e[0],this.y=e[1],this.z=e[2]):(this.x=e,this.y=t,this.z=s)}add(e){return this.x+=e.x,this.y+=e.y,this.z+=e.z,this}add2(e,t){return this.x=e.x+t.x,this.y=e.y+t.y,this.z=e.z+t.z,this}addScalar(e){return this.x+=e,this.y+=e,this.z+=e,this}addScaled(e,t){return this.x+=e.x*t,this.y+=e.y*t,this.z+=e.z*t,this}clone(){const e=this.constructor;return new e(this.x,this.y,this.z)}copy(e){return this.x=e.x,this.y=e.y,this.z=e.z,this}cross(e,t){const s=e.x,i=e.y,r=e.z,a=t.x,n=t.y,l=t.z;return this.x=i*l-n*r,this.y=r*a-l*s,this.z=s*n-a*i,this}distance(e){const t=this.x-e.x,s=this.y-e.y,i=this.z-e.z;return Math.sqrt(t*t+s*s+i*i)}div(e){return this.x/=e.x,this.y/=e.y,this.z/=e.z,this}div2(e,t){return this.x=e.x/t.x,this.y=e.y/t.y,this.z=e.z/t.z,this}divScalar(e){return this.x/=e,this.y/=e,this.z/=e,this}dot(e){return this.x*e.x+this.y*e.y+this.z*e.z}equals(e){return this.x===e.x&&this.y===e.y&&this.z===e.z}equalsApprox(e,t=1e-6){return Math.abs(this.x-e.x)<t&&Math.abs(this.y-e.y)<t&&Math.abs(this.z-e.z)<t}length(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z)}lengthSq(){return this.x*this.x+this.y*this.y+this.z*this.z}lerp(e,t,s){return this.x=e.x+s*(t.x-e.x),this.y=e.y+s*(t.y-e.y),this.z=e.z+s*(t.z-e.z),this}mul(e){return this.x*=e.x,this.y*=e.y,this.z*=e.z,this}mul2(e,t){return this.x=e.x*t.x,this.y=e.y*t.y,this.z=e.z*t.z,this}mulScalar(e){return this.x*=e,this.y*=e,this.z*=e,this}normalize(e=this){const t=e.x*e.x+e.y*e.y+e.z*e.z;if(t>0){const s=1/Math.sqrt(t);this.x=e.x*s,this.y=e.y*s,this.z=e.z*s}return this}floor(e=this){return this.x=Math.floor(e.x),this.y=Math.floor(e.y),this.z=Math.floor(e.z),this}ceil(e=this){return this.x=Math.ceil(e.x),this.y=Math.ceil(e.y),this.z=Math.ceil(e.z),this}round(e=this){return this.x=Math.round(e.x),this.y=Math.round(e.y),this.z=Math.round(e.z),this}min(e){return e.x<this.x&&(this.x=e.x),e.y<this.y&&(this.y=e.y),e.z<this.z&&(this.z=e.z),this}max(e){return e.x>this.x&&(this.x=e.x),e.y>this.y&&(this.y=e.y),e.z>this.z&&(this.z=e.z),this}project(e){const t=this.x*e.x+this.y*e.y+this.z*e.z,s=e.x*e.x+e.y*e.y+e.z*e.z,i=t/s;return this.x=e.x*i,this.y=e.y*i,this.z=e.z*i,this}set(e,t,s){return this.x=e,this.y=t,this.z=s,this}sub(e){return this.x-=e.x,this.y-=e.y,this.z-=e.z,this}sub2(e,t){return this.x=e.x-t.x,this.y=e.y-t.y,this.z=e.z-t.z,this}subScalar(e){return this.x-=e,this.y-=e,this.z-=e,this}fromArray(e,t=0){return this.x=e[t]??this.x,this.y=e[t+1]??this.y,this.z=e[t+2]??this.z,this}toString(){return`[${this.x}, ${this.y}, ${this.z}]`}toArray(e=[],t=0){return e[t]=this.x,e[t+1]=this.y,e[t+2]=this.z,e}};Je.ZERO=Object.freeze(new Je(0,0,0)),Je.HALF=Object.freeze(new Je(.5,.5,.5)),Je.ONE=Object.freeze(new Je(1,1,1)),Je.UP=Object.freeze(new Je(0,1,0)),Je.DOWN=Object.freeze(new Je(0,-1,0)),Je.RIGHT=Object.freeze(new Je(1,0,0)),Je.LEFT=Object.freeze(new Je(-1,0,0)),Je.FORWARD=Object.freeze(new Je(0,0,-1)),Je.BACK=Object.freeze(new Je(0,0,1));let x=Je;const Sn=class Sn{constructor(){this.data=new Float32Array(9),this.data[0]=this.data[4]=this.data[8]=1}clone(){const e=this.constructor;return new e().copy(this)}copy(e){const t=e.data,s=this.data;return s[0]=t[0],s[1]=t[1],s[2]=t[2],s[3]=t[3],s[4]=t[4],s[5]=t[5],s[6]=t[6],s[7]=t[7],s[8]=t[8],this}set(e){const t=this.data;return t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[3],t[4]=e[4],t[5]=e[5],t[6]=e[6],t[7]=e[7],t[8]=e[8],this}getX(e=new x){return e.set(this.data[0],this.data[1],this.data[2])}getY(e=new x){return e.set(this.data[3],this.data[4],this.data[5])}getZ(e=new x){return e.set(this.data[6],this.data[7],this.data[8])}equals(e){const t=this.data,s=e.data;return t[0]===s[0]&&t[1]===s[1]&&t[2]===s[2]&&t[3]===s[3]&&t[4]===s[4]&&t[5]===s[5]&&t[6]===s[6]&&t[7]===s[7]&&t[8]===s[8]}isIdentity(){const e=this.data;return e[0]===1&&e[1]===0&&e[2]===0&&e[3]===0&&e[4]===1&&e[5]===0&&e[6]===0&&e[7]===0&&e[8]===1}setIdentity(){const e=this.data;return e[0]=1,e[1]=0,e[2]=0,e[3]=0,e[4]=1,e[5]=0,e[6]=0,e[7]=0,e[8]=1,this}toString(){return`[${this.data.join(", ")}]`}transpose(e=this){const t=e.data,s=this.data;if(t===s){let i;i=t[1],s[1]=t[3],s[3]=i,i=t[2],s[2]=t[6],s[6]=i,i=t[5],s[5]=t[7],s[7]=i}else s[0]=t[0],s[1]=t[3],s[2]=t[6],s[3]=t[1],s[4]=t[4],s[5]=t[7],s[6]=t[2],s[7]=t[5],s[8]=t[8];return this}setFromMat4(e){const t=e.data,s=this.data;return s[0]=t[0],s[1]=t[1],s[2]=t[2],s[3]=t[4],s[4]=t[5],s[5]=t[6],s[6]=t[8],s[7]=t[9],s[8]=t[10],this}setFromQuat(e){const t=e.x,s=e.y,i=e.z,r=e.w,a=t+t,n=s+s,l=i+i,h=t*a,c=t*n,d=t*l,f=s*n,u=s*l,p=i*l,m=r*a,_=r*n,g=r*l,y=this.data;return y[0]=1-(f+p),y[1]=c+g,y[2]=d-_,y[3]=c-g,y[4]=1-(h+p),y[5]=u+m,y[6]=d+_,y[7]=u-m,y[8]=1-(h+f),this}invertMat4(e){const t=e.data,s=t[0],i=t[1],r=t[2],a=t[4],n=t[5],l=t[6],h=t[8],c=t[9],d=t[10],f=d*n-l*c,u=-d*i+r*c,p=l*i-r*n,m=-d*a+l*h,_=d*s-r*h,g=-l*s+r*a,y=c*a-n*h,A=-c*s+i*h,v=n*s-i*a,S=s*f+i*m+r*y;if(S===0)this.setIdentity();else{const b=1/S,E=this.data;E[0]=f*b,E[1]=u*b,E[2]=p*b,E[3]=m*b,E[4]=_*b,E[5]=g*b,E[6]=y*b,E[7]=A*b,E[8]=v*b}return this}transformVector(e,t=new x){const s=this.data,{x:i,y:r,z:a}=e;return t.x=i*s[0]+r*s[3]+a*s[6],t.y=i*s[1]+r*s[4]+a*s[7],t.z=i*s[2]+r*s[5]+a*s[8],t}};Sn.IDENTITY=Object.freeze(new Sn),Sn.ZERO=Object.freeze(new Sn().set([0,0,0,0,0,0,0,0,0]));let Ks=Sn;const pt=class pt{constructor(e=0,t=0){e.length===2?(this.x=e[0],this.y=e[1]):(this.x=e,this.y=t)}add(e){return this.x+=e.x,this.y+=e.y,this}add2(e,t){return this.x=e.x+t.x,this.y=e.y+t.y,this}addScalar(e){return this.x+=e,this.y+=e,this}addScaled(e,t){return this.x+=e.x*t,this.y+=e.y*t,this}clone(){const e=this.constructor;return new e(this.x,this.y)}copy(e){return this.x=e.x,this.y=e.y,this}cross(e){return this.x*e.y-this.y*e.x}distance(e){const t=this.x-e.x,s=this.y-e.y;return Math.sqrt(t*t+s*s)}div(e){return this.x/=e.x,this.y/=e.y,this}div2(e,t){return this.x=e.x/t.x,this.y=e.y/t.y,this}divScalar(e){return this.x/=e,this.y/=e,this}dot(e){return this.x*e.x+this.y*e.y}equals(e){return this.x===e.x&&this.y===e.y}equalsApprox(e,t=1e-6){return Math.abs(this.x-e.x)<t&&Math.abs(this.y-e.y)<t}length(){return Math.sqrt(this.x*this.x+this.y*this.y)}lengthSq(){return this.x*this.x+this.y*this.y}lerp(e,t,s){return this.x=e.x+s*(t.x-e.x),this.y=e.y+s*(t.y-e.y),this}mul(e){return this.x*=e.x,this.y*=e.y,this}mul2(e,t){return this.x=e.x*t.x,this.y=e.y*t.y,this}mulScalar(e){return this.x*=e,this.y*=e,this}normalize(e=this){const t=e.x*e.x+e.y*e.y;if(t>0){const s=1/Math.sqrt(t);this.x=e.x*s,this.y=e.y*s}return this}rotate(e){const t=Math.atan2(this.x,this.y)+e*B.DEG_TO_RAD,s=Math.sqrt(this.x*this.x+this.y*this.y);return this.x=Math.sin(t)*s,this.y=Math.cos(t)*s,this}angle(){return Math.atan2(this.x,this.y)*B.RAD_TO_DEG}angleTo(e){return Math.atan2(this.x*e.y+this.y*e.x,this.x*e.x+this.y*e.y)*B.RAD_TO_DEG}floor(e=this){return this.x=Math.floor(e.x),this.y=Math.floor(e.y),this}ceil(e=this){return this.x=Math.ceil(e.x),this.y=Math.ceil(e.y),this}round(e=this){return this.x=Math.round(e.x),this.y=Math.round(e.y),this}min(e){return e.x<this.x&&(this.x=e.x),e.y<this.y&&(this.y=e.y),this}max(e){return e.x>this.x&&(this.x=e.x),e.y>this.y&&(this.y=e.y),this}set(e,t){return this.x=e,this.y=t,this}sub(e){return this.x-=e.x,this.y-=e.y,this}sub2(e,t){return this.x=e.x-t.x,this.y=e.y-t.y,this}subScalar(e){return this.x-=e,this.y-=e,this}fromArray(e,t=0){return this.x=e[t]??this.x,this.y=e[t+1]??this.y,this}toString(){return`[${this.x}, ${this.y}]`}toArray(e=[],t=0){return e[t]=this.x,e[t+1]=this.y,e}static angleRad(e,t){return Math.atan2(e.x*t.y-e.y*t.x,e.x*t.x+e.y*t.y)}};pt.ZERO=Object.freeze(new pt(0,0)),pt.HALF=Object.freeze(new pt(.5,.5)),pt.ONE=Object.freeze(new pt(1,1)),pt.UP=Object.freeze(new pt(0,1)),pt.DOWN=Object.freeze(new pt(0,-1)),pt.RIGHT=Object.freeze(new pt(1,0)),pt.LEFT=Object.freeze(new pt(-1,0));let z=pt;const qi=class qi{constructor(e=0,t=0,s=0,i=0){e.length===4?(this.x=e[0],this.y=e[1],this.z=e[2],this.w=e[3]):(this.x=e,this.y=t,this.z=s,this.w=i)}add(e){return this.x+=e.x,this.y+=e.y,this.z+=e.z,this.w+=e.w,this}add2(e,t){return this.x=e.x+t.x,this.y=e.y+t.y,this.z=e.z+t.z,this.w=e.w+t.w,this}addScalar(e){return this.x+=e,this.y+=e,this.z+=e,this.w+=e,this}addScaled(e,t){return this.x+=e.x*t,this.y+=e.y*t,this.z+=e.z*t,this.w+=e.w*t,this}clone(){const e=this.constructor;return new e(this.x,this.y,this.z,this.w)}copy(e){return this.x=e.x,this.y=e.y,this.z=e.z,this.w=e.w,this}div(e){return this.x/=e.x,this.y/=e.y,this.z/=e.z,this.w/=e.w,this}div2(e,t){return this.x=e.x/t.x,this.y=e.y/t.y,this.z=e.z/t.z,this.w=e.w/t.w,this}divScalar(e){return this.x/=e,this.y/=e,this.z/=e,this.w/=e,this}dot(e){return this.x*e.x+this.y*e.y+this.z*e.z+this.w*e.w}equals(e){return this.x===e.x&&this.y===e.y&&this.z===e.z&&this.w===e.w}equalsApprox(e,t=1e-6){return Math.abs(this.x-e.x)<t&&Math.abs(this.y-e.y)<t&&Math.abs(this.z-e.z)<t&&Math.abs(this.w-e.w)<t}length(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w)}lengthSq(){return this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w}lerp(e,t,s){return this.x=e.x+s*(t.x-e.x),this.y=e.y+s*(t.y-e.y),this.z=e.z+s*(t.z-e.z),this.w=e.w+s*(t.w-e.w),this}mul(e){return this.x*=e.x,this.y*=e.y,this.z*=e.z,this.w*=e.w,this}mul2(e,t){return this.x=e.x*t.x,this.y=e.y*t.y,this.z=e.z*t.z,this.w=e.w*t.w,this}mulScalar(e){return this.x*=e,this.y*=e,this.z*=e,this.w*=e,this}normalize(e=this){const t=e.x*e.x+e.y*e.y+e.z*e.z+e.w*e.w;if(t>0){const s=1/Math.sqrt(t);this.x=e.x*s,this.y=e.y*s,this.z=e.z*s,this.w=e.w*s}return this}floor(e=this){return this.x=Math.floor(e.x),this.y=Math.floor(e.y),this.z=Math.floor(e.z),this.w=Math.floor(e.w),this}ceil(e=this){return this.x=Math.ceil(e.x),this.y=Math.ceil(e.y),this.z=Math.ceil(e.z),this.w=Math.ceil(e.w),this}round(e=this){return this.x=Math.round(e.x),this.y=Math.round(e.y),this.z=Math.round(e.z),this.w=Math.round(e.w),this}min(e){return e.x<this.x&&(this.x=e.x),e.y<this.y&&(this.y=e.y),e.z<this.z&&(this.z=e.z),e.w<this.w&&(this.w=e.w),this}max(e){return e.x>this.x&&(this.x=e.x),e.y>this.y&&(this.y=e.y),e.z>this.z&&(this.z=e.z),e.w>this.w&&(this.w=e.w),this}set(e,t,s,i){return this.x=e,this.y=t,this.z=s,this.w=i,this}sub(e){return this.x-=e.x,this.y-=e.y,this.z-=e.z,this.w-=e.w,this}sub2(e,t){return this.x=e.x-t.x,this.y=e.y-t.y,this.z=e.z-t.z,this.w=e.w-t.w,this}subScalar(e){return this.x-=e,this.y-=e,this.z-=e,this.w-=e,this}fromArray(e,t=0){return this.x=e[t]??this.x,this.y=e[t+1]??this.y,this.z=e[t+2]??this.z,this.w=e[t+3]??this.w,this}toString(){return`[${this.x}, ${this.y}, ${this.z}, ${this.w}]`}toArray(e=[],t=0){return e[t]=this.x,e[t+1]=this.y,e[t+2]=this.z,e[t+3]=this.w,e}};qi.ZERO=Object.freeze(new qi(0,0,0,0)),qi.HALF=Object.freeze(new qi(.5,.5,.5,.5)),qi.ONE=Object.freeze(new qi(1,1,1,1));let K=qi;const yo=new z,hs=new x,Ps=new x,Ls=new x,hh=new x,Fr=class Fr{constructor(){this.data=new Float32Array(16),this.data[0]=this.data[5]=this.data[10]=this.data[15]=1}static _getPerspectiveHalfSize(e,t,s,i,r){r?(e.x=i*Math.tan(t*Math.PI/360),e.y=e.x/s):(e.y=i*Math.tan(t*Math.PI/360),e.x=e.y*s)}add2(e,t){const s=e.data,i=t.data,r=this.data;return r[0]=s[0]+i[0],r[1]=s[1]+i[1],r[2]=s[2]+i[2],r[3]=s[3]+i[3],r[4]=s[4]+i[4],r[5]=s[5]+i[5],r[6]=s[6]+i[6],r[7]=s[7]+i[7],r[8]=s[8]+i[8],r[9]=s[9]+i[9],r[10]=s[10]+i[10],r[11]=s[11]+i[11],r[12]=s[12]+i[12],r[13]=s[13]+i[13],r[14]=s[14]+i[14],r[15]=s[15]+i[15],this}add(e){return this.add2(this,e)}clone(){const e=this.constructor;return new e().copy(this)}copy(e){const t=e.data,s=this.data;return s[0]=t[0],s[1]=t[1],s[2]=t[2],s[3]=t[3],s[4]=t[4],s[5]=t[5],s[6]=t[6],s[7]=t[7],s[8]=t[8],s[9]=t[9],s[10]=t[10],s[11]=t[11],s[12]=t[12],s[13]=t[13],s[14]=t[14],s[15]=t[15],this}equals(e){const t=this.data,s=e.data;return t[0]===s[0]&&t[1]===s[1]&&t[2]===s[2]&&t[3]===s[3]&&t[4]===s[4]&&t[5]===s[5]&&t[6]===s[6]&&t[7]===s[7]&&t[8]===s[8]&&t[9]===s[9]&&t[10]===s[10]&&t[11]===s[11]&&t[12]===s[12]&&t[13]===s[13]&&t[14]===s[14]&&t[15]===s[15]}isIdentity(){const e=this.data;return e[0]===1&&e[1]===0&&e[2]===0&&e[3]===0&&e[4]===0&&e[5]===1&&e[6]===0&&e[7]===0&&e[8]===0&&e[9]===0&&e[10]===1&&e[11]===0&&e[12]===0&&e[13]===0&&e[14]===0&&e[15]===1}mul2(e,t){const s=e.data,i=t.data,r=this.data,a=s[0],n=s[1],l=s[2],h=s[3],c=s[4],d=s[5],f=s[6],u=s[7],p=s[8],m=s[9],_=s[10],g=s[11],y=s[12],A=s[13],v=s[14],S=s[15];let b,E,T,w;return b=i[0],E=i[1],T=i[2],w=i[3],r[0]=a*b+c*E+p*T+y*w,r[1]=n*b+d*E+m*T+A*w,r[2]=l*b+f*E+_*T+v*w,r[3]=h*b+u*E+g*T+S*w,b=i[4],E=i[5],T=i[6],w=i[7],r[4]=a*b+c*E+p*T+y*w,r[5]=n*b+d*E+m*T+A*w,r[6]=l*b+f*E+_*T+v*w,r[7]=h*b+u*E+g*T+S*w,b=i[8],E=i[9],T=i[10],w=i[11],r[8]=a*b+c*E+p*T+y*w,r[9]=n*b+d*E+m*T+A*w,r[10]=l*b+f*E+_*T+v*w,r[11]=h*b+u*E+g*T+S*w,b=i[12],E=i[13],T=i[14],w=i[15],r[12]=a*b+c*E+p*T+y*w,r[13]=n*b+d*E+m*T+A*w,r[14]=l*b+f*E+_*T+v*w,r[15]=h*b+u*E+g*T+S*w,this}mulAffine2(e,t){const s=e.data,i=t.data,r=this.data,a=s[0],n=s[1],l=s[2],h=s[4],c=s[5],d=s[6],f=s[8],u=s[9],p=s[10],m=s[12],_=s[13],g=s[14];let y,A,v;return y=i[0],A=i[1],v=i[2],r[0]=a*y+h*A+f*v,r[1]=n*y+c*A+u*v,r[2]=l*y+d*A+p*v,r[3]=0,y=i[4],A=i[5],v=i[6],r[4]=a*y+h*A+f*v,r[5]=n*y+c*A+u*v,r[6]=l*y+d*A+p*v,r[7]=0,y=i[8],A=i[9],v=i[10],r[8]=a*y+h*A+f*v,r[9]=n*y+c*A+u*v,r[10]=l*y+d*A+p*v,r[11]=0,y=i[12],A=i[13],v=i[14],r[12]=a*y+h*A+f*v+m,r[13]=n*y+c*A+u*v+_,r[14]=l*y+d*A+p*v+g,r[15]=1,this}mul(e){return this.mul2(this,e)}transformPoint(e,t=new x){const s=this.data,{x:i,y:r,z:a}=e;return t.x=i*s[0]+r*s[4]+a*s[8]+s[12],t.y=i*s[1]+r*s[5]+a*s[9]+s[13],t.z=i*s[2]+r*s[6]+a*s[10]+s[14],t}transformVector(e,t=new x){const s=this.data,{x:i,y:r,z:a}=e;return t.x=i*s[0]+r*s[4]+a*s[8],t.y=i*s[1]+r*s[5]+a*s[9],t.z=i*s[2]+r*s[6]+a*s[10],t}transformVec4(e,t=new K){const s=this.data,{x:i,y:r,z:a,w:n}=e;return t.x=i*s[0]+r*s[4]+a*s[8]+n*s[12],t.y=i*s[1]+r*s[5]+a*s[9]+n*s[13],t.z=i*s[2]+r*s[6]+a*s[10]+n*s[14],t.w=i*s[3]+r*s[7]+a*s[11]+n*s[15],t}setLookAt(e,t,s){Ls.sub2(e,t).normalize(),Ps.copy(s).normalize(),hs.cross(Ps,Ls).normalize(),Ps.cross(Ls,hs);const i=this.data;return i[0]=hs.x,i[1]=hs.y,i[2]=hs.z,i[3]=0,i[4]=Ps.x,i[5]=Ps.y,i[6]=Ps.z,i[7]=0,i[8]=Ls.x,i[9]=Ls.y,i[10]=Ls.z,i[11]=0,i[12]=e.x,i[13]=e.y,i[14]=e.z,i[15]=1,this}setFrustum(e,t,s,i,r,a){const n=2*r,l=t-e,h=i-s,c=a-r,d=this.data;return d[0]=n/l,d[1]=0,d[2]=0,d[3]=0,d[4]=0,d[5]=n/h,d[6]=0,d[7]=0,d[8]=(t+e)/l,d[9]=(i+s)/h,d[10]=(-a-r)/c,d[11]=-1,d[12]=0,d[13]=0,d[14]=-n*a/c,d[15]=0,this}setPerspective(e,t,s,i,r){return Fr._getPerspectiveHalfSize(yo,e,t,s,r),this.setFrustum(-yo.x,yo.x,-yo.y,yo.y,s,i)}setOrtho(e,t,s,i,r,a){const n=this.data;return n[0]=2/(t-e),n[1]=0,n[2]=0,n[3]=0,n[4]=0,n[5]=2/(i-s),n[6]=0,n[7]=0,n[8]=0,n[9]=0,n[10]=-2/(a-r),n[11]=0,n[12]=-(t+e)/(t-e),n[13]=-(i+s)/(i-s),n[14]=-(a+r)/(a-r),n[15]=1,this}setFromAxisAngle(e,t){t*=B.DEG_TO_RAD;const{x:s,y:i,z:r}=e,a=Math.cos(t),n=Math.sin(t),l=1-a,h=l*s,c=l*i,d=this.data;return d[0]=h*s+a,d[1]=h*i+n*r,d[2]=h*r-n*i,d[3]=0,d[4]=h*i-n*r,d[5]=c*i+a,d[6]=c*r+n*s,d[7]=0,d[8]=h*r+n*i,d[9]=c*r-s*n,d[10]=l*r*r+a,d[11]=0,d[12]=0,d[13]=0,d[14]=0,d[15]=1,this}setTranslate(e,t,s){const i=this.data;return i[0]=1,i[1]=0,i[2]=0,i[3]=0,i[4]=0,i[5]=1,i[6]=0,i[7]=0,i[8]=0,i[9]=0,i[10]=1,i[11]=0,i[12]=e,i[13]=t,i[14]=s,i[15]=1,this}setScale(e,t,s){const i=this.data;return i[0]=e,i[1]=0,i[2]=0,i[3]=0,i[4]=0,i[5]=t,i[6]=0,i[7]=0,i[8]=0,i[9]=0,i[10]=s,i[11]=0,i[12]=0,i[13]=0,i[14]=0,i[15]=1,this}setViewport(e,t,s,i){const r=this.data;return r[0]=s*.5,r[1]=0,r[2]=0,r[3]=0,r[4]=0,r[5]=i*.5,r[6]=0,r[7]=0,r[8]=0,r[9]=0,r[10]=.5,r[11]=0,r[12]=e+s*.5,r[13]=t+i*.5,r[14]=.5,r[15]=1,this}setReflection(e,t){const s=e.x,i=e.y,r=e.z,a=this.data;return a[0]=1-2*s*s,a[1]=-2*s*i,a[2]=-2*s*r,a[3]=0,a[4]=-2*s*i,a[5]=1-2*i*i,a[6]=-2*i*r,a[7]=0,a[8]=-2*s*r,a[9]=-2*i*r,a[10]=1-2*r*r,a[11]=0,a[12]=-2*s*t,a[13]=-2*i*t,a[14]=-2*r*t,a[15]=1,this}invert(e=this){const t=e.data,s=t[0],i=t[1],r=t[2],a=t[3],n=t[4],l=t[5],h=t[6],c=t[7],d=t[8],f=t[9],u=t[10],p=t[11],m=t[12],_=t[13],g=t[14],y=t[15],A=s*l-i*n,v=s*h-r*n,S=s*c-a*n,b=i*h-r*l,E=i*c-a*l,T=r*c-a*h,w=d*_-f*m,P=d*g-u*m,M=d*y-p*m,L=f*g-u*_,D=f*y-p*_,k=u*y-p*g,G=A*k-v*D+S*L+b*M-E*P+T*w;if(G===0)this.setIdentity();else{const U=1/G,C=this.data;C[0]=(l*k-h*D+c*L)*U,C[1]=(-i*k+r*D-a*L)*U,C[2]=(_*T-g*E+y*b)*U,C[3]=(-f*T+u*E-p*b)*U,C[4]=(-n*k+h*M-c*P)*U,C[5]=(s*k-r*M+a*P)*U,C[6]=(-m*T+g*S-y*v)*U,C[7]=(d*T-u*S+p*v)*U,C[8]=(n*D-l*M+c*w)*U,C[9]=(-s*D+i*M-a*w)*U,C[10]=(m*E-_*S+y*A)*U,C[11]=(-d*E+f*S-p*A)*U,C[12]=(-n*L+l*P-h*w)*U,C[13]=(s*L-i*P+r*w)*U,C[14]=(-m*b+_*v-g*A)*U,C[15]=(d*b-f*v+u*A)*U}return this}set(e){const t=this.data;return t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[3],t[4]=e[4],t[5]=e[5],t[6]=e[6],t[7]=e[7],t[8]=e[8],t[9]=e[9],t[10]=e[10],t[11]=e[11],t[12]=e[12],t[13]=e[13],t[14]=e[14],t[15]=e[15],this}setIdentity(){const e=this.data;return e[0]=1,e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=1,e[6]=0,e[7]=0,e[8]=0,e[9]=0,e[10]=1,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,this}setTRS(e,t,s){const i=t.x,r=t.y,a=t.z,n=t.w,l=s.x,h=s.y,c=s.z,d=i+i,f=r+r,u=a+a,p=i*d,m=i*f,_=i*u,g=r*f,y=r*u,A=a*u,v=n*d,S=n*f,b=n*u,E=this.data;return E[0]=(1-(g+A))*l,E[1]=(m+b)*l,E[2]=(_-S)*l,E[3]=0,E[4]=(m-b)*h,E[5]=(1-(p+A))*h,E[6]=(y+v)*h,E[7]=0,E[8]=(_+S)*c,E[9]=(y-v)*c,E[10]=(1-(p+g))*c,E[11]=0,E[12]=e.x,E[13]=e.y,E[14]=e.z,E[15]=1,this}transpose(e=this){const t=e.data,s=this.data;if(t===s){let i;i=t[1],s[1]=t[4],s[4]=i,i=t[2],s[2]=t[8],s[8]=i,i=t[3],s[3]=t[12],s[12]=i,i=t[6],s[6]=t[9],s[9]=i,i=t[7],s[7]=t[13],s[13]=i,i=t[11],s[11]=t[14],s[14]=i}else s[0]=t[0],s[1]=t[4],s[2]=t[8],s[3]=t[12],s[4]=t[1],s[5]=t[5],s[6]=t[9],s[7]=t[13],s[8]=t[2],s[9]=t[6],s[10]=t[10],s[11]=t[14],s[12]=t[3],s[13]=t[7],s[14]=t[11],s[15]=t[15];return this}getTranslation(e=new x){return e.set(this.data[12],this.data[13],this.data[14])}getX(e=new x){return e.set(this.data[0],this.data[1],this.data[2])}getY(e=new x){return e.set(this.data[4],this.data[5],this.data[6])}getZ(e=new x){return e.set(this.data[8],this.data[9],this.data[10])}getScale(e=new x){return this.getX(hs),this.getY(Ps),this.getZ(Ls),e.set(hs.length(),Ps.length(),Ls.length()),e}get scaleSign(){return this.getX(hs),this.getY(Ps),this.getZ(Ls),hs.cross(hs,Ps),hs.dot(Ls)<0?-1:1}setFromEulerAngles(e,t,s){e*=B.DEG_TO_RAD,t*=B.DEG_TO_RAD,s*=B.DEG_TO_RAD;const i=Math.sin(-e),r=Math.cos(-e),a=Math.sin(-t),n=Math.cos(-t),l=Math.sin(-s),h=Math.cos(-s),c=this.data;return c[0]=n*h,c[1]=-n*l,c[2]=a,c[3]=0,c[4]=r*l+h*i*a,c[5]=r*h-i*a*l,c[6]=-n*i,c[7]=0,c[8]=i*l-r*h*a,c[9]=h*i+r*a*l,c[10]=r*n,c[11]=0,c[12]=0,c[13]=0,c[14]=0,c[15]=1,this}getEulerAngles(e=new x){this.getScale(hh);const t=hh.x,s=hh.y,i=hh.z;if(t===0||s===0||i===0)return e.set(0,0,0);const r=this.data,a=Math.asin(-r[2]/t),n=Math.PI*.5;let l,h;return a<n?a>-n?(l=Math.atan2(r[6]/s,r[10]/i),h=Math.atan2(r[1]/t,r[0]/t)):(h=0,l=-Math.atan2(r[4]/s,r[5]/s)):(h=0,l=Math.atan2(r[4]/s,r[5]/s)),e.set(l,a,h).mulScalar(B.RAD_TO_DEG)}toString(){return`[${this.data.join(", ")}]`}};Fr.IDENTITY=Object.freeze(new Fr),Fr.ZERO=Object.freeze(new Fr().set([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]));let $=Fr;const yn=class yn{constructor(e=0,t=0,s=0,i=1){e.length===4?(this.x=e[0],this.y=e[1],this.z=e[2],this.w=e[3]):(this.x=e,this.y=t,this.z=s,this.w=i)}clone(){const e=this.constructor;return new e(this.x,this.y,this.z,this.w)}conjugate(e=this){return this.x=e.x*-1,this.y=e.y*-1,this.z=e.z*-1,this.w=e.w,this}copy(e){return this.x=e.x,this.y=e.y,this.z=e.z,this.w=e.w,this}dot(e){return this.x*e.x+this.y*e.y+this.z*e.z+this.w*e.w}equals(e){return this.x===e.x&&this.y===e.y&&this.z===e.z&&this.w===e.w}equalsApprox(e,t=1e-6){return Math.abs(this.x-e.x)<t&&Math.abs(this.y-e.y)<t&&Math.abs(this.z-e.z)<t&&Math.abs(this.w-e.w)<t}getAxisAngle(e){let t=Math.acos(this.w)*2;const s=Math.sin(t/2);return s!==0?(e.x=this.x/s,e.y=this.y/s,e.z=this.z/s,(e.x<0||e.y<0||e.z<0)&&(e.x*=-1,e.y*=-1,e.z*=-1,t*=-1)):(e.x=1,e.y=0,e.z=0),t*B.RAD_TO_DEG}getEulerAngles(e=new x){let t,s,i;const r=this.x,a=this.y,n=this.z,l=this.w,h=2*(l*a-r*n);return h<=-.99999?(t=2*Math.atan2(r,l),s=-Math.PI/2,i=0):h>=.99999?(t=2*Math.atan2(r,l),s=Math.PI/2,i=0):(t=Math.atan2(2*(l*r+a*n),1-2*(r*r+a*a)),s=Math.asin(h),i=Math.atan2(2*(l*n+r*a),1-2*(a*a+n*n))),e.set(t,s,i).mulScalar(B.RAD_TO_DEG)}invert(e=this){return this.conjugate(e).normalize()}length(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w)}lengthSq(){return this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w}lerp(e,t,s){const i=(1-s)*(e.dot(t)<0?-1:1);return this.x=e.x*i+t.x*s,this.y=e.y*i+t.y*s,this.z=e.z*i+t.z*s,this.w=e.w*i+t.w*s,this.normalize()}mul(e){const t=this.x,s=this.y,i=this.z,r=this.w,a=e.x,n=e.y,l=e.z,h=e.w;return this.x=r*a+t*h+s*l-i*n,this.y=r*n+s*h+i*a-t*l,this.z=r*l+i*h+t*n-s*a,this.w=r*h-t*a-s*n-i*l,this}mulScalar(e,t=this){return this.x=t.x*e,this.y=t.y*e,this.z=t.z*e,this.w=t.w*e,this}mul2(e,t){const s=e.x,i=e.y,r=e.z,a=e.w,n=t.x,l=t.y,h=t.z,c=t.w;return this.x=a*n+s*c+i*h-r*l,this.y=a*l+i*c+r*n-s*h,this.z=a*h+r*c+s*l-i*n,this.w=a*c-s*n-i*l-r*h,this}normalize(e=this){let t=e.length();return t===0?(this.x=this.y=this.z=0,this.w=1):(t=1/t,this.x=e.x*t,this.y=e.y*t,this.z=e.z*t,this.w=e.w*t),this}set(e,t,s,i){return this.x=e,this.y=t,this.z=s,this.w=i,this}setFromAxisAngle(e,t){t*=.5*B.DEG_TO_RAD;const s=Math.sin(t),i=Math.cos(t);return this.x=s*e.x,this.y=s*e.y,this.z=s*e.z,this.w=i,this}setFromEulerAngles(e,t,s){if(e instanceof x){const d=e;e=d.x,t=d.y,s=d.z}const i=.5*B.DEG_TO_RAD;e*=i,t*=i,s*=i;const r=Math.sin(e),a=Math.cos(e),n=Math.sin(t),l=Math.cos(t),h=Math.sin(s),c=Math.cos(s);return this.x=r*l*c-a*n*h,this.y=a*n*c+r*l*h,this.z=a*l*h-r*n*c,this.w=a*l*c+r*n*h,this}setFromMat4(e){const t=e.data;let s=t[0],i=t[1],r=t[2],a=t[4],n=t[5],l=t[6],h=t[8],c=t[9],d=t[10],f;return f=s*s+i*i+r*r,f===0?this.set(0,0,0,1):(f=1/Math.sqrt(f),s*=f,i*=f,r*=f,f=a*a+n*n+l*l,f===0?this.set(0,0,0,1):(f=1/Math.sqrt(f),a*=f,n*=f,l*=f,f=h*h+c*c+d*d,f===0?this.set(0,0,0,1):(f=1/Math.sqrt(f),h*=f,c*=f,d*=f,d<0?s>n?this.set(1+s-n-d,i+a,h+r,l-c):this.set(i+a,1-s+n-d,l+c,h-r):s<-n?this.set(h+r,l+c,1-s-n+d,i-a):this.set(l-c,h-r,i-a,1+s+n+d),this.mulScalar(1/this.length()))))}setFromDirections(e,t){const s=1+e.dot(t);return s<Number.EPSILON?Math.abs(e.x)>Math.abs(e.y)?(this.x=-e.z,this.y=0,this.z=e.x,this.w=0):(this.x=0,this.y=-e.z,this.z=e.y,this.w=0):(this.x=e.y*t.z-e.z*t.y,this.y=e.z*t.x-e.x*t.z,this.z=e.x*t.y-e.y*t.x,this.w=s),this.normalize()}slerp(e,t,s){const i=e.x,r=e.y,a=e.z,n=e.w;let l=t.x,h=t.y,c=t.z,d=t.w,f=n*d+i*l+r*h+a*c;if(f<0&&(d=-d,l=-l,h=-h,c=-c,f=-f),Math.abs(f)>=1)return this.w=n,this.x=i,this.y=r,this.z=a,this;const u=Math.acos(f),p=Math.sqrt(1-f*f);if(Math.abs(p)<.001)return this.w=n*.5+d*.5,this.x=i*.5+l*.5,this.y=r*.5+h*.5,this.z=a*.5+c*.5,this;const m=Math.sin((1-s)*u)/p,_=Math.sin(s*u)/p;return this.w=n*m+d*_,this.x=i*m+l*_,this.y=r*m+h*_,this.z=a*m+c*_,this}transformVector(e,t=new x){const s=e.x,i=e.y,r=e.z,a=this.x,n=this.y,l=this.z,h=this.w,c=h*s+n*r-l*i,d=h*i+l*s-a*r,f=h*r+a*i-n*s,u=-a*s-n*i-l*r;return t.x=c*h+u*-a+d*-l-f*-n,t.y=d*h+u*-n+f*-a-c*-l,t.z=f*h+u*-l+c*-n-d*-a,t}fromArray(e,t=0){return this.x=e[t]??this.x,this.y=e[t+1]??this.y,this.z=e[t+2]??this.z,this.w=e[t+3]??this.w,this}toString(){return`[${this.x}, ${this.y}, ${this.z}, ${this.w}]`}toArray(e=[],t=0){return e[t]=this.x,e[t+1]=this.y,e[t+2]=this.z,e[t+3]=this.w,e}};yn.IDENTITY=Object.freeze(new yn(0,0,0,1)),yn.ZERO=Object.freeze(new yn(0,0,0,0));let Q=yn;const Da=new x,Ra=new x,ov=new x,lv=new x,tL=new x;class fe{constructor(e,t){this.center=new x,this.halfExtents=new x(.5,.5,.5),this._min=new x,this._max=new x,e&&this.center.copy(e),t&&this.halfExtents.copy(t)}add(e){const t=this.center,s=t.x,i=t.y,r=t.z,a=this.halfExtents,n=a.x,l=a.y,h=a.z;let c=s-n,d=s+n,f=i-l,u=i+l,p=r-h,m=r+h;const _=e.center,g=_.x,y=_.y,A=_.z,v=e.halfExtents,S=v.x,b=v.y,E=v.z,T=g-S,w=g+S,P=y-b,M=y+b,L=A-E,D=A+E;T<c&&(c=T),w>d&&(d=w),P<f&&(f=P),M>u&&(u=M),L<p&&(p=L),D>m&&(m=D),t.x=(c+d)*.5,t.y=(f+u)*.5,t.z=(p+m)*.5,a.x=(d-c)*.5,a.y=(u-f)*.5,a.z=(m-p)*.5}copy(e){this.center.copy(e.center),this.halfExtents.copy(e.halfExtents)}clone(){return new fe(this.center,this.halfExtents)}intersects(e){const t=this.getMax(),s=this.getMin(),i=e.getMax(),r=e.getMin();return s.x<=i.x&&t.x>=r.x&&s.y<=i.y&&t.y>=r.y&&s.z<=i.z&&t.z>=r.z}_intersectsRay(e,t){const s=Da.copy(this.getMin()).sub(e.origin),i=Ra.copy(this.getMax()).sub(e.origin),r=e.direction;r.x===0?(s.x=s.x<0?-Number.MAX_VALUE:Number.MAX_VALUE,i.x=i.x<0?-Number.MAX_VALUE:Number.MAX_VALUE):(s.x/=r.x,i.x/=r.x),r.y===0?(s.y=s.y<0?-Number.MAX_VALUE:Number.MAX_VALUE,i.y=i.y<0?-Number.MAX_VALUE:Number.MAX_VALUE):(s.y/=r.y,i.y/=r.y),r.z===0?(s.z=s.z<0?-Number.MAX_VALUE:Number.MAX_VALUE,i.z=i.z<0?-Number.MAX_VALUE:Number.MAX_VALUE):(s.z/=r.z,i.z/=r.z);const a=ov.set(Math.min(s.x,i.x),Math.min(s.y,i.y),Math.min(s.z,i.z)),n=lv.set(Math.max(s.x,i.x),Math.max(s.y,i.y),Math.max(s.z,i.z)),l=Math.min(Math.min(n.x,n.y),n.z),h=Math.max(Math.max(a.x,a.y),a.z),c=l>=h&&h>=0;return c&&t.copy(e.direction).mulScalar(h).add(e.origin),c}_fastIntersectsRay(e){const t=Da,s=Ra,i=ov,r=lv,a=tL,n=e.direction;return t.sub2(e.origin,this.center),r.set(Math.abs(t.x),Math.abs(t.y),Math.abs(t.z)),i.mul2(t,n),!(r.x>this.halfExtents.x&&i.x>=0||r.y>this.halfExtents.y&&i.y>=0||r.z>this.halfExtents.z&&i.z>=0||(a.set(Math.abs(n.x),Math.abs(n.y),Math.abs(n.z)),s.cross(n,t),s.set(Math.abs(s.x),Math.abs(s.y),Math.abs(s.z)),s.x>this.halfExtents.y*a.z+this.halfExtents.z*a.y)||s.y>this.halfExtents.x*a.z+this.halfExtents.z*a.x||s.z>this.halfExtents.x*a.y+this.halfExtents.y*a.x)}intersectsRay(e,t){return t?this._intersectsRay(e,t):this._fastIntersectsRay(e)}setMinMax(e,t){this.center.add2(t,e).mulScalar(.5),this.halfExtents.sub2(t,e).mulScalar(.5)}getMin(){return this._min.copy(this.center).sub(this.halfExtents)}getMax(){return this._max.copy(this.center).add(this.halfExtents)}containsPoint(e){const t=this.getMin(),s=this.getMax();return!(e.x<t.x||e.x>s.x||e.y<t.y||e.y>s.y||e.z<t.z||e.z>s.z)}setFromTransformedAabb(e,t,s=!1){const i=e.center,r=e.halfExtents,a=t.data;let n=a[0],l=a[4],h=a[8],c=a[1],d=a[5],f=a[9],u=a[2],p=a[6],m=a[10];if(s){let _=n*n+l*l+h*h;if(_>0){const g=1/Math.sqrt(_);n*=g,l*=g,h*=g}if(_=c*c+d*d+f*f,_>0){const g=1/Math.sqrt(_);c*=g,d*=g,f*=g}if(_=u*u+p*p+m*m,_>0){const g=1/Math.sqrt(_);u*=g,p*=g,m*=g}}this.center.set(a[12]+n*i.x+l*i.y+h*i.z,a[13]+c*i.x+d*i.y+f*i.z,a[14]+u*i.x+p*i.y+m*i.z),this.halfExtents.set(Math.abs(n)*r.x+Math.abs(l)*r.y+Math.abs(h)*r.z,Math.abs(c)*r.x+Math.abs(d)*r.y+Math.abs(f)*r.z,Math.abs(u)*r.x+Math.abs(p)*r.y+Math.abs(m)*r.z)}static computeMinMax(e,t,s,i=e.length/3){if(i>0){let r=e[0],a=e[1],n=e[2],l=r,h=a,c=n;const d=i*3;for(let f=3;f<d;f+=3){const u=e[f],p=e[f+1],m=e[f+2];u<r&&(r=u),p<a&&(a=p),m<n&&(n=m),u>l&&(l=u),p>h&&(h=p),m>c&&(c=m)}t.set(r,a,n),s.set(l,h,c)}}compute(e,t){fe.computeMinMax(e,Da,Ra,t),this.setMinMax(Da,Ra)}intersectsBoundingSphere(e){return this._distanceToBoundingSphereSq(e)<=e.radius*e.radius}_distanceToBoundingSphereSq(e){const t=this.getMin(),s=this.getMax();let i=0;const r=["x","y","z"];for(let a=0;a<3;++a){let n=0;const l=e.center[r[a]],h=t[r[a]],c=s[r[a]];let d=0;l<h&&(d=h-l,n+=d*d),l>c&&(d=l-c,n+=d*d),i+=n}return i}_expand(e,t){Da.add2(this.getMin(),e),Ra.add2(this.getMax(),t),this.setMinMax(Da,Ra)}}const ch=new x,sL=new x;class Um{constructor(e=new x,t=.5){this.center=e,this.radius=t}containsPoint(e){const t=ch.sub2(e,this.center).lengthSq(),s=this.radius;return t<s*s}intersectsRay(e,t){const s=ch.copy(e.origin).sub(this.center),i=s.dot(sL.copy(e.direction).normalize()),r=s.dot(s)-this.radius*this.radius;if(r>0&&i>0)return!1;const a=i*i-r;if(a<0)return!1;const n=Math.abs(-i-Math.sqrt(a));return t&&t.copy(e.direction).mulScalar(n).add(e.origin),!0}intersectsBoundingSphere(e){ch.sub2(e.center,this.center);const t=e.radius+this.radius;return ch.lengthSq()<=t*t}}class iT{constructor(e=x.UP,t=0){this.normal=new x,this.normal.copy(e),this.distance=t}clone(){const e=this.constructor;return new e().copy(this)}copy(e){return this.normal.copy(e.normal),this.distance=e.distance,this}intersectsLine(e,t,s){const i=this.distance,r=this.normal.dot(e)+i,a=this.normal.dot(t)+i,n=r/(r-a),l=n>=0&&n<=1;return l&&s&&s.lerp(e,t,n),l}intersectsRay(e,t){const s=this.normal.dot(e.direction);if(s===0)return!1;const i=-(this.normal.dot(e.origin)+this.distance)/s;return i>=0&&t&&t.copy(e.direction).mulScalar(i).add(e.origin),i>=0}normalize(){const e=1/this.normal.length();return this.normal.mulScalar(e),this.distance*=e,this}set(e,t,s,i){return this.normal.set(e,t,s),this.distance=i,this}setFromPointNormal(e,t){return this.normal.copy(t),this.distance=-this.normal.dot(e),this}}class iL{constructor(){this.planes=[];for(let e=0;e<6;e++)this.planes[e]=new iT}clone(){const e=this.constructor;return new e().copy(this)}copy(e){for(let t=0;t<6;t++)this.planes[t].copy(e.planes[t]);return this}setFromMat4(e){const[t,s,i,r,a,n,l,h,c,d,f,u,p,m,_,g]=e.data,y=this.planes;y[0].set(r-t,h-a,u-c,g-p).normalize(),y[1].set(r+t,h+a,u+c,g+p).normalize(),y[2].set(r+s,h+n,u+d,g+m).normalize(),y[3].set(r-s,h-n,u-d,g-m).normalize(),y[4].set(r-i,h-l,u-f,g-_).normalize(),y[5].set(r+i,h+l,u+f,g+_).normalize()}containsPoint(e){for(let t=0;t<6;t++){const{normal:s,distance:i}=this.planes[t];if(s.dot(e)+i<=0)return!1}return!0}containsSphere(e){const{center:t,radius:s}=e;let i=0;for(let r=0;r<6;r++){const{normal:a,distance:n}=this.planes[r],l=a.dot(t)+n;if(l<=-s)return 0;l>s&&i++}return i===6?2:1}}class $u{constructor(e,t){this.origin=new x,this.direction=x.FORWARD.clone(),e&&this.origin.copy(e),t&&this.direction.copy(t)}set(e,t){return this.origin.copy(e),this.direction.copy(t),this}copy(e){return this.set(e.origin,e.direction)}clone(){return new this.constructor(this.origin,this.direction)}}const ot=0,te=1,Bm=2,Vm=0,_t=1,rL=2,rT=4,aL=5,zm=6,Hm=8,Ts=0,nL=2,oL=3,lL=4,Es=0,Sc=1,hL=2,cL=3,ll=1,hl=2,yc=4,lt=0,la=1,qo=2,dL=3,pe=0,Ze=1,wd=2,Cd=3,Pd=4,ha=5,fL=0,Tc=1,xc=2,Xu=3,uL=4,pL=5,mL=6,Ei=7,qu=0,hr=1,cr=2,aT=0,nT=1,Gm=2,Ld=3,Wm=4,Id=5,_r=6,Ae=7,Md=8,$m=9,Ml=10,Dd=11,et=12,Xm=13,ft=14,Oi=15,wi=16,Rd=17,Xn=18,qm=19,zt=20,Od=21,Ym=22,jm=23,Dl=24,Rl=25,Nd=26,Fd=27,oT=28,lT=29,hT=30,cT=31,Km=32,dT=33,Zm=34,Qm=35,Jm=36,Ol=37,e_=38,fT=39,t_=40,s_=41,i_=42,r_=43,a_=44,uT=45,n_=46,kd=47,o_=48,Nt=49,Ud=50,l_=51,h_=52,c_=53,Yu=54,ju=55,Ku=56,Zu=61,Qu=62,Ju=63,pT=64,mT=65,_T=66,gT=67,ep=68,Ln=69,Zs=new Map([[aT,{name:"A8",size:1,ldr:!0}],[h_,{name:"R8",size:1,ldr:!0}],[nT,{name:"L8",size:1,ldr:!0}],[Gm,{name:"LA8",size:2,ldr:!0}],[c_,{name:"RG8",size:2,ldr:!0}],[Ld,{name:"RGB565",size:2,ldr:!0}],[Wm,{name:"RGBA5551",size:2,ldr:!0}],[Id,{name:"RGBA4",size:2,ldr:!0}],[_r,{name:"RGB8",size:4,ldr:!0}],[Ae,{name:"RGBA8",size:4,ldr:!0,srgbFormat:zt}],[Ud,{name:"R16F",size:2}],[l_,{name:"RG16F",size:4}],[Dd,{name:"RGB16F",size:8}],[et,{name:"RGBA16F",size:8}],[Xm,{name:"RGB32F",size:16}],[ft,{name:"RGBA32F",size:16}],[Oi,{name:"R32F",size:4}],[wi,{name:"DEPTH",size:4}],[Ln,{name:"DEPTH16",size:2}],[Rd,{name:"DEPTHSTENCIL",size:4}],[Xn,{name:"111110F",size:4}],[qm,{name:"SRGB8",size:4,ldr:!0,srgb:!0}],[zt,{name:"SRGBA8",size:4,ldr:!0,srgb:!0}],[cT,{name:"BGRA8",size:4,ldr:!0}],[pT,{name:"SBGRA8",size:4,ldr:!0,srgb:!0}],[Md,{name:"DXT1",blockSize:8,ldr:!0,srgbFormat:Yu}],[$m,{name:"DXT3",blockSize:16,ldr:!0,srgbFormat:ju}],[Ml,{name:"DXT5",blockSize:16,ldr:!0,srgbFormat:Ku}],[Od,{name:"ETC1",blockSize:8,ldr:!0}],[Ym,{name:"ETC2_RGB",blockSize:8,ldr:!0,srgbFormat:Zu}],[jm,{name:"ETC2_RGBA",blockSize:16,ldr:!0,srgbFormat:Qu}],[Dl,{name:"PVRTC_2BPP_RGB_1",ldr:!0,blockSize:8}],[Rl,{name:"PVRTC_2BPP_RGBA_1",ldr:!0,blockSize:8}],[Nd,{name:"PVRTC_4BPP_RGB_1",ldr:!0,blockSize:8}],[Fd,{name:"PVRTC_4BPP_RGBA_1",ldr:!0,blockSize:8}],[oT,{name:"ASTC_4x4",blockSize:16,ldr:!0,srgbFormat:Ju}],[lT,{name:"ATC_RGB",blockSize:8,ldr:!0}],[hT,{name:"ATC_RGBA",blockSize:16,ldr:!0}],[mT,{name:"BC6H_RGBF",blockSize:16}],[_T,{name:"BC6H_RGBUF",blockSize:16}],[gT,{name:"BC7_RGBA",blockSize:16,ldr:!0,srgbFormat:ep}],[Yu,{name:"DXT1_SRGB",blockSize:8,ldr:!0,srgb:!0}],[ju,{name:"DXT3_SRGBA",blockSize:16,ldr:!0,srgb:!0}],[Ku,{name:"DXT5_SRGBA",blockSize:16,ldr:!0,srgb:!0}],[Zu,{name:"ETC2_SRGB",blockSize:8,ldr:!0,srgb:!0}],[Qu,{name:"ETC2_SRGBA",blockSize:16,ldr:!0,srgb:!0}],[Ju,{name:"ASTC_4x4_SRGB",blockSize:16,ldr:!0,srgb:!0}],[ep,{name:"BC7_SRGBA",blockSize:16,ldr:!0,srgb:!0}],[Km,{name:"R8I",size:1,isInt:!0}],[dT,{name:"R8U",size:1,isInt:!0}],[Zm,{name:"R16I",size:2,isInt:!0}],[Qm,{name:"R16U",size:2,isInt:!0}],[Jm,{name:"R32I",size:4,isInt:!0}],[Ol,{name:"R32U",size:4,isInt:!0}],[e_,{name:"RG8I",size:2,isInt:!0}],[fT,{name:"RG8U",size:2,isInt:!0}],[t_,{name:"RG16I",size:4,isInt:!0}],[s_,{name:"RG16U",size:4,isInt:!0}],[i_,{name:"RG32I",size:8,isInt:!0}],[r_,{name:"RG32U",size:8,isInt:!0}],[a_,{name:"RGBA8I",size:4,isInt:!0}],[uT,{name:"RGBA8U",size:4,isInt:!0}],[n_,{name:"RGBA16I",size:8,isInt:!0}],[kd,{name:"RGBA16U",size:8,isInt:!0}],[o_,{name:"RGBA32I",size:16,isInt:!0}],[Nt,{name:"RGBA32U",size:16,isInt:!0}]]),_L=o=>Zs.get(o)?.blockSize!==void 0,Ec=o=>Zs.get(o)?.srgb===!0,pn=o=>Zs.get(o)?.isInt===!0,Bd=o=>Zs.get(o)?.srgbFormat||o,gL=o=>{for(const[e,t]of Zs)if(t.srgbFormat===o)return e;return o},vL=o=>{const e=Zs.get(o);return!!(e?.ldr&&!e?.srgb)},vT=o=>{switch(o){case Oi:case Xm:case ft:return Float32Array;case Jm:case i_:case o_:return Int32Array;case Ol:case r_:case Nt:return Uint32Array;case Zm:case t_:case n_:return Int16Array;case c_:case Qm:case s_:case kd:case Ld:case Wm:case Id:case Ud:case l_:case Dd:case et:return Uint16Array;case Km:case e_:case a_:return Int8Array;default:return Uint8Array}},Vd=0,zd=1,ST=2,yT=3,Ci=4,dr=5,Kr=6,ue="POSITION",Ht="NORMAL",ei="TANGENT",Qs="BLENDWEIGHT",Ft="BLENDINDICES",gt="COLOR",hv="TEXCOORD",as="TEXCOORD0",ba="TEXCOORD1",Nl="TEXCOORD2",Fl="TEXCOORD3",kl="TEXCOORD4",Ul="TEXCOORD5",Bl="TEXCOORD6",Vl="TEXCOORD7",tp="ATTR0",Ac="ATTR1",d_="ATTR2",f_="ATTR3",u_="ATTR4",SL="ATTR5",yL="ATTR6",TL="ATTR7",cl="ATTR8",dl="ATTR9",xL="ATTR10",p_="ATTR11",m_="ATTR12",__="ATTR13",g_="ATTR14",qn="ATTR15",EL=1,In=0,AL=2,bL=3,wL=5,Nf=0,TT=1,cv=2,ti="default",ca="rgbm",bc="rgbe",fl="rgbp",v_="swizzleGGGR",xT="2d",CL=0,PL="none",sp="cube",dv="equirect",LL="octahedral",Ee="glsl",Be="wgsl",Hd=0,Zr=1,Gd=2,zl=3,ET=4,Wd=5,Le=6,Mn=0,da=1,Ss=2,fa=3,Ot=4,Yn=5,Qr=6,Jr=7,ea=8,ul=9,pl=10,ml=11,wc=12,jn=13,Gs=14,IL=15,ML=16,$d=17,DL=18,RL=19,OL=20,Xd=21,qd=22,S_=23,AT=24,NL=25,Kn=26,Zn=27,Qn=28,Jn=29,eo=30,Yd=31,jd=32,to=33,Kd=34,Zd=35,so=36,Qd=37,Jd=38,Cc=39,y_=40,T_=41,FL=42,kL=43,UL=44,BL=45,VL=46,zL=47,HL=48,GL=49,WL=[["bool"],["i32"],["f32"],["vec2f","vec2<f32>"],["vec3f","vec3<f32>"],["vec4f","vec4<f32>"],["vec2i","vec2<i32>"],["vec3i","vec3<i32>"],["vec4i","vec4<i32>"],["vec2<bool>"],["vec3<bool>"],["vec4<bool>"],["mat2x2f","mat2x2<f32>"],["mat3x3f","mat3x3<f32>"],["mat4x4f","mat4x4<f32>"],["texture_2d<f32>"],["texture_cube<f32>"],["array<f32>"],["texture_depth_2d"],["texture_depth_cube"],["texture_3d<f32>"],["array<vec2<f32>>"],["array<vec3<f32>>"],["array<vec4<f32>>"],["array<mat4x4<f32>>"],["texture_2d_array<f32>"],["u32"],["vec2u","vec2<u32>"],["vec3u","vec3<u32>"],["vec4u","vec4<u32>"],["array<i32>"],["array<u32>"],["array<bool>"],["array<vec2i>","array<vec2<i32>>"],["array<vec2u>","array<vec2<u32>>"],["array<vec2b>","array<vec2<bool>>"],["array<vec3i>","array<vec3<i32>>"],["array<vec3u>","array<vec3<u32>>"],["array<vec3b>","array<vec3<bool>>"],["array<vec4i>","array<vec4<i32>>"],["array<vec4u>","array<vec4<u32>>"],["array<vec4b>","array<vec4<bool>>"],["texture_2d<i32>"],["texture_2d<u32>"],["texture_cube<i32>"],["texture_cube<u32>"],["texture_3d<i32>"],["texture_3d<u32>"],["texture_2d_array<i32>"],["texture_2d_array<u32>"]],$L=new Map;WL.forEach((o,e)=>{o.forEach(t=>$L.set(t,e))});const XL="webgl2",bT=1,wT=2,qL=4,YL="ldr",CT=1,PT=2,LT=4,IT=8,MT=16,DT=32,RT=64,OT=128,jL=255,_l=0,NT=1,ip=2,x_="default",Dn=[Int8Array,Uint8Array,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Uint16Array],Yo=[1,1,2,2,4,4,4,2],Pc=[Uint8Array,Uint16Array,Uint32Array],KL=[1,2,4],FT=new Map([["float","f32"],["vec2","vec2f"],["vec3","vec3f"],["vec4","vec4f"],["int","i32"],["ivec2","vec2i"],["ivec3","vec3i"],["ivec4","vec4i"],["uint","u32"],["uvec2","vec2u"],["uvec3","vec3u"],["uvec4","vec4u"]]),ge={};ge[ue]=0;ge[Ht]=1;ge[Qs]=2;ge[Ft]=3;ge[gt]=4;ge[as]=5;ge[ba]=6;ge[Nl]=7;ge[Fl]=8;ge[kl]=9;ge[Ul]=10;ge[Bl]=11;ge[Vl]=12;ge[ei]=13;ge[tp]=0;ge[Ac]=1;ge[d_]=2;ge[f_]=3;ge[u_]=4;ge[SL]=5;ge[yL]=6;ge[TL]=7;ge[cl]=8;ge[dl]=9;ge[xL]=10;ge[p_]=11;ge[m_]=12;ge[__]=13;ge[g_]=14;ge[qn]=15;let ZL=0;class ef{constructor(e,t){this.slot=-1,this.scopeId=null,this.name=e,this.visibility=t}}class E_ extends ef{}class QL extends ef{constructor(e,t,s=!1){super(e,t),this.format="",this.readOnly=s}}class fv extends ef{constructor(e,t,s=xT,i=CL,r=!0,a=null){super(e,t),this.textureDimension=s,this.sampleType=i,this.hasSampler=r,this.samplerName=a??`${e}_sampler`}}class JL extends ef{constructor(e,t=Ae,s=xT,i=!0,r=!1){super(e,qL),this.format=t,this.textureDimension=s,this.write=i,this.read=r}}class kT{constructor(e,t){this.uniformBufferFormats=[],this.textureFormats=[],this.storageTextureFormats=[],this.storageBufferFormats=[],this.id=ZL++;let s=0;t.forEach(r=>{r.slot=s++,r instanceof fv&&r.hasSampler&&s++,r instanceof E_?this.uniformBufferFormats.push(r):r instanceof fv?this.textureFormats.push(r):r instanceof JL?this.storageTextureFormats.push(r):r instanceof QL&&this.storageBufferFormats.push(r)}),this.device=e;const i=e.scope;this.bufferFormatsMap=new Map,this.uniformBufferFormats.forEach((r,a)=>this.bufferFormatsMap.set(r.name,a)),this.textureFormatsMap=new Map,this.textureFormats.forEach((r,a)=>{this.textureFormatsMap.set(r.name,a),r.scopeId=i.resolve(r.name)}),this.storageTextureFormatsMap=new Map,this.storageTextureFormats.forEach((r,a)=>{this.storageTextureFormatsMap.set(r.name,a),r.scopeId=i.resolve(r.name)}),this.storageBufferFormatsMap=new Map,this.storageBufferFormats.forEach((r,a)=>{this.storageBufferFormatsMap.set(r.name,a),r.scopeId=i.resolve(r.name)}),this.impl=e.createBindGroupFormatImpl(this)}destroy(){this.impl.destroy()}getTexture(e){const t=this.textureFormatsMap.get(e);return t!==void 0?this.textureFormats[t]:null}getStorageTexture(e){const t=this.storageTextureFormatsMap.get(e);return t!==void 0?this.storageTextureFormats[t]:null}loseContext(){}}class Tt{get(e,t){return this._cache.has(e)||(this._cache.set(e,t()),e.on("destroy",()=>{this.remove(e)}),e.on("devicelost",()=>{this._cache.get(e)?.loseContext?.(e)})),this._cache.get(e)}remove(e){this._cache.get(e)?.destroy?.(e),this._cache.delete(e)}constructor(){this._cache=new Map}}class Pi{static calcLevelDimension(e,t){return Math.max(e>>t,1)}static calcMipLevelsCount(e,t,s=1){return 1+Math.floor(Math.log2(Math.max(e,t,s)))}static calcLevelGpuSize(e,t,s,i){const r=Zs.get(i),a=Zs.get(i)?.size??0;if(a>0)return e*t*s*a;const n=r.blockSize??0;let l=Math.floor((e+3)/4);const h=Math.floor((t+3)/4),c=Math.floor((s+3)/4);return(i===Dl||i===Rl)&&(l=Math.max(Math.floor(l/2),1)),l*h*c*n}static calcGpuSize(e,t,s,i,r,a){let n=0;for(;n+=Pi.calcLevelGpuSize(e,t,s,i),!(!r||e===1&&t===1&&s===1);)e=Math.max(e>>1,1),t=Math.max(t>>1,1),s=Math.max(s>>1,1);return n*(a?6:1)}}let eI=0;class ae{constructor(e,t={}){this._gpuSize=0,this.id=eI++,this._invalid=!1,this._lockedLevel=-1,this._lockedMode=Nf,this.renderVersionDirty=0,this._storage=!1,this._numLevels=0,this.device=e,this.name=t.name??"",this._width=Math.floor(t.width??4),this._height=Math.floor(t.height??4),this._format=t.format??Ae,this._compressed=_L(this._format),this._integerFormat=pn(this._format),this._integerFormat&&(t.minFilter=pe,t.magFilter=pe),this._volume=t.volume??!1,this._depth=Math.floor(t.depth??1),this._arrayLength=Math.floor(t.arrayLength??0),this._storage=t.storage??!1,this._cubemap=t.cubemap??!1,this._flipY=t.flipY??!1,this._premultiplyAlpha=t.premultiplyAlpha??!1,this._mipmaps=t.mipmaps??!0,this._numLevelsRequested=t.numLevels,t.numLevels!==void 0&&(this._numLevels=t.numLevels),this._updateNumLevel(),this._minFilter=t.minFilter??ha,this._magFilter=t.magFilter??Ze,this._anisotropy=t.anisotropy??1,this._addressU=t.addressU??ot,this._addressV=t.addressV??ot,this._addressW=t.addressW??ot,this._compareOnRead=t.compareOnRead??!1,this._compareFunc=t.compareFunc??Tc,this._type=t.type??ti,this.projection=PL,this._cubemap?this.projection=sp:t.projection&&t.projection!==sp&&(this.projection=t.projection),this._levels=t.levels;const s=!!t.levels;this._levels||this._clearLevels(),this.recreateImpl(s),e.textures.push(this)}destroy(){const e=this.device;if(e){const t=e.textures.indexOf(this);t!==-1&&e.textures.splice(t,1),e.scope.removeValue(this),this.impl.destroy(e),this.adjustVramSizeTracking(e._vram,-this._gpuSize),this._levels=null,this.device=null}}recreateImpl(e=!0){const{device:t}=this;this.impl?.destroy(t),this.impl=null,this.impl=t.createTextureImpl(this),this.dirtyAll(),e&&this.upload()}_clearLevels(){this._levels=this._cubemap?[[null,null,null,null,null,null]]:[null]}resize(e,t,s=1){const i=this.device;this.adjustVramSizeTracking(i._vram,-this._gpuSize),this.impl.destroy(i),this._clearLevels(),this._width=Math.floor(e),this._height=Math.floor(t),this._depth=Math.floor(s),this._updateNumLevel(),this.impl=i.createTextureImpl(this),this.dirtyAll()}loseContext(){this.impl.loseContext(),this.dirtyAll()}adjustVramSizeTracking(e,t){e.tex+=t}propertyChanged(e){this.impl.propertyChanged(e),this.renderVersionDirty=this.device.renderVersion}_updateNumLevel(){const e=this.mipmaps?Pi.calcMipLevelsCount(this.width,this.height):1,t=this._numLevelsRequested;this._numLevels=Math.min(t??e,e),this._mipmaps=this._numLevels>1}get lockedMode(){return this._lockedMode}set minFilter(e){this._minFilter!==e&&(pn(this._format)||(this._minFilter=e,this.propertyChanged(CT)))}get minFilter(){return this._minFilter}set magFilter(e){this._magFilter!==e&&(pn(this._format)||(this._magFilter=e,this.propertyChanged(PT)))}get magFilter(){return this._magFilter}set addressU(e){this._addressU!==e&&(this._addressU=e,this.propertyChanged(LT))}get addressU(){return this._addressU}set addressV(e){this._addressV!==e&&(this._addressV=e,this.propertyChanged(IT))}get addressV(){return this._addressV}set addressW(e){this._volume&&e!==this._addressW&&(this._addressW=e,this.propertyChanged(MT))}get addressW(){return this._addressW}set compareOnRead(e){this._compareOnRead!==e&&(this._compareOnRead=e,this.propertyChanged(DT))}get compareOnRead(){return this._compareOnRead}set compareFunc(e){this._compareFunc!==e&&(this._compareFunc=e,this.propertyChanged(RT))}get compareFunc(){return this._compareFunc}set anisotropy(e){this._anisotropy!==e&&(this._anisotropy=e,this.propertyChanged(OT))}get anisotropy(){return this._anisotropy}set mipmaps(e){this._mipmaps!==e&&(this.device.isWebGPU||pn(this._format)||(this._mipmaps=e),e&&(this._needsMipmapsUpload=!0))}get mipmaps(){return this._mipmaps}get numLevels(){return this._numLevels}get storage(){return this._storage}get width(){return this._width}get height(){return this._height}get depth(){return this._depth}get format(){return this._format}get cubemap(){return this._cubemap}get gpuSize(){const e=this.pot&&this._mipmaps&&!(this._compressed&&this._levels.length===1);return Pi.calcGpuSize(this._width,this._height,this._depth,this._format,e,this._cubemap)}get array(){return this._arrayLength>0}get arrayLength(){return this._arrayLength}get volume(){return this._volume}set type(e){this._type!==e&&(this._type=e,this.device._shadersDirty=!0)}get type(){return this._type}set srgb(e){const t=Ec(this.format);if(e!==t)if(e){const s=Bd(this.format);this._format!==s&&(this._format=s,this.recreateImpl(),this.device._shadersDirty=!0)}else{const s=gL(this.format);this._format!==s&&(this._format=s,this.recreateImpl(),this.device._shadersDirty=!0)}}get srgb(){return Ec(this.format)}set flipY(e){this._flipY!==e&&(this._flipY=e,this._needsUpload=!0)}get flipY(){return this._flipY}set premultiplyAlpha(e){this._premultiplyAlpha!==e&&(this._premultiplyAlpha=e,this._needsUpload=!0)}get premultiplyAlpha(){return this._premultiplyAlpha}get pot(){return B.powerOfTwo(this._width)&&B.powerOfTwo(this._height)}get encoding(){switch(this.type){case ca:return"rgbm";case bc:return"rgbe";case fl:return"rgbp"}return vL(this.format)?"srgb":"linear"}dirtyAll(){this._levelsUpdated=this._cubemap?[[!0,!0,!0,!0,!0,!0]]:[!0],this._needsUpload=!0,this._needsMipmapsUpload=this._mipmaps,this._mipmapsUploaded=!1,this.propertyChanged(jL)}lock(e={}){e.level??=0,e.face??=0,e.mode??=cv,this._lockedMode=e.mode,this._lockedLevel=e.level;const t=this.cubemap?this._levels[e.face]:this._levels;if(t[e.level]===null){const s=Math.max(1,this._width>>e.level),i=Math.max(1,this._height>>e.level),r=Math.max(1,this._depth>>e.level),a=new ArrayBuffer(Pi.calcLevelGpuSize(s,i,r,this._format));t[e.level]=new(vT(this._format))(a)}return t[e.level]}setSource(e,t=0){let s=!1,i,r;if(this._cubemap){if(e[0]){i=e[0].width||0,r=e[0].height||0;for(let a=0;a<6;a++){const n=e[a];if(!n||n.width!==i||n.height!==r||!this.device._isBrowserInterface(n)){s=!0;break}}}else s=!0;if(!s)for(let a=0;a<6;a++)this._levels[t][a]!==e[a]&&(this._levelsUpdated[t][a]=!0)}else this.device._isBrowserInterface(e)||(s=!0),s||(e!==this._levels[t]&&(this._levelsUpdated[t]=!0),e instanceof HTMLVideoElement?(i=e.videoWidth,r=e.videoHeight):(i=e.width,r=e.height));if(s)if(this._width=4,this._height=4,this._cubemap)for(let a=0;a<6;a++)this._levels[t][a]=null,this._levelsUpdated[t][a]=!0;else this._levels[t]=null,this._levelsUpdated[t]=!0;else t===0&&(this._width=i,this._height=r),this._levels[t]=e;(this._invalid!==s||!s)&&(this._invalid=s,this.upload())}getSource(e=0){return this._levels[e]}unlock(){this._lockedMode,this._lockedMode===cv&&this.upload(),this._lockedLevel=-1,this._lockedMode=Nf}upload(){this._needsUpload=!0,this._needsMipmapsUpload=this._mipmaps,this.impl.uploadImmediate?.(this.device,this)}read(e,t,s,i,r={}){return this.impl.read?.(e,t,s,i,r)}write(e,t,s,i,r){return this.impl.write?.(e,t,s,i,r)}}const tI={white:[255,255,255,255],gray:[128,128,128,255],black:[0,0,0,255],normal:[128,128,255,255],pink:[255,128,255,255]};class sI{destroy(){this.map.forEach(e=>{e.destroy()})}constructor(){this.map=new Map}}const iI=new Tt,ta=(o,e)=>{const t=iI.get(o,()=>new sI);if(!t.map.has(e)){const s=new ae(o,{name:`built-in-texture-${e}`,width:1,height:1,format:Ae}),i=s.lock(),r=tI[e];i.set(r),s.unlock(),t.map.set(e,s)}return t.map.get(e)};let rI=0;class UT{constructor(){this.offsets=[]}}class A_{constructor(e,t,s){this.renderVersionUpdated=-1,this.uniformBufferOffsets=[],this.id=rI++,this.device=e,this.format=t,this.dirty=!0,this.impl=e.createBindGroupImpl(this),this.textures=[],this.storageTextures=[],this.storageBuffers=[],this.uniformBuffers=[],this.defaultUniformBuffer=s,s&&this.setUniformBuffer(x_,s)}destroy(){this.impl.destroy(),this.impl=null,this.format=null,this.defaultUniformBuffer=null}setUniformBuffer(e,t){const s=this.format.bufferFormatsMap.get(e);this.uniformBuffers[s]!==t&&(this.uniformBuffers[s]=t,this.dirty=!0)}setStorageBuffer(e,t){const s=this.format.storageBufferFormatsMap.get(e);this.storageBuffers[s]!==t&&(this.storageBuffers[s]=t,this.dirty=!0)}setTexture(e,t){const s=this.format.textureFormatsMap.get(e);this.textures[s]!==t?(this.textures[s]=t,this.dirty=!0):this.renderVersionUpdated<t.renderVersionDirty&&(this.dirty=!0)}setStorageTexture(e,t){const s=this.format.storageTextureFormatsMap.get(e);this.storageTextures[s]!==t?(this.storageTextures[s]=t,this.dirty=!0):this.renderVersionUpdated<t.renderVersionDirty&&(this.dirty=!0)}updateUniformBuffers(){for(let e=0;e<this.uniformBuffers.length;e++)this.uniformBuffers[e].update()}update(){const{textureFormats:e,storageTextureFormats:t,storageBufferFormats:s}=this.format;for(let i=0;i<e.length;i++){const r=e[i];let a=r.scopeId.value;a||(r.name==="uSceneDepthMap"&&(a=ta(this.device,"white")),r.name==="uSceneColorMap"&&(a=ta(this.device,"pink")),a||(a=ta(this.device,"pink"))),this.setTexture(r.name,a)}for(let i=0;i<t.length;i++){const r=t[i],a=r.scopeId.value;this.setStorageTexture(r.name,a)}for(let i=0;i<s.length;i++){const r=s[i],a=r.scopeId.value;this.setStorageBuffer(r.name,a)}this.uniformBufferOffsets.length=this.uniformBuffers.length;for(let i=0;i<this.uniformBuffers.length;i++){const r=this.uniformBuffers[i];this.uniformBufferOffsets[i]=r.offset,this.renderVersionUpdated<r.renderVersionDirty&&(this.dirty=!0)}this.dirty&&(this.dirty=!1,this.renderVersionUpdated=this.device.renderVersion,this.impl.update(this))}}const Ce={set(o,e,t,s=1){return o&~(s<<t)|e<<t},get(o,e,t=1){return o>>e&t},all(o,e,t=1){const s=t<<e;return(o&s)===s},any(o,e,t=1){return(o&t<<e)!==0}},dh=7,Bi=15,uv=0,pv=3,mv=7,_v=11,gv=14,vv=18,rp=22,Sv=23,yv=24,Tv=25,xv=26,aI=15,nI=rp,Rs=class Rs{constructor(e=!1,t=Ts,s=_t,i=Vm,r,a,n,l=!0,h=!0,c=!0,d=!0){this.target0=0,this.setColorBlend(t,s,i),this.setAlphaBlend(r??t,a??s,n??i),this.setColorWrite(l,h,c,d),this.blend=e}set blend(e){this.target0=Ce.set(this.target0,e?1:0,xv)}get blend(){return Ce.all(this.target0,xv)}setColorBlend(e,t,s){this.target0=Ce.set(this.target0,e,uv,dh),this.target0=Ce.set(this.target0,t,pv,Bi),this.target0=Ce.set(this.target0,s,mv,Bi)}setAlphaBlend(e,t,s){this.target0=Ce.set(this.target0,e,_v,dh),this.target0=Ce.set(this.target0,t,gv,Bi),this.target0=Ce.set(this.target0,s,vv,Bi)}setColorWrite(e,t,s,i){this.redWrite=e,this.greenWrite=t,this.blueWrite=s,this.alphaWrite=i}get colorOp(){return Ce.get(this.target0,uv,dh)}get colorSrcFactor(){return Ce.get(this.target0,pv,Bi)}get colorDstFactor(){return Ce.get(this.target0,mv,Bi)}get alphaOp(){return Ce.get(this.target0,_v,dh)}get alphaSrcFactor(){return Ce.get(this.target0,gv,Bi)}get alphaDstFactor(){return Ce.get(this.target0,vv,Bi)}set redWrite(e){this.target0=Ce.set(this.target0,e?1:0,rp)}get redWrite(){return Ce.all(this.target0,rp)}set greenWrite(e){this.target0=Ce.set(this.target0,e?1:0,Sv)}get greenWrite(){return Ce.all(this.target0,Sv)}set blueWrite(e){this.target0=Ce.set(this.target0,e?1:0,yv)}get blueWrite(){return Ce.all(this.target0,yv)}set alphaWrite(e){this.target0=Ce.set(this.target0,e?1:0,Tv)}get alphaWrite(){return Ce.all(this.target0,Tv)}get allWrite(){return Ce.get(this.target0,nI,aI)}copy(e){return this.target0=e.target0,this}clone(){return new this.constructor().copy(this)}get key(){return this.target0}equals(e){return this.target0===e.target0}};Rs.NOBLEND=Object.freeze(new Rs),Rs.NOWRITE=Object.freeze(new Rs(void 0,void 0,void 0,void 0,void 0,void 0,void 0,!1,!1,!1,!1)),Rs.ALPHABLEND=Object.freeze(new Rs(!0,Ts,zm,Hm)),Rs.ADDBLEND=Object.freeze(new Rs(!0,Ts,_t,_t));let dt=Rs;class b_{get(e){let t=this.map.get(e);return t===void 0&&(t=this.id++,this.map.set(e,t)),t}constructor(){this.map=new Map,this.id=0}}const oI=new b_,Ev=7,Av=0,bv=3,Yi=class Yi{constructor(e=Xu,t=!0){this.data=0,this._depthBias=0,this._depthBiasSlope=0,this.key=0,this.func=e,this.write=t}set test(e){this.func=e?Xu:Ei,this.updateKey()}get test(){return this.func!==Ei}set write(e){this.data=Ce.set(this.data,e?1:0,bv),this.updateKey()}get write(){return Ce.all(this.data,bv)}set func(e){this.data=Ce.set(this.data,e,Av,Ev),this.updateKey()}get func(){return Ce.get(this.data,Av,Ev)}set depthBias(e){this._depthBias=e,this.updateKey()}get depthBias(){return this._depthBias}set depthBiasSlope(e){this._depthBiasSlope=e,this.updateKey()}get depthBiasSlope(){return this._depthBiasSlope}copy(e){return this.data=e.data,this._depthBias=e._depthBias,this._depthBiasSlope=e._depthBiasSlope,this.key=e.key,this}clone(){return new this.constructor().copy(this)}updateKey(){const{data:e,_depthBias:t,_depthBiasSlope:s}=this,i=`${e}-${t}-${s}`;this.key=oI.get(i)}equals(e){return this.key===e.key}};Yi.DEFAULT=Object.freeze(new Yi),Yi.NODEPTH=Object.freeze(new Yi(Ei,!1)),Yi.WRITEDEPTH=Object.freeze(new Yi(Ei,!0));let Gt=Yi;class BT{equals(e){return this.globalId===e.globalId&&this.revision===e.revision}copy(e){this.globalId=e.globalId,this.revision=e.revision}reset(){this.globalId=0,this.revision=0}constructor(){this.globalId=0,this.revision=0}}let wv=0;class lI{constructor(){wv++,this.version=new BT,this.version.globalId=wv}increment(){this.version.revision++}}class hI{constructor(e){this.name=e,this.value=null,this.versionObject=new lI}toJSON(e){}setValue(e){this.value=e,this.versionObject.increment()}getValue(){return this.value}}class cI{constructor(e){this.name=e,this.variables=new Map}resolve(e){return this.variables.has(e)||this.variables.set(e,new hI(e)),this.variables.get(e)}removeValue(e){for(const t in this.variables){const s=this.variables[t];s.value===e&&(s.value=null)}}}let dI=0;class si{constructor(e,t,s,i){this.usage=Es,this.usage=i?.usage??Es,this.device=e,this.format=t,this.numVertices=s,this.id=dI++,this.impl=e.createVertexBufferImpl(this,t,i),this.numBytes=t.verticesByteSize?t.verticesByteSize:t.size*s,this.adjustVramSizeTracking(e._vram,this.numBytes);const r=i?.data;r?this.setData(r):this.storage=new ArrayBuffer(this.numBytes),this.device.buffers.push(this)}destroy(){const e=this.device,t=e.buffers.indexOf(this);t!==-1&&e.buffers.splice(t,1),this.impl.initialized&&(this.impl.destroy(e),this.adjustVramSizeTracking(e._vram,-this.storage.byteLength))}adjustVramSizeTracking(e,t){e.vb+=t}loseContext(){this.impl.loseContext()}getFormat(){return this.format}getUsage(){return this.usage}getNumVertices(){return this.numVertices}lock(){return this.storage}unlock(){this.impl.unlock(this)}setData(e){return e.byteLength!==this.numBytes?!1:(this.storage=e,this.unlock(),!0)}}function $s(o){if(o==null)return 0;let e=0;for(let t=0,s=o.length;t<s;t++)e=(e<<5)-e+o.charCodeAt(t),e|=0;return e}function VT(o){let t=2166136261;for(let s=0;s<o.length;s++)t^=o[s],t*=16777619;return t>>>0}const fI=new b_,uI=[2,4,8,12,16],pI=new Tt;class Wt{constructor(e,t,s){this.device=e,this._elements=[],this.hasUv0=!1,this.hasUv1=!1,this.hasColor=!1,this.hasTangents=!1,this.verticesByteSize=0,this.vertexCount=s,this.interleaved=s===void 0,this.instancing=!1,this.size=t.reduce((a,n)=>a+Math.ceil(n.components*Yo[n.type]/4)*4,0);let i=0,r;for(let a=0,n=t.length;a<n;a++){const l=t[a];r=l.components*Yo[l.type],s&&(i=B.roundUp(i,r));const h=l.asInt??!1,c=h?!1:l.normalize??!1,d={name:l.semantic,offset:s?i:l.hasOwnProperty("offset")?l.offset:i,stride:s?r:l.hasOwnProperty("stride")?l.stride:this.size,dataType:l.type,numComponents:l.components,normalize:c,size:r,asInt:h};this._elements.push(d),s?i+=r*s:i+=Math.ceil(r/4)*4,l.semantic===as?this.hasUv0=!0:l.semantic===ba?this.hasUv1=!0:l.semantic===gt?this.hasColor=!0:l.semantic===ei&&(this.hasTangents=!0)}s&&(this.verticesByteSize=i),this._evaluateHash()}get elements(){return this._elements}static getDefaultInstancingFormat(e){return pI.get(e,()=>new Wt(e,[{semantic:p_,components:4,type:Le},{semantic:m_,components:4,type:Le},{semantic:g_,components:4,type:Le},{semantic:qn,components:4,type:Le}]))}static isElementValid(e,t){const s=t.components*Yo[t.type];return!(e.isWebGPU&&!uI.includes(s))}update(){this._evaluateHash()}_evaluateHash(){const e=[],t=[],s=this._elements.length;for(let r=0;r<s;r++){const{name:a,dataType:n,numComponents:l,normalize:h,offset:c,stride:d,size:f,asInt:u}=this._elements[r],p=a+n+l+h+u;e.push(p);const m=p+c+d+f;t.push(m)}e.sort();const i=e.join();this.batchingHash=$s(i),this.shaderProcessingHashString=i,this.renderingHashString=t.join("_"),this.renderingHash=fI.get(this.renderingHashString)}}const mI=new b_,sd=class sd{set func(e){this._func=e,this._dirty=!0}get func(){return this._func}set ref(e){this._ref=e,this._dirty=!0}get ref(){return this._ref}set fail(e){this._fail=e,this._dirty=!0}get fail(){return this._fail}set zfail(e){this._zfail=e,this._dirty=!0}get zfail(){return this._zfail}set zpass(e){this._zpass=e,this._dirty=!0}get zpass(){return this._zpass}set readMask(e){this._readMask=e,this._dirty=!0}get readMask(){return this._readMask}set writeMask(e){this._writeMask=e,this._dirty=!0}get writeMask(){return this._writeMask}constructor(e={}){this._dirty=!0,this._func=e.func??Ei,this._ref=e.ref??0,this._readMask=e.readMask??255,this._writeMask=e.writeMask??255,this._fail=e.fail??In,this._zfail=e.zfail??In,this._zpass=e.zpass??In,this._evalKey()}_evalKey(){const{_func:e,_ref:t,_fail:s,_zfail:i,_zpass:r,_readMask:a,_writeMask:n}=this,l=`${e},${t},${s},${i},${r},${a},${n}`;this._key=mI.get(l),this._dirty=!1}get key(){return this._dirty&&this._evalKey(),this._key}copy(e){return this._func=e._func,this._ref=e._ref,this._readMask=e._readMask,this._writeMask=e._writeMask,this._fail=e._fail,this._zfail=e._zfail,this._zpass=e._zpass,this._dirty=e._dirty,this._key=e._key,this}clone(){return new this.constructor().copy(this)}};sd.DEFAULT=Object.freeze(new sd);let Ys=sd;const id=class id extends ne{constructor(e,t){super(),this.backBuffer=null,this.backBufferSize=new z,this.backBufferAntialias=!1,this.isWebGPU=!1,this.isWebGL2=!1,this.isHdr=!1,this.maxIndirectDrawCount=1024,this.maxColorAttachments=1,this.maxSamples=1,this.supportsCompute=!1,this.supportsStorageTextureRead=!1,this.renderTarget=null,this.shaders=[],this.textures=[],this.targets=new Set,this.renderVersion=0,this.insideRenderPass=!1,this.supportsUniformBuffers=!1,this.supportsClipDistances=!1,this.textureRG11B10Renderable=!1,this.textureFloatFilterable=!1,this.blendState=new dt,this.depthState=new Gt,this.stencilEnabled=!1,this.stencilFront=new Ys,this.stencilBack=new Ys,this.defaultClearOptions={color:[0,0,0,1],depth:1,stencil:0,flags:ll|hl},this.clientRect={width:0,height:0},this._shadersDirty=!1,this.capsDefines=new Map,this.mapsToClear=new Set,this.canvas=e,"setAttribute"in e&&e.setAttribute("data-engine",`PlayCanvas ${K0}`),this.initOptions={...t},this.initOptions.alpha??=!0,this.initOptions.depth??=!0,this.initOptions.stencil??=!0,this.initOptions.antialias??=!0,this.initOptions.powerPreference??="high-performance",this.initOptions.displayFormat??=YL,this._maxPixelRatio=Se.browser?Math.min(1,window.devicePixelRatio):1,this.buffers=[],this._vram={tex:0,vb:0,ib:0,ub:0,sb:0},this._shaderStats={vsCompiled:0,fsCompiled:0,linked:0,materialShaders:0,compileTime:0},this.initializeContextCaches(),this._drawCallsPerFrame=0,this._shaderSwitchesPerFrame=0,this._primsPerFrame=[];for(let s=Vd;s<=Kr;s++)this._primsPerFrame[s]=0;this._renderTargetCreationTime=0,this.scope=new cI("Device"),this.textureBias=this.scope.resolve("textureBias"),this.textureBias.setValue(0)}postInit(){const e=new Wt(this,[{semantic:ue,components:2,type:Le}]),t=new Float32Array([-1,-1,1,-1,-1,1,1,1]);this.quadVertexBuffer=new si(this,e,4,{data:t})}initCapsDefines(){const{capsDefines:e}=this;e.clear(),this.textureFloatFilterable&&e.set("CAPS_TEXTURE_FLOAT_FILTERABLE",""),this.textureFloatRenderable&&e.set("CAPS_TEXTURE_FLOAT_RENDERABLE","")}destroy(){this.fire("destroy"),this.quadVertexBuffer?.destroy(),this.quadVertexBuffer=null,this.dynamicBuffers?.destroy(),this.dynamicBuffers=null,this.gpuProfiler?.destroy(),this.gpuProfiler=null}onDestroyShader(e){this.fire("destroy:shader",e);const t=this.shaders.indexOf(e);t!==-1&&this.shaders.splice(t,1)}postDestroy(){this.scope=null,this.canvas=null}loseContext(){this.contextLost=!0,this.backBufferSize.set(-1,-1);for(const e of this.textures)e.loseContext();for(const e of this.buffers)e.loseContext();for(const e of this.targets)e.loseContext();this.gpuProfiler?.loseContext()}restoreContext(){this.contextLost=!1,this.initializeRenderState(),this.initializeContextCaches();for(const e of this.buffers)e.unlock();this.gpuProfiler?.restoreContext?.()}toJSON(e){}initializeContextCaches(){this.vertexBuffers=[],this.shader=null,this.shaderValid=void 0,this.shaderAsyncCompile=!1,this.renderTarget=null}initializeRenderState(){this.blendState=new dt,this.depthState=new Gt,this.cullMode=la,this.vx=this.vy=this.vw=this.vh=0,this.sx=this.sy=this.sw=this.sh=0,this.blendColor=new q(0,0,0,0)}setStencilState(e,t){}setBlendState(e){}setBlendColor(e,t,s,i){}setDepthState(e){}setCullMode(e){}setRenderTarget(e){this.renderTarget=e}setVertexBuffer(e){e&&this.vertexBuffers.push(e)}clearVertexBuffer(){this.vertexBuffers.length=0}getIndirectDrawSlot(){return 0}get indirectDrawBuffer(){return null}getRenderTarget(){return this.renderTarget}initRenderTarget(e){e.initialized||(e.init(),this.targets.add(e))}draw(e,t,s,i,r=!0,a=!0){}_isBrowserInterface(e){return this._isImageBrowserInterface(e)||this._isImageCanvasInterface(e)||this._isImageVideoInterface(e)}_isImageBrowserInterface(e){return typeof ImageBitmap<"u"&&e instanceof ImageBitmap||typeof HTMLImageElement<"u"&&e instanceof HTMLImageElement}_isImageCanvasInterface(e){return typeof HTMLCanvasElement<"u"&&e instanceof HTMLCanvasElement}_isImageVideoInterface(e){return typeof HTMLVideoElement<"u"&&e instanceof HTMLVideoElement}resizeCanvas(e,t){const s=Math.min(this._maxPixelRatio,Se.browser?window.devicePixelRatio:1),i=Math.floor(e*s),r=Math.floor(t*s);(i!==this.canvas.width||r!==this.canvas.height)&&this.setResolution(i,r)}setResolution(e,t){this.canvas.width=e,this.canvas.height=t,this.fire(id.EVENT_RESIZE,e,t)}update(){this.updateClientRect()}updateClientRect(){if(Se.worker)this.clientRect.width=this.canvas.width,this.clientRect.height=this.canvas.height;else{const e=this.canvas.getBoundingClientRect();this.clientRect.width=e.width,this.clientRect.height=e.height}}get width(){return this.canvas.width}get height(){return this.canvas.height}set fullscreen(e){}get fullscreen(){return!1}set maxPixelRatio(e){this._maxPixelRatio=e}get maxPixelRatio(){return this._maxPixelRatio}get deviceType(){return this._deviceType}startRenderPass(e){}endRenderPass(e){}startComputePass(e){}endComputePass(){}frameStart(){this.renderPassIndex=0,this.renderVersion++}frameEnd(){this.mapsToClear.forEach(e=>e.clear()),this.mapsToClear.clear()}computeDispatch(e,t="Unnamed"){}getRenderableHdrFormat(e=[Xn,et,ft],t=!0,s=1){for(let i=0;i<e.length;i++){const r=e[i];switch(r){case Xn:{if(this.textureRG11B10Renderable)return r;break}case et:if(this.textureHalfFloatRenderable)return r;break;case ft:if(this.isWebGPU&&s>1)continue;if(this.textureFloatRenderable&&(!t||this.textureFloatFilterable))return r;break}}}validateAttributes(e,t,s){}};id.EVENT_RESIZE="resizecanvas";let ap=id,_I=0;class ct{constructor(e={}){this.id=_I++;const t=e.colorBuffer?.device??e.colorBuffers?.[0].device??e.depthBuffer?.device??e.graphicsDevice;this._device=t;const{maxSamples:s}=this._device;if(this._samples=Math.min(e.samples??1,s),t.isWebGPU&&(this._samples=this._samples>1?s:1),this._colorBuffer=e.colorBuffer,e.colorBuffer&&(this._colorBuffers=[e.colorBuffer]),this._depthBuffer=e.depthBuffer,this._face=e.face??0,this._depthBuffer){const i=this._depthBuffer._format;i===wi||i===Ln?(this._depth=!0,this._stencil=!1):i===Rd?(this._depth=!0,this._stencil=!0):i===Oi&&this._depthBuffer.device.isWebGPU&&this._samples>1?(this._depth=!0,this._stencil=!1):(this._depth=!1,this._stencil=!1)}else this._depth=e.depth??!0,this._stencil=e.stencil??!1;e.colorBuffers&&(this._colorBuffers||(this._colorBuffers=[...e.colorBuffers],this._colorBuffer=e.colorBuffers[0])),this.autoResolve=e.autoResolve??!0,this.name=e.name,this.name||(this.name=this._colorBuffer?.name),this.name||(this.name=this._depthBuffer?.name),this.name||(this.name="Untitled"),this.flipY=e.flipY??!1,this._mipLevel=e.mipLevel??0,this._mipLevel>0&&this._depth&&(this._mipLevel=0),this._mipmaps=e.mipLevel===void 0,this.validateMrt(),this.impl=t.createRenderTargetImpl(this)}destroy(){const e=this._device;e&&(e.targets.delete(this),e.renderTarget===this&&e.setRenderTarget(null),this.destroyFrameBuffers())}destroyFrameBuffers(){const e=this._device;e&&this.impl.destroy(e)}destroyTextureBuffers(){this._depthBuffer?.destroy(),this._depthBuffer=null,this._colorBuffers?.forEach(e=>{e.destroy()}),this._colorBuffers=null,this._colorBuffer=null}resize(e,t){if(this.width!==e||this.height!==t){if(this.mipLevel>0)return;const s=this._device;this.destroyFrameBuffers(),s.renderTarget===this&&s.setRenderTarget(null),this._depthBuffer?.resize(e,t),this._colorBuffers?.forEach(i=>{i.resize(e,t)}),this.validateMrt(),this.impl=s.createRenderTargetImpl(this)}}validateMrt(){}init(){this.impl.init(this._device,this)}get initialized(){return this.impl.initialized}get device(){return this._device}loseContext(){this.impl.loseContext()}resolve(e=!0,t=!!this._depthBuffer){this._device&&this._samples>1&&this.impl.resolve(this._device,this,e,t)}copy(e,t,s){if(!this._device)if(e._device)this._device=e._device;else return!1;return this._device.copyRenderTarget(e,this,t,s)}get samples(){return this._samples}get depth(){return this._depth}get stencil(){return this._stencil}get colorBuffer(){return this._colorBuffer}getColorBuffer(e){return this._colorBuffers?.[e]}get depthBuffer(){return this._depthBuffer}get face(){return this._face}get mipLevel(){return this._mipLevel}get mipmaps(){return this._mipmaps}get width(){let e=this._colorBuffer?.width||this._depthBuffer?.width||this._device.width;return this._mipLevel>0&&(e=Pi.calcLevelDimension(e,this._mipLevel)),e}get height(){let e=this._colorBuffer?.height||this._depthBuffer?.height||this._device.height;return this._mipLevel>0&&(e=Pi.calcLevelDimension(e,this._mipLevel)),e}isColorBufferSrgb(e=0){if(this.device.backBuffer===this)return Ec(this.device.backBufferFormat);const t=this.getColorBuffer(e);return t?Ec(t.format):!1}}class tf{incRefCount(){this._refCount++}decRefCount(){this._refCount--}get refCount(){return this._refCount}constructor(){this._refCount=0}}class gI extends tf{constructor(e){super(),this.object=e,this.incRefCount()}}class vI{destroy(){this.cache.forEach(e=>{e.object?.destroy()}),this.cache.clear()}clear(){this.cache.clear()}get(e){const t=this.cache.get(e);return t?(t.incRefCount(),t.object):null}set(e,t){this.cache.set(e,new gI(t))}release(e){const t=this.cache.get(e);t&&(t.decRefCount(),t.refCount===0&&(this.cache.delete(e),t.object?.destroy()))}constructor(){this.cache=new Map}}class SI extends vI{loseContext(e){this.clear()}}const yI=new Tt,Ff=o=>yI.get(o,()=>new SI),tt=[];tt[Ss]=1;tt[fa]=2;tt[Ot]=3;tt[Yn]=4;tt[da]=1;tt[Qr]=2;tt[Jr]=3;tt[ea]=4;tt[Mn]=1;tt[ul]=2;tt[pl]=3;tt[ml]=4;tt[wc]=8;tt[jn]=12;tt[Gs]=16;tt[Kn]=1;tt[Zn]=2;tt[Qn]=3;tt[Jn]=4;class Ye{get isArrayType(){return this.count>0}constructor(e,t,s=0){if(this.shortName=e,this.name=s?`${e}[0]`:e,this.type=t,this.numComponents=tt[t],this.updateType=t,s>0)switch(t){case Ss:this.updateType=$d;break;case da:this.updateType=eo;break;case Kn:this.updateType=Yd;break;case Mn:this.updateType=jd;break;case fa:this.updateType=Xd;break;case Qr:this.updateType=to;break;case Zn:this.updateType=Kd;break;case ul:this.updateType=Zd;break;case Ot:this.updateType=qd;break;case Jr:this.updateType=so;break;case Qn:this.updateType=Qd;break;case pl:this.updateType=Jd;break;case Yn:this.updateType=S_;break;case ea:this.updateType=Cc;break;case Jn:this.updateType=y_;break;case ml:this.updateType=T_;break;case Gs:this.updateType=AT;break}this.count=s;let i=this.numComponents;s&&(i=B.roundUp(i,4)),this.byteSize=i*4,s&&(this.byteSize*=s)}calculateOffset(e){let t=this.byteSize<=8?this.byteSize:16;this.count&&(t=16),e=B.roundUp(e,t),this.offset=e/4}}class zT{constructor(e,t){this.byteSize=0,this.map=new Map,this.scope=e.scope,this.uniforms=t;let s=0;for(let i=0;i<t.length;i++){const r=t[i];r.calculateOffset(s),s=r.offset*4+r.byteSize,r.scopeId=this.scope.resolve(r.name),this.map.set(r.name,r)}this.byteSize=B.roundUp(s,16)}get(e){return this.map.get(e)}}const cs=/[ \t]*#(ifn?def|if|endif|else|elif|define|undef|extension|include)/g,kf=/define[ \t]+([^\n]+)\r?(?:\n|$)/g,Cv=/extension[ \t]+([\w-]+)[ \t]*:[ \t]*(enable|require)/g,Uf=/undef[ \t]+([^\n]+)\r?(?:\n|$)/g,Bf=/(ifdef|ifndef|if)[ \t]*([^\r\n]+)\r?\n/g,Vf=/(endif|else|elif)(?:[ \t]+([^\r\n]*))?\r?\n?/g,Pv=/\{?[\w-]+\}?/,TI=/(!|\s)?defined\(([\w-]+)\)/,xI=/!?defined\s*\([^)]*\)/g,EI=/!?defined\s*$/,AI=/([a-z_]\w*)\s*(==|!=|<|<=|>|>=)\s*([\w"']+)/i,bI=/[+\-]/g,zf=/include[ \t]+"([\w-]+)(?:\s*,\s*([\w-]+))?"/g,wI=/\{i\}/g,Lv=/(pcFragColor[1-8])\b/g;class ht{static run(e,t=new Map,s={}){ht.sourceName=s.sourceName,e=this.stripComments(e),e=e.split(/\r?\n/).map(n=>n.trimEnd()).join(`
`);const i=new Map,r=new Map;if(e=this._preprocess(e,i,r,t,s.stripDefines),e===null)return null;const a=new Map;return i.forEach((n,l)=>{Number.isInteger(parseFloat(n))&&!n.includes(".")&&a.set(l,n)}),e=this.stripComments(e),e=this.stripUnusedColorAttachments(e,s),e=this.RemoveEmptyLines(e),e=this.processArraySize(e,a),e=this.injectDefines(e,r),e}static stripUnusedColorAttachments(e,t){if(t.stripUnusedColorAttachments){const s=new Map;if(e.match(Lv)?.forEach(a=>{const n=parseInt(a.charAt(a.length-1),10);s.set(n,(s.get(n)??0)+1)}),Array.from(s.values()).some(a=>a===1)){const a=e.split(`
`),n=[];for(let l=0;l<a.length;l++){const h=a[l].match(Lv);if(h){const c=parseInt(h[0].charAt(h[0].length-1),10);if(c>0&&s.get(c)===1)continue}n.push(a[l])}e=n.join(`
`)}}return e}static stripComments(e){return e.replace(/\/\*[\s\S]*?\*\/|([^\\:]|^)\/\/.*$/gm,"$1")}static processArraySize(e,t){return e!==null&&t.forEach((s,i)=>{e=e.replace(new RegExp(`\\[${i}\\]`,"g"),`[${s}]`)}),e}static injectDefines(e,t){if(e!==null&&t.size>0){const s=e.split(`
`);t.forEach((i,r)=>{const a=new RegExp(r,"g");for(let n=0;n<s.length;n++)s[n].includes("#")||(s[n]=s[n].replace(a,i))}),e=s.join(`
`)}return e}static RemoveEmptyLines(e){return e!==null&&(e=e.split(/\r?\n/).map(t=>t.trim()===""?"":t).join(`
`),e=e.replace(/(\n\n){3,}/g,`

`)),e}static _preprocess(e,t=new Map,s,i,r){const a=e,n=[];let l=!1,h;for(;(h=cs.exec(e))!==null&&!l;){const c=h[1];switch(c){case"define":{kf.lastIndex=h.index;const d=kf.exec(e);l||=d===null;const f=d[1];Pv.lastIndex=d.index;const p=Pv.exec(f)[0];let m=f.substring(p.length).trim();m===""&&(m="true");const _=ht._keep(n);let g=r;if(_){const y=p.startsWith("{")&&p.endsWith("}");y&&(g=!0),y?s.set(p,m):t.set(p,m),g&&(e=e.substring(0,d.index-1)+e.substring(kf.lastIndex),cs.lastIndex=d.index-1)}g||(cs.lastIndex=d.index+d[0].length);break}case"undef":{Uf.lastIndex=h.index;const d=Uf.exec(e),f=d[1].trim();ht._keep(n)&&(t.delete(f),r&&(e=e.substring(0,d.index-1)+e.substring(Uf.lastIndex),cs.lastIndex=d.index-1)),r||(cs.lastIndex=d.index+d[0].length);break}case"extension":{Cv.lastIndex=h.index;const d=Cv.exec(e);if(l||=d===null,d){const f=d[1];ht._keep(n)&&t.set(f,"true")}cs.lastIndex=d.index+d[0].length;break}case"ifdef":case"ifndef":case"if":{Bf.lastIndex=h.index;const d=Bf.exec(e),f=d[2],u=ht.evaluate(f,t);l||=u.error;let p=u.result;c==="ifndef"&&(p=!p),n.push({anyKeep:p,keep:p,start:h.index,end:Bf.lastIndex}),cs.lastIndex=d.index+d[0].length;break}case"endif":case"else":case"elif":{Vf.lastIndex=h.index;const d=Vf.exec(e),f=n.pop();if(!f){console.error(`Shader preprocessing encountered "#${d[1]}" without a preceding #if #ifdef #ifndef while preprocessing ${ht.sourceName} on line:
 ${e.substring(h.index,h.index+100)}...`,{source:a}),l=!0;continue}const u=f.keep?e.substring(f.end,h.index):"";e=e.substring(0,f.start)+u+e.substring(Vf.lastIndex),cs.lastIndex=f.start+u.length;const p=d[1];if(p==="else"||p==="elif"){let m=!1;if(!f.anyKeep)if(p==="else")m=!f.keep;else{const _=ht.evaluate(d[2],t);m=_.result,l||=_.error}n.push({anyKeep:f.anyKeep||m,keep:m,start:cs.lastIndex,end:cs.lastIndex})}break}case"include":{zf.lastIndex=h.index;const d=zf.exec(e);if(l||=d===null,!d){l=!0;continue}const f=d[1].trim(),u=d[2]?.trim();if(ht._keep(n)){let m=i?.get(f);if(m!==void 0){if(m=this.stripComments(m),u){const _=t.get(u),g=parseFloat(_);if(Number.isInteger(g)){let y="";for(let A=0;A<g;A++)y+=m.replace(wI,String(A));m=y}else console.error(`Include Count identifier "${u}" not resolved while preprocessing ${ht.sourceName} on line:
 ${e.substring(h.index,h.index+100)}...`,{originalSource:a,source:e}),l=!0}e=e.substring(0,d.index-1)+m+e.substring(zf.lastIndex),cs.lastIndex=d.index-1}else{console.error(`Include "${f}" not resolved while preprocessing ${ht.sourceName}`,{originalSource:a,source:e}),l=!0;continue}}break}}}return n.length>0&&(console.error(`Shader preprocessing reached the end of the file without encountering the necessary #endif to close a preceding #if, #ifdef, or #ifndef block. ${ht.sourceName}`),l=!0),l?(console.error("Failed to preprocess shader: ",{source:a}),null):e}static _keep(e){for(let t=0;t<e.length;t++)if(!e[t].keep)return!1;return!0}static evaluateAtomicExpression(e,t){let s=!1;e=e.trim();let i=!1;if(e==="true")return{result:!0,error:s};if(e==="false")return{result:!1,error:s};const r=TI.exec(e);if(r){i=r[1]==="!",e=r[2].trim();const l=t.has(e);return{result:i?!l:l,error:s}}const a=AI.exec(e);if(a){const l=t.get(a[1].trim())??a[1].trim(),h=t.get(a[3].trim())??a[3].trim(),c=a[2].trim();let d=!1;switch(c){case"==":d=l===h;break;case"!=":d=l!==h;break;case"<":d=l<h;break;case"<=":d=l<=h;break;case">":d=l>h;break;case">=":d=l>=h;break;default:s=!0}return{result:d,error:s}}return{result:t.has(e),error:s}}static processParentheses(e,t){let s=!1,i=e.trim();for(;i.startsWith("(")&&i.endsWith(")");){let r=0,a=!0;for(let n=0;n<i.length-1;n++)if(i[n]==="(")r++;else if(i[n]===")"&&(r--,r===0)){a=!1;break}if(a)i=i.slice(1,-1).trim();else break}for(;;){let r=!1,a=0,n=0,l=-1,h=-1,c=0;for(let p=0;p<i.length;p++)if(i[p]==="("){const m=i.substring(0,p);EI.test(m)?c++:c===0&&(a++,a>n&&(n=a,l=p),r=!0)}else i[p]===")"&&(c>0?c--:a>0&&(a===n&&l!==-1&&(h=p),a--));if(!r||l===-1||h===-1)break;const d=i.substring(l+1,h),{result:f,error:u}=ht.evaluate(d,t);s=s||u,i=i.substring(0,l)+(f?"true":"false")+i.substring(h+1)}return{expression:i,error:s}}static evaluate(e,t){const s=bI.exec(e)===null;let i=e,r=!1;if(e.replace(xI,"").indexOf("(")!==-1){const l=ht.processParentheses(e,t);i=l.expression,r=l.error}if(r)return{result:!1,error:!0};const n=i.split("||");for(const l of n){const h=l.split("&&");let c=!0;for(const d of h){const{result:f,error:u}=ht.evaluateAtomicExpression(d.trim(),t);if(!f||u){c=!1;break}}if(c)return{result:!0,error:!s}}return{result:!1,error:!s}}}var HT=`
#ifndef outType_0
#define outType_0 vec4
#endif
layout(location = 0) out highp outType_0 pcFragColor0;
#if COLOR_ATTACHMENT_1
layout(location = 1) out highp outType_1 pcFragColor1;
#endif
#if COLOR_ATTACHMENT_2
layout(location = 2) out highp outType_2 pcFragColor2;
#endif
#if COLOR_ATTACHMENT_3
layout(location = 3) out highp outType_3 pcFragColor3;
#endif
#if COLOR_ATTACHMENT_4
layout(location = 4) out highp outType_4 pcFragColor4;
#endif
#if COLOR_ATTACHMENT_5
layout(location = 5) out highp outType_5 pcFragColor5;
#endif
#if COLOR_ATTACHMENT_6
layout(location = 6) out highp outType_6 pcFragColor6;
#endif
#if COLOR_ATTACHMENT_7
layout(location = 7) out highp outType_7 pcFragColor7;
#endif
#define gl_FragColor pcFragColor0
#define varying in
#define texture2D texture
#define texture2DBias texture
#define textureCube texture
#define texture2DProj textureProj
#define texture2DLod textureLod
#define texture2DProjLod textureProjLod
#define textureCubeLod textureLod
#define texture2DGrad textureGrad
#define texture2DProjGrad textureProjGrad
#define textureCubeGrad textureGrad
#define utexture2D texture
#define itexture2D texture
#define texture2DLodEXT texture2DLodEXT_is_no_longer_supported_use_texture2DLod_instead
#define texture2DProjLodEXT texture2DProjLodEXT_is_no_longer_supported_use_texture2DProjLod
#define textureCubeLodEXT textureCubeLodEXT_is_no_longer_supported_use_textureCubeLod_instead
#define texture2DGradEXT texture2DGradEXT_is_no_longer_supported_use_texture2DGrad_instead
#define texture2DProjGradEXT texture2DProjGradEXT_is_no_longer_supported_use_texture2DProjGrad_instead
#define textureCubeGradEXT textureCubeGradEXT_is_no_longer_supported_use_textureCubeGrad_instead
#define textureShadow(res, uv) textureGrad(res, uv, vec2(1, 1), vec2(1, 1))
#define SHADOWMAP_PASS(name) name
#define SHADOWMAP_ACCEPT(name) sampler2DShadow name
#define TEXTURE_PASS(name) name
#define TEXTURE_ACCEPT(name) sampler2D name
#define TEXTURE_ACCEPT_HIGHP(name) highp sampler2D name
#define GL2
`,GT=`
#define attribute in
#define varying out
#define texture2D texture
#define utexture2D texture
#define itexture2D texture
#define GL2
#define VERTEXSHADER
#define TEXTURE_PASS(name) name
#define TEXTURE_ACCEPT(name) sampler2D name
#define TEXTURE_ACCEPT_HIGHP(name) highp sampler2D name
`,WT=`
#extension GL_EXT_samplerless_texture_functions : require
#ifndef outType_0
#define outType_0 vec4
#endif
#ifndef outType_1
#define outType_1 vec4
#endif
#ifndef outType_2
#define outType_2 vec4
#endif
#ifndef outType_3
#define outType_3 vec4
#endif
#ifndef outType_4
#define outType_4 vec4
#endif
#ifndef outType_5
#define outType_5 vec4
#endif
#ifndef outType_6
#define outType_6 vec4
#endif
#ifndef outType_7
#define outType_7 vec4
#endif
layout(location = 0) out highp outType_0 pcFragColor0;
layout(location = 1) out highp outType_1 pcFragColor1;
layout(location = 2) out highp outType_2 pcFragColor2;
layout(location = 3) out highp outType_3 pcFragColor3;
layout(location = 4) out highp outType_4 pcFragColor4;
layout(location = 5) out highp outType_5 pcFragColor5;
layout(location = 6) out highp outType_6 pcFragColor6;
layout(location = 7) out highp outType_7 pcFragColor7;
#define gl_FragColor pcFragColor0
#define texture2D(res, uv) texture(sampler2D(res, res ## _sampler), uv)
#define texture2DBias(res, uv, bias) texture(sampler2D(res, res ## _sampler), uv, bias)
#define texture2DLod(res, uv, lod) textureLod(sampler2D(res, res ## _sampler), uv, lod)
#define textureCube(res, uv) texture(samplerCube(res, res ## _sampler), uv)
#define textureCubeLod(res, uv, lod) textureLod(samplerCube(res, res ## _sampler), uv, lod)
#define textureShadow(res, uv) textureLod(sampler2DShadow(res, res ## _sampler), uv, 0.0)
#define itexture2D(res, uv) texture(isampler2D(res, res ## _sampler), uv)
#define utexture2D(res, uv) texture(usampler2D(res, res ## _sampler), uv)
#define texture2DLodEXT texture2DLodEXT_is_no_longer_supported_use_texture2DLod_instead
#define texture2DProjLodEXT texture2DProjLodEXT_is_no_longer_supported_use_texture2DProjLod
#define textureCubeLodEXT textureCubeLodEXT_is_no_longer_supported_use_textureCubeLod_instead
#define texture2DGradEXT texture2DGradEXT_is_no_longer_supported_use_texture2DGrad_instead
#define texture2DProjGradEXT texture2DProjGradEXT_is_no_longer_supported_use_texture2DProjGrad_instead
#define textureCubeGradEXT textureCubeGradEXT_is_no_longer_supported_use_textureCubeGrad_instead
#define SHADOWMAP_PASS(name) name, name ## _sampler
#define SHADOWMAP_ACCEPT(name) texture2D name, sampler name ## _sampler
#define TEXTURE_PASS(name) name, name ## _sampler
#define TEXTURE_ACCEPT(name) texture2D name, sampler name ## _sampler
#define TEXTURE_ACCEPT_HIGHP TEXTURE_ACCEPT
#define GL2
#define WEBGPU
`,$T=`
#extension GL_EXT_samplerless_texture_functions : require
#define texture2D(res, uv) texture(sampler2D(res, res ## _sampler), uv)
#define itexture2D(res, uv) texture(isampler2D(res, res ## _sampler), uv)
#define utexture2D(res, uv) texture(usampler2D(res, res ## _sampler), uv)
#define TEXTURE_PASS(name) name, name ## _sampler
#define TEXTURE_ACCEPT(name) texture2D name, sampler name ## _sampler
#define TEXTURE_ACCEPT_HIGHP TEXTURE_ACCEPT
#define GL2
#define WEBGPU
#define VERTEXSHADER
#define gl_VertexID gl_VertexIndex
#define gl_InstanceID gl_InstanceIndex
`,XT=`
`,qT=`
#define VERTEXSHADER
`,Iv=`
vec2 getGrabScreenPos(vec4 clipPos) {
	vec2 uv = (clipPos.xy / clipPos.w) * 0.5 + 0.5;
	#ifdef WEBGPU
		uv.y = 1.0 - uv.y;
	#endif
	return uv;
}
vec2 getImageEffectUV(vec2 uv) {
	#ifdef WEBGPU
		uv.y = 1.0 - uv.y;
	#endif
	return uv;
}
`,Mv=`
fn getGrabScreenPos(clipPos: vec4<f32>) -> vec2<f32> {
	var uv: vec2<f32> = (clipPos.xy / clipPos.w) * 0.5 + vec2<f32>(0.5);
	uv.y = 1.0 - uv.y;
	return uv;
}
fn getImageEffectUV(uv: vec2<f32>) -> vec2<f32> {
	var modifiedUV: vec2<f32> = uv;
	modifiedUV.y = 1.0 - modifiedUV.y;
	return modifiedUV;
}
struct WrappedF32 { @size(16) element: f32 }
struct WrappedI32 { @size(16) element: i32 }
struct WrappedU32 { @size(16) element: u32 }
struct WrappedVec2F { @size(16) element: vec2f }
struct WrappedVec2I { @size(16) element: vec2i }
struct WrappedVec2U { @size(16) element: vec2u }
`;const CI={vertex_position:ue,vertex_normal:Ht,vertex_tangent:ei,vertex_texCoord0:as,vertex_texCoord1:ba,vertex_texCoord2:Nl,vertex_texCoord3:Fl,vertex_texCoord4:kl,vertex_texCoord5:Ul,vertex_texCoord6:Bl,vertex_texCoord7:Vl,vertex_color:gt,vertex_boneIndices:Ft,vertex_boneWeights:Qs};class Et{static createDefinition(e,t){const s=f=>{let u=f.fragmentOutputTypes??"vec4";return Array.isArray(u)||(u=[u]),u},i=(f,u,p,m)=>{const _=e.isWebGPU?f:u;let g="";if(!p){const y=s(m);for(let A=0;A<e.maxColorAttachments;A++){g+=`#define COLOR_ATTACHMENT_${A}
`;const v=y[A]??"vec4";g+=`#define outType_${A} ${v}
`}}return g+_},r=(f,u)=>{let p="";if(!f){const m=s(u);for(let _=0;_<e.maxColorAttachments;_++){const g=m[_]??"vec4",y=FT.get(g);p+=`alias pcOutType${_} = ${y};
`}}return p},a=t.name??"Untitled";let n,l;const h=Et.getDefinesCode(e,t.vertexDefines),c=Et.getDefinesCode(e,t.fragmentDefines);return t.shaderLanguage===Be?(n=`
								${r(!0,t)}
								${qT}
								${Mv}
								${h}
								${t.vertexCode}
						`,l=`
								${r(!1,t)}
								${XT}
								${Mv}
								${c}
								${t.fragmentCode}
						`):(n=`${Et.versionCode(e)+i($T,GT,!0,t)+h+Et.precisionCode(e)}
								${Iv}
								${Et.getShaderNameCode(a)}
								${t.vertexCode}`,l=`${(t.fragmentPreamble||"")+Et.versionCode(e)+i(WT,HT,!1,t)+c+Et.precisionCode(e)}
								${Iv}
								${Et.getShaderNameCode(a)}
								${t.fragmentCode}`),{name:a,shaderLanguage:t.shaderLanguage??Ee,attributes:t.attributes,vshader:n,vincludes:t.vertexIncludes,fincludes:t.fragmentIncludes,fshader:l,useTransformFeedback:t.useTransformFeedback,meshUniformBufferFormat:t.meshUniformBufferFormat,meshBindGroupFormat:t.meshBindGroupFormat}}static getDefinesCode(e,t){let s="";return e.capsDefines.forEach((i,r)=>{s+=`#define ${r} ${i}
`}),s+=`
`,t?.forEach((i,r)=>{s+=`#define ${r} ${i}
`}),s+=`
`,s}static getShaderNameCode(e){return`#define SHADER_NAME ${e}
`}static versionCode(e){return e.isWebGPU?`#version 450
`:`#version 300 es
`}static precisionCode(e,t){t&&t!=="highp"&&t!=="mediump"&&t!=="lowp"&&(t=null),t&&(t==="highp"&&e.maxPrecision!=="highp"&&(t="mediump"),t==="mediump"&&e.maxPrecision==="lowp"&&(t="lowp"));const s=t||e.precision;return`
						precision ${s} float;
						precision ${s} int;
						precision ${s} usampler2D;
						precision ${s} isampler2D;
						precision ${s} sampler2DShadow;
						precision ${s} samplerCubeShadow;
						precision ${s} sampler2DArray;
				`}static collectAttributes(e){const t={};let s=0,i=e.indexOf("attribute");for(;i>=0&&!(i>0&&e[i-1]==="/");){let r=!1;if(i>0){let a=e.lastIndexOf(`
`,i);a=a!==-1?a+1:0,e.substring(a,i).includes("#")&&(r=!0)}if(!r){const a=e.indexOf(";",i),n=e.lastIndexOf(" ",a),l=e.substring(n+1,a);if(!t[l]){const h=CI[l];h!==void 0?t[l]=h:(t[l]=`ATTR${s}`,s++)}}i=e.indexOf("attribute",i+1)}return t}}let PI=0;class YT{constructor(e,t){if(this.attributes=new Map,this.id=PI++,this.device=e,this.definition=t,this.name=t.name||"Untitled",this.init(),t.cshader)t.cshader=ht.run(t.cshader,t.cincludes,{sourceName:`compute shader for ${this.label}`,stripDefines:!0});else{const s=t.shaderLanguage===Be;t.vshader=ht.run(t.vshader,t.vincludes,{sourceName:`vertex shader for ${this.label}`,stripDefines:s}),t.shaderLanguage===Ee&&(t.attributes??=Et.collectAttributes(t.vshader));const i=e.isWebGL2&&(Se.name==="osx"||Se.name==="ios");if(t.fshader=ht.run(t.fshader,t.fincludes,{stripUnusedColorAttachments:i,stripDefines:s,sourceName:`fragment shader for ${this.label}`}),!t.vshader||!t.fshader){this.failed=!0;return}}this.impl=e.createShaderImpl(this)}init(){this.ready=!1,this.failed=!1}get label(){return`Shader Id ${this.id} (${this.definition.shaderLanguage===Be?"WGSL":"GLSL"}) ${this.name}`}destroy(){this.device.onDestroyShader(this),this.impl.destroy(this)}loseContext(){this.init(),this.impl.loseContext()}restoreContext(){this.impl.restoreContext(this.device,this)}}class LI{}const Te=[];Te[Ss]=function(o,e,t){const s=o.storageFloat32;s[t]=e};Te[fa]=(o,e,t)=>{const s=o.storageFloat32;s[t]=e[0],s[t+1]=e[1]};Te[Ot]=(o,e,t)=>{const s=o.storageFloat32;s[t]=e[0],s[t+1]=e[1],s[t+2]=e[2]};Te[Yn]=(o,e,t)=>{const s=o.storageFloat32;s[t]=e[0],s[t+1]=e[1],s[t+2]=e[2],s[t+3]=e[3]};Te[da]=function(o,e,t){const s=o.storageInt32;s[t]=e};Te[Qr]=function(o,e,t){const s=o.storageInt32;s[t]=e[0],s[t+1]=e[1]};Te[Jr]=function(o,e,t){const s=o.storageInt32;s[t]=e[0],s[t+1]=e[1],s[t+2]=e[2]};Te[ea]=function(o,e,t){const s=o.storageInt32;s[t]=e[0],s[t+1]=e[1],s[t+2]=e[2],s[t+3]=e[3]};Te[wc]=(o,e,t)=>{const s=o.storageFloat32;s[t]=e[0],s[t+1]=e[1],s[t+4]=e[2],s[t+5]=e[3],s[t+8]=e[4],s[t+9]=e[5]};Te[jn]=(o,e,t)=>{const s=o.storageFloat32;s[t]=e[0],s[t+1]=e[1],s[t+2]=e[2],s[t+4]=e[3],s[t+5]=e[4],s[t+6]=e[5],s[t+8]=e[6],s[t+9]=e[7],s[t+10]=e[8]};Te[$d]=function(o,e,t,s){const i=o.storageFloat32;for(let r=0;r<s;r++)i[t+r*4]=e[r]};Te[Xd]=(o,e,t,s)=>{const i=o.storageFloat32;for(let r=0;r<s;r++)i[t+r*4]=e[r*2],i[t+r*4+1]=e[r*2+1]};Te[qd]=(o,e,t,s)=>{const i=o.storageFloat32;for(let r=0;r<s;r++)i[t+r*4]=e[r*3],i[t+r*4+1]=e[r*3+1],i[t+r*4+2]=e[r*3+2]};Te[Kn]=(o,e,t,s)=>{const i=o.storageUint32;i[t]=e};Te[Zn]=(o,e,t,s)=>{const i=o.storageUint32;i[t]=e[0],i[t+1]=e[1]};Te[Qn]=(o,e,t,s)=>{const i=o.storageUint32;i[t]=e[0],i[t+1]=e[1],i[t+2]=e[2]};Te[Jn]=(o,e,t,s)=>{const i=o.storageUint32;i[t]=e[0],i[t+1]=e[1],i[t+2]=e[2],i[t+3]=e[3]};Te[eo]=function(o,e,t,s){const i=o.storageInt32;for(let r=0;r<s;r++)i[t+r*4]=e[r]};Te[jd]=Te[eo];Te[Yd]=function(o,e,t,s){const i=o.storageUint32;for(let r=0;r<s;r++)i[t+r*4]=e[r]};Te[to]=(o,e,t,s)=>{const i=o.storageInt32;for(let r=0;r<s;r++)i[t+r*4]=e[r*2],i[t+r*4+1]=e[r*2+1]};Te[Zd]=Te[to];Te[Kd]=(o,e,t,s)=>{const i=o.storageUint32;for(let r=0;r<s;r++)i[t+r*4]=e[r*2],i[t+r*4+1]=e[r*2+1]};Te[so]=(o,e,t,s)=>{const i=o.storageInt32;for(let r=0;r<s;r++)i[t+r*4]=e[r*3],i[t+r*4+1]=e[r*3+1],i[t+r*4+2]=e[r*3+2]};Te[Jd]=Te[so];Te[Qd]=(o,e,t,s)=>{const i=o.storageUint32;for(let r=0;r<s;r++)i[t+r*4]=e[r*3],i[t+r*4+1]=e[r*3+1],i[t+r*4+2]=e[r*3+2]};class w_{constructor(e,t,s=!0){if(this.renderVersionDirty=0,this.device=e,this.format=t,this.persistent=s,s){this.impl=e.createUniformBufferImpl(this);const i=new ArrayBuffer(t.byteSize);this.assignStorage(new Int32Array(i)),e._vram.ub+=this.format.byteSize}else this.allocation=new LI}destroy(){if(this.persistent){const e=this.device;this.impl.destroy(e),e._vram.ub-=this.format.byteSize}}get offset(){return this.persistent?0:this.allocation.offset}assignStorage(e){this.storageInt32=e,this.storageUint32=new Uint32Array(e.buffer,e.byteOffset,e.byteLength/4),this.storageFloat32=new Float32Array(e.buffer,e.byteOffset,e.byteLength/4)}loseContext(){this.impl?.loseContext()}setUniform(e,t){const s=e.offset;if(t!=null){const i=Te[e.updateType];i?i(this,t,s,e.count):this.storageFloat32.set(t,s)}}set(e,t){const s=this.format.map.get(e);s&&this.setUniform(s,t)}startUpdate(e){if(!this.persistent){const t=this.allocation,s=t.gpuBuffer;this.device.dynamicBuffers.alloc(t,this.format.byteSize),this.assignStorage(t.storage),e&&(e.bindGroup=t.gpuBuffer.getBindGroup(this),e.offsets[0]=t.offset),s!==t.gpuBuffer&&(this.renderVersionDirty=this.device.renderVersion)}}endUpdate(){this.persistent?this.impl.unlock(this):(this.storageFloat32=null,this.storageInt32=null)}update(e){this.startUpdate(e);const t=this.format.uniforms;for(let s=0;s<t.length;s++){const i=t[s].scopeId.value;this.setUniform(t[s],i)}this.endUpdate()}}class II{loseContext(){this.pastFrameAllocations.clear()}set enabled(e){this._enableRequest=e}get enabled(){return this._enableRequest}processEnableRequest(){this._enableRequest!==this._enabled&&(this._enabled=this._enableRequest,this._enabled||(this._frameTime=0))}request(e){this.pastFrameAllocations.set(e,this.frameAllocations),this.frameAllocations=[]}report(e,t){if(t){const s=this.pastFrameAllocations.get(e);if(t.length>0&&(this._frameTime=t.reduce((i,r)=>i+r,0)),Gu.get(NP)){let i=0;for(let r=0;r<s.length;++r)s[r],i+=t[r]}}this.pastFrameAllocations.delete(e)}getSlot(e){const t=this.frameAllocations.length;return this.frameAllocations.push(e),t}get slotCount(){return this.frameAllocations.length}constructor(){this.frameAllocations=[],this.pastFrameAllocations=new Map,this._enabled=!1,this._enableRequest=!1,this._frameTime=0}}class jT{destroy(e){this.bufferId&&(e.gl.deleteBuffer(this.bufferId),this.bufferId=null)}get initialized(){return!!this.bufferId}loseContext(){this.bufferId=null}unlock(e,t,s,i){const r=e.gl;if(this.bufferId)r.bindBuffer(s,this.bufferId),r.bufferSubData(s,0,i);else{let a;switch(t){case Es:a=r.STATIC_DRAW;break;case Sc:a=r.DYNAMIC_DRAW;break;case hL:a=r.STREAM_DRAW;break;case cL:a=r.DYNAMIC_COPY;break}this.bufferId=r.createBuffer(),r.bindBuffer(s,this.bufferId),r.bufferData(s,i,a)}}constructor(){this.bufferId=null}}class MI extends jT{destroy(e){super.destroy(e),e.unbindVertexArray()}loseContext(){super.loseContext(),this.vao=null}unlock(e){const t=e.device;super.unlock(t,e.usage,t.gl.ARRAY_BUFFER,e.storage)}constructor(...e){super(...e),this.vao=null}}class DI extends jT{constructor(e){super();const t=e.device.gl,s=e.format;s===qu?this.glFormat=t.UNSIGNED_BYTE:s===hr?this.glFormat=t.UNSIGNED_SHORT:s===cr&&(this.glFormat=t.UNSIGNED_INT)}unlock(e){const t=e.device;super.unlock(t,e.usage,t.gl.ELEMENT_ARRAY_BUFFER,e.storage)}}class RI{constructor(e,t,s,i){if(this.locationId=i,this.scopeId=e.scope.resolve(t),this.version=new BT,t.substring(t.length-3)==="[0]")switch(s){case Ss:s=$d;break;case da:s=eo;break;case Kn:s=Yd;break;case Mn:s=jd;break;case fa:s=Xd;break;case Qr:s=to;break;case Zn:s=Kd;break;case ul:s=Zd;break;case Ot:s=qd;break;case Jr:s=so;break;case Qn:s=Qd;break;case pl:s=Jd;break;case Yn:s=S_;break;case ea:s=Cc;break;case Jn:s=y_;break;case ml:s=T_;break}this.dataType=s,this.value=[null,null,null,null],this.array=[]}}const OI=new Set(["gl_VertexID","gl_InstanceID","gl_DrawID","gl_BaseVertex","gl_BaseInstance"]);class NI{destroy(e){this.map.forEach(t=>{e.gl.deleteShader(t)})}loseContext(e){this.map.clear()}constructor(){this.map=new Map}}const FI=new Tt,kI=new Tt;class UI{constructor(e){this.compileDuration=0,this.init(),this.compile(e.device,e),this.link(e.device,e),e.device.shaders.push(e)}destroy(e){this.glProgram&&(e.device.gl.deleteProgram(this.glProgram),this.glProgram=null)}init(){this.uniforms=[],this.samplers=[],this.attributes=[],this.glProgram=null,this.glVertexShader=null,this.glFragmentShader=null}loseContext(){this.init()}restoreContext(e,t){this.compile(e,t),this.link(e,t)}compile(e,t){const s=t.definition;this.glVertexShader=this._compileShaderSource(e,s.vshader,!0),this.glFragmentShader=this._compileShaderSource(e,s.fshader,!1)}link(e,t){if(this.glProgram)return;const s=e.gl;if(s.isContextLost())return;const i=s.createProgram();this.glProgram=i,s.attachShader(i,this.glVertexShader),s.attachShader(i,this.glFragmentShader);const r=t.definition,a=r.attributes;if(r.useTransformFeedback){const n=[];for(const l in a)a.hasOwnProperty(l)&&n.push(`out_${l}`);s.transformFeedbackVaryings(i,n,s.INTERLEAVED_ATTRIBS)}for(const n in a)if(a.hasOwnProperty(n)){const l=a[n],h=ge[l];s.bindAttribLocation(i,h,n)}s.linkProgram(i)}_compileShaderSource(e,t,s){const i=e.gl;if(i.isContextLost())return null;const a=(s?FI:kI).get(e,()=>new NI);let n=a.map.get(t);return n||(n=i.createShader(s?i.VERTEX_SHADER:i.FRAGMENT_SHADER),i.shaderSource(n,t),i.compileShader(n),a.map.set(t,n)),n}finalize(e,t){const s=e.gl;if(s.isContextLost())return!0;const i=this.glProgram,r=t.definition;if(!s.getProgramParameter(i,s.LINK_STATUS)){if(!this._isCompiled(e,t,this.glVertexShader,r.vshader,"vertex")||!this._isCompiled(e,t,this.glFragmentShader,r.fshader,"fragment"))return!1;const c=`Failed to link shader program. Error: ${s.getProgramInfoLog(i)}`;return console.error(c),!1}const n=s.getProgramParameter(i,s.ACTIVE_ATTRIBUTES);t.attributes.clear();for(let c=0;c<n;c++){const d=s.getActiveAttrib(i,c),f=s.getAttribLocation(i,d.name);OI.has(d.name)||(r.attributes[d.name]===void 0?(console.error(`Vertex shader attribute "${d.name}" is not mapped to a semantic in shader definition, shader [${t.label}]`,t),t.failed=!0):t.attributes.set(f,d.name))}const l=e._samplerTypes,h=s.getProgramParameter(i,s.ACTIVE_UNIFORMS);for(let c=0;c<h;c++){const d=s.getActiveUniform(i,c),f=s.getUniformLocation(i,d.name),u=new RI(e,d.name,e.pcUniformType[d.type],f);l.has(d.type)?this.samplers.push(u):this.uniforms.push(u)}return t.ready=!0,!0}_isCompiled(e,t,s,i,r){const a=e.gl;if(!a.getShaderParameter(s,a.COMPILE_STATUS)){const n=a.getShaderInfoLog(s),[l,h]=this._processError(i,n),c=`Failed to compile ${r} shader:

${n}
${l} while rendering undefined`;return console.error(c),!1}return!0}isLinked(e){const{extParallelShaderCompile:t}=e;return t?e.gl.getProgramParameter(this.glProgram,t.COMPLETION_STATUS_KHR):!0}_processError(e,t){const s={};let i="";if(e){const r=e.split(`
`);let a=0,n=r.length;if(t&&t.startsWith("ERROR:")){const l=t.match(/^ERROR:\s(\d+):(\d+):\s*(.+)/);l&&(s.message=l[3],s.line=parseInt(l[2],10),a=Math.max(0,s.line-6),n=Math.min(r.length,s.line+5))}for(let l=a;l<n;l++){const h=l+1===s.line?"> ":"  ";i+=`${h}${l+1}:	${r[l]}
`}s.source=e}return[i,s]}}function Dv(o,e){const t=o.width,s=o.height;if(t>e||s>e){const i=e/Math.max(t,s),r=Math.floor(t*i),a=Math.floor(s*i),n=document.createElement("canvas");return n.width=r,n.height=a,n.getContext("2d").drawImage(o,0,0,t,s,0,0,r,a),n}return o}class BI{constructor(e){this._glTexture=null,this.dirtyParameterFlags=0,this.texture=e}destroy(e){if(this._glTexture){for(let t=0;t<e.textureUnits.length;t++){const s=e.textureUnits[t];for(let i=0;i<s.length;i++)s[i]===this._glTexture&&(s[i]=null)}e.gl.deleteTexture(this._glTexture),this._glTexture=null}}loseContext(){this._glTexture=null}propertyChanged(e){this.dirtyParameterFlags|=e}initialize(e,t){const s=e.gl;switch(this._glTexture=s.createTexture(),this._glTarget=t._cubemap?s.TEXTURE_CUBE_MAP:t._volume?s.TEXTURE_3D:t.array?s.TEXTURE_2D_ARRAY:s.TEXTURE_2D,t._format){case aT:this._glFormat=s.ALPHA,this._glInternalFormat=s.ALPHA,this._glPixelType=s.UNSIGNED_BYTE;break;case nT:this._glFormat=s.LUMINANCE,this._glInternalFormat=s.LUMINANCE,this._glPixelType=s.UNSIGNED_BYTE;break;case Gm:this._glFormat=s.LUMINANCE_ALPHA,this._glInternalFormat=s.LUMINANCE_ALPHA,this._glPixelType=s.UNSIGNED_BYTE;break;case h_:this._glFormat=s.RED,this._glInternalFormat=s.R8,this._glPixelType=s.UNSIGNED_BYTE;break;case c_:this._glFormat=s.RG,this._glInternalFormat=s.RG8,this._glPixelType=s.UNSIGNED_BYTE;break;case Ld:this._glFormat=s.RGB,this._glInternalFormat=s.RGB565,this._glPixelType=s.UNSIGNED_SHORT_5_6_5;break;case Wm:this._glFormat=s.RGBA,this._glInternalFormat=s.RGB5_A1,this._glPixelType=s.UNSIGNED_SHORT_5_5_5_1;break;case Id:this._glFormat=s.RGBA,this._glInternalFormat=s.RGBA4,this._glPixelType=s.UNSIGNED_SHORT_4_4_4_4;break;case _r:this._glFormat=s.RGB,this._glInternalFormat=s.RGB8,this._glPixelType=s.UNSIGNED_BYTE;break;case Ae:this._glFormat=s.RGBA,this._glInternalFormat=s.RGBA8,this._glPixelType=s.UNSIGNED_BYTE;break;case cT:case pT:break;case Md:this._glFormat=s.RGB,this._glInternalFormat=e.extCompressedTextureS3TC.COMPRESSED_RGB_S3TC_DXT1_EXT;break;case $m:this._glFormat=s.RGBA,this._glInternalFormat=e.extCompressedTextureS3TC.COMPRESSED_RGBA_S3TC_DXT3_EXT;break;case Ml:this._glFormat=s.RGBA,this._glInternalFormat=e.extCompressedTextureS3TC.COMPRESSED_RGBA_S3TC_DXT5_EXT;break;case Od:this._glFormat=s.RGB,this._glInternalFormat=e.extCompressedTextureETC1.COMPRESSED_RGB_ETC1_WEBGL;break;case Dl:this._glFormat=s.RGB,this._glInternalFormat=e.extCompressedTexturePVRTC.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;break;case Rl:this._glFormat=s.RGBA,this._glInternalFormat=e.extCompressedTexturePVRTC.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG;break;case Nd:this._glFormat=s.RGB,this._glInternalFormat=e.extCompressedTexturePVRTC.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;break;case Fd:this._glFormat=s.RGBA,this._glInternalFormat=e.extCompressedTexturePVRTC.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;break;case Ym:this._glFormat=s.RGB,this._glInternalFormat=e.extCompressedTextureETC.COMPRESSED_RGB8_ETC2;break;case jm:this._glFormat=s.RGBA,this._glInternalFormat=e.extCompressedTextureETC.COMPRESSED_RGBA8_ETC2_EAC;break;case oT:this._glFormat=s.RGBA,this._glInternalFormat=e.extCompressedTextureASTC.COMPRESSED_RGBA_ASTC_4x4_KHR;break;case lT:this._glFormat=s.RGB,this._glInternalFormat=e.extCompressedTextureATC.COMPRESSED_RGB_ATC_WEBGL;break;case hT:this._glFormat=s.RGBA,this._glInternalFormat=e.extCompressedTextureATC.COMPRESSED_RGBA_ATC_INTERPOLATED_ALPHA_WEBGL;break;case mT:this._glFormat=s.RGB,this._glInternalFormat=e.extTextureCompressionBPTC.COMPRESSED_RGB_BPTC_SIGNED_FLOAT_EXT;break;case _T:this._glFormat=s.RGB,this._glInternalFormat=e.extTextureCompressionBPTC.COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_EXT;break;case gT:this._glFormat=s.RGBA,this._glInternalFormat=e.extTextureCompressionBPTC.COMPRESSED_RGBA_BPTC_UNORM_EXT;break;case Yu:this._glFormat=s.SRGB,this._glInternalFormat=e.extCompressedTextureS3TC_SRGB.COMPRESSED_SRGB_S3TC_DXT1_EXT;break;case ju:this._glFormat=s.SRGB_ALPHA,this._glInternalFormat=e.extCompressedTextureS3TC_SRGB.COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT;break;case Ku:this._glFormat=s.SRGB_ALPHA,this._glInternalFormat=e.extCompressedTextureS3TC_SRGB.COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT;break;case Zu:this._glFormat=s.SRGB,this._glInternalFormat=e.extCompressedTextureETC.COMPRESSED_SRGB8_ETC2;break;case Qu:this._glFormat=s.SRGB_ALPHA,this._glInternalFormat=e.extCompressedTextureETC.COMPRESSED_SRGB8_ALPHA8_ETC2_EAC;break;case Ju:this._glFormat=s.SRGB_ALPHA,this._glInternalFormat=e.extCompressedTextureASTC.COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR;break;case ep:this._glFormat=s.RGBA,this._glInternalFormat=e.extTextureCompressionBPTC.COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT;break;case Ud:this._glFormat=s.RED,this._glInternalFormat=s.R16F,this._glPixelType=s.HALF_FLOAT;break;case l_:this._glFormat=s.RG,this._glInternalFormat=s.RG16F,this._glPixelType=s.HALF_FLOAT;break;case Dd:this._glFormat=s.RGB,this._glInternalFormat=s.RGB16F,this._glPixelType=s.HALF_FLOAT;break;case et:this._glFormat=s.RGBA,this._glInternalFormat=s.RGBA16F,this._glPixelType=s.HALF_FLOAT;break;case Xm:this._glFormat=s.RGB,this._glInternalFormat=s.RGB32F,this._glPixelType=s.FLOAT;break;case ft:this._glFormat=s.RGBA,this._glInternalFormat=s.RGBA32F,this._glPixelType=s.FLOAT;break;case Oi:this._glFormat=s.RED,this._glInternalFormat=s.R32F,this._glPixelType=s.FLOAT;break;case wi:this._glFormat=s.DEPTH_COMPONENT,this._glInternalFormat=s.DEPTH_COMPONENT32F,this._glPixelType=s.FLOAT;break;case Ln:this._glFormat=s.DEPTH_COMPONENT,this._glInternalFormat=s.DEPTH_COMPONENT16,this._glPixelType=s.UNSIGNED_SHORT;break;case Rd:this._glFormat=s.DEPTH_STENCIL,this._glInternalFormat=s.DEPTH24_STENCIL8,this._glPixelType=s.UNSIGNED_INT_24_8;break;case Xn:this._glFormat=s.RGB,this._glInternalFormat=s.R11F_G11F_B10F,this._glPixelType=s.UNSIGNED_INT_10F_11F_11F_REV;break;case qm:this._glFormat=s.RGB,this._glInternalFormat=s.SRGB8,this._glPixelType=s.UNSIGNED_BYTE;break;case zt:this._glFormat=s.RGBA,this._glInternalFormat=s.SRGB8_ALPHA8,this._glPixelType=s.UNSIGNED_BYTE;break;case Km:this._glFormat=s.RED_INTEGER,this._glInternalFormat=s.R8I,this._glPixelType=s.BYTE;break;case dT:this._glFormat=s.RED_INTEGER,this._glInternalFormat=s.R8UI,this._glPixelType=s.UNSIGNED_BYTE;break;case Zm:this._glFormat=s.RED_INTEGER,this._glInternalFormat=s.R16I,this._glPixelType=s.SHORT;break;case Qm:this._glFormat=s.RED_INTEGER,this._glInternalFormat=s.R16UI,this._glPixelType=s.UNSIGNED_SHORT;break;case Jm:this._glFormat=s.RED_INTEGER,this._glInternalFormat=s.R32I,this._glPixelType=s.INT;break;case Ol:this._glFormat=s.RED_INTEGER,this._glInternalFormat=s.R32UI,this._glPixelType=s.UNSIGNED_INT;break;case e_:this._glFormat=s.RG_INTEGER,this._glInternalFormat=s.RG8I,this._glPixelType=s.BYTE;break;case fT:this._glFormat=s.RG_INTEGER,this._glInternalFormat=s.RG8UI,this._glPixelType=s.UNSIGNED_BYTE;break;case t_:this._glFormat=s.RG_INTEGER,this._glInternalFormat=s.RG16I,this._glPixelType=s.SHORT;break;case s_:this._glFormat=s.RG_INTEGER,this._glInternalFormat=s.RG16UI,this._glPixelType=s.UNSIGNED_SHORT;break;case i_:this._glFormat=s.RG_INTEGER,this._glInternalFormat=s.RG32I,this._glPixelType=s.INT;break;case r_:this._glFormat=s.RG_INTEGER,this._glInternalFormat=s.RG32UI,this._glPixelType=s.UNSIGNED_INT;break;case a_:this._glFormat=s.RGBA_INTEGER,this._glInternalFormat=s.RGBA8I,this._glPixelType=s.BYTE;break;case uT:this._glFormat=s.RGBA_INTEGER,this._glInternalFormat=s.RGBA8UI,this._glPixelType=s.UNSIGNED_BYTE;break;case n_:this._glFormat=s.RGBA_INTEGER,this._glInternalFormat=s.RGBA16I,this._glPixelType=s.SHORT;break;case kd:this._glFormat=s.RGBA_INTEGER,this._glInternalFormat=s.RGBA16UI,this._glPixelType=s.UNSIGNED_SHORT;break;case o_:this._glFormat=s.RGBA_INTEGER,this._glInternalFormat=s.RGBA32I,this._glPixelType=s.INT;break;case Nt:this._glFormat=s.RGBA_INTEGER,this._glInternalFormat=s.RGBA32UI,this._glPixelType=s.UNSIGNED_INT;break}this._glCreated=!1}upload(e,t){const s=e.gl;if(!t._needsUpload&&(t._needsMipmapsUpload&&t._mipmapsUploaded||!t.pot))return;let i=0,r,a;const n=t.numLevels;for(t.array&&s.texStorage3D(s.TEXTURE_2D_ARRAY,n,this._glInternalFormat,t._width,t._height,t._arrayLength);t._levels[i]||i===0;){if(!t._needsUpload&&i===0){i++;continue}else if(i&&(!t._needsMipmapsUpload||!t._mipmaps))break;if(r=t._levels[i],a=1/Math.pow(2,i),i===1&&!t._compressed&&!t._integerFormat&&t._levels.length<n&&(s.generateMipmap(this._glTarget),t._mipmapsUploaded=!0),t._cubemap){let l;if(e._isBrowserInterface(r[0]))for(l=0;l<6;l++){if(!t._levelsUpdated[0][l])continue;let h=r[l];e._isImageBrowserInterface(h)&&(h.width>e.maxCubeMapSize||h.height>e.maxCubeMapSize)&&(h=Dv(h,e.maxCubeMapSize),i===0&&(t._width=h.width,t._height=h.height)),e.setUnpackFlipY(!1),e.setUnpackPremultiplyAlpha(t._premultiplyAlpha),this._glCreated?s.texSubImage2D(s.TEXTURE_CUBE_MAP_POSITIVE_X+l,i,0,0,this._glFormat,this._glPixelType,h):s.texImage2D(s.TEXTURE_CUBE_MAP_POSITIVE_X+l,i,this._glInternalFormat,this._glFormat,this._glPixelType,h)}else for(a=1/Math.pow(2,i),l=0;l<6;l++){if(!t._levelsUpdated[0][l])continue;const h=r[l];t._compressed?this._glCreated&&h?s.compressedTexSubImage2D(s.TEXTURE_CUBE_MAP_POSITIVE_X+l,i,0,0,Math.max(t._width*a,1),Math.max(t._height*a,1),this._glInternalFormat,h):s.compressedTexImage2D(s.TEXTURE_CUBE_MAP_POSITIVE_X+l,i,this._glInternalFormat,Math.max(t._width*a,1),Math.max(t._height*a,1),0,h):(e.setUnpackFlipY(!1),e.setUnpackPremultiplyAlpha(t._premultiplyAlpha),this._glCreated&&h?s.texSubImage2D(s.TEXTURE_CUBE_MAP_POSITIVE_X+l,i,0,0,Math.max(t._width*a,1),Math.max(t._height*a,1),this._glFormat,this._glPixelType,h):s.texImage2D(s.TEXTURE_CUBE_MAP_POSITIVE_X+l,i,this._glInternalFormat,Math.max(t._width*a,1),Math.max(t._height*a,1),0,this._glFormat,this._glPixelType,h))}}else if(t._volume)t._compressed?s.compressedTexImage3D(s.TEXTURE_3D,i,this._glInternalFormat,Math.max(t._width*a,1),Math.max(t._height*a,1),Math.max(t._depth*a,1),0,r):(e.setUnpackFlipY(!1),e.setUnpackPremultiplyAlpha(t._premultiplyAlpha),s.texImage3D(s.TEXTURE_3D,i,this._glInternalFormat,Math.max(t._width*a,1),Math.max(t._height*a,1),Math.max(t._depth*a,1),0,this._glFormat,this._glPixelType,r));else if(t.array&&typeof r=="object"){if(t._arrayLength===r.length)if(t._compressed)for(let l=0;l<t._arrayLength;l++)s.compressedTexSubImage3D(s.TEXTURE_2D_ARRAY,i,0,0,l,Math.max(Math.floor(t._width*a),1),Math.max(Math.floor(t._height*a),1),1,this._glInternalFormat,r[l]);else for(let l=0;l<t._arrayLength;l++)s.texSubImage3D(s.TEXTURE_2D_ARRAY,i,0,0,l,Math.max(Math.floor(t._width*a),1),Math.max(Math.floor(t._height*a),1),1,this._glFormat,this._glPixelType,r[l])}else{if(e._isBrowserInterface(r)){e._isImageBrowserInterface(r)&&(r.width>e.maxTextureSize||r.height>e.maxTextureSize)&&(r=Dv(r,e.maxTextureSize),i===0&&(t._width=r.width,t._height=r.height));const l=r.width||r.videoWidth,h=r.height||r.videoHeight;e.setUnpackFlipY(t._flipY),e.setUnpackPremultiplyAlpha(t._premultiplyAlpha),this._glCreated&&t._width===l&&t._height===h&&!e._isImageVideoInterface(r)?s.texSubImage2D(s.TEXTURE_2D,i,0,0,this._glFormat,this._glPixelType,r):(s.texImage2D(s.TEXTURE_2D,i,this._glInternalFormat,this._glFormat,this._glPixelType,r),i===0&&(t._width=l,t._height=h))}else a=1/Math.pow(2,i),t._compressed?this._glCreated&&r?s.compressedTexSubImage2D(s.TEXTURE_2D,i,0,0,Math.max(Math.floor(t._width*a),1),Math.max(Math.floor(t._height*a),1),this._glInternalFormat,r):s.compressedTexImage2D(s.TEXTURE_2D,i,this._glInternalFormat,Math.max(Math.floor(t._width*a),1),Math.max(Math.floor(t._height*a),1),0,r):(e.setUnpackFlipY(!1),e.setUnpackPremultiplyAlpha(t._premultiplyAlpha),this._glCreated&&r?s.texSubImage2D(s.TEXTURE_2D,i,0,0,Math.max(t._width*a,1),Math.max(t._height*a,1),this._glFormat,this._glPixelType,r):s.texImage2D(s.TEXTURE_2D,i,this._glInternalFormat,Math.max(t._width*a,1),Math.max(t._height*a,1),0,this._glFormat,this._glPixelType,r));i===0?t._mipmapsUploaded=!1:t._mipmapsUploaded=!0}i++}if(t._needsUpload)if(t._cubemap)for(let l=0;l<6;l++)t._levelsUpdated[0][l]=!1;else t._levelsUpdated[0]=!1;!t._compressed&&!t._integerFormat&&t._mipmaps&&t._needsMipmapsUpload&&t._levels.length===1&&(s.generateMipmap(this._glTarget),t._mipmapsUploaded=!0),t._gpuSize&&t.adjustVramSizeTracking(e._vram,-t._gpuSize),t._gpuSize=t.gpuSize,t.adjustVramSizeTracking(e._vram,t._gpuSize),this._glCreated=!0}read(e,t,s,i,r){const a=this.texture;return a.device.readTextureAsync(a,e,t,s,i,r)}write(e,t,s,i,r){const{texture:a}=this,{device:n}=a;return n.setTexture(a,0),n.writeTextureAsync(a,e,t,s,i,r)}}class VI{constructor(e,t){this.msaaFB=e,this.resolveFB=t}destroy(e){this.msaaFB&&(e.deleteRenderbuffer(this.msaaFB),this.msaaFB=null),this.resolveFB&&(e.deleteRenderbuffer(this.resolveFB),this.resolveFB=null)}}class zI{destroy(e){const t=e.gl;this._isInitialized=!1,this._glFrameBuffer&&(this._glFrameBuffer!==this.suppliedColorFramebuffer&&t.deleteFramebuffer(this._glFrameBuffer),this._glFrameBuffer=null),this._glDepthBuffer&&(t.deleteRenderbuffer(this._glDepthBuffer),this._glDepthBuffer=null),this._glResolveFrameBuffer&&(this._glResolveFrameBuffer!==this.suppliedColorFramebuffer&&t.deleteFramebuffer(this._glResolveFrameBuffer),this._glResolveFrameBuffer=null),this._glMsaaColorBuffers.forEach(s=>{t.deleteRenderbuffer(s)}),this._glMsaaColorBuffers.length=0,this.colorMrtFramebuffers?.forEach(s=>{s.destroy(t)}),this.colorMrtFramebuffers=null,this._glMsaaDepthBuffer&&(this._glMsaaDepthBuffer=null,this.msaaDepthBufferKey&&Ff(e).release(this.msaaDepthBufferKey)),this.suppliedColorFramebuffer=void 0}get initialized(){return this._isInitialized}init(e,t){const s=e.gl;this._isInitialized=!0;const i=[];if(this.suppliedColorFramebuffer!==void 0)this._glFrameBuffer=this.suppliedColorFramebuffer;else{this._glFrameBuffer=s.createFramebuffer(),e.setFramebuffer(this._glFrameBuffer);const r=t._colorBuffers?.length??0,a=s.COLOR_ATTACHMENT0;for(let l=0;l<r;++l){const h=t.getColorBuffer(l);h&&(h.impl._glTexture||(h._width=Math.min(h.width,e.maxRenderBufferSize),h._height=Math.min(h.height,e.maxRenderBufferSize),e.setTexture(h,0)),s.framebufferTexture2D(s.FRAMEBUFFER,a+l,h._cubemap?s.TEXTURE_CUBE_MAP_POSITIVE_X+t._face:s.TEXTURE_2D,h.impl._glTexture,t.mipLevel),i.push(a+l))}s.drawBuffers(i);const n=t._depthBuffer;if(n||t._depth){const l=t._stencil?s.DEPTH_STENCIL_ATTACHMENT:s.DEPTH_ATTACHMENT;if(n)n.impl._glTexture||(n._width=Math.min(n.width,e.maxRenderBufferSize),n._height=Math.min(n.height,e.maxRenderBufferSize),e.setTexture(n,0)),s.framebufferTexture2D(s.FRAMEBUFFER,l,n._cubemap?s.TEXTURE_CUBE_MAP_POSITIVE_X+t._face:s.TEXTURE_2D,t._depthBuffer.impl._glTexture,t.mipLevel);else if(!(t._samples>1)){this._glDepthBuffer||(this._glDepthBuffer=s.createRenderbuffer());const c=t._stencil?s.DEPTH24_STENCIL8:s.DEPTH_COMPONENT32F;s.bindRenderbuffer(s.RENDERBUFFER,this._glDepthBuffer),s.renderbufferStorage(s.RENDERBUFFER,c,t.width,t.height),s.framebufferRenderbuffer(s.FRAMEBUFFER,l,s.RENDERBUFFER,this._glDepthBuffer),s.bindRenderbuffer(s.RENDERBUFFER,null)}}}if(t._samples>1){this._glResolveFrameBuffer=this._glFrameBuffer,this._glFrameBuffer=s.createFramebuffer(),e.setFramebuffer(this._glFrameBuffer);const r=t._colorBuffers?.length??0;if(this.suppliedColorFramebuffer!==void 0){const a=s.createRenderbuffer();this._glMsaaColorBuffers.push(a);const n=e.backBufferFormat===Ae?s.RGBA8:s.RGB8;s.bindRenderbuffer(s.RENDERBUFFER,a),s.renderbufferStorageMultisample(s.RENDERBUFFER,t._samples,n,t.width,t.height),s.framebufferRenderbuffer(s.FRAMEBUFFER,s.COLOR_ATTACHMENT0,s.RENDERBUFFER,a)}else for(let a=0;a<r;++a){const n=t.getColorBuffer(a);if(n){const l=s.createRenderbuffer();this._glMsaaColorBuffers.push(l),s.bindRenderbuffer(s.RENDERBUFFER,l),s.renderbufferStorageMultisample(s.RENDERBUFFER,t._samples,n.impl._glInternalFormat,t.width,t.height),s.framebufferRenderbuffer(s.FRAMEBUFFER,s.COLOR_ATTACHMENT0+a,s.RENDERBUFFER,l)}}if(t._depth){const a=t._stencil?s.DEPTH24_STENCIL8:s.DEPTH_COMPONENT32F,n=t._stencil?s.DEPTH_STENCIL_ATTACHMENT:s.DEPTH_ATTACHMENT;let l;const h=t._depthBuffer;h&&(l=`${h.id}:${t.width}:${t.height}:${t._samples}:${a}:${n}`,this._glMsaaDepthBuffer=Ff(e).get(l)),this._glMsaaDepthBuffer||(this._glMsaaDepthBuffer=s.createRenderbuffer(),s.bindRenderbuffer(s.RENDERBUFFER,this._glMsaaDepthBuffer),s.renderbufferStorageMultisample(s.RENDERBUFFER,t._samples,a,t.width,t.height),this._glMsaaDepthBuffer.destroy=function(){s.deleteRenderbuffer(this)},h&&Ff(e).set(l,this._glMsaaDepthBuffer)),this.msaaDepthBufferKey=l,s.framebufferRenderbuffer(s.FRAMEBUFFER,n,s.RENDERBUFFER,this._glMsaaDepthBuffer)}r>1&&(this._createMsaaMrtFramebuffers(e,t,r),e.setFramebuffer(this._glFrameBuffer),s.drawBuffers(i))}}_createMsaaMrtFramebuffers(e,t,s){const i=e.gl;this.colorMrtFramebuffers=[];for(let r=0;r<s;++r){const a=t.getColorBuffer(r),n=i.createFramebuffer();e.setFramebuffer(n);const l=this._glMsaaColorBuffers[r];i.bindRenderbuffer(i.RENDERBUFFER,l),i.renderbufferStorageMultisample(i.RENDERBUFFER,t._samples,a.impl._glInternalFormat,t.width,t.height),i.framebufferRenderbuffer(i.FRAMEBUFFER,i.COLOR_ATTACHMENT0,i.RENDERBUFFER,l),i.drawBuffers([i.COLOR_ATTACHMENT0]);const h=i.createFramebuffer();e.setFramebuffer(h),i.framebufferTexture2D(i.FRAMEBUFFER,i.COLOR_ATTACHMENT0,a._cubemap?i.TEXTURE_CUBE_MAP_POSITIVE_X+t._face:i.TEXTURE_2D,a.impl._glTexture,0),this.colorMrtFramebuffers[r]=new VI(n,h)}}_checkFbo(e,t,s=""){const i=e.gl;switch(i.checkFramebufferStatus(i.FRAMEBUFFER)){case i.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:break;case i.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:break;case i.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:break;case i.FRAMEBUFFER_UNSUPPORTED:break}}loseContext(){this._glFrameBuffer=null,this._glDepthBuffer=null,this._glResolveFrameBuffer=null,this._glMsaaColorBuffers.length=0,this._glMsaaDepthBuffer=null,this.msaaDepthBufferKey=void 0,this.colorMrtFramebuffers=null,this.suppliedColorFramebuffer=void 0,this._isInitialized=!1}internalResolve(e,t,s,i,r){e.setScissor(0,0,i.width,i.height);const a=e.gl;a.bindFramebuffer(a.READ_FRAMEBUFFER,t),a.bindFramebuffer(a.DRAW_FRAMEBUFFER,s),a.blitFramebuffer(0,0,i.width,i.height,0,0,i.width,i.height,r,a.NEAREST)}resolve(e,t,s,i){const r=e.gl;if(this.colorMrtFramebuffers){if(s)for(let a=0;a<this.colorMrtFramebuffers.length;a++){const n=this.colorMrtFramebuffers[a];this.internalResolve(e,n.msaaFB,n.resolveFB,t,r.COLOR_BUFFER_BIT)}i&&this.internalResolve(e,this._glFrameBuffer,this._glResolveFrameBuffer,t,r.DEPTH_BUFFER_BIT)}else this.internalResolve(e,this._glFrameBuffer,this._glResolveFrameBuffer,t,(s?r.COLOR_BUFFER_BIT:0)|(i?r.DEPTH_BUFFER_BIT:0));r.bindFramebuffer(r.FRAMEBUFFER,this._glFrameBuffer)}constructor(){this._glFrameBuffer=null,this._glDepthBuffer=null,this._glResolveFrameBuffer=null,this.colorMrtFramebuffers=null,this._glMsaaColorBuffers=[],this._glMsaaDepthBuffer=null,this._isInitialized=!1}}class HI{destroy(e){this.queries.forEach(t=>e.deleteQuery(t)),this.queries=null}constructor(){this.queries=[]}}class GI extends II{constructor(e){super(),this.freeQueries=[],this.frameQueries=[],this.previousFrameQueries=[],this.timings=[],this.device=e,this.ext=e.extDisjointTimerQuery}destroy(){this.freeQueries.forEach(e=>this.device.gl.deleteQuery(e)),this.frameQueries.forEach(e=>this.device.gl.deleteQuery(e)),this.previousFrameQueries.forEach(e=>e.destroy(this.device.gl)),this.freeQueries=null,this.frameQueries=null,this.previousFrameQueries=null}loseContext(){super.loseContext(),this.freeQueries=[],this.frameQueries=[],this.previousFrameQueries=[]}restoreContext(){this.ext=this.device.extDisjointTimerQuery}getQuery(){return this.freeQueries.pop()??this.device.gl.createQuery()}start(e){if(this.ext){const t=this.getSlot(e),s=this.getQuery();return this.frameQueries[t]=s,this.device.gl.beginQuery(this.ext.TIME_ELAPSED_EXT,s),t}}end(e){e!==void 0&&this.device.gl.endQuery(this.ext.TIME_ELAPSED_EXT)}frameStart(){this.processEnableRequest(),this._enabled&&(this.frameGPUMarkerSlot=this.start("GpuFrame"))}frameEnd(){this._enabled&&this.end(this.frameGPUMarkerSlot)}request(){if(this._enabled){const e=this.ext,t=this.device.gl,s=this.device.renderVersion,i=this.frameQueries;if(i.length>0){this.frameQueries=[];const r=new HI;r.queries=i,r.renderVersion=s,this.previousFrameQueries.push(r)}if(this.previousFrameQueries.length>0){const r=this.previousFrameQueries[0],a=r.queries,n=a[a.length-1],l=t.getQueryParameter(n,t.QUERY_RESULT_AVAILABLE),h=t.getParameter(e.GPU_DISJOINT_EXT);if(l&&!h){this.previousFrameQueries.shift();const c=this.timings;c.length=0;for(let d=0;d<a.length;d++){const f=a[d],u=t.getQueryParameter(f,t.QUERY_RESULT);c[d]=u*1e-6,this.freeQueries.push(f)}this.report(r.renderVersion,c)}h&&(this.previousFrameQueries.forEach(c=>{this.report(c.renderVersion,null),c.destroy(t)}),this.previousFrameQueries.length=0)}super.request(s)}}}const Oa=[];class WI extends ap{constructor(e,t={}){super(e,t),this._defaultFramebuffer=null,this._defaultFramebufferChanged=!1,t=this.initOptions,this.updateClientRect(),this.initTextureUnits(),this.contextLost=!1,this._contextLostHandler=u=>{u.preventDefault(),this.loseContext(),this.fire("devicelost")},this._contextRestoredHandler=()=>{this.restoreContext(),this.fire("devicerestored")};const s=typeof navigator<"u"&&navigator.userAgent;if(this.forceDisableMultisampling=s&&s.includes("AppleWebKit")&&(s.includes("15.4")||s.includes("15_4")),this.forceDisableMultisampling&&(t.antialias=!1),Se.browserName==="firefox"){const p=(typeof navigator<"u"?navigator.userAgent:"").match(/Firefox\/(\d+(\.\d+)*)/),m=p?p[1]:null;if(m){const _=parseFloat(m);(Se.name==="windows"&&(_>=120||_===115)||Se.name==="android"&&_>=132)&&(t.antialias=!1)}}this.backBufferAntialias=t.antialias??!1,t.antialias=!1;const i=t.gl??e.getContext("webgl2",t);if(!i)throw new Error("WebGL not supported");this.gl=i,this.isWebGL2=!0,this._deviceType=XL,this.updateBackbufferFormat(null);const r=Se.browserName==="chrome",a=Se.browserName==="safari",n=Se.browser&&navigator.appVersion.indexOf("Mac")!==-1;this._tempEnableSafariTextureUnitWorkaround=a,this._tempMacChromeBlitFramebufferWorkaround=n&&r&&!t.alpha,e.addEventListener("webglcontextlost",this._contextLostHandler,!1),e.addEventListener("webglcontextrestored",this._contextRestoredHandler,!1),this.initializeExtensions(),this.initializeCapabilities(),this.initializeRenderState(),this.initializeContextCaches(),this.createBackbuffer(null),this.supportsImageBitmap=!a&&typeof ImageBitmap<"u",this._samplerTypes=new Set([i.SAMPLER_2D,i.SAMPLER_CUBE,i.UNSIGNED_INT_SAMPLER_2D,i.INT_SAMPLER_2D,i.SAMPLER_2D_SHADOW,i.SAMPLER_CUBE_SHADOW,i.SAMPLER_3D,i.INT_SAMPLER_3D,i.UNSIGNED_INT_SAMPLER_3D,i.SAMPLER_2D_ARRAY,i.INT_SAMPLER_2D_ARRAY,i.UNSIGNED_INT_SAMPLER_2D_ARRAY]),this.glAddress=[i.REPEAT,i.CLAMP_TO_EDGE,i.MIRRORED_REPEAT],this.glBlendEquation=[i.FUNC_ADD,i.FUNC_SUBTRACT,i.FUNC_REVERSE_SUBTRACT,i.MIN,i.MAX],this.glBlendFunctionColor=[i.ZERO,i.ONE,i.SRC_COLOR,i.ONE_MINUS_SRC_COLOR,i.DST_COLOR,i.ONE_MINUS_DST_COLOR,i.SRC_ALPHA,i.SRC_ALPHA_SATURATE,i.ONE_MINUS_SRC_ALPHA,i.DST_ALPHA,i.ONE_MINUS_DST_ALPHA,i.CONSTANT_COLOR,i.ONE_MINUS_CONSTANT_COLOR],this.glBlendFunctionAlpha=[i.ZERO,i.ONE,i.SRC_COLOR,i.ONE_MINUS_SRC_COLOR,i.DST_COLOR,i.ONE_MINUS_DST_COLOR,i.SRC_ALPHA,i.SRC_ALPHA_SATURATE,i.ONE_MINUS_SRC_ALPHA,i.DST_ALPHA,i.ONE_MINUS_DST_ALPHA,i.CONSTANT_ALPHA,i.ONE_MINUS_CONSTANT_ALPHA],this.glComparison=[i.NEVER,i.LESS,i.EQUAL,i.LEQUAL,i.GREATER,i.NOTEQUAL,i.GEQUAL,i.ALWAYS],this.glStencilOp=[i.KEEP,i.ZERO,i.REPLACE,i.INCR,i.INCR_WRAP,i.DECR,i.DECR_WRAP,i.INVERT],this.glClearFlag=[0,i.COLOR_BUFFER_BIT,i.DEPTH_BUFFER_BIT,i.COLOR_BUFFER_BIT|i.DEPTH_BUFFER_BIT,i.STENCIL_BUFFER_BIT,i.STENCIL_BUFFER_BIT|i.COLOR_BUFFER_BIT,i.STENCIL_BUFFER_BIT|i.DEPTH_BUFFER_BIT,i.STENCIL_BUFFER_BIT|i.COLOR_BUFFER_BIT|i.DEPTH_BUFFER_BIT],this.glCull=[0,i.BACK,i.FRONT,i.FRONT_AND_BACK],this.glFilter=[i.NEAREST,i.LINEAR,i.NEAREST_MIPMAP_NEAREST,i.NEAREST_MIPMAP_LINEAR,i.LINEAR_MIPMAP_NEAREST,i.LINEAR_MIPMAP_LINEAR],this.glPrimitive=[i.POINTS,i.LINES,i.LINE_LOOP,i.LINE_STRIP,i.TRIANGLES,i.TRIANGLE_STRIP,i.TRIANGLE_FAN],this.glType=[i.BYTE,i.UNSIGNED_BYTE,i.SHORT,i.UNSIGNED_SHORT,i.INT,i.UNSIGNED_INT,i.FLOAT,i.HALF_FLOAT],this.pcUniformType={},this.pcUniformType[i.BOOL]=Mn,this.pcUniformType[i.INT]=da,this.pcUniformType[i.FLOAT]=Ss,this.pcUniformType[i.FLOAT_VEC2]=fa,this.pcUniformType[i.FLOAT_VEC3]=Ot,this.pcUniformType[i.FLOAT_VEC4]=Yn,this.pcUniformType[i.INT_VEC2]=Qr,this.pcUniformType[i.INT_VEC3]=Jr,this.pcUniformType[i.INT_VEC4]=ea,this.pcUniformType[i.BOOL_VEC2]=ul,this.pcUniformType[i.BOOL_VEC3]=pl,this.pcUniformType[i.BOOL_VEC4]=ml,this.pcUniformType[i.FLOAT_MAT2]=wc,this.pcUniformType[i.FLOAT_MAT3]=jn,this.pcUniformType[i.FLOAT_MAT4]=Gs,this.pcUniformType[i.SAMPLER_2D]=IL,this.pcUniformType[i.SAMPLER_CUBE]=ML,this.pcUniformType[i.UNSIGNED_INT]=Kn,this.pcUniformType[i.UNSIGNED_INT_VEC2]=Zn,this.pcUniformType[i.UNSIGNED_INT_VEC3]=Qn,this.pcUniformType[i.UNSIGNED_INT_VEC4]=Jn,this.pcUniformType[i.SAMPLER_2D_SHADOW]=DL,this.pcUniformType[i.SAMPLER_CUBE_SHADOW]=RL,this.pcUniformType[i.SAMPLER_2D_ARRAY]=NL,this.pcUniformType[i.SAMPLER_3D]=OL,this.pcUniformType[i.INT_SAMPLER_2D]=FL,this.pcUniformType[i.UNSIGNED_INT_SAMPLER_2D]=kL,this.pcUniformType[i.INT_SAMPLER_CUBE]=UL,this.pcUniformType[i.UNSIGNED_INT_SAMPLER_2D]=BL,this.pcUniformType[i.INT_SAMPLER_3D]=VL,this.pcUniformType[i.UNSIGNED_INT_SAMPLER_3D]=zL,this.pcUniformType[i.INT_SAMPLER_2D_ARRAY]=HL,this.pcUniformType[i.UNSIGNED_INT_SAMPLER_2D_ARRAY]=GL,this.targetToSlot={},this.targetToSlot[i.TEXTURE_2D]=0,this.targetToSlot[i.TEXTURE_CUBE_MAP]=1,this.targetToSlot[i.TEXTURE_3D]=2;let l,h,c,d,f;this.commitFunction=[],this.commitFunction[Mn]=function(u,p){u.value!==p&&(i.uniform1i(u.locationId,p),u.value=p)},this.commitFunction[da]=this.commitFunction[Mn],this.commitFunction[Ss]=function(u,p){u.value!==p&&(i.uniform1f(u.locationId,p),u.value=p)},this.commitFunction[fa]=function(u,p){f=u.value,l=p[0],h=p[1],(f[0]!==l||f[1]!==h)&&(i.uniform2fv(u.locationId,p),f[0]=l,f[1]=h)},this.commitFunction[Ot]=function(u,p){f=u.value,l=p[0],h=p[1],c=p[2],(f[0]!==l||f[1]!==h||f[2]!==c)&&(i.uniform3fv(u.locationId,p),f[0]=l,f[1]=h,f[2]=c)},this.commitFunction[Yn]=function(u,p){f=u.value,l=p[0],h=p[1],c=p[2],d=p[3],(f[0]!==l||f[1]!==h||f[2]!==c||f[3]!==d)&&(i.uniform4fv(u.locationId,p),f[0]=l,f[1]=h,f[2]=c,f[3]=d)},this.commitFunction[Qr]=function(u,p){f=u.value,l=p[0],h=p[1],(f[0]!==l||f[1]!==h)&&(i.uniform2iv(u.locationId,p),f[0]=l,f[1]=h)},this.commitFunction[ul]=this.commitFunction[Qr],this.commitFunction[Jr]=function(u,p){f=u.value,l=p[0],h=p[1],c=p[2],(f[0]!==l||f[1]!==h||f[2]!==c)&&(i.uniform3iv(u.locationId,p),f[0]=l,f[1]=h,f[2]=c)},this.commitFunction[pl]=this.commitFunction[Jr],this.commitFunction[ea]=function(u,p){f=u.value,l=p[0],h=p[1],c=p[2],d=p[3],(f[0]!==l||f[1]!==h||f[2]!==c||f[3]!==d)&&(i.uniform4iv(u.locationId,p),f[0]=l,f[1]=h,f[2]=c,f[3]=d)},this.commitFunction[ml]=this.commitFunction[ea],this.commitFunction[wc]=function(u,p){i.uniformMatrix2fv(u.locationId,!1,p)},this.commitFunction[jn]=function(u,p){i.uniformMatrix3fv(u.locationId,!1,p)},this.commitFunction[Gs]=function(u,p){i.uniformMatrix4fv(u.locationId,!1,p)},this.commitFunction[$d]=function(u,p){i.uniform1fv(u.locationId,p)},this.commitFunction[Xd]=function(u,p){i.uniform2fv(u.locationId,p)},this.commitFunction[qd]=function(u,p){i.uniform3fv(u.locationId,p)},this.commitFunction[S_]=function(u,p){i.uniform4fv(u.locationId,p)},this.commitFunction[Kn]=function(u,p){u.value!==p&&(i.uniform1ui(u.locationId,p),u.value=p)},this.commitFunction[Zn]=function(u,p){f=u.value,l=p[0],h=p[1],(f[0]!==l||f[1]!==h)&&(i.uniform2uiv(u.locationId,p),f[0]=l,f[1]=h)},this.commitFunction[Qn]=function(u,p){f=u.value,l=p[0],h=p[1],c=p[2],(f[0]!==l||f[1]!==h||f[2]!==c)&&(i.uniform3uiv(u.locationId,p),f[0]=l,f[1]=h,f[2]=c)},this.commitFunction[Jn]=function(u,p){f=u.value,l=p[0],h=p[1],c=p[2],d=p[3],(f[0]!==l||f[1]!==h||f[2]!==c||f[3]!==d)&&(i.uniform4uiv(u.locationId,p),f[0]=l,f[1]=h,f[2]=c,f[3]=d)},this.commitFunction[eo]=function(u,p){i.uniform1iv(u.locationId,p)},this.commitFunction[Yd]=function(u,p){i.uniform1uiv(u.locationId,p)},this.commitFunction[jd]=this.commitFunction[eo],this.commitFunction[to]=function(u,p){i.uniform2iv(u.locationId,p)},this.commitFunction[Kd]=function(u,p){i.uniform2uiv(u.locationId,p)},this.commitFunction[Zd]=this.commitFunction[to],this.commitFunction[so]=function(u,p){i.uniform3iv(u.locationId,p)},this.commitFunction[Qd]=function(u,p){i.uniform3uiv(u.locationId,p)},this.commitFunction[Jd]=this.commitFunction[so],this.commitFunction[Cc]=function(u,p){i.uniform4iv(u.locationId,p)},this.commitFunction[y_]=function(u,p){i.uniform4uiv(u.locationId,p)},this.commitFunction[T_]=this.commitFunction[Cc],this.commitFunction[AT]=function(u,p){i.uniformMatrix4fv(u.locationId,!1,p)},this.constantTexSource=this.scope.resolve("source"),this.postInit()}postInit(){super.postInit(),this.gpuProfiler=new GI(this)}destroy(){super.destroy();const e=this.gl;this.feedback&&e.deleteTransformFeedback(this.feedback),this.clearVertexArrayObjectCache(),this.canvas.removeEventListener("webglcontextlost",this._contextLostHandler,!1),this.canvas.removeEventListener("webglcontextrestored",this._contextRestoredHandler,!1),this._contextLostHandler=null,this._contextRestoredHandler=null,this.gl=null,super.postDestroy()}createBackbuffer(e){this.supportsStencil=this.initOptions.stencil,this.backBuffer=new ct({name:"WebglFramebuffer",graphicsDevice:this,depth:this.initOptions.depth,stencil:this.supportsStencil,samples:this.samples}),this.backBuffer.impl.suppliedColorFramebuffer=e}updateBackbufferFormat(e){const t=this.gl;t.bindFramebuffer(t.FRAMEBUFFER,e);const s=this.gl.getParameter(this.gl.ALPHA_BITS);this.backBufferFormat=s?Ae:_r}updateBackbuffer(){const e=this.canvas.width!==this.backBufferSize.x||this.canvas.height!==this.backBufferSize.y;(this._defaultFramebufferChanged||e)&&(this._defaultFramebufferChanged&&this.updateBackbufferFormat(this._defaultFramebuffer),this._defaultFramebufferChanged=!1,this.backBufferSize.set(this.canvas.width,this.canvas.height),this.backBuffer.destroy(),this.createBackbuffer(this._defaultFramebuffer))}createVertexBufferImpl(e,t){return new MI}createIndexBufferImpl(e){return new DI(e)}createShaderImpl(e){return new UI(e)}createTextureImpl(e){return new BI(e)}createRenderTargetImpl(e){return new zI}getPrecision(){const e=this.gl;let t="highp";if(e.getShaderPrecisionFormat){const s=e.getShaderPrecisionFormat(e.VERTEX_SHADER,e.HIGH_FLOAT),i=e.getShaderPrecisionFormat(e.VERTEX_SHADER,e.MEDIUM_FLOAT),r=e.getShaderPrecisionFormat(e.FRAGMENT_SHADER,e.HIGH_FLOAT),a=e.getShaderPrecisionFormat(e.FRAGMENT_SHADER,e.MEDIUM_FLOAT);if(s&&i&&r&&a){const n=s.precision>0&&r.precision>0,l=i.precision>0&&a.precision>0;n||(l?t="mediump":t="lowp")}}return t}getExtension(){for(let e=0;e<arguments.length;e++)if(this.supportedExtensions.indexOf(arguments[e])!==-1)return this.gl.getExtension(arguments[e]);return null}get extDisjointTimerQuery(){return this._extDisjointTimerQuery||(this._extDisjointTimerQuery=this.getExtension("EXT_disjoint_timer_query_webgl2","EXT_disjoint_timer_query")),this._extDisjointTimerQuery}initializeExtensions(){const e=this.gl;this.supportedExtensions=e.getSupportedExtensions()??[],this._extDisjointTimerQuery=null,this.textureRG11B10Renderable=!0,this.extColorBufferFloat=this.getExtension("EXT_color_buffer_float"),this.textureFloatRenderable=!!this.extColorBufferFloat,this.extColorBufferHalfFloat=this.getExtension("EXT_color_buffer_half_float"),this.textureHalfFloatRenderable=!!this.extColorBufferHalfFloat||!!this.extColorBufferFloat,this.extDebugRendererInfo=this.getExtension("WEBGL_debug_renderer_info"),this.extTextureFloatLinear=this.getExtension("OES_texture_float_linear"),this.textureFloatFilterable=!!this.extTextureFloatLinear,this.extFloatBlend=this.getExtension("EXT_float_blend"),this.extTextureFilterAnisotropic=this.getExtension("EXT_texture_filter_anisotropic","WEBKIT_EXT_texture_filter_anisotropic"),this.extParallelShaderCompile=this.getExtension("KHR_parallel_shader_compile"),this.extCompressedTextureETC1=this.getExtension("WEBGL_compressed_texture_etc1"),this.extCompressedTextureETC=this.getExtension("WEBGL_compressed_texture_etc"),this.extCompressedTexturePVRTC=this.getExtension("WEBGL_compressed_texture_pvrtc","WEBKIT_WEBGL_compressed_texture_pvrtc"),this.extCompressedTextureS3TC=this.getExtension("WEBGL_compressed_texture_s3tc","WEBKIT_WEBGL_compressed_texture_s3tc"),this.extCompressedTextureS3TC_SRGB=this.getExtension("WEBGL_compressed_texture_s3tc_srgb"),this.extCompressedTextureATC=this.getExtension("WEBGL_compressed_texture_atc"),this.extCompressedTextureASTC=this.getExtension("WEBGL_compressed_texture_astc"),this.extTextureCompressionBPTC=this.getExtension("EXT_texture_compression_bptc")}initializeCapabilities(){const e=this.gl;let t;const s=typeof navigator<"u"?navigator.userAgent:"";this.maxPrecision=this.precision=this.getPrecision();const i=e.getContextAttributes();this.supportsMsaa=i?.antialias??!1,this.supportsStencil=i?.stencil??!1,this.maxTextureSize=e.getParameter(e.MAX_TEXTURE_SIZE),this.maxCubeMapSize=e.getParameter(e.MAX_CUBE_MAP_TEXTURE_SIZE),this.maxRenderBufferSize=e.getParameter(e.MAX_RENDERBUFFER_SIZE),this.maxTextures=e.getParameter(e.MAX_TEXTURE_IMAGE_UNITS),this.maxCombinedTextures=e.getParameter(e.MAX_COMBINED_TEXTURE_IMAGE_UNITS),this.maxVertexTextures=e.getParameter(e.MAX_VERTEX_TEXTURE_IMAGE_UNITS),this.vertexUniformsCount=e.getParameter(e.MAX_VERTEX_UNIFORM_VECTORS),this.fragmentUniformsCount=e.getParameter(e.MAX_FRAGMENT_UNIFORM_VECTORS),this.maxColorAttachments=e.getParameter(e.MAX_COLOR_ATTACHMENTS),this.maxVolumeSize=e.getParameter(e.MAX_3D_TEXTURE_SIZE),t=this.extDebugRendererInfo,this.unmaskedRenderer=t?e.getParameter(t.UNMASKED_RENDERER_WEBGL):"",this.unmaskedVendor=t?e.getParameter(t.UNMASKED_VENDOR_WEBGL):"";const r=/\bMali-G52+/,a=/SM-[a-zA-Z0-9]+/;this.supportsGpuParticles=!(this.unmaskedVendor==="ARM"&&s.match(a))&&!this.unmaskedRenderer.match(r),t=this.extTextureFilterAnisotropic,this.maxAnisotropy=t?e.getParameter(t.MAX_TEXTURE_MAX_ANISOTROPY_EXT):1;const n=!this.forceDisableMultisampling;this.maxSamples=n?e.getParameter(e.MAX_SAMPLES):1,this.maxSamples=Math.min(this.maxSamples,4),this.samples=n&&this.backBufferAntialias?this.maxSamples:1,this.supportsAreaLights=!Se.android,this.maxTextures<=8&&(this.supportsAreaLights=!1),this.initCapsDefines()}initializeRenderState(){super.initializeRenderState();const e=this.gl;e.disable(e.BLEND),e.blendFunc(e.ONE,e.ZERO),e.blendEquation(e.FUNC_ADD),e.colorMask(!0,!0,!0,!0),e.blendColor(0,0,0,0),e.enable(e.CULL_FACE),this.cullFace=e.BACK,e.cullFace(e.BACK),e.enable(e.DEPTH_TEST),e.depthFunc(e.LEQUAL),e.depthMask(!0),this.stencil=!1,e.disable(e.STENCIL_TEST),this.stencilFuncFront=this.stencilFuncBack=Ei,this.stencilRefFront=this.stencilRefBack=0,this.stencilMaskFront=this.stencilMaskBack=255,e.stencilFunc(e.ALWAYS,0,255),this.stencilFailFront=this.stencilFailBack=In,this.stencilZfailFront=this.stencilZfailBack=In,this.stencilZpassFront=this.stencilZpassBack=In,this.stencilWriteMaskFront=255,this.stencilWriteMaskBack=255,e.stencilOp(e.KEEP,e.KEEP,e.KEEP),e.stencilMask(255),this.alphaToCoverage=!1,this.raster=!0,e.disable(e.SAMPLE_ALPHA_TO_COVERAGE),e.disable(e.RASTERIZER_DISCARD),this.depthBiasEnabled=!1,e.disable(e.POLYGON_OFFSET_FILL),this.clearDepth=1,e.clearDepth(1),this.clearColor=new q(0,0,0,0),e.clearColor(0,0,0,0),this.clearStencil=0,e.clearStencil(0),e.hint(e.FRAGMENT_SHADER_DERIVATIVE_HINT,e.NICEST),e.enable(e.SCISSOR_TEST),e.pixelStorei(e.UNPACK_COLORSPACE_CONVERSION_WEBGL,e.NONE),this.unpackFlipY=!1,e.pixelStorei(e.UNPACK_FLIP_Y_WEBGL,!1),this.unpackPremultiplyAlpha=!1,e.pixelStorei(e.UNPACK_PREMULTIPLY_ALPHA_WEBGL,!1),e.pixelStorei(e.UNPACK_ALIGNMENT,1)}initTextureUnits(e=16){this.textureUnits=[];for(let t=0;t<e;t++)this.textureUnits.push([null,null,null])}initializeContextCaches(){super.initializeContextCaches(),this._vaoMap=new Map,this.boundVao=null,this.activeFramebuffer=null,this.feedback=null,this.transformFeedbackBuffer=null,this.textureUnit=0,this.initTextureUnits(this.maxCombinedTextures)}loseContext(){super.loseContext();for(const e of this.shaders)e.loseContext()}restoreContext(){this.initializeExtensions(),this.initializeCapabilities(),super.restoreContext();for(const e of this.shaders)e.restoreContext()}setViewport(e,t,s,i){(this.vx!==e||this.vy!==t||this.vw!==s||this.vh!==i)&&(this.gl.viewport(e,t,s,i),this.vx=e,this.vy=t,this.vw=s,this.vh=i)}setScissor(e,t,s,i){(this.sx!==e||this.sy!==t||this.sw!==s||this.sh!==i)&&(this.gl.scissor(e,t,s,i),this.sx=e,this.sy=t,this.sw=s,this.sh=i)}setFramebuffer(e){if(this.activeFramebuffer!==e){const t=this.gl;t.bindFramebuffer(t.FRAMEBUFFER,e),this.activeFramebuffer=e}}copyRenderTarget(e,t,s,i){const r=this.gl;if(e===this.backBuffer&&(e=null),s){if(t){if(e&&(!e._colorBuffer||!t._colorBuffer||e._colorBuffer._format!==t._colorBuffer._format))return!1}else if(!e._colorBuffer)return!1}if(i&&e&&!e._depth&&(!e._depthBuffer||!t._depthBuffer||e._depthBuffer._format!==t._depthBuffer._format))return!1;const a=this.renderTarget;this.renderTarget=t,this.updateBegin();const n=e?e.impl._glFrameBuffer:this.backBuffer?.impl._glFrameBuffer,l=t?t.impl._glFrameBuffer:this.backBuffer?.impl._glFrameBuffer;r.bindFramebuffer(r.READ_FRAMEBUFFER,n),r.bindFramebuffer(r.DRAW_FRAMEBUFFER,l);const h=e?e.width:t?t.width:this.width,c=e?e.height:t?t.height:this.height;return r.blitFramebuffer(0,0,h,c,0,0,h,c,(s?r.COLOR_BUFFER_BIT:0)|(i?r.DEPTH_BUFFER_BIT:0),r.NEAREST),this.renderTarget=a,r.bindFramebuffer(r.FRAMEBUFFER,a?a.impl._glFrameBuffer:null),!0}frameStart(){super.frameStart(),this.updateBackbuffer(),this.gpuProfiler.frameStart()}frameEnd(){super.frameEnd(),this.gpuProfiler.frameEnd(),this.gpuProfiler.request()}startRenderPass(e){const t=e.renderTarget??this.backBuffer;this.renderTarget=t,this.updateBegin();const{width:s,height:i}=t;this.setViewport(0,0,s,i),this.setScissor(0,0,s,i);const r=e.colorOps,a=e.depthStencilOps;if(r?.clear||a.clearDepth||a.clearStencil){let n=0;const l={};r?.clear&&(n|=ll,l.color=[r.clearValue.r,r.clearValue.g,r.clearValue.b,r.clearValue.a]),a.clearDepth&&(n|=hl,l.depth=a.clearDepthValue),a.clearStencil&&(n|=yc,l.stencil=a.clearStencilValue),l.flags=n,this.clear(l)}this.insideRenderPass=!0}endRenderPass(e){this.unbindVertexArray();const t=this.renderTarget,s=e.colorArrayOps.length;if(t){Oa.length=0;const i=this.gl;for(let r=0;r<s;r++){const a=e.colorArrayOps[r];a.store||a.resolve||Oa.push(i.COLOR_ATTACHMENT0+r)}t!==this.backBuffer&&(e.depthStencilOps.storeDepth||Oa.push(i.DEPTH_ATTACHMENT),e.depthStencilOps.storeStencil||Oa.push(i.STENCIL_ATTACHMENT)),Oa.length>0&&e.fullSizeClearRect&&i.invalidateFramebuffer(i.DRAW_FRAMEBUFFER,Oa),s&&e.colorOps?.resolve&&e.samples>1&&t.autoResolve&&t.resolve(!0,!1),t.depthBuffer&&e.depthStencilOps.resolveDepth&&e.samples>1&&t.autoResolve&&t.resolve(!1,!0);for(let r=0;r<s;r++)if(e.colorArrayOps[r].genMipmaps){const n=t._colorBuffers[r];n&&n.impl._glTexture&&n.mipmaps&&(this.activeTexture(this.maxCombinedTextures-1),this.bindTexture(n),this.gl.generateMipmap(n.impl._glTarget))}}this.insideRenderPass=!1}set defaultFramebuffer(e){this._defaultFramebuffer!==e&&(this._defaultFramebuffer=e,this._defaultFramebufferChanged=!0)}get defaultFramebuffer(){return this._defaultFramebuffer}updateBegin(){if(this.boundVao=null,this._tempEnableSafariTextureUnitWorkaround)for(let s=0;s<this.textureUnits.length;++s)for(let i=0;i<3;++i)this.textureUnits[s][i]=null;const e=this.renderTarget??this.backBuffer,t=e.impl;t.initialized||this.initRenderTarget(e),this.setFramebuffer(t._glFrameBuffer)}updateEnd(){this.unbindVertexArray();const e=this.renderTarget;if(e&&e!==this.backBuffer){e._samples>1&&e.autoResolve&&e.resolve();const t=e._colorBuffer;t&&t.impl._glTexture&&t.mipmaps&&(this.activeTexture(this.maxCombinedTextures-1),this.bindTexture(t),this.gl.generateMipmap(t.impl._glTarget))}}setUnpackFlipY(e){if(this.unpackFlipY!==e){this.unpackFlipY=e;const t=this.gl;t.pixelStorei(t.UNPACK_FLIP_Y_WEBGL,e)}}setUnpackPremultiplyAlpha(e){if(this.unpackPremultiplyAlpha!==e){this.unpackPremultiplyAlpha=e;const t=this.gl;t.pixelStorei(t.UNPACK_PREMULTIPLY_ALPHA_WEBGL,e)}}activeTexture(e){this.textureUnit!==e&&(this.gl.activeTexture(this.gl.TEXTURE0+e),this.textureUnit=e)}bindTexture(e){const t=e.impl,s=t._glTarget,i=t._glTexture,r=this.textureUnit,a=this.targetToSlot[s];this.textureUnits[r][a]!==i&&(this.gl.bindTexture(s,i),this.textureUnits[r][a]=i)}bindTextureOnUnit(e,t){const s=e.impl,i=s._glTarget,r=s._glTexture,a=this.targetToSlot[i];this.textureUnits[t][a]!==r&&(this.activeTexture(t),this.gl.bindTexture(i,r),this.textureUnits[t][a]=r)}setTextureParameters(e){const t=this.gl,s=e.impl.dirtyParameterFlags,i=e.impl._glTarget;if(s&CT){let r=e._minFilter;(!e._mipmaps||e._compressed&&e._levels.length===1)&&(r===wd||r===Cd?r=pe:(r===Pd||r===ha)&&(r=Ze)),t.texParameteri(i,t.TEXTURE_MIN_FILTER,this.glFilter[r])}if(s&PT&&t.texParameteri(i,t.TEXTURE_MAG_FILTER,this.glFilter[e._magFilter]),s&LT&&t.texParameteri(i,t.TEXTURE_WRAP_S,this.glAddress[e._addressU]),s&IT&&t.texParameteri(i,t.TEXTURE_WRAP_T,this.glAddress[e._addressV]),s&MT&&t.texParameteri(i,t.TEXTURE_WRAP_R,this.glAddress[e._addressW]),s&DT&&t.texParameteri(i,t.TEXTURE_COMPARE_MODE,e._compareOnRead?t.COMPARE_REF_TO_TEXTURE:t.NONE),s&RT&&t.texParameteri(i,t.TEXTURE_COMPARE_FUNC,this.glComparison[e._compareFunc]),s&OT){const r=this.extTextureFilterAnisotropic;r&&t.texParameterf(i,r.TEXTURE_MAX_ANISOTROPY_EXT,B.clamp(Math.round(e._anisotropy),1,this.maxAnisotropy))}}setTexture(e,t){const s=e.impl;s._glTexture||s.initialize(this,e),s.dirtyParameterFlags>0||e._needsUpload||e._needsMipmapsUpload?(this.activeTexture(t),this.bindTexture(e),s.dirtyParameterFlags&&(this.setTextureParameters(e),s.dirtyParameterFlags=0),(e._needsUpload||e._needsMipmapsUpload)&&(s.upload(this,e),e._needsUpload=!1,e._needsMipmapsUpload=!1)):this.bindTextureOnUnit(e,t)}createVertexArray(e){let t,s;const i=e.length>1;if(i){t="";for(let r=0;r<e.length;r++){const a=e[r];t+=a.id+a.format.renderingHash}s=this._vaoMap.get(t)}if(!s){const r=this.gl;s=r.createVertexArray(),r.bindVertexArray(s),r.bindBuffer(r.ELEMENT_ARRAY_BUFFER,null);for(let a=0;a<e.length;a++){const n=e[a];r.bindBuffer(r.ARRAY_BUFFER,n.impl.bufferId);const l=n.format.elements;for(let h=0;h<l.length;h++){const c=l[h],d=ge[c.name];c.asInt?r.vertexAttribIPointer(d,c.numComponents,this.glType[c.dataType],c.stride,c.offset):r.vertexAttribPointer(d,c.numComponents,this.glType[c.dataType],c.normalize,c.stride,c.offset),r.enableVertexAttribArray(d),n.format.instancing&&r.vertexAttribDivisor(d,1)}}r.bindVertexArray(null),r.bindBuffer(r.ARRAY_BUFFER,null),i&&this._vaoMap.set(t,s)}return s}unbindVertexArray(){this.boundVao&&(this.boundVao=null,this.gl.bindVertexArray(null))}setBuffers(e){const t=this.gl;let s;if(this.vertexBuffers.length===1){const r=this.vertexBuffers[0];r.impl.vao||(r.impl.vao=this.createVertexArray(this.vertexBuffers)),s=r.impl.vao}else s=this.createVertexArray(this.vertexBuffers);this.boundVao!==s&&(this.boundVao=s,t.bindVertexArray(s));const i=e?e.impl.bufferId:null;t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,i)}draw(e,t,s,i,r=!0,a=!0){const n=this.shader;if(n&&(this.activateShader(),this.shaderValid)){const l=this.gl;r&&this.setBuffers(t);let h=0;const c=n.impl.samplers;for(let p=0,m=c.length;p<m;p++){const _=c[p];let g=_.scopeId.value;if(!g){const y=_.scopeId.name;y==="uSceneDepthMap"&&(g=ta(this,"white")),y==="uSceneColorMap"&&(g=ta(this,"pink")),g||(g=ta(this,"pink"))}if(g instanceof ae){const y=g;this.setTexture(y,h),_.slot!==h&&(l.uniform1i(_.locationId,h),_.slot=h),h++}else{_.array.length=0;const y=g.length;for(let A=0;A<y;A++){const v=g[A];this.setTexture(v,h),_.array[A]=h,h++}l.uniform1iv(_.locationId,_.array)}}const d=n.impl.uniforms;for(let p=0,m=d.length;p<m;p++){const _=d[p],g=_.scopeId,y=_.version,A=g.versionObject.version;if(y.globalId!==A.globalId||y.revision!==A.revision){y.globalId=A.globalId,y.revision=A.revision;const v=g.value;v!=null&&this.commitFunction[_.dataType](_,v)}}this.transformFeedbackBuffer&&(l.bindBufferBase(l.TRANSFORM_FEEDBACK_BUFFER,0,this.transformFeedbackBuffer.impl.bufferId),l.beginTransformFeedback(l.POINTS));const f=this.glPrimitive[e.type],u=e.count;if(e.indexed){const p=t.impl.glFormat,m=e.base*t.bytesPerIndex;s>0?l.drawElementsInstanced(f,u,p,m,s):l.drawElements(f,u,p,m)}else{const p=e.base;s>0?l.drawArraysInstanced(f,p,u,s):l.drawArrays(f,p,u)}this.transformFeedbackBuffer&&(l.endTransformFeedback(),l.bindBufferBase(l.TRANSFORM_FEEDBACK_BUFFER,0,null)),this._drawCallsPerFrame++}a&&this.clearVertexBuffer()}clear(e){const t=this.defaultClearOptions;e=e||t;const s=e.flags??t.flags;if(s!==0){const i=this.gl;if(s&ll){const r=e.color??t.color,a=r[0],n=r[1],l=r[2],h=r[3],c=this.clearColor;(a!==c.r||n!==c.g||l!==c.b||h!==c.a)&&(this.gl.clearColor(a,n,l,h),this.clearColor.set(a,n,l,h)),this.setBlendState(dt.NOBLEND)}if(s&hl){const r=e.depth??t.depth;r!==this.clearDepth&&(this.gl.clearDepth(r),this.clearDepth=r),this.setDepthState(Gt.WRITEDEPTH)}if(s&yc){const r=e.stencil??t.stencil;r!==this.clearStencil&&(this.gl.clearStencil(r),this.clearStencil=r),i.stencilMask(255),this.stencilWriteMaskFront=255,this.stencilWriteMaskBack=255}i.clear(this.glClearFlag[s])}}submit(){this.gl.flush()}readPixels(e,t,s,i,r){const a=this.gl;a.readPixels(e,t,s,i,a.RGBA,a.UNSIGNED_BYTE,r)}clientWaitAsync(e,t){const s=this.gl,i=s.fenceSync(s.SYNC_GPU_COMMANDS_COMPLETE,0);return this.submit(),new Promise((r,a)=>{function n(){const l=s.clientWaitSync(i,e,0);l===s.TIMEOUT_EXPIRED?setTimeout(n,t):(s.deleteSync(i),l===s.WAIT_FAILED?a(new Error("webgl clientWaitSync sync failed")):r())}n()})}async readPixelsAsync(e,t,s,i,r){const a=this.gl,n=this.renderTarget.colorBuffer?.impl,l=n?._glFormat??a.RGBA,h=n?._glPixelType??a.UNSIGNED_BYTE,c=a.createBuffer();return a.bindBuffer(a.PIXEL_PACK_BUFFER,c),a.bufferData(a.PIXEL_PACK_BUFFER,r.byteLength,a.STREAM_READ),a.readPixels(e,t,s,i,l,h,0),a.bindBuffer(a.PIXEL_PACK_BUFFER,null),await this.clientWaitAsync(0,16),a.bindBuffer(a.PIXEL_PACK_BUFFER,c),a.getBufferSubData(a.PIXEL_PACK_BUFFER,0,r),a.bindBuffer(a.PIXEL_PACK_BUFFER,null),a.deleteBuffer(c),r}readTextureAsync(e,t,s,i,r,a){const n=a.face??0,l=a.renderTarget??new ct({colorBuffer:e,depth:!1,face:n}),h=new ArrayBuffer(Pi.calcLevelGpuSize(i,r,1,e._format)),c=a.data??new(vT(e._format))(h);return this.setRenderTarget(l),this.initRenderTarget(l),new Promise((d,f)=>{this.readPixelsAsync(t,s,i,r,c).then(u=>{a.renderTarget||l.destroy(),d(u)}).catch(f)})}async writeTextureAsync(e,t,s,i,r,a){const n=this.gl,l=e.impl,h=l?._glFormat??n.RGBA,c=l?._glPixelType??n.UNSIGNED_BYTE,d=n.createBuffer();n.bindBuffer(n.PIXEL_UNPACK_BUFFER,d),n.bufferData(n.PIXEL_UNPACK_BUFFER,a,n.STREAM_DRAW),n.bindTexture(n.TEXTURE_2D,l._glTexture),n.texSubImage2D(n.TEXTURE_2D,0,t,s,i,r,h,c,0),n.bindBuffer(n.PIXEL_UNPACK_BUFFER,null),e._needsUpload=!1,e._mipmapsUploaded=!1,await this.clientWaitAsync(0,16)}setAlphaToCoverage(e){this.alphaToCoverage!==e&&(this.alphaToCoverage=e,e?this.gl.enable(this.gl.SAMPLE_ALPHA_TO_COVERAGE):this.gl.disable(this.gl.SAMPLE_ALPHA_TO_COVERAGE))}setTransformFeedbackBuffer(e){if(this.transformFeedbackBuffer!==e){this.transformFeedbackBuffer=e;const t=this.gl;e?(this.feedback||(this.feedback=t.createTransformFeedback()),t.bindTransformFeedback(t.TRANSFORM_FEEDBACK,this.feedback)):t.bindTransformFeedback(t.TRANSFORM_FEEDBACK,null)}}setRaster(e){this.raster!==e&&(this.raster=e,e?this.gl.disable(this.gl.RASTERIZER_DISCARD):this.gl.enable(this.gl.RASTERIZER_DISCARD))}setStencilTest(e){if(this.stencil!==e){const t=this.gl;e?t.enable(t.STENCIL_TEST):t.disable(t.STENCIL_TEST),this.stencil=e}}setStencilFunc(e,t,s){(this.stencilFuncFront!==e||this.stencilRefFront!==t||this.stencilMaskFront!==s||this.stencilFuncBack!==e||this.stencilRefBack!==t||this.stencilMaskBack!==s)&&(this.gl.stencilFunc(this.glComparison[e],t,s),this.stencilFuncFront=this.stencilFuncBack=e,this.stencilRefFront=this.stencilRefBack=t,this.stencilMaskFront=this.stencilMaskBack=s)}setStencilFuncFront(e,t,s){if(this.stencilFuncFront!==e||this.stencilRefFront!==t||this.stencilMaskFront!==s){const i=this.gl;i.stencilFuncSeparate(i.FRONT,this.glComparison[e],t,s),this.stencilFuncFront=e,this.stencilRefFront=t,this.stencilMaskFront=s}}setStencilFuncBack(e,t,s){if(this.stencilFuncBack!==e||this.stencilRefBack!==t||this.stencilMaskBack!==s){const i=this.gl;i.stencilFuncSeparate(i.BACK,this.glComparison[e],t,s),this.stencilFuncBack=e,this.stencilRefBack=t,this.stencilMaskBack=s}}setStencilOperation(e,t,s,i){(this.stencilFailFront!==e||this.stencilZfailFront!==t||this.stencilZpassFront!==s||this.stencilFailBack!==e||this.stencilZfailBack!==t||this.stencilZpassBack!==s)&&(this.gl.stencilOp(this.glStencilOp[e],this.glStencilOp[t],this.glStencilOp[s]),this.stencilFailFront=this.stencilFailBack=e,this.stencilZfailFront=this.stencilZfailBack=t,this.stencilZpassFront=this.stencilZpassBack=s),(this.stencilWriteMaskFront!==i||this.stencilWriteMaskBack!==i)&&(this.gl.stencilMask(i),this.stencilWriteMaskFront=i,this.stencilWriteMaskBack=i)}setStencilOperationFront(e,t,s,i){(this.stencilFailFront!==e||this.stencilZfailFront!==t||this.stencilZpassFront!==s)&&(this.gl.stencilOpSeparate(this.gl.FRONT,this.glStencilOp[e],this.glStencilOp[t],this.glStencilOp[s]),this.stencilFailFront=e,this.stencilZfailFront=t,this.stencilZpassFront=s),this.stencilWriteMaskFront!==i&&(this.gl.stencilMaskSeparate(this.gl.FRONT,i),this.stencilWriteMaskFront=i)}setStencilOperationBack(e,t,s,i){(this.stencilFailBack!==e||this.stencilZfailBack!==t||this.stencilZpassBack!==s)&&(this.gl.stencilOpSeparate(this.gl.BACK,this.glStencilOp[e],this.glStencilOp[t],this.glStencilOp[s]),this.stencilFailBack=e,this.stencilZfailBack=t,this.stencilZpassBack=s),this.stencilWriteMaskBack!==i&&(this.gl.stencilMaskSeparate(this.gl.BACK,i),this.stencilWriteMaskBack=i)}setBlendState(e){const t=this.blendState;if(!t.equals(e)){const s=this.gl,{blend:i,colorOp:r,alphaOp:a,colorSrcFactor:n,colorDstFactor:l,alphaSrcFactor:h,alphaDstFactor:c}=e;if(t.blend!==i&&(i?s.enable(s.BLEND):s.disable(s.BLEND)),t.colorOp!==r||t.alphaOp!==a){const d=this.glBlendEquation;s.blendEquationSeparate(d[r],d[a])}(t.colorSrcFactor!==n||t.colorDstFactor!==l||t.alphaSrcFactor!==h||t.alphaDstFactor!==c)&&s.blendFuncSeparate(this.glBlendFunctionColor[n],this.glBlendFunctionColor[l],this.glBlendFunctionAlpha[h],this.glBlendFunctionAlpha[c]),t.allWrite!==e.allWrite&&this.gl.colorMask(e.redWrite,e.greenWrite,e.blueWrite,e.alphaWrite),t.copy(e)}}setBlendColor(e,t,s,i){const r=this.blendColor;(e!==r.r||t!==r.g||s!==r.b||i!==r.a)&&(this.gl.blendColor(e,t,s,i),r.set(e,t,s,i))}setStencilState(e,t){e||t?(this.setStencilTest(!0),e===t?(this.setStencilFunc(e.func,e.ref,e.readMask),this.setStencilOperation(e.fail,e.zfail,e.zpass,e.writeMask)):(e??=Ys.DEFAULT,this.setStencilFuncFront(e.func,e.ref,e.readMask),this.setStencilOperationFront(e.fail,e.zfail,e.zpass,e.writeMask),t??=Ys.DEFAULT,this.setStencilFuncBack(t.func,t.ref,t.readMask),this.setStencilOperationBack(t.fail,t.zfail,t.zpass,t.writeMask))):this.setStencilTest(!1)}setDepthState(e){const t=this.depthState;if(!t.equals(e)){const s=this.gl,i=e.write;t.write!==i&&s.depthMask(i);let{func:r,test:a}=e;!a&&i&&(a=!0,r=Ei),t.func!==r&&s.depthFunc(this.glComparison[r]),t.test!==a&&(a?s.enable(s.DEPTH_TEST):s.disable(s.DEPTH_TEST));const{depthBias:n,depthBiasSlope:l}=e;n||l?(this.depthBiasEnabled||(this.depthBiasEnabled=!0,this.gl.enable(this.gl.POLYGON_OFFSET_FILL)),s.polygonOffset(l,n)):this.depthBiasEnabled&&(this.depthBiasEnabled=!1,this.gl.disable(this.gl.POLYGON_OFFSET_FILL)),t.copy(e)}}setCullMode(e){if(this.cullMode!==e){if(e===lt)this.gl.disable(this.gl.CULL_FACE);else{this.cullMode===lt&&this.gl.enable(this.gl.CULL_FACE);const t=this.glCull[e];this.cullFace!==t&&(this.gl.cullFace(t),this.cullFace=t)}this.cullMode=e}}setShader(e,t=!1){e!==this.shader&&(this.shader=e,this.shaderAsyncCompile=t,this.shaderValid=void 0)}activateShader(){const{shader:e}=this,{impl:t}=e;this.shaderValid===void 0&&(e.failed?this.shaderValid=!1:e.ready||(this.shaderAsyncCompile?t.isLinked(this)?t.finalize(this,e)||(e.failed=!0,this.shaderValid=!1):this.shaderValid=!1:t.finalize(this,e)||(e.failed=!0,this.shaderValid=!1))),this.shaderValid===void 0&&(this.gl.useProgram(t.glProgram),this.shaderValid=!0)}clearVertexArrayObjectCache(){const e=this.gl;this._vaoMap.forEach((t,s,i)=>{e.deleteVertexArray(t)}),this._vaoMap.clear()}set fullscreen(e){e?this.gl.canvas.requestFullscreen():document.exitFullscreen()}get fullscreen(){return!!document.fullscreenElement}}let $I=0;class ua{constructor(e,t,s,i=Es,r,a){this.device=e,this.format=t,this.numIndices=s,this.usage=i,this.id=$I++,this.impl=e.createIndexBufferImpl(this,a);const n=KL[t];this.bytesPerIndex=n,this.numBytes=this.numIndices*n,r?this.setData(r):this.storage=new ArrayBuffer(this.numBytes),this.adjustVramSizeTracking(e._vram,this.numBytes),this.device.buffers.push(this)}destroy(){const e=this.device,t=e.buffers.indexOf(this);t!==-1&&e.buffers.splice(t,1),this.device.indexBuffer===this&&(this.device.indexBuffer=null),this.impl.initialized&&(this.impl.destroy(e),this.adjustVramSizeTracking(e._vram,-this.storage.byteLength))}adjustVramSizeTracking(e,t){e.ib+=t}loseContext(){this.impl.loseContext()}getFormat(){return this.format}getNumIndices(){return this.numIndices}lock(){return this.storage}unlock(){this.impl.unlock(this)}setData(e){return e.byteLength!==this.numBytes?!1:(this.storage=e,this.unlock(),!0)}_lockTypedArray(){const e=this.lock();return this.format===cr?new Uint32Array(e):this.format===hr?new Uint16Array(e):new Uint8Array(e)}writeData(e,t){const s=this._lockTypedArray();if(e.length>t)if(ArrayBuffer.isView(e))e=e.subarray(0,t),s.set(e);else for(let i=0;i<t;i++)s[i]=e[i];else s.set(e);this.unlock()}readData(e){const t=this._lockTypedArray(),s=this.numIndices;if(ArrayBuffer.isView(e))e.set(t);else{e.length=0;for(let i=0;i<s;i++)e[i]=t[i]}return s}}class XI{constructor(){this.clearValue=new q(0,0,0,1),this.clearValueLinear=new q(0,0,0,1),this.clear=!1,this.store=!1,this.resolve=!0,this.genMipmaps=!1}}class qI{constructor(){this.clearDepthValue=1,this.clearStencilValue=0,this.clearDepth=!1,this.clearStencil=!1,this.storeDepth=!1,this.resolveDepth=!1,this.storeStencil=!1}}class os{get colorOps(){return this.colorArrayOps[0]}constructor(e){this._enabled=!0,this._skipStart=!1,this._skipEnd=!1,this.executeEnabled=!0,this.samples=0,this.colorArrayOps=[],this.requiresCubemaps=!0,this.fullSizeClearRect=!0,this.beforePasses=[],this.afterPasses=[],this.device=e}set name(e){this._name=e}get name(){return this._name||(this._name=this.constructor.name),this._name}set scaleX(e){this._options.scaleX=e}get scaleX(){return this._options.scaleX}set scaleY(e){this._options.scaleY=e}get scaleY(){return this._options.scaleY}set options(e){this._options=e,e&&(this.scaleX=this.scaleX??1,this.scaleY=this.scaleY??1)}get options(){return this._options}init(e=null,t){this.options=t,this.renderTarget=e,this.samples=Math.max(this.renderTarget?this.renderTarget.samples:this.device.samples,1),this.allocateAttachments(),this.postInit()}allocateAttachments(){const e=this.renderTarget;this.depthStencilOps=new qI,e?.depthBuffer&&(this.depthStencilOps.storeDepth=!0);const t=e?e._colorBuffers?.length??0:1;this.colorArrayOps.length=0;for(let s=0;s<t;s++){const i=new XI;this.colorArrayOps[s]=i,this.samples===1&&(i.store=!0,i.resolve=!1);const r=this.renderTarget?._colorBuffers?.[s];if(this.renderTarget?.mipmaps&&r?.mipmaps){const a=pn(r._format);i.genMipmaps=!a}}}destroy(){}postInit(){}frameUpdate(){if(this._options&&this.renderTarget){const e=this._options.resizeSource??this.device.backBuffer,t=Math.floor(e.width*this.scaleX),s=Math.floor(e.height*this.scaleY);this.renderTarget.resize(t,s)}}before(){}execute(){}after(){}onEnable(){}onDisable(){}set enabled(e){this._enabled!==e&&(this._enabled=e,e?this.onEnable():this.onDisable())}get enabled(){return this._enabled}setClearColor(e){const t=this.colorArrayOps.length;for(let s=0;s<t;s++){const i=this.colorArrayOps[s];e&&(i.clearValue.copy(e),i.clearValueLinear.linear(e)),i.clear=!!e}}setClearDepth(e){e&&(this.depthStencilOps.clearDepthValue=e),this.depthStencilOps.clearDepth=e!==void 0}setClearStencil(e){e&&(this.depthStencilOps.clearStencilValue=e),this.depthStencilOps.clearStencil=e!==void 0}render(){if(this.enabled){const e=this.device,t=this.renderTarget!==void 0;this.before(),this.executeEnabled&&(t&&!this._skipStart&&e.startRenderPass(this),this.execute(),t&&!this._skipEnd&&e.endRenderPass(this)),this.after(),e.renderPassIndex++}}}function YI(o){this.array[this.index]=o}function jI(o,e){this.array[this.index]=o,this.array[this.index+1]=e}function KI(o,e,t){this.array[this.index]=o,this.array[this.index+1]=e,this.array[this.index+2]=t}function ZI(o,e,t,s){this.array[this.index]=o,this.array[this.index+1]=e,this.array[this.index+2]=t,this.array[this.index+3]=s}function QI(o,e,t){this.array[o]=e[t]}function JI(o,e,t){this.array[o]=e[t],this.array[o+1]=e[t+1]}function eM(o,e,t){this.array[o]=e[t],this.array[o+1]=e[t+1],this.array[o+2]=e[t+2]}function tM(o,e,t){this.array[o]=e[t],this.array[o+1]=e[t+1],this.array[o+2]=e[t+2],this.array[o+3]=e[t+3]}function sM(o,e,t){e[t]=this.array[o]}function iM(o,e,t){e[t]=this.array[o],e[t+1]=this.array[o+1]}function rM(o,e,t){e[t]=this.array[o],e[t+1]=this.array[o+1],e[t+2]=this.array[o+2]}function aM(o,e,t){e[t]=this.array[o],e[t+1]=this.array[o+1],e[t+2]=this.array[o+2],e[t+3]=this.array[o+3]}class nM{constructor(e,t,s){switch(this.index=0,this.numComponents=t.numComponents,s.interleaved?this.array=new Dn[t.dataType](e,t.offset):this.array=new Dn[t.dataType](e,t.offset,s.vertexCount*t.numComponents),this.stride=t.stride/this.array.constructor.BYTES_PER_ELEMENT,t.numComponents){case 1:this.set=YI,this.getToArray=sM,this.setFromArray=QI;break;case 2:this.set=jI,this.getToArray=iM,this.setFromArray=JI;break;case 3:this.set=KI,this.getToArray=rM,this.setFromArray=eM;break;case 4:this.set=ZI,this.getToArray=aM,this.setFromArray=tM;break}}get(e){return this.array[this.index+e]}set(e,t,s,i){}getToArray(e,t,s){}setFromArray(e,t,s){}}class jo{constructor(e){this.vertexBuffer=e,this.vertexFormatSize=e.getFormat().size,this.buffer=this.vertexBuffer.lock(),this.accessors=[],this.element={};const t=this.vertexBuffer.getFormat();for(let s=0;s<t.elements.length;s++){const i=t.elements[s];this.accessors[s]=new nM(this.buffer,i,t),this.element[i.name]=this.accessors[s]}}next(e=1){let t=0;const s=this.accessors,i=this.accessors.length;for(;t<i;){const r=s[t++];r.index+=e*r.stride}}end(){this.vertexBuffer.unlock()}writeData(e,t,s){const i=this.element[e];if(i){s>this.vertexBuffer.numVertices&&(s=this.vertexBuffer.numVertices);const r=i.numComponents;if(this.vertexBuffer.getFormat().interleaved){let a=0;for(let n=0;n<s;n++)i.setFromArray(a,t,n*r),a+=i.stride}else if(t.length>s*r){const a=s*r;if(ArrayBuffer.isView(t))t=t.subarray(0,a),i.array.set(t);else for(let n=0;n<a;n++)i.array[n]=t[n]}else i.array.set(t)}}readData(e,t){const s=this.element[e];let i=0;if(s){i=this.vertexBuffer.numVertices;let r;const a=s.numComponents;if(this.vertexBuffer.getFormat().interleaved){Array.isArray(t)&&(t.length=0),s.index=0;let n=0;for(r=0;r<i;r++)s.getToArray(n,t,r*a),n+=s.stride}else if(ArrayBuffer.isView(t))t.set(s.array);else{t.length=0;const n=i*a;for(r=0;r<n;r++)t[r]=s.array[r]}}return i}}const ve=class ve{get(e,t,s){typeof t=="function"&&(s=t,t={});const i=this.request("GET",e,t,s),{progress:r}=t;if(r){const a=l=>{l.lengthComputable&&r.fire("progress",l.loaded,l.total)},n=l=>{a(l),i.removeEventListener("loadstart",a),i.removeEventListener("progress",a),i.removeEventListener("loadend",n)};i.addEventListener("loadstart",a),i.addEventListener("progress",a),i.addEventListener("loadend",n)}return i}post(e,t,s,i){return typeof s=="function"&&(i=s,s={}),s.postdata=t,this.request("POST",e,s,i)}put(e,t,s,i){return typeof s=="function"&&(i=s,s={}),s.postdata=t,this.request("PUT",e,s,i)}del(e,t,s){return typeof t=="function"&&(s=t,t={}),this.request("DELETE",e,t,s)}request(e,t,s,i){let r,a,n,l=!1;if(typeof s=="function"&&(i=s,s={}),s.retry&&(s=Object.assign({retries:0,maxRetries:5},s)),s.callback=i,s.async==null&&(s.async=!0),s.headers==null&&(s.headers={}),s.postdata!=null)if(s.postdata instanceof Document)n=s.postdata;else if(s.postdata instanceof FormData)n=s.postdata;else if(s.postdata instanceof Object){let c=s.headers["Content-Type"];switch(c===void 0&&(s.headers["Content-Type"]=ve.ContentType.FORM_URLENCODED,c=s.headers["Content-Type"]),c){case ve.ContentType.FORM_URLENCODED:{n="";let d=!0;for(const f in s.postdata)if(s.postdata.hasOwnProperty(f)){d?d=!1:n+="&";const u=encodeURIComponent(f),p=encodeURIComponent(s.postdata[f]);n+=`${u}=${p}`}break}default:case ve.ContentType.JSON:c==null&&(s.headers["Content-Type"]=ve.ContentType.JSON),n=JSON.stringify(s.postdata);break}}else n=s.postdata;if(s.cache===!1){const c=Mi();r=new Of(t),r.query?r.query=`${r.query}&ts=${c}`:r.query=`ts=${c}`,t=r.toString()}s.query&&(r=new Of(t),a=_c(r.getQuery(),s.query),r.setQuery(a),t=r.toString());const h=new XMLHttpRequest;h.open(e,t,s.async),h.withCredentials=s.withCredentials!==void 0?s.withCredentials:!1,h.responseType=s.responseType||this._guessResponseType(t);for(const c in s.headers)s.headers.hasOwnProperty(c)&&h.setRequestHeader(c,s.headers[c]);h.onreadystatechange=()=>{this._onReadyStateChange(e,t,s,h)},h.onerror=()=>{this._onError(e,t,s,h),l=!0};try{h.send(n)}catch(c){l||s.error(h.status,h,c)}return h}_guessResponseType(e){const t=new Of(e),s=le.getExtension(t.path).toLowerCase();return ve.binaryExtensions.indexOf(s)>=0?ve.ResponseType.ARRAY_BUFFER:s===".json"?ve.ResponseType.JSON:s===".xml"?ve.ResponseType.DOCUMENT:ve.ResponseType.TEXT}_isBinaryContentType(e){return[ve.ContentType.BASIS,ve.ContentType.BIN,ve.ContentType.DDS,ve.ContentType.GLB,ve.ContentType.MP3,ve.ContentType.MP4,ve.ContentType.OGG,ve.ContentType.OPUS,ve.ContentType.WAV].indexOf(e)>=0}_isBinaryResponseType(e){return e===ve.ResponseType.ARRAY_BUFFER||e===ve.ResponseType.BLOB||e===ve.ResponseType.JSON}_onReadyStateChange(e,t,s,i){if(i.readyState===4)switch(i.status){case 0:{i.responseURL&&i.responseURL.startsWith("file:///")?this._onSuccess(e,t,s,i):this._onError(e,t,s,i);break}case 200:case 201:case 206:case 304:{this._onSuccess(e,t,s,i);break}default:{this._onError(e,t,s,i);break}}}_onSuccess(e,t,s,i){let r,a;const n=i.getResponseHeader("Content-Type");n&&(a=n.split(";")[0].trim());try{this._isBinaryContentType(a)||this._isBinaryResponseType(i.responseType)?r=i.response:a===ve.ContentType.JSON||t.split("?")[0].endsWith(".json")?r=JSON.parse(i.responseText):i.responseType===ve.ResponseType.DOCUMENT||a===ve.ContentType.XML?r=i.responseXML:r=i.responseText,s.callback(null,r)}catch(l){s.callback(l)}}_onError(e,t,s,i){if(!s.retrying)if(s.retry&&s.retries<s.maxRetries){s.retries++,s.retrying=!0;const r=B.clamp(Math.pow(2,s.retries)*ve.retryDelay,0,s.maxRetryDelay||5e3);console.log(`${e}: ${t} - Error ${i.status}. Retrying in ${r} ms`),setTimeout(()=>{s.retrying=!1,this.request(e,t,s,s.callback)},r)}else s.callback(i.status===0?"Network error":i.status,null)}};ve.ContentType={AAC:"audio/aac",BASIS:"image/basis",BIN:"application/octet-stream",DDS:"image/dds",FORM_URLENCODED:"application/x-www-form-urlencoded",GIF:"image/gif",GLB:"model/gltf-binary",JPEG:"image/jpeg",JSON:"application/json",MP3:"audio/mpeg",MP4:"audio/mp4",OGG:"audio/ogg",OPUS:'audio/ogg; codecs="opus"',PNG:"image/png",TEXT:"text/plain",WAV:"audio/x-wav",XML:"application/xml"},ve.ResponseType={TEXT:"text",ARRAY_BUFFER:"arraybuffer",BLOB:"blob",DOCUMENT:"document",JSON:"json"},ve.binaryExtensions=[".model",".wav",".ogg",".mp3",".mp4",".m4a",".aac",".dds",".basis",".glb",".opus"],ve.retryDelay=100;let $t=ve;const He=new $t,C_="linear",oM="inverse",lM="exponential";class hM{constructor(e){this.position=new x,this.orientation=new $,this._manager=e}getPosition(){return this.position}setPosition(e){this.position.copy(e);const t=this.listener;t&&("positionX"in t?(t.positionX.value=e.x,t.positionY.value=e.y,t.positionZ.value=e.z):t.setPosition&&t.setPosition(e.x,e.y,e.z))}setOrientation(e){this.orientation.copy(e);const t=this.listener;if(t){const s=e.data;"forwardX"in t?(t.forwardX.value=-s[8],t.forwardY.value=-s[9],t.forwardZ.value=-s[10],t.upX.value=s[4],t.upY.value=s[5],t.upZ.value=s[6]):t.setOrientation&&t.setOrientation(-s[8],-s[9],-s[10],s[4],s[5],s[6])}}getOrientation(){return this.orientation}get listener(){const e=this._manager.context;return e?e.listener:null}}const fh="running",Rv=["click","touchstart","mousedown"];class cM extends ne{constructor(){super(),this._context=null,this.AudioContext=typeof AudioContext<"u"&&AudioContext||typeof webkitAudioContext<"u"&&webkitAudioContext,this.AudioContext,this._unlockHandlerFunc=this._unlockHandler.bind(this),this._userSuspended=!1,this.listener=new hM(this),this._volume=1}set volume(e){e=B.clamp(e,0,1),this._volume=e,this.fire("volumechange",e)}get volume(){return this._volume}get suspended(){return this._userSuspended}get context(){return!this._context&&this.AudioContext&&(this._context=new this.AudioContext,this._context.state!==fh&&this._registerUnlockListeners()),this._context}suspend(){this._userSuspended||(this._userSuspended=!0,this._context&&this._context.state===fh&&this._suspend())}resume(){this._userSuspended&&(this._userSuspended=!1,this._context&&this._context.state!==fh&&this._resume())}destroy(){this.fire("destroy"),this._context&&(this._removeUnlockListeners(),this._context?.close(),this._context=null)}_resume(){this._context.resume().then(()=>{const e=this._context.createBufferSource();e.buffer=this._context.createBuffer(1,1,this._context.sampleRate),e.connect(this._context.destination),e.start(0),e.onended=t=>{e.disconnect(0),this.fire("resume")}},e=>{}).catch(e=>{})}_suspend(){this._context.suspend().then(()=>{this.fire("suspend")},e=>{}).catch(e=>{})}_unlockHandler(){this._removeUnlockListeners(),!this._userSuspended&&this._context.state!==fh&&this._resume()}_registerUnlockListeners(){Rv.forEach(e=>{window.addEventListener(e,this._unlockHandlerFunc,!1)})}_removeUnlockListeners(){Rv.forEach(e=>{window.removeEventListener(e,this._unlockHandlerFunc,!1)})}}class dM{constructor(e){e instanceof Audio?this.audio=e:this.buffer=e}get duration(){let e=0;return this.buffer?e=this.buffer.duration:this.audio&&(e=this.audio.duration),e||0}}function Hl(){return typeof AudioContext<"u"||typeof webkitAudioContext<"u"}const xt=0,mn=1,_s=2;function At(o,e){return o%e||0}const kr=class kr extends ne{constructor(e,t,s){super(),this.source=null,this._manager=e,this._volume=s.volume!==void 0?B.clamp(Number(s.volume)||0,0,1):1,this._pitch=s.pitch!==void 0?Math.max(.01,Number(s.pitch)||0):1,this._loop=!!(s.loop!==void 0&&s.loop),this._sound=t,this._state=_s,this._suspended=!1,this._suspendEndEvent=0,this._suspendInstanceEvents=!1,this._playWhenLoaded=!0,this._startTime=Math.max(0,Number(s.startTime)||0),this._duration=Math.max(0,Number(s.duration)||0),this._startOffset=null,this._onPlayCallback=s.onPlay,this._onPauseCallback=s.onPause,this._onResumeCallback=s.onResume,this._onStopCallback=s.onStop,this._onEndCallback=s.onEnd,Hl()?(this._startedAt=0,this._currentTime=0,this._currentOffset=0,this._inputNode=null,this._connectorNode=null,this._firstNode=null,this._lastNode=null,this._waitingContextSuspension=!1,this._initializeNodes(),this._endedHandler=this._onEnded.bind(this)):(this._isReady=!1,this._loadedMetadataHandler=this._onLoadedMetadata.bind(this),this._timeUpdateHandler=this._onTimeUpdate.bind(this),this._endedHandler=this._onEnded.bind(this),this._createSource())}set currentTime(e){if(!(e<0))if(this._state===xt){const t=this._suspendInstanceEvents;this._suspendInstanceEvents=!0,this.stop(),this._startOffset=e,this.play(),this._suspendInstanceEvents=t}else this._startOffset=e,this._currentTime=e}get currentTime(){return this._startOffset!==null?this._startOffset:this._state===mn?this._currentTime:this._state===_s||!this.source?0:(this._updateCurrentTime(),this._currentTime)}set duration(e){this._duration=Math.max(0,Number(e)||0);const t=this._state===xt;this.stop(),t&&this.play()}get duration(){return this._sound?this._duration?At(this._duration,this._sound.duration):this._sound.duration:0}get isPaused(){return this._state===mn}get isPlaying(){return this._state===xt}get isStopped(){return this._state===_s}get isSuspended(){return this._suspended}set loop(e){this._loop=!!e,this.source&&(this.source.loop=this._loop)}get loop(){return this._loop}set pitch(e){this._currentOffset=this.currentTime,this._startedAt=this._manager.context.currentTime,this._pitch=Math.max(Number(e)||0,.01),this.source&&(this.source.playbackRate.value=this._pitch)}get pitch(){return this._pitch}set sound(e){this._sound=e,this._state!==_s?this.stop():this._createSource()}get sound(){return this._sound}set startTime(e){this._startTime=Math.max(0,Number(e)||0);const t=this._state===xt;this.stop(),t&&this.play()}get startTime(){return this._startTime}set volume(e){e=B.clamp(e,0,1),this._volume=e,this.gain&&(this.gain.gain.value=e*this._manager.volume)}get volume(){return this._volume}_onPlay(){this.fire("play"),this._onPlayCallback&&this._onPlayCallback(this)}_onPause(){this.fire("pause"),this._onPauseCallback&&this._onPauseCallback(this)}_onResume(){this.fire("resume"),this._onResumeCallback&&this._onResumeCallback(this)}_onStop(){this.fire("stop"),this._onStopCallback&&this._onStopCallback(this)}_onEnded(){if(this._suspendEndEvent>0){this._suspendEndEvent--;return}this.fire("end"),this._onEndCallback&&this._onEndCallback(this),this.stop()}_onManagerVolumeChange(){this.volume=this._volume}_onManagerSuspend(){this._state===xt&&!this._suspended&&(this._suspended=!0,this.pause())}_onManagerResume(){this._suspended&&(this._suspended=!1,this.resume())}_initializeNodes(){this.gain=this._manager.context.createGain(),this._inputNode=this.gain,this._connectorNode=this.gain,this._connectorNode.connect(this._manager.context.destination)}play(){return this._state!==_s&&this.stop(),this._state=xt,this._playWhenLoaded=!1,this._waitingContextSuspension?!1:this._manager.suspended?(this._manager.once("resume",this._playAudioImmediate,this),this._waitingContextSuspension=!0,!1):(this._playAudioImmediate(),!0)}_playAudioImmediate(){if(this._waitingContextSuspension=!1,this._state!==xt)return;this.source||this._createSource();let e=At(this._startOffset,this.duration);e=At(this._startTime+e,this._sound.duration),this._startOffset=null,this._duration?this.source.start(0,e,this._duration):this.source.start(0,e),this._startedAt=this._manager.context.currentTime,this._currentTime=0,this._currentOffset=e,this.volume=this._volume,this.loop=this._loop,this.pitch=this._pitch,this._manager.on("volumechange",this._onManagerVolumeChange,this),this._manager.on("suspend",this._onManagerSuspend,this),this._manager.on("resume",this._onManagerResume,this),this._manager.on("destroy",this._onManagerDestroy,this),this._suspendInstanceEvents||this._onPlay()}pause(){return this._playWhenLoaded=!1,this._state!==xt?!1:(this._state=mn,this._waitingContextSuspension||(this._updateCurrentTime(),this._suspendEndEvent++,this.source.stop(0),this.source=null,this._startOffset=null,this._suspendInstanceEvents||this._onPause()),!0)}resume(){if(this._state!==mn)return!1;let e=this.currentTime;return this._state=xt,this._waitingContextSuspension||(this.source||this._createSource(),this._startOffset!==null&&(e=At(this._startOffset,this.duration),e=At(this._startTime+e,this._sound.duration),this._startOffset=null),this._duration?this.source.start(0,e,this._duration):this.source.start(0,e),this._startedAt=this._manager.context.currentTime,this._currentOffset=e,this.volume=this._volume,this.loop=this._loop,this.pitch=this._pitch,this._playWhenLoaded=!1,this._suspendInstanceEvents||this._onResume()),!0}stop(){if(this._playWhenLoaded=!1,this._state===_s)return!1;const e=this._state===xt;return this._state=_s,this._waitingContextSuspension||(this._manager.off("volumechange",this._onManagerVolumeChange,this),this._manager.off("suspend",this._onManagerSuspend,this),this._manager.off("resume",this._onManagerResume,this),this._manager.off("destroy",this._onManagerDestroy,this),this._startedAt=0,this._currentTime=0,this._currentOffset=0,this._startOffset=null,this._suspendEndEvent++,e&&this.source&&this.source.stop(0),this.source=null,this._suspendInstanceEvents||this._onStop()),!0}setExternalNodes(e,t){if(!e){console.error("The firstNode must be a valid Audio Node");return}t||(t=e);const s=this._manager.context.destination;this._firstNode!==e&&(this._firstNode?this._connectorNode.disconnect(this._firstNode):this._connectorNode.disconnect(s),this._firstNode=e,this._connectorNode.connect(e)),this._lastNode!==t&&(this._lastNode&&this._lastNode.disconnect(s),this._lastNode=t,this._lastNode.connect(s))}clearExternalNodes(){const e=this._manager.context.destination;this._firstNode&&(this._connectorNode.disconnect(this._firstNode),this._firstNode=null),this._lastNode&&(this._lastNode.disconnect(e),this._lastNode=null),this._connectorNode.connect(e)}getExternalNodes(){return[this._firstNode,this._lastNode]}_createSource(){if(!this._sound)return null;const e=this._manager.context;return this._sound.buffer&&(this.source=e.createBufferSource(),this.source.buffer=this._sound.buffer,this.source.connect(this._inputNode),this.source.onended=this._endedHandler,this.source.loopStart=At(this._startTime,this.source.buffer.duration),this._duration&&(this.source.loopEnd=Math.max(this.source.loopStart,At(this._startTime+this._duration,this.source.buffer.duration)))),this.source}_updateCurrentTime(){this._currentTime=At((this._manager.context.currentTime-this._startedAt)*this._pitch+this._currentOffset,this.duration)}_onManagerDestroy(){this.source&&this._state===xt&&(this.source.stop(0),this.source=null)}};kr.EVENT_PLAY="play",kr.EVENT_PAUSE="pause",kr.EVENT_RESUME="resume",kr.EVENT_STOP="stop",kr.EVENT_END="end";let xi=kr;Hl()||(Object.assign(xi.prototype,{play:function(){return this._state!==_s&&this.stop(),!this.source&&!this._createSource()?!1:(this.volume=this._volume,this.pitch=this._pitch,this.loop=this._loop,this.source.play(),this._state=xt,this._playWhenLoaded=!1,this._manager.on("volumechange",this._onManagerVolumeChange,this),this._manager.on("suspend",this._onManagerSuspend,this),this._manager.on("resume",this._onManagerResume,this),this._manager.on("destroy",this._onManagerDestroy,this),this._manager.suspended&&this._onManagerSuspend(),this._suspendInstanceEvents||this._onPlay(),!0)},pause:function(){return!this.source||this._state!==xt?!1:(this._suspendEndEvent++,this.source.pause(),this._playWhenLoaded=!1,this._state=mn,this._startOffset=null,this._suspendInstanceEvents||this._onPause(),!0)},resume:function(){return!this.source||this._state!==mn?!1:(this._state=xt,this._playWhenLoaded=!1,this.source.paused&&(this.source.play(),this._suspendInstanceEvents||this._onResume()),!0)},stop:function(){return!this.source||this._state===_s?!1:(this._manager.off("volumechange",this._onManagerVolumeChange,this),this._manager.off("suspend",this._onManagerSuspend,this),this._manager.off("resume",this._onManagerResume,this),this._manager.off("destroy",this._onManagerDestroy,this),this._suspendEndEvent++,this.source.pause(),this._playWhenLoaded=!1,this._state=_s,this._startOffset=null,this._suspendInstanceEvents||this._onStop(),!0)},setExternalNodes:function(){},clearExternalNodes:function(){},getExternalNodes:function(){return[null,null]},_onLoadedMetadata:function(){this.source.removeEventListener("loadedmetadata",this._loadedMetadataHandler),this._isReady=!0;let o=At(this._startOffset,this.duration);o=At(this._startTime+o,this._sound.duration),this._startOffset=null,this.source.currentTime=o},_createSource:function(){return this._sound&&this._sound.audio&&(this._isReady=!1,this.source=this._sound.audio.cloneNode(!0),this.source.addEventListener("loadedmetadata",this._loadedMetadataHandler),this.source.addEventListener("timeupdate",this._timeUpdateHandler),this.source.onended=this._endedHandler),this.source},_onTimeUpdate:function(){this._duration&&this.source.currentTime>At(this._startTime+this._duration,this.source.duration)&&(this.loop?this.source.currentTime=At(this._startTime,this.source.duration):(this.source.removeEventListener("timeupdate",this._timeUpdateHandler),this.source.pause(),this._onEnded()))},_onManagerDestroy:function(){this.source&&this.source.pause()}}),Object.defineProperty(xi.prototype,"volume",{get:function(){return this._volume},set:function(o){o=B.clamp(o,0,1),this._volume=o,this.source&&(this.source.volume=o*this._manager.volume)}}),Object.defineProperty(xi.prototype,"pitch",{get:function(){return this._pitch},set:function(o){this._pitch=Math.max(Number(o)||0,.01),this.source&&(this.source.playbackRate=this._pitch)}}),Object.defineProperty(xi.prototype,"sound",{get:function(){return this._sound},set:function(o){this.stop(),this._sound=o}}),Object.defineProperty(xi.prototype,"currentTime",{get:function(){return this._startOffset!==null?this._startOffset:this._state===_s||!this.source?0:this.source.currentTime-this._startTime},set:function(o){o<0||(this._startOffset=o,this.source&&this._isReady&&(this.source.currentTime=At(this._startTime+At(o,this.duration),this._sound.duration),this._startOffset=null))}}));const fM=1e4;class cn extends xi{constructor(e,t,s={}){super(e,t,s),this._position=new x,this._velocity=new x,s.position&&(this.position=s.position),this.maxDistance=s.maxDistance!==void 0?Number(s.maxDistance):fM,this.refDistance=s.refDistance!==void 0?Number(s.refDistance):1,this.rollOffFactor=s.rollOffFactor!==void 0?Number(s.rollOffFactor):1,this.distanceModel=s.distanceModel!==void 0?s.distanceModel:C_}_initializeNodes(){this.gain=this._manager.context.createGain(),this.panner=this._manager.context.createPanner(),this.panner.connect(this.gain),this._inputNode=this.panner,this._connectorNode=this.gain,this._connectorNode.connect(this._manager.context.destination)}set position(e){this._position.copy(e);const t=this.panner;"positionX"in t?(t.positionX.value=e.x,t.positionY.value=e.y,t.positionZ.value=e.z):t.setPosition&&t.setPosition(e.x,e.y,e.z)}get position(){return this._position}set velocity(e){this._velocity.copy(e)}get velocity(){return this._velocity}set maxDistance(e){this.panner.maxDistance=e}get maxDistance(){return this.panner.maxDistance}set refDistance(e){this.panner.refDistance=e}get refDistance(){return this.panner.refDistance}set rollOffFactor(e){this.panner.rolloffFactor=e}get rollOffFactor(){return this.panner.rolloffFactor}set distanceModel(e){this.panner.distanceModel=e}get distanceModel(){return this.panner.distanceModel}}if(!Hl()){let o=new x;const e=function(t,s,i,r,a,n){o=o.sub2(t,s);const l=o.length();if(l<i)return 1;if(l>r)return 0;let h=0;return n===C_?h=1-a*(l-i)/(r-i):n===oM?h=i/(i+a*(l-i)):n===lM&&(h=Math.pow(l/i,-a)),B.clamp(h,0,1)};Object.defineProperty(cn.prototype,"position",{get:function(){return this._position},set:function(t){if(this._position.copy(t),this.source){const i=this._manager.listener.getPosition(),r=e(i,this._position,this.refDistance,this.maxDistance,this.rollOffFactor,this.distanceModel),a=this.volume;this.source.volume=a*r*this._manager.volume}}}),Object.defineProperty(cn.prototype,"maxDistance",{get:function(){return this._maxDistance},set:function(t){this._maxDistance=t}}),Object.defineProperty(cn.prototype,"refDistance",{get:function(){return this._refDistance},set:function(t){this._refDistance=t}}),Object.defineProperty(cn.prototype,"rollOffFactor",{get:function(){return this._rollOffFactor},set:function(t){this._rollOffFactor=t}}),Object.defineProperty(cn.prototype,"distanceModel",{get:function(){return this._distanceModel},set:function(t){this._distanceModel=t}})}const P_=0,L_=1,ii=2,ts=3,pa=4,I_=5,M_=6,D_=7,R_=8,O_=9,N_=10,KT={[P_]:"SUBTRACTIVE",[L_]:"ADDITIVE",[ii]:"NORMAL",[ts]:"NONE",[pa]:"PREMULTIPLIED",[I_]:"MULTIPLICATIVE",[M_]:"ADDITIVEALPHA",[D_]:"MULTIPLICATIVE2X",[R_]:"SCREEN",[O_]:"MIN",[N_]:"MAX"},po="none",uM="linear",pM=0,F_=2,mM={[pM]:"NONE",[F_]:"SCHLICK"},_M=0,ZT=15,Ni=0,kt=1,k_=2,U_=3,sf=4,oe=0,Me=1,Re=2,Ov={[oe]:"DIRECTIONAL",[Me]:"OMNI",[Re]:"SPOT"},Qh=100,xs=0,QT=1,JT=2,ex=3,gM={[xs]:"PUNCTUAL",[QT]:"RECT",[JT]:"DISK",[ex]:"SPHERE"},B_=0,tx=1,vM={[B_]:"LINEAR",[tx]:"INVERSESQUARED"},vs=0,np=2,V_=3,SM=4,sx=5,gl=6,ix=7,rx=8,yM=9,Li=new Map([[sx,{name:"PCF1_32F",kind:"PCF1",format:wi,pcf:!0}],[vs,{name:"PCF3_32F",kind:"PCF3",format:wi,pcf:!0}],[SM,{name:"PCF5_32F",kind:"PCF5",format:wi,pcf:!0}],[ix,{name:"PCF1_16F",kind:"PCF1",format:Ln,pcf:!0}],[rx,{name:"PCF3_16F",kind:"PCF3",format:Ln,pcf:!0}],[yM,{name:"PCF5_16F",kind:"PCF5",format:Ln,pcf:!0}],[np,{name:"VSM_16F",kind:"VSM",format:et,vsm:!0}],[V_,{name:"VSM_32F",kind:"VSM",format:ft,vsm:!0}],[gl,{name:"PCSS_32F",kind:"PCSS",format:Oi,pcss:!0}]]),TM=255,z_=1,op=0,ax=0,Vs=0,xM=1,Lc=0,EM=1,zs=0,Rn=1,_n=0,Dr=1,uh=2,H_=0,nx=1,AM={[H_]:"NONE",[nx]:"BOX"},Nv="mul",Gl=0,Jh=1,bM={[Gl]:"NONE",[Jh]:"SRGB"},G_=0,ox=6,lx=["LINEAR","FILMIC","HEJL","ACES","ACES2","NEUTRAL","NONE"],hx=0,rf=1,cx=2,wM={[hx]:"NONE",[rf]:"AO",[cx]:"GLOSSDEPENDENT"},ir="none",Ic="envAtlas",Mc="envAtlasHQ",Dc="cubeMap",dx="sphereMap",CM={[ir]:"NONE",[Ic]:"ENVATLAS",[Mc]:"ENVATLASHQ",[Dc]:"CUBEMAP",[dx]:"SPHEREMAP"},W_="ambientSH",$_="envAtlas",X_="constant",PM={[W_]:"AMBIENTSH",[$_]:"ENVALATLAS",[X_]:"CONSTANT"},q_=1,af=2,Y_=4,fx=8,ux=16,nf=32,lp=64,px=128,j_=256,K_=512,of=1024,lf=2048,mx=4096,hf=8192,hp=16384,ss=0,rr=1,Z_=2,As=1,ma=2,sa=4,wa=0,cf=1,_x=2,df=3,Ws=0,it=1,rt=2,LM={[Ws]:"SIMPLE",[it]:"SLICED",[rt]:"TILED"},ec=1,ph=0,tc=0,IM=1,MM=2,Fv=3,DM=4,RM=5,Q_=0,cp=1,ce=0,Pe=1,sc="infinite",OM="box",NM="dome",_a="none",FM="bayer8",kM="bluenoise",UM="ignnoise",BM={[_a]:"NONE",[FM]:"BAYER8",[kM]:"BLUENOISE",[UM]:"IGNNOISE"},VM="prerender",zM="postrender",HM="prerender:layer",GM="postrender:layer",gx="precull",vx="postcull",WM="cull:end";class ff{constructor(e,t,s){this.uniformFormats=[],this.bindGroupFormats=[],this.uniformFormats[_l]=e,this.bindGroupFormats[_l]=t,this.vertexFormat=s}hasUniform(e){for(let t=0;t<this.uniformFormats.length;t++)if(this.uniformFormats[t]?.get(e))return!0;return!1}hasTexture(e){for(let t=0;t<this.bindGroupFormats.length;t++)if(this.bindGroupFormats[t]?.getTexture(e))return!0;return!1}getVertexElement(e){return this.vertexFormat?.elements.find(t=>t.name===e)}generateKey(e){let t=JSON.stringify(this.uniformFormats)+JSON.stringify(this.bindGroupFormats);return e.isWebGPU&&(t+=this.vertexFormat?.shaderProcessingHashString),t}}const Sx=new Tt;function io(o){return Sx.get(o)}function $M(o,e){Sx.get(o,()=>e)}class ga{static definesHash(e){const t=Array.from(e).sort((s,i)=>s[0]>i[0]?1:-1);return $s(JSON.stringify(t))}}const XM=new Tt;class qM{constructor(e,t,s={}){this.defines=new Map,this.name=e,this.index=t,Object.assign(this,s),this.buildShaderDefines()}buildShaderDefines(){let e;this.isShadow?e="SHADOW":this.isForward?e="FORWARD":this.index===df&&(e="PICK"),this.defines.set(`${e}_PASS`,""),this.defines.set(`${this.name.toUpperCase()}_PASS`,"")}}class Js{constructor(){this.passesNamed=new Map,this.passesIndexed=[],this.nextIndex=0;const e=(t,s,i)=>{this.allocate(t,i)};e("forward",wa,{isForward:!0}),e("prepass"),e("shadow"),e("pick")}static get(e){return XM.get(e,()=>new Js)}allocate(e,t){let s=this.passesNamed.get(e);return s===void 0&&(s=new qM(e,this.nextIndex,t),this.passesNamed.set(s.name,s),this.passesIndexed[s.index]=s,this.nextIndex++),s}getByIndex(e){return this.passesIndexed[e]}getByName(e){return this.passesNamed.get(e)}}class kv extends Map{set(e,t){return(!this.has(e)||this.get(e)!==t)&&this.markDirty(),super.set(e,t)}add(e){for(const[t,s]of Object.entries(e))this.set(t,s);return this}delete(e){const t=this.has(e),s=super.delete(e);return t&&s&&this.markDirty(),s}clear(){this.size>0&&this.markDirty(),super.clear()}markDirty(){this._dirty=!0,this._keyDirty=!0}isDirty(){return this._dirty}resetDirty(){this._dirty=!1}get key(){return this._keyDirty&&(this._keyDirty=!1,this._key=Array.from(this.entries()).sort(([e],[t])=>e<t?-1:e>t?1:0).map(([e,t])=>`${e}=${$s(t)}`).join(",")),this._key}copy(e){this.clear();for(const[t,s]of e)this.set(t,s);return this}constructor(...e){super(...e),this._keyDirty=!1,this._key=""}}const YM=new Tt;class de{static get(e,t=Ee){const s=YM.get(e,()=>new de);return t===Ee?s.glsl:s.wgsl}get useWGSL(){return this.glsl.size===0||this.wgsl.size>0}get key(){return`GLSL:${this.glsl.key}|WGSL:${this.wgsl.key}|API:${this.version}`}isDirty(){return this.glsl.isDirty()||this.wgsl.isDirty()}resetDirty(){this.glsl.resetDirty(),this.wgsl.resetDirty()}copy(e){return this.version=e.version,this.glsl.copy(e.glsl),this.wgsl.copy(e.wgsl),this}constructor(){this.glsl=new kv,this.wgsl=new kv,this.version=""}}class Rc{static merge(...e){const t=new Map(e[0]??[]);for(let s=1;s<e.length;s++){const i=e[s];if(i)for(const[r,a]of i)t.set(r,a)}return t}}class jM extends ga{constructor(e,t){super(),this.key=e,this.shaderDefinition=t}generateKey(e){return this.key}createShaderDefinition(e,t){return this.shaderDefinition}}class vt{static createShader(e,t){const s=io(e);let i=s.getCachedShader(t.uniqueName);if(!i){const r=e.isWebGPU&&(!!t.vertexWGSL||!!t.vertexChunk)&&(!!t.fragmentWGSL||!!t.fragmentChunk),a=de.get(e,r?Be:Ee),n=t.vertexChunk?a.get(t.vertexChunk):r?t.vertexWGSL:t.vertexGLSL,l=t.fragmentChunk?a.get(t.fragmentChunk):r?t.fragmentWGSL:t.fragmentGLSL,h=Rc.merge(a,t.fragmentIncludes),c=Rc.merge(a,t.vertexIncludes);i=new YT(e,Et.createDefinition(e,{name:t.uniqueName,shaderLanguage:r?Be:Ee,attributes:t.attributes,vertexCode:n,fragmentCode:l,useTransformFeedback:t.useTransformFeedback,vertexIncludes:c,vertexDefines:t.vertexDefines,fragmentIncludes:h,fragmentDefines:t.fragmentDefines,fragmentOutputTypes:t.fragmentOutputTypes})),s.setCachedShader(t.uniqueName,i)}return i}static getCoreDefines(e,t){const s=new Map(e.defines);return t.cameraShaderParams.defines.forEach((r,a)=>s.set(a,r)),Js.get(t.device).getByIndex(t.pass).defines.forEach((r,a)=>s.set(a,r)),s}static processShader(e,t){const s=e.definition,r=`${s.name??"shader"}-id-${e.id}`,a=new jM(r,s),n="shader",l=io(e.device);l.register(n,a);const h=l.getProgram(n,{},t);return l.unregister(n),h}static addScreenDepthChunkDefines(e,t,s){t.sceneDepthMapLinear&&s.set("SCENE_DEPTHMAP_LINEAR",""),e.textureFloatRenderable&&s.set("SCENE_DEPTHMAP_FLOAT","")}}const KM={type:dr,base:0,baseVertex:0,count:4,indexed:!1},To=new K,xo=new K,Hf=new UT;class Oc{constructor(e){const t=e.device;if(this.shader=e,t.supportsUniformBuffers){const s=new ff;this.shader=vt.processShader(e,s);const i=this.shader.meshUniformBufferFormat;i&&(this.uniformBuffer=new w_(t,i,!1));const r=this.shader.meshBindGroupFormat;this.bindGroup=new A_(t,r)}}destroy(){this.uniformBuffer?.destroy(),this.uniformBuffer=null,this.bindGroup?.destroy(),this.bindGroup=null}render(e,t){const s=this.shader.device;e&&(To.set(s.vx,s.vy,s.vw,s.vh),xo.set(s.sx,s.sy,s.sw,s.sh),t=t??e,s.setViewport(e.x,e.y,e.z,e.w),s.setScissor(t.x,t.y,t.z,t.w)),s.setVertexBuffer(s.quadVertexBuffer,0);const i=this.shader;if(s.setShader(i),s.supportsUniformBuffers){s.setBindGroup(_l,s.emptyBindGroup);const r=this.bindGroup;r.update(),s.setBindGroup(NT,r);const a=this.uniformBuffer;a?(a.update(Hf),s.setBindGroup(ip,Hf.bindGroup,Hf.offsets)):s.setBindGroup(ip,s.emptyBindGroup)}s.draw(KM),e&&(s.setViewport(To.x,To.y,To.z,To.w),s.setScissor(xo.x,xo.y,xo.z,xo.w))}}class ZM extends os{constructor(e,t,s,i){super(e),this.quad=t,this.rect=s,this.scissorRect=i}execute(){const{device:e}=this;e.setCullMode(lt),e.setDepthState(Gt.NODEPTH),e.setStencilState(null,null),this.quad.render(this.rect,this.scissorRect)}}const QM=new K;function fr(o,e,t,s,i){const r=new Oc(t);s||(s=QM,s.x=0,s.y=0,s.z=e?e.width:o.width,s.w=e?e.height:o.height);const a=new ZM(o,r,s,i);a.init(e),a.colorOps.clear=!1,a.depthStencilOps.clearDepth=!1,o.isWebGPU&&e===null&&o.samples>1&&(a.colorOps.store=!0),a.render(),r.destroy()}class Uv{constructor(e,t,s){this._aabb=new fe,this.meshInstance=null,this.origMeshInstances=e,this.dynamic=t,this.batchGroupId=s}destroy(e,t){this.meshInstance&&(this.removeFromLayers(e,t),this.meshInstance.destroy(),this.meshInstance=null)}addToLayers(e,t){for(let s=0;s<t.length;s++){const i=e.layers.getLayerById(t[s]);i&&i.addMeshInstances([this.meshInstance])}}removeFromLayers(e,t){for(let s=0;s<t.length;s++){const i=e.layers.getLayerById(t[s]);i&&i.removeMeshInstances([this.meshInstance])}}updateBoundingBox(){this._aabb.copy(this.origMeshInstances[0].aabb);for(let e=1;e<this.origMeshInstances.length;e++)this._aabb.add(this.origMeshInstances[e].aabb);this.meshInstance.aabb=this._aabb,this.meshInstance._aabbVer=0}get model(){}}const Tn=class Tn{constructor(e,t,s,i,r=[Ni]){this._ui=!1,this._sprite=!1,this._obj={model:[],element:[],sprite:[],render:[]},this.id=e,this.name=t,this.dynamic=s,this.maxAabbSize=i,this.layers=r}};Tn.MODEL="model",Tn.ELEMENT="element",Tn.SPRITE="sprite",Tn.RENDER="render";let nt=Tn;const Bv=new $;class Wl{constructor(e){this._dirty=!0,this._rootBone=null,this._skinUpdateIndex=-1,this._updateBeforeCull=!0,e&&this.initSkin(e)}set rootBone(e){this._rootBone=e}get rootBone(){return this._rootBone}init(e,t){const s=t*3;let i=Math.ceil(Math.sqrt(s));i=B.roundUp(i,3);const r=Math.ceil(s/i);this.boneTexture=new ae(e,{width:i,height:r,format:ft,mipmaps:!1,minFilter:pe,magFilter:pe,name:"skin"}),this.matrixPalette=this.boneTexture.lock({mode:TT}),this.boneTexture.unlock()}destroy(){this.boneTexture&&(this.boneTexture.destroy(),this.boneTexture=null)}resolve(e,t){this.rootBone=e;const s=this.skin,i=[];for(let r=0;r<s.boneNames.length;r++){const a=s.boneNames[r];let n=e.findByName(a);n||(n=t),i.push(n)}this.bones=i}initSkin(e){this.skin=e,this.bones=[];const t=e.inverseBindPose.length;this.init(e.device,t),this.matrices=[];for(let s=0;s<t;s++)this.matrices[s]=new $}uploadBones(e){this.boneTexture.upload()}_updateMatrices(e,t){if(this._skinUpdateIndex!==t){this._skinUpdateIndex=t,Bv.copy(e.getWorldTransform()).invert();for(let s=this.bones.length-1;s>=0;s--)this.matrices[s].mulAffine2(Bv,this.bones[s].getWorldTransform()),this.matrices[s].mulAffine2(this.matrices[s],this.skin.inverseBindPose[s])}}updateMatrices(e,t){this._updateBeforeCull&&this._updateMatrices(e,t)}updateMatrixPalette(e,t){this._updateMatrices(e,t);const s=this.matrixPalette,i=this.bones.length;for(let r=0;r<i;r++){const a=this.matrices[r].data,n=r*12;s[n]=a[0],s[n+1]=a[4],s[n+2]=a[8],s[n+3]=a[12],s[n+4]=a[1],s[n+5]=a[5],s[n+6]=a[9],s[n+7]=a[13],s[n+8]=a[2],s[n+9]=a[6],s[n+10]=a[10],s[n+11]=a[14]}this.uploadBones(this.skin.device)}}class Vv extends Wl{constructor(e,t,s){super();const i=t.length;this.init(e,i),this.device=e,this.rootNode=s,this.bones=t}updateMatrices(e,t){}updateMatrixPalette(e,t){const s=this.matrixPalette,i=this.bones.length;for(let r=0;r<i;r++){const a=this.bones[r].getWorldTransform().data,n=r*12;s[n]=a[0],s[n+1]=a[4],s[n+2]=a[8],s[n+3]=a[12],s[n+4]=a[1],s[n+5]=a[5],s[n+6]=a[9],s[n+7]=a[13],s[n+8]=a[2],s[n+9]=a[6],s[n+10]=a[10],s[n+11]=a[14]}this.uploadBones(this.device)}}let JM=0;const xn=class xn{constructor(){this.initDefaults()}initDefaults(){this.recreate=!1,this.verticesUsage=Es,this.indicesUsage=Es,this.maxVertices=0,this.maxIndices=0,this.vertexCount=0,this.indexCount=0,this.vertexStreamsUpdated=!1,this.indexStreamUpdated=!1,this.vertexStreamDictionary={},this.indices=null}_changeVertexCount(e,t){this.vertexCount||(this.vertexCount=e)}};xn.DEFAULT_COMPONENTS_POSITION=3,xn.DEFAULT_COMPONENTS_NORMAL=3,xn.DEFAULT_COMPONENTS_UV=2,xn.DEFAULT_COMPONENTS_COLORS=4;let Xi=xn;class eD{constructor(e,t,s,i,r){this.data=e,this.componentCount=t,this.dataType=s,this.dataTypeNormalize=i,this.asInt=r}}class De extends tf{constructor(e,t){super(),this.indexBuffer=[null],this.vertexBuffer=null,this.primitive=[{type:0,base:0,baseVertex:0,count:0}],this.skin=null,this.boneAabb=null,this._aabbVer=0,this._aabb=new fe,this._geometryData=null,this._morph=null,this._storageIndex=!1,this._storageVertex=!1,this.id=JM++,this.device=e,this._storageIndex=t?.storageIndex||!1,this._storageVertex=t?.storageVertex||!1}static fromGeometry(e,t,s={}){const i=new De(e,s),{positions:r,normals:a,tangents:n,colors:l,uvs:h,uvs1:c,blendIndices:d,blendWeights:f,indices:u}=t;return r&&i.setPositions(r),a&&i.setNormals(a),n&&i.setVertexStream(ei,n,4),l&&i.setColors32(l),h&&i.setUvs(0,h),c&&i.setUvs(1,c),d&&i.setVertexStream(Ft,d,4,d.length/4,Zr),f&&i.setVertexStream(Qs,f,4),u&&i.setIndices(u),i.update(),i}set morph(e){e!==this._morph&&(this._morph&&this._morph.decRefCount(),this._morph=e,e&&e.incRefCount())}get morph(){return this._morph}set aabb(e){this._aabb=e,this._aabbVer++}get aabb(){return this._aabb}destroy(){const e=this.morph;e&&(this.morph=null,e.refCount<1&&e.destroy()),this.vertexBuffer&&(this.vertexBuffer.destroy(),this.vertexBuffer=null);for(let t=0;t<this.indexBuffer.length;t++)this._destroyIndexBuffer(t);this.indexBuffer.length=0,this._geometryData=null}_destroyIndexBuffer(e){this.indexBuffer[e]&&(this.indexBuffer[e].destroy(),this.indexBuffer[e]=null)}_initBoneAabbs(e){this.boneAabb=[],this.boneUsed=[];let t,s,i,r,a;const n=[],l=[],h=this.boneUsed,c=this.skin.boneNames.length;let d,f,u;for(let v=0;v<c;v++)n[v]=new x(Number.MAX_VALUE,Number.MAX_VALUE,Number.MAX_VALUE),l[v]=new x(-Number.MAX_VALUE,-Number.MAX_VALUE,-Number.MAX_VALUE);const p=new jo(this.vertexBuffer),m=p.element[ue],_=p.element[Qs],g=p.element[Ft],y=this.vertexBuffer.numVertices;for(let v=0;v<y;v++){for(let S=0;S<4;S++)if(_.array[_.index+S]>0){const E=g.array[g.index+S];if(h[E]=!0,t=m.array[m.index],s=m.array[m.index+1],i=m.array[m.index+2],r=l[E],a=n[E],a.x>t&&(a.x=t),a.y>s&&(a.y=s),a.z>i&&(a.z=i),r.x<t&&(r.x=t),r.y<s&&(r.y=s),r.z<i&&(r.z=i),e){let T=d=t,w=f=s,P=u=i;for(let M=0;M<e.length;M++){const L=e[M],D=L.deltaPositions[v*3],k=L.deltaPositions[v*3+1],G=L.deltaPositions[v*3+2];D<0?T+=D:d+=D,k<0?w+=k:f+=k,G<0?P+=G:u+=G}a.x>T&&(a.x=T),a.y>w&&(a.y=w),a.z>P&&(a.z=P),r.x<d&&(r.x=d),r.y<f&&(r.y=f),r.z<u&&(r.z=u)}}p.next()}const A=this.vertexBuffer.getFormat().elements.find(v=>v.name===ue);if(A&&A.normalize){const v=(()=>{switch(A.dataType){case Hd:return S=>Math.max(S/127,-1);case Zr:return S=>S/255;case Gd:return S=>Math.max(S/32767,-1);case zl:return S=>S/65535;default:return S=>S}})();for(let S=0;S<c;S++)if(h[S]){const b=n[S],E=l[S];b.set(v(b.x),v(b.y),v(b.z)),E.set(v(E.x),v(E.y),v(E.z))}}for(let v=0;v<c;v++){const S=new fe;S.setMinMax(n[v],l[v]),this.boneAabb.push(S)}}_initGeometryData(){this._geometryData||(this._geometryData=new Xi,this.vertexBuffer&&(this._geometryData.vertexCount=this.vertexBuffer.numVertices,this._geometryData.maxVertices=this.vertexBuffer.numVertices),this.indexBuffer.length>0&&this.indexBuffer[0]&&(this._geometryData.indexCount=this.indexBuffer[0].numIndices,this._geometryData.maxIndices=this.indexBuffer[0].numIndices))}clear(e,t,s=0,i=0){this._initGeometryData(),this._geometryData.initDefaults(),this._geometryData.recreate=!0,this._geometryData.maxVertices=s,this._geometryData.maxIndices=i,this._geometryData.verticesUsage=e?Es:Sc,this._geometryData.indicesUsage=t?Es:Sc}setVertexStream(e,t,s,i,r=Le,a=!1,n=!1){this._initGeometryData();const l=i||t.length/s;this._geometryData._changeVertexCount(l,e),this._geometryData.vertexStreamsUpdated=!0,this._geometryData.vertexStreamDictionary[e]=new eD(t,s,r,a,n)}getVertexStream(e,t){let s=0,i=!1;if(this._geometryData){const r=this._geometryData.vertexStreamDictionary[e];r&&(i=!0,s=this._geometryData.vertexCount,ArrayBuffer.isView(t)?t.set(r.data):(t.length=0,t.push(r.data)))}return i||this.vertexBuffer&&(s=new jo(this.vertexBuffer).readData(e,t)),s}setPositions(e,t=Xi.DEFAULT_COMPONENTS_POSITION,s){this.setVertexStream(ue,e,t,s,Le,!1)}setNormals(e,t=Xi.DEFAULT_COMPONENTS_NORMAL,s){this.setVertexStream(Ht,e,t,s,Le,!1)}setUvs(e,t,s=Xi.DEFAULT_COMPONENTS_UV,i){this.setVertexStream(hv+e,t,s,i,Le,!1)}setColors(e,t=Xi.DEFAULT_COMPONENTS_COLORS,s){this.setVertexStream(gt,e,t,s,Le,!1)}setColors32(e,t){this.setVertexStream(gt,e,Xi.DEFAULT_COMPONENTS_COLORS,t,Zr,!0)}setIndices(e,t){this._initGeometryData(),this._geometryData.indexStreamUpdated=!0,this._geometryData.indices=e,this._geometryData.indexCount=t||e.length}getPositions(e){return this.getVertexStream(ue,e)}getNormals(e){return this.getVertexStream(Ht,e)}getUvs(e,t){return this.getVertexStream(hv+e,t)}getColors(e){return this.getVertexStream(gt,e)}getIndices(e){let t=0;if(this._geometryData&&this._geometryData.indices){const s=this._geometryData.indices;if(t=this._geometryData.indexCount,ArrayBuffer.isView(e))e.set(s);else{e.length=0;for(let i=0,r=s.length;i<r;i++)e.push(s[i])}}else this.indexBuffer.length>0&&this.indexBuffer[0]&&(t=this.indexBuffer[0].readData(e));return t}update(e=Ci,t=!0){if(this._geometryData){if(t){const r=this._geometryData.vertexStreamDictionary[ue];r&&r.componentCount===3&&(this._aabb.compute(r.data,this._geometryData.vertexCount),this._aabbVer++)}let s=this._geometryData.recreate;this._geometryData.vertexCount>this._geometryData.maxVertices&&(s=!0,this._geometryData.maxVertices=this._geometryData.vertexCount),s&&this.vertexBuffer&&(this.vertexBuffer.destroy(),this.vertexBuffer=null);let i=this._geometryData.recreate;this._geometryData.indexCount>this._geometryData.maxIndices&&(i=!0,this._geometryData.maxIndices=this._geometryData.indexCount),i&&this.indexBuffer.length>0&&this.indexBuffer[0]&&(this.indexBuffer[0].destroy(),this.indexBuffer[0]=null),this._geometryData.vertexStreamsUpdated&&this._updateVertexBuffer(),this._geometryData.indexStreamUpdated&&this._updateIndexBuffer(),this.primitive[0].type=e,this.indexBuffer.length>0&&this.indexBuffer[0]?this._geometryData.indexStreamUpdated&&(this.primitive[0].count=this._geometryData.indexCount,this.primitive[0].indexed=!0):this._geometryData.vertexStreamsUpdated&&(this.primitive[0].count=this._geometryData.vertexCount,this.primitive[0].indexed=!1),this._geometryData.vertexCount=0,this._geometryData.indexCount=0,this._geometryData.vertexStreamsUpdated=!1,this._geometryData.indexStreamUpdated=!1,this._geometryData.recreate=!1,this.updateRenderStates()}}_buildVertexFormat(e){const t=[];for(const s in this._geometryData.vertexStreamDictionary){const i=this._geometryData.vertexStreamDictionary[s];t.push({semantic:s,components:i.componentCount,type:i.dataType,normalize:i.dataTypeNormalize,asInt:i.asInt})}return new Wt(this.device,t,e)}_updateVertexBuffer(){if(!this.vertexBuffer){const s=this._geometryData.maxVertices,i=this._buildVertexFormat(s);this.vertexBuffer=new si(this.device,i,s,{usage:this._geometryData.verticesUsage,storage:this._storageVertex})}const e=new jo(this.vertexBuffer),t=this._geometryData.vertexCount;for(const s in this._geometryData.vertexStreamDictionary){const i=this._geometryData.vertexStreamDictionary[s];e.writeData(s,i.data,t),delete this._geometryData.vertexStreamDictionary[s]}e.end()}_updateIndexBuffer(){if(this.indexBuffer.length<=0||!this.indexBuffer[0]){const t=this._geometryData.maxVertices,s=t>65535||t===0?cr:hr,i=this._storageIndex?{storage:!0}:void 0;this.indexBuffer[0]=new ua(this.device,s,this._geometryData.maxIndices,this._geometryData.indicesUsage,void 0,i)}const e=this._geometryData.indices;e&&(this.indexBuffer[0].writeData(e,this._geometryData.indexCount),this._geometryData.indices=null)}prepareRenderState(e){e===Dr?this.generateWireframe():e===uh&&(this.primitive[uh]={type:Vd,base:0,baseVertex:0,count:this.vertexBuffer?this.vertexBuffer.numVertices:0,indexed:!1})}updateRenderStates(){this.primitive[uh]&&this.prepareRenderState(uh),this.primitive[Dr]&&this.prepareRenderState(Dr)}generateWireframe(){this._destroyIndexBuffer(Dr);const e=this.vertexBuffer.numVertices,t=[];let s;if(this.indexBuffer.length>0&&this.indexBuffer[0]){const a=[[0,1],[1,2],[2,0]],n=this.primitive[_n].base,l=this.primitive[_n].count,h=this.primitive[_n].baseVertex||0,c=this.indexBuffer[_n],d=new Pc[c.format](c.storage),f=new Set;for(let u=n;u<n+l;u+=3)for(let p=0;p<3;p++){const m=d[u+a[p][0]]+h,_=d[u+a[p][1]]+h,g=m>_?_*e+m:m*e+_;f.has(g)||(f.add(g),t.push(m,_))}s=c.format}else{for(let a=0;a<e;a+=3)t.push(a,a+1,a+1,a+2,a+2,a);s=t.length>65535?cr:hr}const i=new ua(this.vertexBuffer.device,s,t.length);new Pc[i.format](i.storage).set(t),i.unlock(),this.primitive[Dr]={type:zd,base:0,baseVertex:0,count:t.length,indexed:!0},this.indexBuffer[Dr]=i}}const yx=new Tt;function $l(o){return yx.get(o)}function tD(o,e){yx.get(o,()=>e)}class sD{destroy(){this.cache.forEach((e,t)=>{t.destroy()}),this.cache.clear()}incRef(e){const t=(this.cache.get(e)||0)+1;this.cache.set(e,t)}decRef(e){if(e){let t=this.cache.get(e);t&&(t--,t===0?(this.cache.delete(e),e.destroy()):this.cache.set(e,t))}}constructor(){this.cache=new Map}}const cg=class cg{static incRef(e){this.cache.incRef(e)}static decRef(e){this.cache.decRef(e)}static destroy(){this.cache.destroy()}};cg.cache=new sD;let Hs=cg,iD=0;const rD=new fe,mh=new fe,Gf=new Um,Wf=new Set,Na=new Uint32Array(4);class aD{constructor(e){this.vertexBuffer=null,this._destroyVertexBuffer=!1,this.count=e}destroy(){this._destroyVertexBuffer&&this.vertexBuffer?.destroy(),this.vertexBuffer=null}}class nD{get(e){return this.map.get(e)??this.map.get(null)}constructor(){this.map=new Map,this.meshMetaData=new Int32Array(4)}}class oD{getBindGroup(e){if(!this.bindGroup){const s=this.shader.meshBindGroupFormat;this.bindGroup=new A_(e,s)}return this.bindGroup}getUniformBuffer(e){if(!this.uniformBuffer){const s=this.shader.meshUniformBufferFormat;this.uniformBuffer=new w_(e,s,!1)}return this.uniformBuffer}destroy(){this.bindGroup?.destroy(),this.bindGroup=null,this.uniformBuffer?.destroy(),this.uniformBuffer=null}constructor(){this.bindGroup=null,this.uniformBuffer=null}}const Ur=class Ur{constructor(e,t,s=null){if(this.castShadow=!1,this.shadowCascadeMask=TM,this.cull=!0,this.drawOrder=0,this._drawBucket=127,this.visible=!0,this.visibleThisFrame=!1,this.flipFacesFactor=1,this.gsplatInstance=null,this.id=iD++,this.isVisibleFunc=null,this.instancingData=null,this.indirectData=null,this.parameters={},this.pick=!0,this.stencilFront=null,this.stencilBack=null,this.transparent=!1,this._aabb=new fe,this._aabbVer=-1,this._aabbMeshVer=-1,this._customAabb=null,this._updateAabb=!0,this._updateAabbFunc=null,this._sortKeyShadow=0,this._sortKeyForward=0,this._sortKeyDynamic=0,this._layer=ZT,this._material=null,this._skinInstance=null,this._morphInstance=null,this._receiveShadow=!0,this._renderStyle=_n,this._screenSpace=!1,this._shaderCache=new Map,this._shaderDefs=As<<16,this._calculateSortDistance=null,this.node=s,this._mesh=e,e.incRefCount(),this.material=t,e.vertexBuffer){const i=e.vertexBuffer.format;this._shaderDefs|=i.hasUv0?Y_:0,this._shaderDefs|=i.hasUv1?fx:0,this._shaderDefs|=i.hasColor?ux:0,this._shaderDefs|=i.hasTangents?K_:0}this.updateKey()}set drawBucket(e){this._drawBucket=Math.floor(e)&255,this.updateKey()}get drawBucket(){return this._drawBucket}set renderStyle(e){this._renderStyle=e,this.mesh.prepareRenderState(e)}get renderStyle(){return this._renderStyle}set mesh(e){e!==this._mesh&&(this._mesh&&this._mesh.decRefCount(),this._mesh=e,e&&e.incRefCount())}get mesh(){return this._mesh}set aabb(e){this._aabb=e}get aabb(){if(!this._updateAabb)return this._aabb;if(this._updateAabbFunc)return this._updateAabbFunc(this._aabb);let e=this._customAabb,t=!!e;if(!e){if(e=rD,this.skinInstance){if(!this.mesh.boneAabb){const r=this._morphInstance?this._morphInstance.morph._targets:null;this.mesh._initBoneAabbs(r)}const s=this.mesh.boneUsed;let i=!0;for(let r=0;r<this.mesh.boneAabb.length;r++)s[r]&&(mh.setFromTransformedAabb(this.mesh.boneAabb[r],this.skinInstance.matrices[r]),i?(i=!1,e.center.copy(mh.center),e.halfExtents.copy(mh.halfExtents)):e.add(mh));t=!0}else if(this.node._aabbVer!==this._aabbVer||this.mesh._aabbVer!==this._aabbMeshVer){if(this.mesh?(e.center.copy(this.mesh.aabb.center),e.halfExtents.copy(this.mesh.aabb.halfExtents)):(e.center.set(0,0,0),e.halfExtents.set(0,0,0)),this.mesh&&this.mesh.morph){const s=this.mesh.morph.aabb;e._expand(s.getMin(),s.getMax())}t=!0,this._aabbVer=this.node._aabbVer,this._aabbMeshVer=this.mesh._aabbVer}}return t&&this._aabb.setFromTransformedAabb(e,this.node.getWorldTransform()),this._aabb}clearShaders(){this._shaderCache.forEach(e=>{e.destroy()}),this._shaderCache.clear()}getShaderInstance(e,t,s,i,r,a,n){const l=this._shaderDefs;Na[0]=e,Na[1]=t,Na[2]=l,Na[3]=i.hash;const h=VT(Na);let c=this._shaderCache.get(h);if(!c){const d=this._material;if(c=new oD,c.shader=d.variants.get(h),c.hashes=new Uint32Array(Na),!c.shader){const f=d.getShaderVariant({device:this.mesh.device,scene:s,objDefs:l,cameraShaderParams:i,pass:e,sortedLights:n,viewUniformFormat:r,viewBindGroupFormat:a,vertexFormat:this.mesh.vertexBuffer?.format});d.variants.set(h,f),c.shader=f}this._shaderCache.set(h,c)}return c}set material(e){this.clearShaders();const t=this._material;t&&t.removeMeshInstanceRef(this),this._material=e,e&&(e.addMeshInstanceRef(this),this.transparent=e.transparent,this.updateKey())}get material(){return this._material}_updateShaderDefs(e){e!==this._shaderDefs&&(this._shaderDefs=e,this.clearShaders())}set calculateSortDistance(e){this._calculateSortDistance=e}get calculateSortDistance(){return this._calculateSortDistance}set receiveShadow(e){this._receiveShadow!==e&&(this._receiveShadow=e,this._updateShaderDefs(e?this._shaderDefs&-2:this._shaderDefs|q_))}get receiveShadow(){return this._receiveShadow}set batching(e){this._updateShaderDefs(e?this._shaderDefs|hp:this._shaderDefs&-16385)}get batching(){return(this._shaderDefs&hp)!==0}set skinInstance(e){this._skinInstance=e,this._updateShaderDefs(e?this._shaderDefs|af:this._shaderDefs&-3),this._setupSkinUpdate()}get skinInstance(){return this._skinInstance}set morphInstance(e){this._morphInstance?.destroy(),this._morphInstance=e;let t=this._shaderDefs;t=e&&e.morph.morphPositions?t|of:t&-1025,t=e&&e.morph.morphNormals?t|lf:t&-2049,t=e&&e.morph.intRenderFormat?t|hf:t&-8193,this._updateShaderDefs(t)}get morphInstance(){return this._morphInstance}set screenSpace(e){this._screenSpace!==e&&(this._screenSpace=e,this._updateShaderDefs(e?this._shaderDefs|j_:this._shaderDefs&-257))}get screenSpace(){return this._screenSpace}set key(e){this._sortKeyForward=e}get key(){return this._sortKeyForward}set mask(e){const t=this._shaderDefs&65535;this._updateShaderDefs(t|e<<16)}get mask(){return this._shaderDefs>>16}set instancingCount(e){this.instancingData&&(this.instancingData.count=e)}get instancingCount(){return this.instancingData?this.instancingData.count:0}destroy(){const e=this.mesh;e&&(this.mesh=null,e.refCount<1&&e.destroy()),this.setRealtimeLightmap(Ur.lightmapParamNames[0],null),this.setRealtimeLightmap(Ur.lightmapParamNames[1],null),this._skinInstance?.destroy(),this._skinInstance=null,this.morphInstance?.destroy(),this.morphInstance=null,this.clearShaders(),this.material=null,this.instancingData?.destroy()}static _prepareRenderStyleForArray(e,t){if(e){for(let s=0;s<e.length;s++){e[s]._renderStyle=t;const i=e[s].mesh;Wf.has(i)||(Wf.add(i),i.prepareRenderState(t))}Wf.clear()}}_isVisible(e){return this.visible?this.isVisibleFunc?this.isVisibleFunc(e):(Gf.center=this.aabb.center,Gf.radius=this._aabb.halfExtents.length(),e.frustum.containsSphere(Gf)>0):!1}updateKey(){const{material:e}=this;this._sortKeyForward=this._drawBucket<<23|(e.alphaToCoverage||e.alphaTest?4194304:0)|e.id&4194303}setInstancing(e,t=!1){e?(this.instancingData=new aD(e.numVertices),this.instancingData.vertexBuffer=e,e.format.instancing=!0,this.cull=t):(this.instancingData=null,this.cull=!0),this._updateShaderDefs(e?this._shaderDefs|nf:this._shaderDefs&-33)}setIndirect(e,t){this._allocIndirectData(),this.indirectData.map.set(e?.camera??null,t),this.mesh.device.mapsToClear.add(this.indirectData.map)}getIndirectMetaData(){this._allocIndirectData();const e=this.mesh?.primitive[this.renderStyle],t=this.indirectData.meshMetaData;return t[0]=e.count,t[1]=e.base,t[2]=e.baseVertex,t}_allocIndirectData(){this.indirectData||(this.indirectData=new nD)}ensureMaterial(e){this.material||(this.material=$l(e))}clearParameters(){this.parameters={}}getParameters(){return this.parameters}getParameter(e){return this.parameters[e]}setParameter(e,t,s=4294967295){const i=this.parameters[e];i?(i.data=t,i.passFlags=s):this.parameters[e]={scopeId:null,data:t,passFlags:s}}setRealtimeLightmap(e,t){const s=this.getParameter(e);s!==t&&(s&&Hs.decRef(s.data),t?(Hs.incRef(t),this.setParameter(e,t)):this.deleteParameter(e))}deleteParameter(e){this.parameters[e]&&delete this.parameters[e]}setParameters(e,t){const s=this.parameters;for(const i in s){const r=s[i];r.passFlags&t&&(r.scopeId||(r.scopeId=e.scope.resolve(i)),r.scopeId.setValue(r.data))}}setLightmapped(e){e?this.mask=(this.mask|ma)&-6:(this.setRealtimeLightmap(Ur.lightmapParamNames[0],null),this.setRealtimeLightmap(Ur.lightmapParamNames[1],null),this._shaderDefs&=-4289,this.mask=(this.mask|As)&-7)}setCustomAabb(e){e?this._customAabb?this._customAabb.copy(e):this._customAabb=e.clone():(this._customAabb=null,this._aabbVer=-1),this._setupSkinUpdate()}_setupSkinUpdate(){this._skinInstance&&(this._skinInstance._updateBeforeCull=!this._customAabb)}};Ur.lightmapParamNames=["texture_lightMap","texture_dirLightMap"];let Oe=Ur;const lD=[0,1,3,2,3,1],hD=[0,1,3,0,3,2],zv=new Ks;function Hv(o,e){if(o&&!e||!o&&e)return!1;if(o=o.data,e=e.data,o===e)return!0;if(o instanceof Float32Array&&e instanceof Float32Array){if(o.length!==e.length)return!1;for(let t=0;t<o.length;t++)if(o[t]!==e[t])return!1;return!0}return!1}function cD(o,e){for(const t in o)if(o.hasOwnProperty(t)&&!Hv(o[t],e[t]))return!1;for(const t in e)if(e.hasOwnProperty(t)&&!Hv(e[t],o[t]))return!1;return!0}function $f(o){return o.node.worldTransform.scaleSign}class dD{constructor(e,t,s){this.device=e,this.rootNode=t,this.scene=s,this._init=!1,this._batchGroups={},this._batchGroupCounter=0,this._batchList=[],this._dirtyGroups=[]}destroy(){this.device=null,this.rootNode=null,this.scene=null,this._batchGroups={},this._batchList=[],this._dirtyGroups=[]}addGroup(e,t,s,i,r){if(i===void 0&&(i=this._batchGroupCounter,this._batchGroupCounter++),this._batchGroups[i])return;const a=new nt(i,e,t,s,r);return this._batchGroups[i]=a,a}removeGroup(e){if(!this._batchGroups[e])return;const t=[];for(let s=0;s<this._batchList.length;s++)this._batchList[s].batchGroupId===e?this.destroyBatch(this._batchList[s]):t.push(this._batchList[s]);this._batchList=t,this._removeModelsFromBatchGroup(this.rootNode,e),delete this._batchGroups[e]}markGroupDirty(e){this._dirtyGroups.indexOf(e)<0&&this._dirtyGroups.push(e)}getGroupByName(e){const t=this._batchGroups;for(const s in t)if(t.hasOwnProperty(s)&&t[s].name===e)return t[s];return null}getBatches(e){const t=[],s=this._batchList.length;for(let i=0;i<s;i++){const r=this._batchList[i];r.batchGroupId===e&&t.push(r)}return t}_removeModelsFromBatchGroup(e,t){if(e.enabled){e.model&&e.model.batchGroupId===t&&(e.model.batchGroupId=-1),e.render&&e.render.batchGroupId===t&&(e.render.batchGroupId=-1),e.element&&e.element.batchGroupId===t&&(e.element.batchGroupId=-1),e.sprite&&e.sprite.batchGroupId===t&&(e.sprite.batchGroupId=-1);for(let s=0;s<e._children.length;s++)this._removeModelsFromBatchGroup(e._children[s],t)}}insert(e,t,s){const i=this._batchGroups[t];i&&i._obj[e].indexOf(s)<0&&(i._obj[e].push(s),this.markGroupDirty(t))}remove(e,t,s){const i=this._batchGroups[t];if(i){const r=i._obj[e].indexOf(s);r>=0&&(i._obj[e].splice(r,1),this.markGroupDirty(t))}}_extractRender(e,t,s,i){return e.render&&(t=i[e.render.batchGroupId]=t.concat(e.render.meshInstances),e.render.removeFromLayers()),t}_extractModel(e,t,s,i){return e.model&&e.model.model&&(t=i[e.model.batchGroupId]=t.concat(e.model.meshInstances),e.model.removeModelFromLayers()),t}_extractElement(e,t,s){if(!e.element)return;let i=!1;e.element._text&&e.element._text._model.meshInstances.length>0?(t.push(e.element._text._model.meshInstances[0]),e.element.removeModelFromLayers(e.element._text._model),i=!0):e.element._image&&(t.push(e.element._image._renderable.meshInstance),e.element.removeModelFromLayers(e.element._image._renderable.model),e.element._image._renderable.unmaskMeshInstance&&(t.push(e.element._image._renderable.unmaskMeshInstance),(!e.element._image._renderable.unmaskMeshInstance.stencilFront||!e.element._image._renderable.unmaskMeshInstance.stencilBack)&&(e.element._dirtifyMask(),e.element._onPrerender())),i=!0),i&&(s._ui=!0)}_collectAndRemoveMeshInstances(e,t){for(let s=0;s<t.length;s++){const i=t[s],r=this._batchGroups[i];if(!r)continue;let a=e[i];a||(a=e[i]=[]);for(let n=0;n<r._obj.model.length;n++)a=this._extractModel(r._obj.model[n],a,r,e);for(let n=0;n<r._obj.render.length;n++)a=this._extractRender(r._obj.render[n],a,r,e);for(let n=0;n<r._obj.element.length;n++)this._extractElement(r._obj.element[n],a,r);for(let n=0;n<r._obj.sprite.length;n++){const l=r._obj.sprite[n];l.sprite&&l.sprite._meshInstance&&(r.dynamic||l.sprite.sprite._renderMode===Ws)&&(a.push(l.sprite._meshInstance),l.sprite.removeModelFromLayers(),r._sprite=!0,l.sprite._batchGroup=r)}}}generate(e){const t={};e||(e=Object.keys(this._batchGroups));const s=[];for(let l=0;l<this._batchList.length;l++){if(e.indexOf(this._batchList[l].batchGroupId)<0){s.push(this._batchList[l]);continue}this.destroyBatch(this._batchList[l])}if(this._batchList=s,this._collectAndRemoveMeshInstances(t,e),e===this._dirtyGroups)this._dirtyGroups.length=0;else{const l=[];for(let h=0;h<this._dirtyGroups.length;h++)e.indexOf(this._dirtyGroups[h])<0&&l.push(this._dirtyGroups[h]);this._dirtyGroups=l}let i,r,a,n;for(const l in t)if(t.hasOwnProperty(l)&&(i=t[l],a=this._batchGroups[l],!!a)){r=this.prepare(i,a.dynamic,a.maxAabbSize,a._ui||a._sprite);for(let h=0;h<r.length;h++)n=this.create(r[h],a.dynamic,parseInt(l,10)),n&&n.addToLayers(this.scene,a.layers)}}prepare(e,t,s=Number.POSITIVE_INFINITY,i){if(e.length===0)return[];const r=s*.5,a=1024,n=4294967295,l=new fe,h=new fe;let c=null,d;const f=[];let u=0;i&&e.sort((g,y)=>g.drawOrder-y.drawOrder);let p=e,m;const _=i?function(g){c?c.add(g.aabb):c=g.aabb.clone(),m.push(g)}:function(g){m.push(g)};for(;p.length>0;){f[u]=[p[0]],m=[];const g=p[0].material,y=p[0].layer,A=p[0]._shaderDefs,v=p[0].parameters,S=p[0].stencilFront;let b=p[0].mesh.vertexBuffer.getNumVertices();const E=p[0].drawOrder;l.copy(p[0].aabb);const T=$f(p[0]),w=p[0].mesh.vertexBuffer.format.batchingHash,P=p[0].mesh.primitive[0].indexed;c=null;for(let M=1;M<p.length;M++){const L=p[M];if(t&&f[u].length>=a){m=m.concat(p.slice(M));break}if(g!==L.material||y!==L.layer||w!==L.mesh.vertexBuffer.format.batchingHash||P!==L.mesh.primitive[0].indexed||A!==L._shaderDefs||b+L.mesh.vertexBuffer.getNumVertices()>n){_(L);continue}if(h.copy(l),h.add(L.aabb),h.halfExtents.x>r||h.halfExtents.y>r||h.halfExtents.z>r){_(L);continue}if(S&&(!(d=L.stencilFront)||S.func!==d.func||S.zpass!==d.zpass)){_(L);continue}if(T!==$f(L)){_(L);continue}if(!cD(v,L.parameters)){_(L);continue}if(i&&c&&c.intersects(L.aabb)&&L.drawOrder!==E){_(L);continue}l.add(L.aabb),b+=L.mesh.vertexBuffer.getNumVertices(),f[u].push(L)}u++,p=m}return f}collectBatchedMeshData(e,t){let s=null,i=0,r=0,a=null;for(let n=0;n<e.length;n++)if(e[n].visible){const l=e[n].mesh,h=l.vertexBuffer.numVertices;if(i+=h,l.primitive[0].indexed)r+=l.primitive[0].count;else{const c=l.primitive[0].type;(c===Kr||c===dr)&&l.primitive[0].count===4&&(r+=6)}if(!s){a=e[n].material,s={};const c=l.vertexBuffer.format.elements;for(let d=0;d<c.length;d++){const f=c[d].name;s[f]={numComponents:c[d].numComponents,dataType:c[d].dataType,normalize:c[d].normalize,count:0}}t&&(s[Ft]={numComponents:1,dataType:Le,normalize:!1,count:0})}}return{streams:s,batchNumVerts:i,batchNumIndices:r,material:a}}create(e,t,s){this._init||(this.vertexFormats={},this._init=!0);let i=null,r,a,n,l=null;const h=this.collectBatchedMeshData(e,t);if(h.streams){const c=h.streams;let d=h.material;const f=h.batchNumVerts,u=h.batchNumIndices;l=new Uv(e,t,s),this._batchList.push(l);let p,m,_,g,y=0,A=0,v;const S=f<=65535?Uint16Array:Uint32Array,b=new S(u);for(r in c)i=c[r],i.typeArrayType=Dn[i.dataType],i.elementByteSize=Yo[i.dataType],i.buffer=new i.typeArrayType(f*i.numComponents);for(let w=0;w<e.length;w++)if(e[w].visible){a=e[w].mesh,n=a.vertexBuffer.numVertices,t||(v=e[w].node.getWorldTransform());for(r in c)if(r!==Ft){i=c[r];const P=new i.typeArrayType(i.buffer.buffer,i.elementByteSize*i.count),M=a.getVertexStream(r,P)*i.numComponents;if(i.count+=M,!t&&i.numComponents>=3){if(r===ue){const L=v.data,D=L[0],k=L[1],G=L[2],U=L[4],C=L[5],I=L[6],R=L[8],O=L[9],N=L[10],F=L[12],W=L[13],X=L[14];let V,Y,j;for(let re=0;re<M;re+=i.numComponents)V=P[re],Y=P[re+1],j=P[re+2],P[re]=V*D+Y*U+j*R+F,P[re+1]=V*k+Y*C+j*O+W,P[re+2]=V*G+Y*I+j*N+X}else if(r===Ht||r===ei){zv.invertMat4(v).transpose();const[L,D,k,G,U,C,I,R,O]=zv.data;let N,F,W;for(let X=0;X<M;X+=i.numComponents)N=P[X],F=P[X+1],W=P[X+2],P[X]=N*L+F*G+W*I,P[X+1]=N*D+F*U+W*R,P[X+2]=N*k+F*C+W*O}}}if(t){i=c[Ft];for(let P=0;P<n;P++)i.buffer[i.count++]=w}if(a.primitive[0].indexed){p=a.primitive[0].base,m=a.primitive[0].baseVertex||0,_=a.primitive[0].count;const P=a.indexBuffer[0].getFormat();g=new Pc[P](a.indexBuffer[0].storage)}else{m=0;const P=a.primitive[0].type;if(P===Kr||P===dr)if(a.primitive[0].count===4)p=0,_=6,g=P===Kr?lD:hD;else{_=0;continue}}for(let P=0;P<_;P++)b[P+A]=g[p+P]+m+y;A+=_,y+=n}a=new De(this.device);for(r in c)i=c[r],a.setVertexStream(r,i.buffer,i.numComponents,void 0,i.dataType,i.normalize);b.length>0&&a.setIndices(b),a.update(Ci,!1),t&&(d=d.clone(),d.update());const E=new Oe(a,d,this.rootNode);E.castShadow=l.origMeshInstances[0].castShadow,E.parameters=l.origMeshInstances[0].parameters,E.layer=l.origMeshInstances[0].layer,E._shaderDefs=l.origMeshInstances[0]._shaderDefs,E.batching=!0,E.cull=l.origMeshInstances[0].cull;const T=this._batchGroups[s];if(T&&T._ui&&(E.cull=!1),t){const w=[];for(let P=0;P<l.origMeshInstances.length;P++)w.push(l.origMeshInstances[P].node);E.skinInstance=new Vv(this.device,w,this.rootNode)}E._updateAabb=!1,E.drawOrder=l.origMeshInstances[0].drawOrder,E.stencilFront=l.origMeshInstances[0].stencilFront,E.stencilBack=l.origMeshInstances[0].stencilBack,E.flipFacesFactor=$f(l.origMeshInstances[0]),E.castShadow=l.origMeshInstances[0].castShadow,l.meshInstance=E,l.updateBoundingBox()}return l}updateAll(){this._dirtyGroups.length>0&&this.generate(this._dirtyGroups);for(let e=0;e<this._batchList.length;e++)this._batchList[e].dynamic&&this._batchList[e].updateBoundingBox()}clone(e,t){const s=new Uv(t,e.dynamic,e.batchGroupId);this._batchList.push(s);const i=[];for(let r=0;r<t.length;r++)i.push(t[r].node);return s.meshInstance=new Oe(e.meshInstance.mesh,e.meshInstance.material,e.meshInstance.node),s.meshInstance._updateAabb=!1,s.meshInstance.parameters=t[0].parameters,s.meshInstance.cull=t[0].cull,s.meshInstance.layer=t[0].layer,e.dynamic&&(s.meshInstance.skinInstance=new Vv(this.device,i,this.rootNode)),s.meshInstance.castShadow=e.meshInstance.castShadow,s}destroyBatch(e){e.destroy(this.scene,this._batchGroups[e.batchGroupId].layers)}}const Gv="uSceneColorMap";class fD extends os{destroy(){super.destroy(),this.releaseRenderTarget(this.colorRenderTarget)}shouldReallocate(e,t,s){if(e?.colorBuffer.format!==s)return!0;const r=t?.width||this.device.width,a=t?.height||this.device.height;return!e||r!==e.width||a!==e.height}allocateRenderTarget(e,t,s,i){const r=new ae(s,{name:Gv,format:i,width:t?t.colorBuffer.width:s.width,height:t?t.colorBuffer.height:s.height,mipmaps:!0,minFilter:ha,magFilter:Ze,addressU:te,addressV:te});return e?(e.destroyFrameBuffers(),e._colorBuffer=r,e._colorBuffers=[r]):e=new ct({name:"ColorGrabRT",colorBuffer:r,depth:!1,stencil:!1,autoResolve:!1}),e}releaseRenderTarget(e){e&&(e.destroyTextureBuffers(),e.destroy())}frameUpdate(){const e=this.device,t=this.source,s=t?.colorBuffer.format??this.device.backBufferFormat;this.shouldReallocate(this.colorRenderTarget,t?.colorBuffer,s)&&(this.releaseRenderTarget(this.colorRenderTarget),this.colorRenderTarget=this.allocateRenderTarget(this.colorRenderTarget,t,e,s));const i=this.colorRenderTarget.colorBuffer;e.scope.resolve(Gv).setValue(i)}execute(){const e=this.device,t=this.source,s=this.colorRenderTarget.colorBuffer;e.isWebGPU?(e.copyRenderTarget(t,this.colorRenderTarget,!0,!1),e.mipmapRenderer.generate(this.colorRenderTarget.colorBuffer.impl)):(e.copyRenderTarget(t,this.colorRenderTarget,!0,!1),e.activeTexture(e.maxCombinedTextures-1),e.bindTexture(s),e.gl.generateMipmap(s.impl._glTarget))}constructor(...e){super(...e),this.colorRenderTarget=null,this.source=null}}const Wv="uSceneDepthMap";class uD extends os{constructor(e,t){super(e),this.depthRenderTarget=null,this.camera=null,this.camera=t}destroy(){super.destroy(),this.releaseRenderTarget(this.depthRenderTarget)}shouldReallocate(e,t){const s=t?.width||this.device.width,i=t?.height||this.device.height;return!e||s!==e.width||i!==e.height}allocateRenderTarget(e,t,s,i,r){const a=new ae(s,{name:Wv,format:i,width:t?t.colorBuffer.width:s.width,height:t?t.colorBuffer.height:s.height,mipmaps:!1,minFilter:pe,magFilter:pe,addressU:te,addressV:te});return e?(e.destroyFrameBuffers(),r?e._depthBuffer=a:(e._colorBuffer=a,e._colorBuffers=[a])):e=new ct({name:"DepthGrabRT",colorBuffer:r?null:a,depthBuffer:r?a:null,depth:!r,stencil:s.supportsStencil,autoResolve:!1}),e}releaseRenderTarget(e){e&&(e.destroyTextureBuffers(),e.destroy())}before(){const e=this.camera,t=this.device,s=e?.renderTarget??t.backBuffer;let i=!0,r=s.stencil?Rd:wi;t.isWebGPU&&s.samples>1&&(r=Oi,i=!1);const a=e.renderTarget?.depthBuffer??e.renderTarget?.colorBuffer;this.shouldReallocate(this.depthRenderTarget,a)&&(this.releaseRenderTarget(this.depthRenderTarget),this.depthRenderTarget=this.allocateRenderTarget(this.depthRenderTarget,e.renderTarget,t,r,i));const n=i?this.depthRenderTarget.depthBuffer:this.depthRenderTarget.colorBuffer;t.scope.resolve(Wv).setValue(n)}execute(){const e=this.device;if(e.isWebGL2&&e.renderTarget.samples>1){const t=e.renderTarget.impl._glFrameBuffer,s=this.depthRenderTarget;e.renderTarget=s,e.updateBegin(),this.depthRenderTarget.impl.internalResolve(e,t,s.impl._glFrameBuffer,this.depthRenderTarget,e.gl.DEPTH_BUFFER_BIT)}else e.copyRenderTarget(e.renderTarget,this.depthRenderTarget,!1,!0)}}class Tx{get hash(){if(this._hash===void 0){const e=`${this.gammaCorrection}_${this.toneMapping}_${this.srgbRenderTarget}_${this.fog}_${this.ssaoEnabled}_${this.sceneDepthMapLinear}`;this._hash=$s(e)}return this._hash}get defines(){const e=this._defines;return this._definesDirty&&(this._definesDirty=!1,e.clear(),this._sceneDepthMapLinear&&e.set("SCENE_DEPTHMAP_LINEAR",!0),e.set("FOG",this._fog.toUpperCase()),e.set("TONEMAP",lx[this._toneMapping]),e.set("GAMMA",bM[this.shaderOutputGamma])),e}markDirty(){this._hash=void 0,this._definesDirty=!0}set fog(e){this._fog!==e&&(this._fog=e,this.markDirty())}get fog(){return this._fog}set ssaoEnabled(e){this._ssaoEnabled!==e&&(this._ssaoEnabled=e,this.markDirty())}get ssaoEnabled(){return this._ssaoEnabled}set gammaCorrection(e){this._gammaCorrectionAssigned=!0,this._gammaCorrection!==e&&(this._gammaCorrection=e,this.markDirty())}get gammaCorrection(){return this._gammaCorrection}set toneMapping(e){this._toneMapping!==e&&(this._toneMapping=e,this.markDirty())}get toneMapping(){return this._toneMapping}set srgbRenderTarget(e){this._srgbRenderTarget!==e&&(this._srgbRenderTarget=e,this.markDirty())}get srgbRenderTarget(){return this._srgbRenderTarget}set sceneDepthMapLinear(e){this._sceneDepthMapLinear!==e&&(this._sceneDepthMapLinear=e,this.markDirty())}get sceneDepthMapLinear(){return this._sceneDepthMapLinear}get shaderOutputGamma(){return this._gammaCorrection===Jh&&!this._srgbRenderTarget?Jh:Gl}constructor(){this._gammaCorrection=Jh,this._toneMapping=G_,this._srgbRenderTarget=!1,this._ssaoEnabled=!1,this._fog=po,this._sceneDepthMapLinear=!1,this._defines=new Map,this._definesDirty=!0}}const Fa=new x,Eo=new x,$v=new x,Xv=new $,pD=[new x,new x,new x,new x,new x,new x,new x,new x];class Xl{constructor(){this.shaderPassInfo=null,this.renderPassColorGrab=null,this.renderPassDepthGrab=null,this.fogParams=null,this.shaderParams=new Tx,this.renderPasses=[],this.jitter=0,this._aspectRatio=16/9,this._aspectRatioMode=Q_,this._calculateProjection=null,this._calculateTransform=null,this._clearColor=new q(.75,.75,.75,1),this._clearColorBuffer=!0,this._clearDepth=1,this._clearDepthBuffer=!0,this._clearStencil=0,this._clearStencilBuffer=!0,this._cullFaces=!0,this._farClip=1e3,this._flipFaces=!1,this._fov=45,this._frustumCulling=!0,this._horizontalFov=!1,this._layers=[Ni,kt,k_,sf,U_],this._layersSet=new Set(this._layers),this._nearClip=.1,this._node=null,this._orthoHeight=10,this._projection=zs,this._rect=new K(0,0,1,1),this._renderTarget=null,this._scissorRect=new K(0,0,1,1),this._scissorRectClear=!1,this._aperture=16,this._shutter=1/1e3,this._sensitivity=1e3,this._projMat=new $,this._projMatDirty=!0,this._projMatSkybox=new $,this._viewMat=new $,this._viewMatDirty=!0,this._viewProjMat=new $,this._viewProjMatDirty=!0,this._shaderMatricesVersion=0,this._viewProjInverse=new $,this._viewProjCurrent=null,this._viewProjPrevious=new $,this._jitters=[0,0,0,0],this.frustum=new iL,this._xr=null,this._xrProperties={horizontalFov:this._horizontalFov,fov:this._fov,aspectRatio:this._aspectRatio,farClip:this._farClip,nearClip:this._nearClip}}destroy(){this.renderPassColorGrab?.destroy(),this.renderPassColorGrab=null,this.renderPassDepthGrab?.destroy(),this.renderPassDepthGrab=null,this.renderPasses.length=0}_storeShaderMatrices(e,t,s,i){this._shaderMatricesVersion!==i&&(this._shaderMatricesVersion=i,this._viewProjPrevious.copy(this._viewProjCurrent??e),this._viewProjCurrent??=new $,this._viewProjCurrent.copy(e),this._viewProjInverse.invert(e),this._jitters[2]=this._jitters[0],this._jitters[3]=this._jitters[1],this._jitters[0]=t,this._jitters[1]=s)}get fullSizeClearRect(){const e=this._scissorRectClear?this.scissorRect:this._rect;return e.x===0&&e.y===0&&e.z===1&&e.w===1}set aspectRatio(e){this._aspectRatio!==e&&(this._aspectRatio=e,this._projMatDirty=!0)}get aspectRatio(){return this.xr?.active?this._xrProperties.aspectRatio:this._aspectRatio}set aspectRatioMode(e){this._aspectRatioMode!==e&&(this._aspectRatioMode=e,this._projMatDirty=!0)}get aspectRatioMode(){return this._aspectRatioMode}set calculateProjection(e){this._calculateProjection=e,this._projMatDirty=!0}get calculateProjection(){return this._calculateProjection}set calculateTransform(e){this._calculateTransform=e}get calculateTransform(){return this._calculateTransform}set clearColor(e){this._clearColor.copy(e)}get clearColor(){return this._clearColor}set clearColorBuffer(e){this._clearColorBuffer=e}get clearColorBuffer(){return this._clearColorBuffer}set clearDepth(e){this._clearDepth=e}get clearDepth(){return this._clearDepth}set clearDepthBuffer(e){this._clearDepthBuffer=e}get clearDepthBuffer(){return this._clearDepthBuffer}set clearStencil(e){this._clearStencil=e}get clearStencil(){return this._clearStencil}set clearStencilBuffer(e){this._clearStencilBuffer=e}get clearStencilBuffer(){return this._clearStencilBuffer}set cullFaces(e){this._cullFaces=e}get cullFaces(){return this._cullFaces}set farClip(e){this._farClip!==e&&(this._farClip=e,this._projMatDirty=!0)}get farClip(){return this.xr?.active?this._xrProperties.farClip:this._farClip}set flipFaces(e){this._flipFaces=e}get flipFaces(){return this._flipFaces}set fov(e){this._fov!==e&&(this._fov=e,this._projMatDirty=!0)}get fov(){return this.xr?.active?this._xrProperties.fov:this._fov}set frustumCulling(e){this._frustumCulling=e}get frustumCulling(){return this._frustumCulling}set horizontalFov(e){this._horizontalFov!==e&&(this._horizontalFov=e,this._projMatDirty=!0)}get horizontalFov(){return this.xr?.active?this._xrProperties.horizontalFov:this._horizontalFov}set layers(e){this._layers=e.slice(0),this._layersSet=new Set(this._layers)}get layers(){return this._layers}get layersSet(){return this._layersSet}set nearClip(e){this._nearClip!==e&&(this._nearClip=e,this._projMatDirty=!0)}get nearClip(){return this.xr?.active?this._xrProperties.nearClip:this._nearClip}set node(e){this._node=e}get node(){return this._node}set orthoHeight(e){this._orthoHeight!==e&&(this._orthoHeight=e,this._projMatDirty=!0)}get orthoHeight(){return this._orthoHeight}set projection(e){this._projection!==e&&(this._projection=e,this._projMatDirty=!0)}get projection(){return this._projection}get projectionMatrix(){return this._evaluateProjectionMatrix(),this._projMat}set rect(e){this._rect.copy(e)}get rect(){return this._rect}set renderTarget(e){this._renderTarget=e}get renderTarget(){return this._renderTarget}set scissorRect(e){this._scissorRect.copy(e)}get scissorRect(){return this._scissorRect}get viewMatrix(){if(this._viewMatDirty){const e=this._node.getWorldTransform();this._viewMat.copy(e).invert(),this._viewMatDirty=!1}return this._viewMat}set aperture(e){this._aperture=e}get aperture(){return this._aperture}set sensitivity(e){this._sensitivity=e}get sensitivity(){return this._sensitivity}set shutter(e){this._shutter=e}get shutter(){return this._shutter}set xr(e){this._xr!==e&&(this._xr=e,this._projMatDirty=!0)}get xr(){return this._xr}clone(){return new Xl().copy(this)}copy(e){return this._aspectRatio=e._aspectRatio,this._farClip=e._farClip,this._fov=e._fov,this._horizontalFov=e._horizontalFov,this._nearClip=e._nearClip,this._xrProperties.aspectRatio=e._xrProperties.aspectRatio,this._xrProperties.farClip=e._xrProperties.farClip,this._xrProperties.fov=e._xrProperties.fov,this._xrProperties.horizontalFov=e._xrProperties.horizontalFov,this._xrProperties.nearClip=e._xrProperties.nearClip,this.aspectRatioMode=e.aspectRatioMode,this.calculateProjection=e.calculateProjection,this.calculateTransform=e.calculateTransform,this.clearColor=e.clearColor,this.clearColorBuffer=e.clearColorBuffer,this.clearDepth=e.clearDepth,this.clearDepthBuffer=e.clearDepthBuffer,this.clearStencil=e.clearStencil,this.clearStencilBuffer=e.clearStencilBuffer,this.cullFaces=e.cullFaces,this.flipFaces=e.flipFaces,this.frustumCulling=e.frustumCulling,this.layers=e.layers,this.orthoHeight=e.orthoHeight,this.projection=e.projection,this.rect=e.rect,this.renderTarget=e.renderTarget,this.scissorRect=e.scissorRect,this.aperture=e.aperture,this.shutter=e.shutter,this.sensitivity=e.sensitivity,this.shaderPassInfo=e.shaderPassInfo,this.jitter=e.jitter,this._projMatDirty=!0,this}_enableRenderPassColorGrab(e,t){t?this.renderPassColorGrab||(this.renderPassColorGrab=new fD(e)):(this.renderPassColorGrab?.destroy(),this.renderPassColorGrab=null)}_enableRenderPassDepthGrab(e,t,s){s?this.renderPassDepthGrab||(this.renderPassDepthGrab=new uD(e,this)):(this.renderPassDepthGrab?.destroy(),this.renderPassDepthGrab=null)}_updateViewProjMat(){(this._projMatDirty||this._viewMatDirty||this._viewProjMatDirty)&&(this._viewProjMat.mul2(this.projectionMatrix,this.viewMatrix),this._viewProjMatDirty=!1)}worldToScreen(e,t,s,i=new x){this._updateViewProjMat(),this._viewProjMat.transformPoint(e,i);const r=this._viewProjMat.data,a=e.x*r[3]+e.y*r[7]+e.z*r[11]+1*r[15];i.x=(i.x/a+1)*.5,i.y=(1-i.y/a)*.5;const{x:n,y:l,z:h,w:c}=this._rect;return i.x=i.x*h*t+n*t,i.y=i.y*c*s+(1-l-c)*s,i}screenToWorld(e,t,s,i,r,a=new x){const{x:n,y:l,z:h,w:c}=this._rect,d=this.farClip-this.nearClip;if(Fa.set((e-n*i)/(h*i),1-(t-(1-l-c)*r)/(c*r),s/d),Fa.mulScalar(2),Fa.sub(x.ONE),this._projection===zs){$._getPerspectiveHalfSize(Eo,this.fov,this.aspectRatio,this.nearClip,this.horizontalFov),Eo.x*=Fa.x,Eo.y*=Fa.y;const f=this._node.getWorldTransform();Eo.z=-this.nearClip,f.transformPoint(Eo,$v);const u=this._node.getPosition();a.sub2($v,u),a.normalize(),a.mulScalar(s),a.add(u)}else this._updateViewProjMat(),Xv.copy(this._viewProjMat).invert(),Xv.transformPoint(Fa,a);return a}_evaluateProjectionMatrix(){if(this._projMatDirty){if(this._projection===zs)this._projMat.setPerspective(this.fov,this.aspectRatio,this.nearClip,this.farClip,this.horizontalFov),this._projMatSkybox.copy(this._projMat);else{const e=this._orthoHeight,t=e*this.aspectRatio;this._projMat.setOrtho(-t,t,-e,e,this.nearClip,this.farClip),this._projMatSkybox.setPerspective(this.fov,this.aspectRatio,this.nearClip,this.farClip)}this._projMatDirty=!1}}getProjectionMatrixSkybox(){return this._evaluateProjectionMatrix(),this._projMatSkybox}getExposure(){const e=Math.log2(this._aperture*this._aperture/this._shutter*100/this._sensitivity);return 1/(Math.pow(2,e)*1.2)}getScreenSize(e){if(this._projection===zs){const t=this._node.getPosition().distance(e.center);if(t<e.radius)return 1;const s=Math.asin(e.radius/t),i=Math.tan(s),r=Math.tan(this.fov/2*B.DEG_TO_RAD);return Math.min(i/r,1)}return B.clamp(e.radius/this._orthoHeight,0,1)}getFrustumCorners(e=this.nearClip,t=this.farClip){const s=this.fov*Math.PI/180;let i,r;this.projection===zs?this.horizontalFov?(i=e*Math.tan(s/2),r=i/this.aspectRatio):(r=e*Math.tan(s/2),i=r*this.aspectRatio):(r=this._orthoHeight,i=r*this.aspectRatio);const a=pD;return a[0].x=i,a[0].y=-r,a[0].z=-e,a[1].x=i,a[1].y=r,a[1].z=-e,a[2].x=-i,a[2].y=r,a[2].z=-e,a[3].x=-i,a[3].y=-r,a[3].z=-e,this._projection===zs&&(this.horizontalFov?(i=t*Math.tan(s/2),r=i/this.aspectRatio):(r=t*Math.tan(s/2),i=r*this.aspectRatio)),a[4].x=i,a[4].y=-r,a[4].z=-t,a[5].x=i,a[5].y=r,a[5].z=-t,a[6].x=-i,a[6].y=r,a[6].z=-t,a[7].x=-i,a[7].y=-r,a[7].z=-t,a}setXrProperties(e){Object.assign(this._xrProperties,e),this._projMatDirty=!0}}const qv=new $,Xf=new x,Yv=new Q,qf=new Q,jv=new x,Kv=new x,mD=new $,_D=new Q,Ct=new x,Ao=new $,Pt=new Q,ka=new Q,Zv=new $,Yf=new x,_h=new x;function Qv(o,e){return o instanceof Function?o:t=>{let s=t[o];return s instanceof Function&&(s=s()),s===e}}function xx(o,e){if(e(o))return o;const t=o._children,s=t.length;for(let i=0;i<s;++i){const r=xx(t[i],e);if(r)return r}return null}class ze extends ne{constructor(e="Untitled"){super(),this.tags=new vc(this),this.localPosition=new x,this.localRotation=new Q,this.localScale=new x(1,1,1),this.localEulerAngles=new x,this.position=new x,this.rotation=new Q,this.eulerAngles=new x,this._scale=null,this.localTransform=new $,this._dirtyLocal=!1,this._aabbVer=0,this._frozen=!1,this.worldTransform=new $,this._dirtyWorld=!1,this._worldScaleSign=0,this._normalMatrix=new Ks,this._dirtyNormal=!0,this._right=null,this._up=null,this._forward=null,this._parent=null,this._children=[],this._graphDepth=0,this._enabled=!0,this._enabledInHierarchy=!1,this.scaleCompensation=!1,this.name=e}get right(){return this._right||(this._right=new x),this.getWorldTransform().getX(this._right).normalize()}get up(){return this._up||(this._up=new x),this.getWorldTransform().getY(this._up).normalize()}get forward(){return this._forward||(this._forward=new x),this.getWorldTransform().getZ(this._forward).normalize().mulScalar(-1)}get normalMatrix(){const e=this._normalMatrix;return this._dirtyNormal&&(e.invertMat4(this.getWorldTransform()).transpose(),this._dirtyNormal=!1),e}set enabled(e){this._enabled!==e&&(this._enabled=e,(e&&this._parent?.enabled||!e)&&this._notifyHierarchyStateChanged(this,e))}get enabled(){return this._enabled&&this._enabledInHierarchy}get parent(){return this._parent}get path(){let e=this._parent;if(!e)return"";let t=this.name;for(;e&&e._parent;)t=`${e.name}/${t}`,e=e._parent;return t}get root(){let e=this;for(;e._parent;)e=e._parent;return e}get children(){return this._children}get graphDepth(){return this._graphDepth}_notifyHierarchyStateChanged(e,t){e._onHierarchyStateChanged(t);const s=e._children;for(let i=0,r=s.length;i<r;i++)s[i]._enabled&&this._notifyHierarchyStateChanged(s[i],t)}_onHierarchyStateChanged(e){this._enabledInHierarchy=e,e&&!this._frozen&&this._unfreezeParentToRoot()}_cloneInternal(e){e.name=this.name;const t=this.tags._list;e.tags.clear();for(let s=0;s<t.length;s++)e.tags.add(t[s]);e.localPosition.copy(this.localPosition),e.localRotation.copy(this.localRotation),e.localScale.copy(this.localScale),e.localEulerAngles.copy(this.localEulerAngles),e.position.copy(this.position),e.rotation.copy(this.rotation),e.eulerAngles.copy(this.eulerAngles),e.localTransform.copy(this.localTransform),e._dirtyLocal=this._dirtyLocal,e.worldTransform.copy(this.worldTransform),e._dirtyWorld=this._dirtyWorld,e._dirtyNormal=this._dirtyNormal,e._aabbVer=this._aabbVer+1,e._enabled=this._enabled,e.scaleCompensation=this.scaleCompensation,e._enabledInHierarchy=!1}clone(){const e=new this.constructor;return this._cloneInternal(e),e}copy(e){return e._cloneInternal(this),this}destroy(){this.remove();const e=this._children;for(;e.length;){const t=e.pop();t._parent=null,t.destroy()}this.fire("destroy",this),this.off()}find(e,t){const s=[],i=Qv(e,t);return this.forEach(r=>{i(r)&&s.push(r)}),s}findOne(e,t){const s=Qv(e,t);return xx(this,s)}findByTag(...e){const t=[],s=(i,r)=>{r&&i.tags.has(...e)&&t.push(i);for(let a=0;a<i._children.length;a++)s(i._children[a],!0)};return s(this,!1),t}findByName(e){return this.findOne("name",e)}findByPath(e){const t=Array.isArray(e)?e:e.split("/");let s=this;for(let i=0,r=t.length;i<r;++i)if(s=s.children.find(a=>a.name===t[i]),!s)return null;return s}forEach(e,t){e.call(t,this);const s=this._children,i=s.length;for(let r=0;r<i;++r)s[r].forEach(e,t)}isDescendantOf(e){let t=this._parent;for(;t;){if(t===e)return!0;t=t._parent}return!1}isAncestorOf(e){return e.isDescendantOf(this)}getEulerAngles(){return this.getWorldTransform().getEulerAngles(this.eulerAngles),this.eulerAngles}getLocalEulerAngles(){return this.localRotation.getEulerAngles(this.localEulerAngles),this.localEulerAngles}getLocalPosition(){return this.localPosition}getLocalRotation(){return this.localRotation}getLocalScale(){return this.localScale}getLocalTransform(){return this._dirtyLocal&&(this.localTransform.setTRS(this.localPosition,this.localRotation,this.localScale),this._dirtyLocal=!1),this.localTransform}getPosition(){return this.getWorldTransform().getTranslation(this.position),this.position}getRotation(){return this.rotation.setFromMat4(this.getWorldTransform()),this.rotation}getScale(){return this._scale||(this._scale=new x),this.getWorldTransform().getScale(this._scale)}getWorldTransform(){return!this._dirtyLocal&&!this._dirtyWorld?this.worldTransform:(this._parent&&this._parent.getWorldTransform(),this._sync(),this.worldTransform)}get worldScaleSign(){return this._worldScaleSign===0&&(this._worldScaleSign=this.getWorldTransform().scaleSign),this._worldScaleSign}remove(){this._parent?.removeChild(this)}reparent(e,t){this.remove(),e&&(t>=0?e.insertChild(this,t):e.addChild(this))}setLocalEulerAngles(e,t,s){this.localRotation.setFromEulerAngles(e,t,s),this._dirtyLocal||this._dirtifyLocal()}setLocalPosition(e,t,s){e instanceof x?this.localPosition.copy(e):this.localPosition.set(e,t,s),this._dirtyLocal||this._dirtifyLocal()}setLocalRotation(e,t,s,i){e instanceof Q?this.localRotation.copy(e):this.localRotation.set(e,t,s,i),this._dirtyLocal||this._dirtifyLocal()}setLocalScale(e,t,s){e instanceof x?this.localScale.copy(e):this.localScale.set(e,t,s),this._dirtyLocal||this._dirtifyLocal()}_dirtifyLocal(){this._dirtyLocal||(this._dirtyLocal=!0,this._dirtyWorld||this._dirtifyWorld())}_unfreezeParentToRoot(){let e=this._parent;for(;e;)e._frozen=!1,e=e._parent}_dirtifyWorld(){this._dirtyWorld||this._unfreezeParentToRoot(),this._dirtifyWorldInternal()}_dirtifyWorldInternal(){if(!this._dirtyWorld){this._frozen=!1,this._dirtyWorld=!0;for(let e=0;e<this._children.length;e++)this._children[e]._dirtyWorld||this._children[e]._dirtifyWorldInternal()}this._dirtyNormal=!0,this._worldScaleSign=0,this._aabbVer++}setPosition(e,t,s){e instanceof x?Ct.copy(e):Ct.set(e,t,s),this._parent===null?this.localPosition.copy(Ct):(Ao.copy(this._parent.getWorldTransform()).invert(),Ao.transformPoint(Ct,this.localPosition)),this._dirtyLocal||this._dirtifyLocal()}setRotation(e,t,s,i){if(e instanceof Q?Pt.copy(e):Pt.set(e,t,s,i),this._parent===null)this.localRotation.copy(Pt);else{const r=this._parent.getRotation();ka.copy(r).invert(),this.localRotation.copy(ka).mul(Pt)}this._dirtyLocal||this._dirtifyLocal()}setPositionAndRotation(e,t){if(this._parent===null)this.localPosition.copy(e),this.localRotation.copy(t);else{const s=this._parent.getWorldTransform();Ao.copy(s).invert(),Ao.transformPoint(e,this.localPosition),this.localRotation.setFromMat4(Ao).mul(t)}this._dirtyLocal||this._dirtifyLocal()}setEulerAngles(e,t,s){if(this.localRotation.setFromEulerAngles(e,t,s),this._parent!==null){const i=this._parent.getRotation();ka.copy(i).invert(),this.localRotation.mul2(ka,this.localRotation)}this._dirtyLocal||this._dirtifyLocal()}addChild(e){this._prepareInsertChild(e),this._children.push(e),this._onInsertChild(e)}addChildAndSaveTransform(e){const t=e.getPosition(),s=e.getRotation();this._prepareInsertChild(e),e.setPosition(mD.copy(this.worldTransform).invert().transformPoint(t)),e.setRotation(_D.copy(this.getRotation()).invert().mul(s)),this._children.push(e),this._onInsertChild(e)}insertChild(e,t){this._prepareInsertChild(e),this._children.splice(t,0,e),this._onInsertChild(e)}_prepareInsertChild(e){e.remove()}_fireOnHierarchy(e,t,s){this.fire(e,s);for(let i=0;i<this._children.length;i++)this._children[i]._fireOnHierarchy(t,t,s)}_onInsertChild(e){e._parent=this;const t=e._enabled&&this.enabled;e._enabledInHierarchy!==t&&(e._enabledInHierarchy=t,e._notifyHierarchyStateChanged(e,t)),e._updateGraphDepth(),e._dirtifyWorld(),this._frozen&&e._unfreezeParentToRoot(),e._fireOnHierarchy("insert","inserthierarchy",this),this.fire&&this.fire("childinsert",e)}_updateGraphDepth(){this._graphDepth=this._parent?this._parent._graphDepth+1:0;for(let e=0,t=this._children.length;e<t;e++)this._children[e]._updateGraphDepth()}removeChild(e){const t=this._children.indexOf(e);t!==-1&&(this._children.splice(t,1),e._parent=null,e._fireOnHierarchy("remove","removehierarchy",this),this.fire("childremove",e))}_sync(){if(this._dirtyLocal&&(this.localTransform.setTRS(this.localPosition,this.localRotation,this.localScale),this._dirtyLocal=!1),this._dirtyWorld){if(this._parent===null)this.worldTransform.copy(this.localTransform);else if(this.scaleCompensation){let e;const t=this._parent;let s=this.localScale,i=t;if(i){for(;i&&i.scaleCompensation;)i=i._parent;i&&(i=i._parent,i&&(e=i.worldTransform.getScale(),jv.mul2(e,this.localScale),s=jv))}qf.setFromMat4(t.worldTransform),Yv.mul2(qf,this.localRotation);let r=t.worldTransform;t.scaleCompensation&&(Kv.mul2(e,t.getLocalScale()),qv.setTRS(t.worldTransform.getTranslation(Xf),qf,Kv),r=qv),r.transformPoint(this.localPosition,Xf),this.worldTransform.setTRS(Xf,Yv,s)}else this.worldTransform.mulAffine2(this._parent.worldTransform,this.localTransform);this._dirtyWorld=!1}}syncHierarchy(){if(!this._enabled||this._frozen)return;this._frozen=!0,(this._dirtyLocal||this._dirtyWorld)&&this._sync();const e=this._children;for(let t=0,s=e.length;t<s;t++)e[t].syncHierarchy()}lookAt(e,t,s,i=0,r=1,a=0){if(e instanceof x)Yf.copy(e),t instanceof x?_h.copy(t):_h.copy(x.UP);else{if(s===void 0)return;Yf.set(e,t,s),_h.set(i,r,a)}Zv.setLookAt(this.getPosition(),Yf,_h),Pt.setFromMat4(Zv),this.setRotation(Pt)}translate(e,t,s){e instanceof x?Ct.copy(e):Ct.set(e,t,s),Ct.add(this.getPosition()),this.setPosition(Ct)}translateLocal(e,t,s){e instanceof x?Ct.copy(e):Ct.set(e,t,s),this.localRotation.transformVector(Ct,Ct),this.localPosition.add(Ct),this._dirtyLocal||this._dirtifyLocal()}rotate(e,t,s){if(Pt.setFromEulerAngles(e,t,s),this._parent===null)this.localRotation.mul2(Pt,this.localRotation);else{const i=this.getRotation(),r=this._parent.getRotation();ka.copy(r).invert(),Pt.mul2(ka,Pt),this.localRotation.mul2(Pt,i)}this._dirtyLocal||this._dirtifyLocal()}rotateLocal(e,t,s){Pt.setFromEulerAngles(e,t,s),this.localRotation.mul(Pt),this._dirtyLocal||this._dirtifyLocal()}}const Jv=new $,eS=new $,tS=new $,ji=class ji{static create(e,t,s){const i=new Xl;switch(i.node=new ze(e),i.aspectRatio=1,i.aspectRatioMode=cp,i._scissorRectClear=!0,t){case Me:i.node.setRotation(ji.pointLightRotations[s]),i.fov=90,i.projection=zs;break;case Re:i.projection=zs;break;case oe:i.projection=Rn;break}return i}static evalSpotCookieMatrix(e){let t=ji._spotCookieCamera;t||(t=ji.create("SpotCookieCamera",Re),ji._spotCookieCamera=t),t.fov=e._outerConeAngle*2;const s=t._node;s.setPosition(e._node.getPosition()),s.setRotation(e._node.getRotation()),s.rotateLocal(-90,0,0),Jv.setTRS(s.getPosition(),s.getRotation(),x.ONE).invert(),eS.mul2(t.projectionMatrix,Jv);const i=e.cookieMatrix,r=e.atlasViewport;return tS.setViewport(r.x,r.y,r.z,r.w),i.mul2(tS,eS),i}};ji.pointLightRotations=[new Q().setFromEulerAngles(0,90,180),new Q().setFromEulerAngles(0,-90,180),new Q().setFromEulerAngles(90,0,0),new Q().setFromEulerAngles(-90,0,0),new Q().setFromEulerAngles(0,180,180),new Q().setFromEulerAngles(0,0,180)],ji._spotCookieCamera=null;let ro=ji;const Yt=new x,Tr=new Float32Array(6),gD=new x(-.5,0,0),vD=new x(0,0,.5),Xe={POSITION_RANGE:0,DIRECTION_FLAGS:1,COLOR_ANGLES_BIAS:2,PROJ_MAT_0:3,ATLAS_VIEWPORT:3,PROJ_MAT_1:4,PROJ_MAT_2:5,PROJ_MAT_3:6,AREA_DATA_WIDTH:7,AREA_DATA_HEIGHT:8,COUNT:9},SD={LIGHTSHAPE_PUNCTUAL:`${xs}u`,LIGHTSHAPE_RECT:`${QT}u`,LIGHTSHAPE_DISK:`${JT}u`,LIGHTSHAPE_SPHERE:`${ex}u`,LIGHT_COLOR_DIVIDER:`${Qh}.0`},sS=(o,e)=>Object.keys(o).map(t=>`#define {${e}${t}} ${o[t]}`).join(`
`),iS=`

		${sS(Xe,"CLUSTER_TEXTURE_")}
		${sS(SD,"")}
`;class yD{constructor(e){this.areaLightsEnabled=!1,this.device=e,de.get(e,Ee).set("lightBufferDefinesPS",iS),de.get(e,Be).set("lightBufferDefinesPS",iS),this.cookiesEnabled=!1,this.shadowsEnabled=!1,this.areaLightsEnabled=!1,this.maxLights=255;const t=Xe.COUNT;this.lightsFloat=new Float32Array(4*t*this.maxLights),this.lightsUint=new Uint32Array(this.lightsFloat.buffer),this.lightsTexture=this.createTexture(this.device,t,this.maxLights,ft,"LightsTexture"),this._lightsTextureId=this.device.scope.resolve("lightsTexture"),this.invMaxColorValue=0,this.invMaxAttenuation=0,this.boundsMin=new x,this.boundsDelta=new x}destroy(){this.lightsTexture?.destroy(),this.lightsTexture=null}createTexture(e,t,s,i,r){return new ae(e,{name:r,width:t,height:s,mipmaps:!1,format:i,addressU:te,addressV:te,type:ti,magFilter:pe,minFilter:pe,anisotropy:1})}setBounds(e,t){this.boundsMin.copy(e),this.boundsDelta.copy(t)}uploadTextures(){this.lightsTexture.lock().set(this.lightsFloat),this.lightsTexture.unlock()}updateUniforms(){this._lightsTextureId.setValue(this.lightsTexture)}getSpotDirection(e,t){t._node.getWorldTransform().getY(e).mulScalar(-1),e.normalize()}getLightAreaSizes(e){const t=e._node.getWorldTransform();return t.transformVector(gD,Yt),Tr[0]=Yt.x,Tr[1]=Yt.y,Tr[2]=Yt.z,t.transformVector(vD,Yt),Tr[3]=Yt.x,Tr[4]=Yt.y,Tr[5]=Yt.z,Tr}addLightData(e,t){const s=e._type===Re,i=e.atlasViewportAllocated,r=this.cookiesEnabled&&!!e._cookie&&i,a=this.areaLightsEnabled&&e.shape!==xs,n=this.shadowsEnabled&&e.castShadows&&i,l=e._node.getPosition();let h=null,c=null;s?n?h=e.getRenderData(null,0).shadowMatrix:r&&(h=ro.evalSpotCookieMatrix(e)):(n||r)&&(c=e.atlasViewport);const d=this.lightsFloat,f=this.lightsUint,u=t*this.lightsTexture.width*4;d[u+4*Xe.POSITION_RANGE+0]=l.x,d[u+4*Xe.POSITION_RANGE+1]=l.y,d[u+4*Xe.POSITION_RANGE+2]=l.z,d[u+4*Xe.POSITION_RANGE+3]=e.attenuationEnd;const p=e.clusteredData;if(f[u+4*Xe.COLOR_ANGLES_BIAS+0]=p[0],f[u+4*Xe.COLOR_ANGLES_BIAS+1]=p[1],f[u+4*Xe.COLOR_ANGLES_BIAS+2]=p[2],e.castShadows){const m=e.getRenderData(null,0),_=e._getUniformBiasValues(m),g=oa.float2Half(_.bias),y=oa.float2Half(_.normalBias);f[u+4*Xe.COLOR_ANGLES_BIAS+3]=g|y<<16}if(s&&(this.getSpotDirection(Yt,e),d[u+4*Xe.DIRECTION_FLAGS+0]=Yt.x,d[u+4*Xe.DIRECTION_FLAGS+1]=Yt.y,d[u+4*Xe.DIRECTION_FLAGS+2]=Yt.z),f[u+4*Xe.DIRECTION_FLAGS+3]=e.getClusteredFlags(n,r),h){const m=h.data;for(let _=0;_<16;_++)d[u+4*Xe.PROJ_MAT_0+_]=m[_]}if(c&&(d[u+4*Xe.ATLAS_VIEWPORT+0]=c.x,d[u+4*Xe.ATLAS_VIEWPORT+1]=c.y,d[u+4*Xe.ATLAS_VIEWPORT+2]=c.z/3),a){const m=this.getLightAreaSizes(e);d[u+4*Xe.AREA_DATA_WIDTH+0]=m[0],d[u+4*Xe.AREA_DATA_WIDTH+1]=m[1],d[u+4*Xe.AREA_DATA_WIDTH+2]=m[2],d[u+4*Xe.AREA_DATA_HEIGHT+0]=m[3],d[u+4*Xe.AREA_DATA_HEIGHT+1]=m[4],d[u+4*Xe.AREA_DATA_HEIGHT+2]=m[5]}}}const gh=new x,vh=new x,Sh=new x,jf=new fe;class rS{constructor(){this.light=null,this.min=new x,this.max=new x}}class dp{constructor(e){this.device=e,this.name="Untitled",this.reportCount=0,this.boundsMin=new x,this.boundsMax=new x,this.boundsDelta=new x,this._cells=new x(1,1,1),this._cellsLimit=new x,this.cells=this._cells,this.maxCellLightCount=4,this._usedLights=[],this._usedLights.push(new rS),this.lightsBuffer=new yD(e),this.registerUniforms(e)}set maxCellLightCount(e){e!==this._maxCellLightCount&&(this._maxCellLightCount=e,this._cellsDirty=!0)}get maxCellLightCount(){return this._maxCellLightCount}set cells(e){gh.copy(e).floor(),this._cells.equals(gh)||(this._cells.copy(gh),this._cellsLimit.copy(gh).sub(x.ONE),this._cellsDirty=!0)}get cells(){return this._cells}destroy(){this.lightsBuffer.destroy(),this.releaseClusterTexture()}releaseClusterTexture(){this.clusterTexture&&(this.clusterTexture.destroy(),this.clusterTexture=null)}registerUniforms(e){this._clusterSkipId=e.scope.resolve("clusterSkip"),this._clusterMaxCellsId=e.scope.resolve("clusterMaxCells"),this._clusterWorldTextureId=e.scope.resolve("clusterWorldTexture"),this._clusterTextureSizeId=e.scope.resolve("clusterTextureSize"),this._clusterTextureSizeData=new Float32Array(3),this._clusterBoundsMinId=e.scope.resolve("clusterBoundsMin"),this._clusterBoundsMinData=new Float32Array(3),this._clusterBoundsDeltaId=e.scope.resolve("clusterBoundsDelta"),this._clusterBoundsDeltaData=new Float32Array(3),this._clusterCellsCountByBoundsSizeId=e.scope.resolve("clusterCellsCountByBoundsSize"),this._clusterCellsCountByBoundsSizeData=new Float32Array(3),this._clusterCellsDotId=e.scope.resolve("clusterCellsDot"),this._clusterCellsDotData=new Float32Array(3),this._clusterCellsMaxId=e.scope.resolve("clusterCellsMax"),this._clusterCellsMaxData=new Float32Array(3)}updateParams(e){e&&(this.cells=e.cells,this.maxCellLightCount=e.maxLightsPerCell,this.lightsBuffer.cookiesEnabled=e.cookiesEnabled,this.lightsBuffer.shadowsEnabled=e.shadowsEnabled,this.lightsBuffer.areaLightsEnabled=e.areaLightsEnabled)}updateCells(){if(this._cellsDirty){this._cellsDirty=!1;const e=this._cells.x,t=this._cells.y,s=this._cells.z,i=e*t*s,r=this.maxCellLightCount*i;let a=Math.ceil(Math.sqrt(r));a=B.roundUp(a,this.maxCellLightCount);const n=Math.ceil(r/a);this._clusterCellsMaxData[0]=e,this._clusterCellsMaxData[1]=t,this._clusterCellsMaxData[2]=s,this._clusterCellsDotData[0]=this.maxCellLightCount,this._clusterCellsDotData[1]=e*s*this.maxCellLightCount,this._clusterCellsDotData[2]=e*this.maxCellLightCount,this.clusters=new Uint8ClampedArray(r),this.counts=new Int32Array(i),this._clusterTextureSizeData[0]=a,this._clusterTextureSizeData[1]=1/a,this._clusterTextureSizeData[2]=1/n,this.releaseClusterTexture(),this.clusterTexture=this.lightsBuffer.createTexture(this.device,a,n,h_,"ClusterTexture")}}uploadTextures(){this.clusterTexture.lock().set(this.clusters),this.clusterTexture.unlock(),this.lightsBuffer.uploadTextures()}updateUniforms(){this._clusterSkipId.setValue(this._usedLights.length>1?0:1),this.lightsBuffer.updateUniforms(),this._clusterWorldTextureId.setValue(this.clusterTexture),this._clusterMaxCellsId.setValue(this.maxCellLightCount);const e=this.boundsDelta;this._clusterCellsCountByBoundsSizeData[0]=this._cells.x/e.x,this._clusterCellsCountByBoundsSizeData[1]=this._cells.y/e.y,this._clusterCellsCountByBoundsSizeData[2]=this._cells.z/e.z,this._clusterCellsCountByBoundsSizeId.setValue(this._clusterCellsCountByBoundsSizeData),this._clusterBoundsMinData[0]=this.boundsMin.x,this._clusterBoundsMinData[1]=this.boundsMin.y,this._clusterBoundsMinData[2]=this.boundsMin.z,this._clusterBoundsDeltaData[0]=e.x,this._clusterBoundsDeltaData[1]=e.y,this._clusterBoundsDeltaData[2]=e.z,this._clusterTextureSizeId.setValue(this._clusterTextureSizeData),this._clusterBoundsMinId.setValue(this._clusterBoundsMinData),this._clusterBoundsDeltaId.setValue(this._clusterBoundsDeltaData),this._clusterCellsDotId.setValue(this._clusterCellsDotData),this._clusterCellsMaxId.setValue(this._clusterCellsMaxData)}evalLightCellMinMax(e,t,s){t.copy(e.min),t.sub(this.boundsMin),t.div(this.boundsDelta),t.mul2(t,this.cells),t.floor(),s.copy(e.max),s.sub(this.boundsMin),s.div(this.boundsDelta),s.mul2(s,this.cells),s.ceil(),t.max(x.ZERO),s.min(this._cellsLimit)}collectLights(e){const t=this.lightsBuffer.maxLights,s=this._usedLights;let i=1;e.forEach(r=>{const a=!!(r.mask&(As|ma)),n=r.type===Re&&r._outerConeAngle===0;if(r.enabled&&r.type!==oe&&r.visibleThisFrame&&r.intensity>0&&a&&!n&&i<t){let l;i<s.length?l=s[i]:(l=new rS,s.push(l)),l.light=r,r.getBoundingBox(jf),l.min.copy(jf.getMin()),l.max.copy(jf.getMax()),i++}}),s.length=i}evaluateBounds(){const e=this._usedLights,t=this.boundsMin,s=this.boundsMax;if(e.length>1){t.copy(e[1].min),s.copy(e[1].max);for(let i=2;i<e.length;i++)t.min(e[i].min),s.max(e[i].max)}else t.set(0,0,0),s.set(1,1,1);this.boundsDelta.sub2(s,t),this.lightsBuffer.setBounds(t,this.boundsDelta)}updateClusters(e){this.counts.fill(0),this.clusters.fill(0),this.lightsBuffer.areaLightsEnabled=e?e.areaLightsEnabled:!1;const t=this._cells.x,s=this._cells.z,i=this.counts,r=this._maxCellLightCount,a=this.clusters,n=this.maxCellLightCount,l=this._usedLights;for(let h=1;h<l.length;h++){const c=l[h],d=c.light;this.lightsBuffer.addLightData(d,h),this.evalLightCellMinMax(c,vh,Sh);const f=vh.x,u=Sh.x,p=vh.y,m=Sh.y,_=vh.z,g=Sh.z;for(let y=f;y<=u;y++)for(let A=_;A<=g;A++)for(let v=p;v<=m;v++){const S=y+t*(A+v*s),b=i[S];b<r&&(a[n*S+b]=h,i[S]=b+1)}}}update(e,t=null){this.updateParams(t),this.updateCells(),this.collectLights(e),this.evaluateBounds(),this.updateClusters(t),this.uploadTextures()}activate(){this.updateUniforms()}}const TD="muPIHORMLNDCz4DxVR/ZvYfAUVEFR47KRIC4nwAAAAAP7WxlhD6Ci+2HCe7BF8jRAPZwdH2UPpI5PdLCJdkvG4UTaNDJ/0crAzne71GCrb4kbdMjjCEGzdX6fNxDMLJq5xkeoIVTdfiZkodEeArmZmp/FQzFjD4x8iOW7Dg64n+3mWqyEwLxXT8zoJXfbw8QJKDCaarUYyTlMzNFHbgUe9IQV7g4YOgtSKpIFZJ0qERm7u4PpmiF89ktHWCywaGmD6h+hfh2/Zd8KYlKqqo4Cem4T42bT/Z9FpCQF1hhSjfBzZ5XFn/y3jegWC6u86KuELRundQS/1Rp+XuKKGIgRv3CvP5y749yqLlFO495JOT3+f2CXgd71npU0/KjjpkZucbJ5m78IVyuSrSozc9jgBUhDrz0hFsyb7LFUH9//wJbBgLdNWJZObfKxrNt8TliLA9w9sXFv6g26iXpf6r/BqcAusj/QzGBZuoUGeEtw8BCXCZ3jUiw4hvM18ZVqlUD3C40LAFXW6FRjuAZGRNstb0/qVk4skwyT+MHrvRorI4rKHVMWZmKyAkzL/78u/9pMQuX14pZN50b2PHn6fRxeaCQLsfT4dpvIkWWFuFVENZIh+8xgR6lU+85W0PPdAu1j99kcCG40JBQa4JMyRzq6qriOBLtqF87vpCJan0WEduVr/mOYkS00urVA0mA6M3031+GmGmW48PaJDYOEIb3bIXWPaLoAOEinX1TN3+/vwhG6nqJu0TdHpedS7QsGZIoxH3nQYYjQP1jmbahlbNngw5ogsGk1y50XZyUmQBY+/JBJ3Unu4dApm+WmPwHPU9gLb+4mHh4BiY6M86pq+WeTyWdI3s0CXPEtHGXZ8zMZgUoyRomBi1VdazzuN+WOmQ9Pa0Z0tlNopUi8AJ4x2Xn4mmOKEbXLxlbVsWu8XhuDGYFOGCRVdSqDPXrHU5SDdUlti3k5///SBwzTMwK3L4a1H7w4lnpEas6////AfX8asyIBfeFXVJ3tgvxQ/blZuUKyIODIfr/UzdWNu7pciLBpdZRZ4pIfZ1R6szq+XNxkGG///8EZFpu7VHAhFWqHEOrB9unw+YQa5o8/9IR/V5/zq+986rJSyfgJKt2u9hxU1wzyQWPjJGvzG9+eWWxGFOHVKqI4jBQALwZZswesnvZ2UmmkEXdiRpz8B+oWE7PY70ZTMndisYSXg2TqoI+3y9BxbnY2Y4EfbdcRhAvG59NqDENNYbxKvK5HJfPG5M+Wi2AcpLVJrD6caiEOzgSoVNSgQK8fm2M3zGcF4xtClv/8Hs9oD7C3jitTATYNQxmKqKf1LhIxzf1bmfiNn7UKFmcJu4sLqVLwxGSue3taBEyknkw5hXTsUCvqmmL/f8n/w0giR7Hu/9EHvpkz3yuu64TioMkzdTJ30i0+hFnQqW1+v9mMwq+z9qGX0UFu9MomvVG2xod6vc12AAAAACq7sGa5qptFR0jF3nQt/D+7PibKYahaxP3hEixPbGi9nwNf2LAa7LkEZRKxzXeCD64Xpii5n+8Kpg8eHIv7AWXZltgMoGltmoJ0XGdOCL8WkzphvR9N2o3ARSZ42l5e5Pe4B58MCRlP3EKv+mcloknH+fto5BWsmEutW6KvjOVsznFCktkSczVk4aGvj9VXlRcLeDoKG8RkBgdcNG2bf8HUL4MT2DM+ar7NImJhKpxakX4Vk0CnP+/XNhl5UsP0lXgeZXPoDBMSW5An+DXlTCO5FQGwSPYwHLKYVIimEdAoVe49rQLaaNcye5LxU2/c5TijTgJtD5eQQIe1snxauj5jZsxJBUJdoP/zqpjqv8qBruoPsVsP8N44PCUW5Dd0DzqjSS/Dl5mI9cn1w2ndN/0KAEm1QAAAACwu6KM/083IBbH5bPa/9oHUwcU8I9v3j6/v18QYammrf+P6VL///8BrpuM3fOLCxaLNOFNF1zPbPYTP65ni6njft4eVcyrVXRQFrs52tr35StiSp55edVDCBC0H5rIfac6nzUwxQSt7y15QoKb+5zebEQUmVbrPjXuUa19Ey7sqXMiSUKHaw72PJKDdrutJoQr3u6lEYJ8K0MakWKj9zjTFi4X94TsKYco0GrLeB60M6D8M/80rhXUW8iMequg8y5F838WI0+gp3GBN5Kj/xIOxTWQuUaPV/LwvARr1VH93BFgGZR1MFW0Ua30GbYmdnAgo9VWy8SQtpDUgGE2r2zq2eTEMCL7sMKmE1hchVhuF/TCq9iXKEm86kzOf3Rp9ZnCxbpDUj+FKNxVyXe6pVZkRXv/m95SnB/EB8aME29N85MtAcDoXWlor8De2Q5Dg1tar+8wgiZufbMam81j//ASUohoR/zSh2KG4bvT6mkIPz6C5/98DC3LaWlaEZ1zA5JORZRu6J/a0GY285sEYzw71YqOT1ihAG0z5SDt1xNiDQWZdFpndArp6xWhqSDkRb4kSJEHb9liPvw7uLV/6i5MVf//A9Qjr8xkAEUh+KDI+zdtJ68d6MBOktg1iyp/SCq8O9f5pbamn1VVVQPRTWqNBvhQKa07s6P0lc9Luu/3gw4HeyOUfz8MxMwV4UQhua+t9cr4bz/nIB2wnDSK1K7I94M+s6C84htaX/CNlMQUSs2KJO+yaebfTbkNX5yWcqEJevo0vbKUiETuFXiL019A3E+lmsyZMwXrXLLiQAZ5t9+jI3JobhJTMiDH5ZOQ+8Jau5555NMjHSscP9qCVaa40doh+1a3Ukf6jqBmLddgh79/fwTfCyqiuldNkUoy+nUp+4nerwg0OjtGv2x485PJOJvUEokNhYIdWjpx7BWk0VZGWOp3jSFTJ2bnu6KCduZtG/UcBC9RZ3W/jMSfSMw4Etr/DoD/XYP2V5Ovw+YoM3F5g2dGLdvuG6ZkVGLE6Dk5Zr+sdSyGliJP1y2OFf/KFO0RWO+3gsGhesTnfZVpTd8/HwgO216gwaqo+vY3TljfJWowY+i0p0Os4SLn/1wLqDHMlszggmT/D8MRFzs+pLv6LNJSsNZ/r41mWi/rF6ZcKp/yzJdK0VU44hskq3RGpgO6mIpJDsf/mZkFrz0yYOMLbuaj/wp1v7JMFM5eqvBhmTd7U8frQAtHtys4zgpjZmzUhOVTfNNLifElGXADlqHGKrkBT/nYwX8ZRm3RjvyPvjKyEqEGKUpVnvOGx+NKPHiWM//ZDpDVGvvrjmk8RPF/wiYZD3+Us8YCXjrVOfjdd1UPAfjLp8jgSn4me7DPTpz1Ggy9XL80guFO7ECT10AvILKfD18Qx+KY/f8aRqu0oOO8hfKRFZa9PUJwCsp6VdZz6LFkm2b9Pl2LIifCwzRy7TpdG2uAtOxP2OemY26bJMa9ZGSLIRlMsgpDpnDJwd0oa5pQ13x1hrHf52HpulUWonGWsfXZbSQYKu9bnEN76ciQih0opN3deDVrbrxorfVlnCmL1R9zq3ePGWIv21c7pW8kEiFTM5JX8dAw867s/60cf79/BH+MDFCZBHlz1L+qGOJf/1txhhmrf3//As+RIJwevDb+fgNXVeHw67QptZegayhrEwr5Gy+EPo1RLaMtPbqOZYoVzXzwzjMFWZxyUG9YUIf6////AQWy84iAygLk9COtXt92+0mT/xg0zMzMBeLkb8y9SL2TDXgSX422hDgpGNLJyuPioA+YJ91G8znrpNqHkwYyscaJDEc9Vc+j4cXle3hvcd2JqDQH2lBZxDn6mUTs0b75raMvbs727codX01Anj8f3wir9P2xQaQ22v/TxCMglKDFoTjaP01XTLgxnTvPv02JgEUrW6UDgOnobFpLdvKdlypgIzPcq14fgXU5tvVW0FEs7VRlsG1IyA69fN4n+awHhT34cE+xUvdj86C8LgAsFheTjI9Ht9EyYAAAAAAVBVKRx2wLgUTI0/2QfyJo2riRw3JDqzEShmx/Lifo6mRkQVbS7X53t+EvKxcXogtdts31e9MRHdcHgsA8rt4/mt2unlzQ/wsU8Gu7+W6Oj7eD8EQdDp5XlCsVaS/AV/t5ZpPOHR3rGpyAJe9IPV+xMrBL1Oz/8MQhFs31h0N1cVnq371uqIJYHyafKH1jteAK3VpMXBcuC+yt0ZeKyRUY4QhdrJJ4tJ1wg3Hu6kDsbovxupTMkGdRrm8oZSoYPbJ+PwH/xotgTdkA1205vUEfnqkI04T/fnnd1fiZW5AwNcggd7fi4j5zasmcntZexIxqFZQMzMJpfndmI5jn17cgn5EV5t9XN0C///8Q9wlJpMGXdoiaMTG2sVyHQsn8mWRISCLNG777S0OuDRP2GlLcJ2UeOg7Fo8hTNPeJ//iTJhyqxhKRUntdXOihq2wfKfH///8B0GGrwT+fSOQRdctKxjjGCSS11d6BlQ9BDfE0J6Z25FaNTKGpFKNCMr2G/041KpWwBLVe1k08vncseQbKZdXi8x1t9XA45U/Wd43D9wAh3Tal0aiLVzGPusOZ1F+W3TWoqlX/A95+dNef11TsuGful+ctGssldk3fqpfqh+43XTxL42+leSHoF/dWHYGX6maqUEuLX7UB+r/6Llr4LKocbVIeu+hB9QTPfz9fCP8RyWmX4SmbhMFsNtCijV7lVcwejLKlvl0GfCndnWV7/39VBrtTRuUx92oke3GBgKkC5fdGK0YvNK+xenKaDmsHDjNFUM3NMz3ZiXXFuLgojosPVCDEl2W5BjX3Ms+j0GSqACHmh0+RPWyuNm/Qe8vFf9AW7N1uRaxWirrUytqEJnJ4/Flm8hSoiZ2NQBsS6w/yQlC4gCaFo8q4nyY6AFdo4hiwhBXzbNKKvZvktCjSCukRR/BbYVbNwZi2Yh3hGodEacLW8qijiWJODf0P2bhfaiPspPT4lYJBgi/KfcFwCfvyUIgkJOv///8CG/JEepRBLaMFE+2TgrqsJXOVOWHt6g/bFwVLLMVBsMR50dis/39/AlBX+/rMTJkUQrnlxpR2iu0Tp8tATkRYGmDIrcAiRP8PjoWIlb7/0ecTdSCE9Y58+a+n/FovJQTVF4F2jAxMZhTgrM/KVS5BQu6bVbkWY5HXnxRshks3urDdW4RkWp4M4TeLmFK5KF/uHkkiO5Kv96RioH984v/CSDBnG+BwlnU9B+o7Y+0X0Nob+0pLsStxjvPXMy2eCpzhOWV4XbObBHN4UE2sLQ/DIqXhOzxVf38GlTi6aG7EnePO7TRJm9yOfUUcqq1I2iQHrVDqn3TUNRi/lMw8KbMW/3/nqCz/Ef8PoW5Qxcz2yHR/f78EPB2Stbd+ZFmfNTUYILzsb9YNhpaHcaymYrBiNHmFE3Y4ccYJ25Prqm7zHobGHED8/93ZNlWro9vcKivGZs31UiK1k5zjUhexUgbqJb+fUTjxce/7Zly8a5KMC1fX5nfjPgibdvzbXV1jRT2asXvmSAusaLdq1TSIJ8fXINk5AtT34EWPAsfP9IFQqM5K11O6saoHJA==";let Ti=null;const Ex=()=>{if(!Ti){const o=atob(TD);Ti=Uint8Array.from(o,e=>e.charCodeAt(0))}},xD=()=>(Ex(),Ti);class ED{constructor(e=0){this.seed=0,this.seed=e*4,Ex()}_next(){this.seed=(this.seed+4)%Ti.length}value(){return this._next(),Ti[this.seed]/255}vec4(e=new K){return this._next(),e.set(Ti[this.seed],Ti[this.seed+1],Ti[this.seed+2],Ti[this.seed+3]).mulScalar(1/255)}}const AD=[new x(-1,0,0),new x(1,0,0),new x(0,-1,0),new x(0,1,0),new x(0,0,-1),new x(0,0,1)];class bD{update(e,t){const s=this.colors,{r:i,g:r,b:a}=e;for(let n=0;n<6;n++)s[n*3]=i,s[n*3+1]=r,s[n*3+2]=a;for(let n=0;n<t.length;n++){const l=t[n];if(l._type===oe)for(let h=0;h<6;h++){const c=Math.max(AD[h].dot(l._direction),0)*l._intensity,d=l._color;s[h*3]+=d.r*c,s[h*3+1]+=d.g*c,s[h*3+2]+=d.b*c}}}constructor(){this.colors=new Float32Array(18)}}const wD=(o,e,t,s)=>{const i=new ae(o,{name:`${e}${t}`,width:t,height:t,format:Ae,addressU:ot,addressV:ot,type:ti,magFilter:pe,minFilter:pe,anisotropy:1,mipmaps:!1});return i.lock().set(s),i.unlock(),i},CD=new Tt,PD=o=>CD.get(o,()=>{const e=xD(),t=Math.sqrt(e.length/4);return wD(o,"BlueNoise",t,e)});class va{constructor(e,t){this.texture=e,this.cached=!1,this.renderTargets=t}destroy(){this.texture&&(this.texture.destroy(),this.texture=null);const e=this.renderTargets;for(let t=0;t<e.length;t++)e[t].destroy();this.renderTargets.length=0}static create(e,t){let s=null;return t._type===Me?s=this.createCubemap(e,t._shadowResolution,t._shadowType):s=this.create2dMap(e,t._shadowResolution,t._shadowType),s}static createAtlas(e,t,s){const i=this.create2dMap(e,t,s),r=i.renderTargets,a=r[0];for(let n=0;n<5;n++)r.push(a);return i}static create2dMap(e,t,s){const i=Li.get(s);let r=i.format;r===Oi&&!e.textureFloatRenderable&&e.textureHalfFloatRenderable&&(r=Ud);const a=Zs.get(r)?.name;let n=Ze;s===V_&&(n=e.extTextureFloatLinear?Ze:pe),s===gl&&(n=pe);const l=new ae(e,{format:r,width:t,height:t,mipmaps:!1,minFilter:n,magFilter:n,addressU:te,addressV:te,name:`ShadowMap2D_${a}`});let h=null;return i?.pcf?(l.compareOnRead=!0,l.compareFunc=Tc,h=new ct({depthBuffer:l})):h=new ct({colorBuffer:l,depth:!0}),e.isWebGPU&&(h.flipY=!0),new va(l,[h])}static createCubemap(e,t,s){const i=Li.get(s),r=Zs.get(i.format)?.name,a=s===gl,n=a?pe:Ze,l=new ae(e,{format:i?.format,width:t,height:t,cubemap:!0,mipmaps:!1,minFilter:n,magFilter:n,addressU:te,addressV:te,name:`ShadowMapCube_${r}`});a||(l.compareOnRead=!0,l.compareFunc=Tc);const h=[];for(let c=0;c<6;c++)a?h.push(new ct({colorBuffer:l,face:c,depth:!0})):h.push(new ct({depthBuffer:l,face:c}));return new va(l,h)}}const LD=[],ID=[],ai=new K,Kf=new K;class Zf{constructor(e){this.size=Math.floor(e.w*1024),this.used=!1,this.lightId=-1,this.rect=e}}class MD{constructor(e){this.device=e,this.version=1,this.shadowAtlasResolution=2048,this.shadowAtlas=null,this.shadowEdgePixels=3,this.cookieAtlasResolution=4,this.cookieAtlas=new ae(this.device,{name:"CookieAtlas",width:this.cookieAtlasResolution,height:this.cookieAtlasResolution,format:zt,cubemap:!1,mipmaps:!1,minFilter:pe,magFilter:pe,addressU:te,addressV:te}),this.cookieRenderTarget=new ct({colorBuffer:this.cookieAtlas,depth:!1,flipY:!0}),this.slots=[],this.atlasSplit=[],this.cubeSlotsOffsets=[new z(0,0),new z(0,1),new z(1,0),new z(1,1),new z(2,0),new z(2,1)],this.scissorVec=new K,this.allocateShadowAtlas(1),this.allocateCookieAtlas(1),this.allocateUniforms()}destroy(){this.destroyShadowAtlas(),this.destroyCookieAtlas()}destroyShadowAtlas(){this.shadowAtlas?.destroy(),this.shadowAtlas=null}destroyCookieAtlas(){this.cookieAtlas?.destroy(),this.cookieAtlas=null,this.cookieRenderTarget?.destroy(),this.cookieRenderTarget=null}allocateShadowAtlas(e,t=vs){const s=this.shadowAtlas?.texture.format,i=Li.get(t).format;if(!this.shadowAtlas||this.shadowAtlas.texture.width!==e||s!==i){this.version++,this.destroyShadowAtlas(),this.shadowAtlas=va.createAtlas(this.device,e,t),this.shadowAtlas.cached=!0;const r=4/this.shadowAtlasResolution;this.scissorVec.set(r,r,-2*r,-2*r)}}allocateCookieAtlas(e){this.cookieAtlas.width!==e&&(this.cookieRenderTarget.resize(e,e),this.version++)}allocateUniforms(){this._shadowAtlasTextureId=this.device.scope.resolve("shadowAtlasTexture"),this._shadowAtlasParamsId=this.device.scope.resolve("shadowAtlasParams"),this._shadowAtlasParams=new Float32Array(2),this._cookieAtlasTextureId=this.device.scope.resolve("cookieAtlasTexture")}updateUniforms(){const t=this.shadowAtlas.renderTargets[0].depthBuffer;this._shadowAtlasTextureId.setValue(t),this._shadowAtlasParams[0]=this.shadowAtlasResolution,this._shadowAtlasParams[1]=this.shadowEdgePixels,this._shadowAtlasParamsId.setValue(this._shadowAtlasParams),this._cookieAtlasTextureId.setValue(this.cookieAtlas)}subdivide(e,t){let s=t.atlasSplit;if(!s){const r=Math.ceil(Math.sqrt(e));s=ID,s[0]=r,s.length=1}if(!((r,a)=>r.length===a.length&&r.every((n,l)=>n===a[l]))(s,this.atlasSplit)){this.version++,this.slots.length=0,this.atlasSplit.length=0,this.atlasSplit.push(...s);const r=this.atlasSplit[0];if(r>1){const a=1/r;for(let n=0;n<r;n++)for(let l=0;l<r;l++){const h=new K(n*a,l*a,a,a),c=this.atlasSplit[1+n*r+l];if(c>1)for(let d=0;d<c;d++)for(let f=0;f<c;f++){const u=a/c,p=new K(h.x+d*u,h.y+f*u,u,u);this.slots.push(new Zf(p))}else this.slots.push(new Zf(h))}}else this.slots.push(new Zf(new K(0,0,1,1)));this.slots.sort((a,n)=>n.size-a.size)}}collectLights(e,t){const s=t.cookiesEnabled,i=t.shadowsEnabled;let r=!1,a=!1;const n=LD;return n.length=0,(s||i)&&(h=>{for(let c=0;c<h.length;c++){const d=h[c];if(d.visibleThisFrame){const f=i&&d.castShadows,u=s&&!!d.cookie;r||=f,a||=u,(f||u)&&n.push(d)}}})(e),n.sort((h,c)=>c.maxScreenSize-h.maxScreenSize),r&&this.allocateShadowAtlas(this.shadowAtlasResolution,t.shadowType),a&&this.allocateCookieAtlas(this.cookieAtlasResolution),(r||a)&&this.subdivide(n.length,t),n}setupSlot(e,t){e.atlasViewport.copy(t);const s=e.numShadowFaces;for(let i=0;i<s;i++)if(e.castShadows||e._cookie){if(ai.copy(t),Kf.copy(t),e._type===Re&&ai.add(this.scissorVec),e._type===Me){const r=ai.z/3,a=this.cubeSlotsOffsets[i];ai.x+=r*a.x,ai.y+=r*a.y,ai.z=r,ai.w=r,Kf.copy(ai)}if(e.castShadows){const r=e.getRenderData(null,i);r.shadowViewport.copy(ai),r.shadowScissor.copy(Kf)}}}assignSlot(e,t,s){e.atlasViewportAllocated=!0;const i=this.slots[t];i.lightId=e.id,i.used=!0,s&&(e.atlasSlotUpdated=!0,e.atlasVersion=this.version,e.atlasSlotIndex=t)}update(e,t){this.shadowAtlasResolution=t.shadowAtlasResolution,this.cookieAtlasResolution=t.cookieAtlasResolution;const s=this.collectLights(e,t);if(s.length>0){const i=this.slots;for(let n=0;n<i.length;n++)i[n].used=!1;const r=Math.min(s.length,i.length);for(let n=0;n<r;n++){const l=s[n];l.castShadows&&(l._shadowMap=this.shadowAtlas);const h=i[l.atlasSlotIndex];if(l.atlasVersion===this.version&&l.id===h?.lightId){const c=i[l.atlasSlotIndex];c.size===i[n].size&&!c.used&&this.assignSlot(l,l.atlasSlotIndex,!1)}}let a=0;for(let n=0;n<r;n++){for(;a<i.length&&i[a].used;)a++;const l=s[n];l.atlasViewportAllocated||this.assignSlot(l,a,!0);const h=i[l.atlasSlotIndex];this.setupSlot(l,h.rect)}}this.updateUniforms()}}const wt=[];wt[P_]={src:_t,dst:_t,op:nL};wt[ts]={src:_t,dst:Vm,op:Ts};wt[ii]={src:zm,dst:Hm,op:Ts,alphaSrc:_t};wt[pa]={src:_t,dst:Hm,op:Ts};wt[L_]={src:_t,dst:_t,op:Ts};wt[M_]={src:zm,dst:_t,op:Ts};wt[D_]={src:rT,dst:rL,op:Ts};wt[R_]={src:aL,dst:_t,op:Ts};wt[I_]={src:rT,dst:Vm,op:Ts};wt[O_]={src:_t,dst:_t,op:oL};wt[N_]={src:_t,dst:_t,op:lL};let DD=0;class ql{constructor(){this.meshInstances=[],this.name="Untitled",this.userId="",this.id=DD++,this.variants=new Map,this.defines=new Map,this._definesDirty=!1,this.parameters={},this.alphaTest=0,this.alphaToCoverage=!1,this._blendState=new dt,this._depthState=new Gt,this.cull=la,this.stencilFront=null,this.stencilBack=null,this._shaderChunks=null,this._oldChunks={},this._dirtyShader=!0,this._shaderVersion=0,this._scene=null,this.dirty=!0}get hasShaderChunks(){return this._shaderChunks!=null}get shaderChunks(){return this._shaderChunks||(this._shaderChunks=new de),this._shaderChunks}getShaderChunks(e=Ee){const t=this.shaderChunks;return e===Ee?t.glsl:t.wgsl}set shaderChunksVersion(e){this.shaderChunks.version=e}get shaderChunksVersion(){return this.shaderChunks.version}set chunks(e){this._oldChunks=e}get chunks(){return Object.assign(this._oldChunks,Object.fromEntries(this.shaderChunks.glsl)),this._oldChunks}set depthBias(e){this._depthState.depthBias=e}get depthBias(){return this._depthState.depthBias}set slopeDepthBias(e){this._depthState.depthBiasSlope=e}get slopeDepthBias(){return this._depthState.depthBiasSlope}set redWrite(e){this._blendState.redWrite=e}get redWrite(){return this._blendState.redWrite}set greenWrite(e){this._blendState.greenWrite=e}get greenWrite(){return this._blendState.greenWrite}set blueWrite(e){this._blendState.blueWrite=e}get blueWrite(){return this._blendState.blueWrite}set alphaWrite(e){this._blendState.alphaWrite=e}get alphaWrite(){return this._blendState.alphaWrite}get transparent(){return this._blendState.blend}_updateTransparency(){const e=this.transparent,t=this.meshInstances;for(let s=0;s<t.length;s++)t[s].transparent=e}set blendState(e){this._blendState.copy(e),this._updateTransparency()}get blendState(){return this._blendState}set blendType(e){const t=wt[e];this._blendState.setColorBlend(t.op,t.src,t.dst),this._blendState.setAlphaBlend(t.alphaOp??t.op,t.alphaSrc??t.src,t.alphaDst??t.dst);const s=e!==ts;this._blendState.blend!==s&&(this._blendState.blend=s,this._updateTransparency()),this._updateMeshInstanceKeys()}get blendType(){if(!this.transparent)return ts;const{colorOp:e,colorSrcFactor:t,colorDstFactor:s,alphaOp:i,alphaSrcFactor:r,alphaDstFactor:a}=this._blendState;for(let n=0;n<wt.length;n++){const l=wt[n];if(l.src===t&&l.dst===s&&l.op===e&&l.src===r&&l.dst===a&&l.op===i)return n}return ii}set depthState(e){this._depthState.copy(e)}get depthState(){return this._depthState}set depthTest(e){this._depthState.test=e}get depthTest(){return this._depthState.test}set depthFunc(e){this._depthState.func=e}get depthFunc(){return this._depthState.func}set depthWrite(e){this._depthState.write=e}get depthWrite(){return this._depthState.write}copy(e){this.name=e.name,this.alphaTest=e.alphaTest,this.alphaToCoverage=e.alphaToCoverage,this._blendState.copy(e._blendState),this._depthState.copy(e._depthState),this.cull=e.cull,this.stencilFront=e.stencilFront?.clone(),e.stencilBack&&(this.stencilBack=e.stencilFront===e.stencilBack?this.stencilFront:e.stencilBack.clone()),this.clearParameters();for(const t in e.parameters)e.parameters.hasOwnProperty(t)&&this._setParameterSimple(t,e.parameters[t].data);return this.defines.clear(),e.defines.forEach((t,s)=>this.defines.set(s,t)),this._shaderChunks=e.hasShaderChunks?new de:null,this._shaderChunks?.copy(e._shaderChunks),this}clone(){return new this.constructor().copy(this)}_updateMeshInstanceKeys(){const e=this.meshInstances;for(let t=0;t<e.length;t++)e[t].updateKey()}updateUniforms(e,t){this._dirtyShader&&this.clearVariants()}getShaderVariant(e){}update(){if(Object.keys(this._oldChunks).length>0)for(const[e,t]of Object.entries(this._oldChunks))this.shaderChunks.glsl.set(e,t),delete this._oldChunks[e];(this._definesDirty||this._shaderChunks?.isDirty())&&(this._definesDirty=!1,this._shaderChunks?.resetDirty(),this.clearVariants()),this.dirty=!0}clearParameters(){this.parameters={}}getParameters(){return this.parameters}clearVariants(){this.variants.clear();const e=this.meshInstances,t=e.length;for(let s=0;s<t;s++)e[s].clearShaders()}getParameter(e){return this.parameters[e]}_setParameterSimple(e,t){const s=this.parameters[e];s?s.data=t:this.parameters[e]={scopeId:null,data:t}}setParameter(e,t){if(t===void 0&&typeof e=="object"){const s=e;if(s.length){for(let i=0;i<s.length;i++)this.setParameter(s[i]);return}e=s.name,t=s.value}this._setParameterSimple(e,t)}deleteParameter(e){this.parameters[e]&&delete this.parameters[e]}setParameters(e,t){const s=this.parameters;t===void 0&&(t=s);for(const i in t){const r=s[i];r&&(r.scopeId||(r.scopeId=e.scope.resolve(i)),r.scopeId.setValue(r.data))}}setDefine(e,t){let s=!1;const{defines:i}=this;t!==void 0&&t!==!1?(s=!i.has(e)||i.get(e)!==t,i.set(e,t)):(s=i.has(e),i.delete(e)),this._definesDirty||=s}getDefine(e){return this.defines.has(e)}destroy(){this.variants.clear();for(let e=0;e<this.meshInstances.length;e++){const t=this.meshInstances[e];if(t.clearShaders(),t._material=null,t.mesh){const s=$l(t.mesh.device);this!==s&&(t.material=s)}}this.meshInstances.length=0}addMeshInstanceRef(e){this.meshInstances.push(e)}removeMeshInstanceRef(e){const t=this.meshInstances,s=t.indexOf(e);s!==-1&&t.splice(s,1)}}class RD{constructor(){this.cache=new Map}destroy(){this.clear(),this.cache=null}clear(){this.cache.forEach(e=>{e.forEach(t=>{t.destroy()})}),this.cache.clear()}getKey(e){const t=e._type===Me,s=e._shadowType,i=e._shadowResolution;return`${t}-${s}-${i}`}get(e,t){const s=this.getKey(t),i=this.cache.get(s);if(i&&i.length)return i.pop();const r=va.create(e,t);return r.cached=!0,r}add(e,t){const s=this.getKey(e),i=this.cache.get(s);i?i.push(t):this.cache.set(s,[t])}}class OD extends os{constructor(e,t,s,i,r){super(e),this.requiresCubemaps=!1,this.shadowRenderer=t,this.light=s,this.face=i,this.applyVsm=r,this.shadowCamera=t.prepareFace(s,null,i),t.setupRenderPass(this,this.shadowCamera,!0)}execute(){this.shadowRenderer.renderFace(this.light,null,this.face,!1)}after(){this.applyVsm&&this.shadowRenderer.renderVsm(this.light,this.shadowCamera)}}class ND{constructor(e,t){this.shadowLights=[],this.renderer=e,this.shadowRenderer=t,this.device=e.device}cull(e,t,s=null){const i=this.renderer.scene.clusteredLightingEnabled;e.visibleThisFrame=!0,i||e._shadowMap||(e._shadowMap=va.create(this.device,e));const r=e._type,a=r===Re?1:6;for(let n=0;n<a;n++){const l=e.getRenderData(null,n),h=l.shadowCamera;h.nearClip=e.attenuationEnd/1e3,h.farClip=e.attenuationEnd;const c=h._node,d=e._node;if(c.setPosition(d.getPosition()),r===Re)h.fov=e._outerConeAngle*2,c.setRotation(d.getRotation()),c.rotateLocal(-90,0,0);else if(r===Me)if(i){const p=2/(this.shadowRenderer.lightTextureAtlas.shadowAtlasResolution*e.atlasViewport.z/3)*this.shadowRenderer.lightTextureAtlas.shadowEdgePixels;h.fov=Math.atan(1+p)*B.RAD_TO_DEG*2}else h.fov=90;this.renderer.updateCameraFrustum(h),this.shadowRenderer.cullShadowCasters(t,e,l.visibleCasters,h,s)}}prepareLights(e,t){let s;for(let i=0;i<t.length;i++){const r=t[i];if(this.shadowRenderer.needsShadowRendering(r)&&r.atlasViewportAllocated){e.push(r);for(let a=0;a<r.numShadowFaces;a++)s=this.shadowRenderer.prepareFace(r,null,a)}}return s}buildNonClusteredRenderPasses(e,t){for(let s=0;s<t.length;s++){const i=t[s];if(this.shadowRenderer.needsShadowRendering(i)){const r=i._type===Re,a=i.numShadowFaces;for(let n=0;n<a;n++){const l=new OD(this.device,this.shadowRenderer,i,n,r);e.addRenderPass(l)}}}}}class FD extends os{constructor(e,t,s,i,r){super(e),this.shadowRenderer=t,this.light=s,this.camera=i,this.allCascadesRendering=r}execute(){const{light:e,camera:t,shadowRenderer:s,allCascadesRendering:i}=this,r=e.numShadowFaces,a=e.shadowUpdateOverrides;for(let n=0;n<r;n++)a?.[n]!==ss&&s.renderFace(e,t,n,!i),a?.[n]===rr&&(a[n]=ss)}after(){this.shadowRenderer.renderVsm(this.light,this.camera)}}const yh=new fe,ni=new x,aS=new $,we=[new x,new x,new x,new x,new x,new x,new x,new x],Qf={min:0,max:0};function kD(o,e,t){we[0].x=we[1].x=we[2].x=we[3].x=e.x,we[1].y=we[3].y=we[7].y=we[5].y=e.y,we[2].z=we[3].z=we[6].z=we[7].z=e.z,we[4].x=we[5].x=we[6].x=we[7].x=t.x,we[0].y=we[2].y=we[4].y=we[6].y=t.y,we[0].z=we[1].z=we[4].z=we[5].z=t.z;let s=9999999999,i=-9999999999;for(let r=0;r<8;++r){o.transformPoint(we[r],we[r]);const a=we[r].z;a<s&&(s=a),a>i&&(i=a)}return Qf.min=s,Qf.max=i,Qf}class UD{constructor(e,t){this.renderer=e,this.shadowRenderer=t,this.device=e.device}cull(e,t,s,i=null){e.visibleThisFrame=!0,e._shadowMap||(e._shadowMap=va.create(this.device,e));const r=s._nearClip;this.generateSplitDistances(e,r,Math.min(s._farClip,e.shadowDistance));const a=e.shadowUpdateOverrides;for(let n=0;n<e.numCascades&&a?.[n]!==ss;n++){const l=e.getRenderData(s,n),h=l.shadowCamera;h.renderTarget=e._shadowMap.renderTargets[0],l.shadowViewport.copy(e.cascades[n]),l.shadowScissor.copy(e.cascades[n]);const c=h._node,d=e._node;c.setPosition(d.getPosition()),c.setRotation(d.getRotation()),c.rotateLocal(-90,0,0);const f=n===0?r:e._shadowCascadeDistances[n-1],u=e._shadowCascadeDistances[n],p=s.getFrustumCorners(f,u);ni.set(0,0,0);const m=s.node.getWorldTransform();for(let U=0;U<8;U++)m.transformPoint(p[U],p[U]),ni.add(p[U]);ni.mulScalar(1/8);let _=0;for(let U=0;U<8;U++){const C=p[U].sub(ni).length();C>_&&(_=C)}const g=c.right,y=c.up,A=c.forward,v=.25*e._shadowResolution/_,S=Math.ceil(ni.dot(y)*v)/v,b=Math.ceil(ni.dot(g)*v)/v,E=y.mulScalar(S),T=g.mulScalar(b),w=ni.dot(A),P=A.mulScalar(w);ni.add2(E,T).add(P),c.setPosition(ni),c.translateLocal(0,0,1e6),h.nearClip=.01,h.farClip=2e6,h.orthoHeight=_,this.renderer.updateCameraFrustum(h),this.shadowRenderer.cullShadowCasters(t,e,l.visibleCasters,h,i);const M=1<<n,L=l.visibleCasters,D=L.length;let k=0;for(let U=0;U<D;U++){const C=L[U];C.shadowCascadeMask&M&&(L[k++]=C,k===1?yh.copy(C.aabb):yh.add(C.aabb))}D!==k&&(L.length=k),aS.copy(c.getWorldTransform()).invert();const G=kD(aS,yh.getMin(),yh.getMax());c.translateLocal(0,0,G.max+.1),h.farClip=G.max-G.min+.2,l.projectionCompensation=_}}generateSplitDistances(e,t,s){e._shadowCascadeDistances.fill(s);for(let i=1;i<e.numCascades;i++){const r=i/e.numCascades,a=t+(s-t)*r,n=t*(s/t)**r,l=B.lerp(a,n,e.cascadeDistribution);e._shadowCascadeDistances[i-1]=l}}getLightRenderPass(e,t){let s=null;if(this.shadowRenderer.needsShadowRendering(e)){const i=e.numShadowFaces,r=e.shadowUpdateOverrides;let a=!0,n;for(let l=0;l<i;l++)r?.[l]===ss&&(a=!1),n=this.shadowRenderer.prepareFace(e,t,l);s=new FD(this.device,this.shadowRenderer,e,t,a),this.shadowRenderer.setupRenderPass(s,n,a)}return s}}const Jf=new Set,nS=new $,oS=new $,xr=new Float32Array(2),bo=new K(1,1,0,0),lS=new $;function BD(o,e){return Math.exp(-(o*o)/(2*e*e))}function VD(o){const e=(o-1)/6,t=(o-1)*.5,s=new Array(o);let i=0;for(let r=0;r<o;++r)s[r]=BD(r-t,e),i+=s[r];for(let r=0;r<o;++r)s[r]/=i;return s}class Ax{constructor(e,t){this.shadowPassCache=[],this.device=e.device,this.renderer=e,this.lightTextureAtlas=t;const s=this.device.scope;this.sourceId=s.resolve("source"),this.pixelOffsetId=s.resolve("pixelOffset"),this.weightId=s.resolve("weight[0]"),this.blurVsmShader=[{},{}],this.blurVsmWeights={},this.shadowMapLightRadiusId=s.resolve("light_radius"),this.viewUniformFormat=null,this.viewBindGroupFormat=null,this.blendStateWrite=new dt,this.blendStateNoWrite=new dt,this.blendStateNoWrite.setColorWrite(!1,!1,!1,!1)}static createShadowCamera(e,t,s){const i=ro.create("ShadowCamera",t,s),r=Li.get(e),a=r?.vsm??!1,n=r?.pcf??!1;return a?i.clearColor=new q(0,0,0,0):i.clearColor=new q(1,1,1,1),i.clearDepthBuffer=!0,i.clearStencilBuffer=!1,i.clearColorBuffer=!n,i}_cullShadowCastersInternal(e,t,s){const i=e.length;for(let r=0;r<i;r++){const a=e[r];a.castShadow&&(!a.cull||a._isVisible(s))&&(a.visibleThisFrame=!0,t.push(a))}}cullShadowCasters(e,t,s,i,r){if(this.renderer.scene?.fire(gx,i),s.length=0,r)this._cullShadowCastersInternal(r,s,i);else{const a=e.layerList,n=a.length;for(let l=0;l<n;l++){const h=a[l];h._lightsSet.has(t)&&(Jf.has(h)||(Jf.add(h),this._cullShadowCastersInternal(h.shadowCasters,s,i)))}Jf.clear()}s.sort(this.sortCompareShader),this.renderer.scene?.fire(vx,i)}sortCompareShader(e,t){const s=e._sortKeyShadow,i=t._sortKeyShadow;return s===i?t.mesh.id-e.mesh.id:i-s}setupRenderState(e,t){const i=this.renderer.scene.clusteredLightingEnabled?t._isPcf:t._isPcf&&t._type!==Me;e.setBlendState(i?this.blendStateNoWrite:this.blendStateWrite),e.setDepthState(t.shadowDepthState),e.setStencilState(null,null)}dispatchUniforms(e,t,s,i){const r=t._node;e._type!==oe&&(this.renderer.dispatchViewPos(r.getPosition()),this.shadowMapLightRadiusId.setValue(e.attenuationEnd)),nS.setTRS(r.getPosition(),r.getRotation(),x.ONE).invert(),oS.mul2(t.projectionMatrix,nS);const a=s.shadowViewport;t.rect=a,t.scissorRect=s.shadowScissor,lS.setViewport(a.x,a.y,a.z,a.w),s.shadowMatrix.mul2(lS,oS),e._type===oe&&e._shadowMatrixPalette.set(s.shadowMatrix.data,i*16)}getShadowPass(e){const t=e._type,s=e._shadowType;let i=this.shadowPassCache[t]?.[s];if(!i){const r=`ShadowPass_${t}_${s}`;i=Js.get(this.device).allocate(r,{isShadow:!0,lightType:t,shadowType:s}),this.shadowPassCache[t]||(this.shadowPassCache[t]=[]),this.shadowPassCache[t][s]=i}return i.index}submitCasters(e,t,s){const i=this.device,r=this.renderer,a=r.scene,n=1<<_x,l=this.getShadowPass(t),h=s.shaderParams,c=s.renderTarget.flipY?-1:1,d=e.length;for(let f=0;f<d;f++){const u=e[f],p=u.mesh,m=u.instancingData;if(m&&m.count<=0)continue;u.ensureMaterial(i);const _=u.material;r.setBaseConstants(i,_),r.setSkinning(i,u),_.dirty&&(_.updateUniforms(i,a),_.dirty=!1),r.setupCullMode(!0,c,u),_.setParameters(i),u.setParameters(i,n);const g=u.getShaderInstance(l,0,a,h,this.viewUniformFormat,this.viewBindGroupFormat),y=g.shader;if(y.failed)continue;u._sortKeyShadow=y.id,i.setShader(y),r.setVertexBuffers(i,p),r.setMorphing(i,u.morphInstance),m&&i.setVertexBuffer(m.vertexBuffer),r.setMeshInstanceMatrices(u),r.setupMeshUniformBuffers(g);const A=u.renderStyle,v=u.indirectData?.get(s);i.draw(p.primitive[A],p.indexBuffer[A],m?.count,v),r._shadowDrawCalls++,m&&r._instancedDrawCalls++}}needsShadowRendering(e){const t=e.enabled&&e.castShadows&&e.shadowUpdateMode!==ss&&e.visibleThisFrame;return e.shadowUpdateMode===rr&&(e.shadowUpdateMode=ss),t&&(this.renderer._shadowMapUpdates+=e.numShadowFaces),t}getLightRenderData(e,t,s){return e.getRenderData(e._type===oe?t:null,s)}setupRenderPass(e,t,s){const i=t.renderTarget;e.init(i),e.depthStencilOps.clearDepthValue=1,e.depthStencilOps.clearDepth=s,i.depthBuffer?e.depthStencilOps.storeDepth=!0:(e.colorOps.clearValue.copy(t.clearColor),e.colorOps.clear=s,e.depthStencilOps.storeDepth=!1),e.requiresCubemaps=!1}prepareFace(e,t,s){const i=e._type,a=this.getLightRenderData(e,t,s).shadowCamera,n=i===oe?0:s;return a.renderTarget=e._shadowMap.renderTargets[n],a}renderFace(e,t,s,i,r=!0){const a=this.device,n=this.getLightRenderData(e,t,s),l=n.shadowCamera;this.dispatchUniforms(e,l,n,s);const h=l.renderTarget,c=this.renderer;c.setCameraUniforms(l,h),a.supportsUniformBuffers&&c.setupViewUniformBuffers(n.viewBindGroups,this.viewUniformFormat,this.viewBindGroupFormat,null),r?(c.setupViewport(l,h),i&&c.clear(l)):c.clearView(l,h,!0,!1),this.setupRenderState(a,e),this.submitCasters(n.visibleCasters,e,l)}render(e,t,s=!0){if(this.needsShadowRendering(e)){const i=e.numShadowFaces;for(let r=0;r<i;r++)this.prepareFace(e,t,r),this.renderFace(e,t,r,!0,s);this.renderVsm(e,t)}}renderVsm(e,t){e._isVsm&&e._vsmBlurSize>1&&(!this.renderer.scene.clusteredLightingEnabled||e._type===oe)&&this.applyVsmBlur(e,t)}getVsmBlurShader(e,t){const s=this.blurVsmShader;let i=s[e][t];if(!i){this.blurVsmWeights[t]=VD(t);const r=new Map;r.set("{SAMPLES}",t),e===1&&r.set("GAUSS",""),i=vt.createShader(this.device,{uniqueName:`blurVsm${e}${t}`,attributes:{vertex_position:ue},vertexChunk:"fullscreenQuadVS",fragmentChunk:"blurVSMPS",fragmentDefines:r}),s[e][t]=i}return i}applyVsmBlur(e,t){const s=this.device;s.setBlendState(dt.NOBLEND);const a=e.getRenderData(e._type===oe?t:null,0).shadowCamera.renderTarget,n=this.renderer.shadowMapCache.get(s,e),l=n.renderTargets[0],h=e.vsmBlurMode,c=e._vsmBlurSize,d=this.getVsmBlurShader(h,c);bo.z=e._shadowResolution-2,bo.w=bo.z,this.sourceId.setValue(a.colorBuffer),xr[0]=1/e._shadowResolution,xr[1]=0,this.pixelOffsetId.setValue(xr),h===z_&&this.weightId.setValue(this.blurVsmWeights[c]),fr(s,l,d,null,bo),this.sourceId.setValue(l.colorBuffer),xr[1]=xr[0],xr[0]=0,this.pixelOffsetId.setValue(xr),fr(s,a,d,null,bo),this.renderer.shadowMapCache.add(e,n)}initViewBindGroupFormat(){this.device.supportsUniformBuffers&&!this.viewUniformFormat&&(this.viewUniformFormat=new zT(this.device,[new Ye("matrix_viewProjection",Gs)]),this.viewBindGroupFormat=new kT(this.device,[new E_(x_,bT|wT)]))}frameUpdate(){this.initViewBindGroupFormat()}}const Th=[];class zD{constructor(e){this._empty=null,this._allocated=[],this._clusters=new Map,this.device=e}destroy(){this._empty&&(this._empty.destroy(),this._empty=null),this._allocated.forEach(e=>{e.destroy()}),this._allocated.length=0}get count(){return this._allocated.length}get empty(){if(!this._empty){const e=new dp(this.device);e.name="ClusterEmpty",e.update([]),this._empty=e}return this._empty}assign(e){const t=this.empty;Th.push(...this._allocated),this._allocated.length=0,this._clusters.clear();const s=e.length;for(let i=0;i<s;i++){const a=e[i].renderActions;if(a){const n=a.length;for(let l=0;l<n;l++){const h=a[l];h.lightClusters=null;const c=h.layer;if(c.hasClusteredLights&&c.meshInstances.length){const d=c.getLightIdHash();let u=this._clusters.get(d)?.lightClusters;u||(u=Th.pop()??new dp(this.device),this._allocated.push(u),this._clusters.set(d,h)),h.lightClusters=u}h.lightClusters||(h.lightClusters=t)}}}Th.forEach(i=>i.destroy()),Th.length=0}update(e,t){this.assign(e),this._clusters.forEach(s=>{const i=s.layer;s.lightClusters.update(i.clusteredLightsSet,t)})}}const Vi=new K,eu=[];class J_ extends os{constructor(e,t){super(e),this._quadRenderer2D=null,this._quadRendererCube=null,this._filteredLights=[],this._forceCopy=!1,this._evtDeviceRestored=null,this._cubeSlotsOffsets=t,this.requiresCubemaps=!1,this.blitTextureId=e.scope.resolve("blitTexture"),this.invViewProjId=e.scope.resolve("invViewProj"),this._evtDeviceRestored=e.on("devicerestored",this.onDeviceRestored,this)}destroy(){this._quadRenderer2D?.destroy(),this._quadRenderer2D=null,this._quadRendererCube?.destroy(),this._quadRendererCube=null,this._evtDeviceRestored?.off(),this._evtDeviceRestored=null}static create(e,t){const s=new J_(e.device,t);return s.init(e),s.colorOps.clear=!1,s.depthStencilOps.clearDepth=!1,s}onDeviceRestored(){this._forceCopy=!0}update(e){const t=this._filteredLights;this.filter(e,t),this.executeEnabled=t.length>0}filter(e,t){for(let s=0;s<e.length;s++){const i=e[s];i._type!==oe&&i.atlasViewportAllocated&&(!i.atlasSlotUpdated&&!this._forceCopy||i.enabled&&i.cookie&&i.visibleThisFrame&&t.push(i))}this._forceCopy=!1}initInvViewProjMatrices(){if(!eu.length)for(let e=0;e<6;e++){const t=ro.create(null,Me,e),s=t.projectionMatrix,i=t.node.getLocalTransform().clone().invert();eu[e]=new $().mul2(s,i).invert()}}get quadRenderer2D(){if(!this._quadRenderer2D){const e=vt.createShader(this.device,{uniqueName:"cookieRenderer2d",attributes:{vertex_position:ue},vertexChunk:"cookieBlitVS",fragmentChunk:"cookieBlit2DPS"});this._quadRenderer2D=new Oc(e)}return this._quadRenderer2D}get quadRendererCube(){if(!this._quadRendererCube){const e=vt.createShader(this.device,{uniqueName:"cookieRendererCube",attributes:{vertex_position:ue},vertexChunk:"cookieBlitVS",fragmentChunk:"cookieBlitCubePS"});this._quadRendererCube=new Oc(e)}return this._quadRendererCube}execute(){const e=this.device;e.setBlendState(dt.NOBLEND),e.setCullMode(lt),e.setDepthState(Gt.NODEPTH),e.setStencilState();const t=this.renderTarget.colorBuffer.width,s=this._cubeSlotsOffsets,i=this._filteredLights;for(let r=0;r<i.length;r++){const a=i[r],n=a.numShadowFaces,l=n>1?this.quadRendererCube:this.quadRenderer2D;n>1&&this.initInvViewProjMatrices(),this.blitTextureId.setValue(a.cookie);for(let h=0;h<n;h++){if(Vi.copy(a.atlasViewport),n>1){const c=Vi.z/3,d=s[h];Vi.x+=c*d.x,Vi.y+=c*d.y,Vi.z=c,Vi.w=c,this.invViewProjId.setValue(eu[h].data)}Vi.mulScalar(t),l.render(Vi)}}i.length=0}}class HD extends os{constructor(e,t,s){super(e),this.requiresCubemaps=!1,this.shadowRenderer=t,this.shadowRendererLocal=s}update(e){const t=this.shadowRendererLocal.shadowLights,s=this.shadowRendererLocal.prepareLights(t,e),i=t.length;this.enabled=i>0,i&&this.shadowRenderer.setupRenderPass(this,s,!1)}execute(){const e=this.shadowRendererLocal.shadowLights,t=e.length;for(let s=0;s<t;s++){const i=e[s];for(let r=0;r<i.numShadowFaces;r++)this.shadowRenderer.renderFace(i,null,r,!0)}e.length=0}}class GD extends os{constructor(e,t,s,i,r){super(e),this.renderer=t,this.frameGraph=null,this.cookiesRenderPass=J_.create(r.cookieRenderTarget,r.cubeSlotsOffsets),this.beforePasses.push(this.cookiesRenderPass),this.shadowRenderPass=new HD(e,s,i),this.beforePasses.push(this.shadowRenderPass)}update(e,t,s,i,r){this.frameGraph=e,this.cookiesRenderPass.enabled=s,s&&this.cookiesRenderPass.update(i),this.shadowRenderPass.enabled=t,t&&this.shadowRenderPass.update(r)}destroy(){this.cookiesRenderPass.destroy(),this.cookiesRenderPass=null}execute(){const{renderer:e}=this,{scene:t}=e;e.worldClustersAllocator.update(this.frameGraph.renderPasses,t.lighting)}}let tu=0;const zi=new $,Hi=new $,Ua=new $,hS=new Ks,su=new Um,cS=new $().setScale(1,-1,1),iu=new Set,ru=new Set,au=new UT,dS=new $().set([1,0,0,0,0,1,0,0,0,0,.5,0,0,0,.5,1]),fS=[new z(.5,.333333),new z(.25,.666667),new z(.75,.111111),new z(.125,.444444),new z(.625,.777778),new z(.375,.222222),new z(.875,.555556),new z(.0625,.888889),new z(.5625,.037037),new z(.3125,.37037),new z(.8125,.703704),new z(.1875,.148148),new z(.6875,.481481),new z(.4375,.814815),new z(.9375,.259259),new z(.03125,.592593)],WD=new $,$D=new $,XD=new $,qD=new $,YD=new $,jD=new $,Ba=new Set,nu=[],ou=[];class KD{constructor(e){this.clustersDebugRendered=!1,this.processingMeshInstances=new Set,this.lights=[],this.localLights=[],this.cameraDirShadowLights=new Map,this.dirLightShadows=new Map,this.blueNoise=new ED(123),this.device=e,this.scene=null,this.worldClustersAllocator=new zD(e),this.lightTextureAtlas=new MD(e),this.shadowMapCache=new RD,this.shadowRenderer=new Ax(this,this.lightTextureAtlas),this._shadowRendererLocal=new ND(this,this.shadowRenderer),this._shadowRendererDirectional=new UD(this,this.shadowRenderer),this._renderPassUpdateClustered=new GD(this.device,this,this.shadowRenderer,this._shadowRendererLocal,this.lightTextureAtlas),this.viewUniformFormat=null,this.viewBindGroupFormat=null,this._skinTime=0,this._morphTime=0,this._cullTime=0,this._shadowMapTime=0,this._lightClustersTime=0,this._layerCompositionUpdateTime=0,this._shadowDrawCalls=0,this._skinDrawCalls=0,this._instancedDrawCalls=0,this._shadowMapUpdates=0,this._numDrawCallsCulled=0,this._camerasRendered=0,this._lightClusters=0;const t=e.scope;this.boneTextureId=t.resolve("texture_poseMap"),this.modelMatrixId=t.resolve("matrix_model"),this.normalMatrixId=t.resolve("matrix_normal"),this.viewInvId=t.resolve("matrix_viewInverse"),this.viewPos=new Float32Array(3),this.viewPosId=t.resolve("view_position"),this.projId=t.resolve("matrix_projection"),this.projSkyboxId=t.resolve("matrix_projectionSkybox"),this.viewId=t.resolve("matrix_view"),this.viewId3=t.resolve("matrix_view3"),this.viewProjId=t.resolve("matrix_viewProjection"),this.flipYId=t.resolve("projectionFlipY"),this.tbnBasis=t.resolve("tbnBasis"),this.nearClipId=t.resolve("camera_near"),this.farClipId=t.resolve("camera_far"),this.cameraParams=new Float32Array(4),this.cameraParamsId=t.resolve("camera_params"),this.viewIndexId=t.resolve("view_index"),this.viewIndexId.setValue(0),this.blueNoiseJitterVersion=0,this.blueNoiseJitterVec=new K,this.blueNoiseJitterData=new Float32Array(4),this.blueNoiseJitterId=t.resolve("blueNoiseJitter"),this.blueNoiseTextureId=t.resolve("blueNoiseTex32"),this.alphaTestId=t.resolve("alpha_ref"),this.opacityMapId=t.resolve("texture_opacityMap"),this.exposureId=t.resolve("exposure"),this.twoSidedLightingNegScaleFactorId=t.resolve("twoSidedLightingNegScaleFactor"),this.twoSidedLightingNegScaleFactorId.setValue(0),this.morphPositionTex=t.resolve("morphPositionTex"),this.morphNormalTex=t.resolve("morphNormalTex"),this.morphTexParams=t.resolve("morph_tex_params"),this.lightCube=new bD,this.constantLightCube=t.resolve("lightCube[0]")}destroy(){this.shadowRenderer=null,this._shadowRendererLocal=null,this._shadowRendererDirectional=null,this.shadowMapCache.destroy(),this.shadowMapCache=null,this._renderPassUpdateClustered.destroy(),this._renderPassUpdateClustered=null,this.lightTextureAtlas.destroy(),this.lightTextureAtlas=null}setupViewport(e,t){const s=this.device,i=t?t.width:s.width,r=t?t.height:s.height,a=e.rect;let n=Math.floor(a.x*i),l=Math.floor(a.y*r),h=Math.floor(a.z*i),c=Math.floor(a.w*r);if(s.setViewport(n,l,h,c),e._scissorRectClear){const d=e.scissorRect;n=Math.floor(d.x*i),l=Math.floor(d.y*r),h=Math.floor(d.z*i),c=Math.floor(d.w*r)}s.setScissor(n,l,h,c)}setCameraUniforms(e,t){const s=t?.flipY;let i=null;if(e.xr&&e.xr.session){const n=e._node?.parent?.getWorldTransform()||null;i=e.xr.views.list;for(let h=0;h<i.length;h++){const c=i[h];c.updateTransforms(n),e.frustum.setFromMat4(c.projViewOffMat)}}else{let n=e.projectionMatrix;e.calculateProjection&&e.calculateProjection(n,ph);let l=e.getProjectionMatrixSkybox();s&&(n=WD.mul2(cS,n),l=$D.mul2(cS,l)),this.device.isWebGPU&&(n=XD.mul2(dS,n),l=qD.mul2(dS,l));const{jitter:h}=e;let c=0,d=0;if(h>0){const u=t?t.width:this.device.width,p=t?t.height:this.device.height,m=fS[this.device.renderVersion%fS.length];c=h*(m.x*2-1)/u,d=h*(m.y*2-1)/p,n=YD.copy(n),n.data[8]=c,n.data[9]=d,l=jD.copy(l),l.data[8]=c,l.data[9]=d,this.blueNoiseJitterVersion!==this.device.renderVersion&&(this.blueNoiseJitterVersion=this.device.renderVersion,this.blueNoise.vec4(this.blueNoiseJitterVec))}const f=h>0?this.blueNoiseJitterVec:K.ZERO;if(this.blueNoiseJitterData[0]=f.x,this.blueNoiseJitterData[1]=f.y,this.blueNoiseJitterData[2]=f.z,this.blueNoiseJitterData[3]=f.w,this.blueNoiseJitterId.setValue(this.blueNoiseJitterData),this.projId.setValue(n.data),this.projSkyboxId.setValue(l.data),e.calculateTransform)e.calculateTransform(Hi,ph);else{const u=e._node.getPosition(),p=e._node.getRotation();Hi.setTRS(u,p,x.ONE)}this.viewInvId.setValue(Hi.data),Ua.copy(Hi).invert(),this.viewId.setValue(Ua.data),hS.setFromMat4(Ua),this.viewId3.setValue(hS.data),zi.mul2(n,Ua),this.viewProjId.setValue(zi.data),e._storeShaderMatrices(zi,c,d,this.device.renderVersion),this.flipYId.setValue(s?-1:1),this.dispatchViewPos(e._node.getPosition()),e.frustum.setFromMat4(zi)}this.tbnBasis.setValue(s?-1:1);const r=e._nearClip,a=e._farClip;return this.nearClipId.setValue(r),this.farClipId.setValue(a),this.cameraParams[0]=1/a,this.cameraParams[1]=a,this.cameraParams[2]=r,this.cameraParams[3]=e.projection===Rn?1:0,this.cameraParamsId.setValue(this.cameraParams),this.exposureId.setValue(this.scene.physicalUnits?e.getExposure():this.scene.exposure),i}clear(e,t,s,i){const r=(t??e._clearColorBuffer?ll:0)|(s??e._clearDepthBuffer?hl:0)|(i??e._clearStencilBuffer?yc:0);r&&this.device.clear({color:[e._clearColor.r,e._clearColor.g,e._clearColor.b,e._clearColor.a],depth:e._clearDepth,stencil:e._clearStencil,flags:r})}setCamera(e,t,s,i=null){this.setCameraUniforms(e,t),this.clearView(e,t,s,!1)}clearView(e,t,s,i){const r=this.device;if(r.setRenderTarget(t),r.updateBegin(),i&&(r.setColorWrite(!0,!0,!0,!0),r.setDepthWrite(!0)),this.setupViewport(e,t),s){const a=e._clearOptions;r.clear(a||{color:[e._clearColor.r,e._clearColor.g,e._clearColor.b,e._clearColor.a],depth:e._clearDepth,flags:(e._clearColorBuffer?ll:0)|(e._clearDepthBuffer?hl:0)|(e._clearStencilBuffer?yc:0),stencil:e._clearStencil})}}setupCullMode(e,t,s){const i=s.material;let r=lt;if(e){let a=1;(i.cull===qo||i.cull===la)&&(a=t*s.flipFacesFactor*s.node.worldScaleSign),a<0?r=i.cull===qo?la:qo:r=i.cull}this.device.setCullMode(r),r===lt&&i.cull===lt&&this.twoSidedLightingNegScaleFactorId.setValue(s.node.worldScaleSign)}updateCameraFrustum(e){if(e.xr&&e.xr.views.list.length){const s=e.xr.views.list[0];zi.mul2(s.projMat,s.viewOffMat),e.frustum.setFromMat4(zi);return}const t=e.projectionMatrix;if(e.calculateProjection&&e.calculateProjection(t,ph),e.calculateTransform)e.calculateTransform(Hi,ph);else{const s=e._node.getPosition(),i=e._node.getRotation();Hi.setTRS(s,i,x.ONE),this.viewInvId.setValue(Hi.data)}Ua.copy(Hi).invert(),zi.mul2(t,Ua),e.frustum.setFromMat4(zi)}setBaseConstants(e,t){e.setCullMode(t.cull),t.opacityMap&&this.opacityMapId.setValue(t.opacityMap),(t.opacityMap||t.alphaTest>0)&&this.alphaTestId.setValue(t.alphaTest)}updateCpuSkinMatrices(e){tu++;const t=e.length;if(t!==0)for(let s=0;s<t;s++){const i=e[s].skinInstance;i&&(i.updateMatrices(e[s].node,tu),i._dirty=!0)}}updateGpuSkinMatrices(e){for(const t of e){const s=t.skinInstance;s&&s._dirty&&(s.updateMatrixPalette(t.node,tu),s._dirty=!1)}}updateMorphing(e){for(const t of e){const s=t.morphInstance;s&&s._dirty&&s.update()}}updateGSplats(e){for(const t of e)t.gsplatInstance?.update()}gpuUpdate(e){this.updateGpuSkinMatrices(e),this.updateMorphing(e),this.updateGSplats(e)}setVertexBuffers(e,t){e.setVertexBuffer(t.vertexBuffer)}setMorphing(e,t){t&&(t.prepareRendering(e),e.setVertexBuffer(t.morph.vertexBufferIds),this.morphPositionTex.setValue(t.texturePositions),this.morphNormalTex.setValue(t.textureNormals),this.morphTexParams.setValue(t._textureParams))}setSkinning(e,t){const s=t.skinInstance;if(s){this._skinDrawCalls++;const i=s.boneTexture;this.boneTextureId.setValue(i)}}dispatchViewPos(e){const t=this.viewPos;t[0]=e.x,t[1]=e.y,t[2]=e.z,this.viewPosId.setValue(t)}initViewBindGroupFormat(e){if(this.device.supportsUniformBuffers&&!this.viewUniformFormat){const t=[new Ye("matrix_view",Gs),new Ye("matrix_viewInverse",Gs),new Ye("matrix_projection",Gs),new Ye("matrix_projectionSkybox",Gs),new Ye("matrix_viewProjection",Gs),new Ye("matrix_view3",jn),new Ye("cubeMapRotationMatrix",jn),new Ye("view_position",Ot),new Ye("skyboxIntensity",Ss),new Ye("exposure",Ss),new Ye("textureBias",Ss),new Ye("view_index",Ss)];e&&t.push(new Ye("clusterCellsCountByBoundsSize",Ot),new Ye("clusterTextureSize",Ot),new Ye("clusterBoundsMin",Ot),new Ye("clusterBoundsDelta",Ot),new Ye("clusterCellsDot",Ot),new Ye("clusterCellsMax",Ot),new Ye("shadowAtlasParams",fa),new Ye("clusterMaxCells",da),new Ye("clusterSkip",Ss)),this.viewUniformFormat=new zT(this.device,t);const s=[new E_(x_,bT|wT)];this.viewBindGroupFormat=new kT(this.device,s)}}setupViewUniforms(e,t){this.projId.setValue(e.projMat.data),this.projSkyboxId.setValue(e.projMat.data),this.viewId.setValue(e.viewOffMat.data),this.viewInvId.setValue(e.viewInvOffMat.data),this.viewId3.setValue(e.viewMat3.data),this.viewProjId.setValue(e.projViewOffMat.data),this.viewPosId.setValue(e.positionData),this.viewIndexId.setValue(t)}setupViewUniformBuffers(e,t,s,i){const{device:r}=this,a=i?.length??1;for(;e.length<a;){const n=new w_(r,t,!1),l=new A_(r,s,n);e.push(l)}if(i)for(let n=0;n<a;n++){const l=i[n];this.setupViewUniforms(l,n);const h=e[n];h.defaultUniformBuffer.update(),h.update()}else{const n=e[0];n.defaultUniformBuffer.update(),n.update()}i||r.setBindGroup(_l,e[0])}setupMeshUniformBuffers(e){const t=this.device;if(t.supportsUniformBuffers){const s=e.getBindGroup(t);s.update(),t.setBindGroup(NT,s),e.getUniformBuffer(t).update(au),t.setBindGroup(ip,au.bindGroup,au.offsets)}}setMeshInstanceMatrices(e,t=!1){const s=e.node.worldTransform;this.modelMatrixId.setValue(s.data),t&&this.normalMatrixId.setValue(e.node.normalMatrix.data)}cull(e,t,s){const i=s.opaque;i.length=0;const r=s.transparent;r.length=0;const a=e.frustumCulling,n=t.length;for(let l=0;l<n;l++){const h=t[l];h.visible&&(!a||!h.cull||h._isVisible(e))&&(h.visibleThisFrame=!0,(h.transparent?r:i).push(h),(h.skinInstance||h.morphInstance||h.gsplatInstance)&&(this.processingMeshInstances.add(h),h.gsplatInstance&&h.gsplatInstance.cameras.push(e)))}}collectLights(e){this.lights.length=0,this.localLights.length=0;const t=this.scene._stats,s=e.layerList.length;for(let i=0;i<s;i++){const r=e.layerList[i];if(!ru.has(r)){ru.add(r);const a=r._lights;for(let n=0;n<a.length;n++){const l=a[n];iu.has(l)||(iu.add(l),this.lights.push(l),l._type!==oe&&this.localLights.push(l))}}}t.lights=this.lights.length,iu.clear(),ru.clear()}cullLights(e,t){const s=this.scene.clusteredLightingEnabled,i=this.scene.physicalUnits;for(let r=0;r<t.length;r++){const a=t[r];if(a.enabled)if(a._type!==oe)if(a.getBoundingSphere(su),e.frustum.containsSphere(su)){a.visibleThisFrame=!0,a.usePhysicalUnits=i;const n=e.getScreenSize(su);a.maxScreenSize=Math.max(a.maxScreenSize,n)}else s||a.castShadows&&!a.shadowMap&&(a.visibleThisFrame=!0);else a.usePhysicalUnits=this.scene.physicalUnits}}cullShadowmaps(e){const t=this.scene.clusteredLightingEnabled;for(let i=0;i<this.localLights.length;i++){const r=this.localLights[i];r._type!==oe&&(t?r.atlasSlotUpdated&&r.shadowUpdateMode===ss&&(r.shadowUpdateMode=rr):r.shadowUpdateMode===ss&&r.castShadows&&(r.getRenderData(null,0).shadowCamera.renderTarget||(r.shadowUpdateMode=rr)),r.visibleThisFrame&&r.castShadows&&r.shadowUpdateMode!==ss&&this._shadowRendererLocal.cull(r,e))}this.cameraDirShadowLights.clear();const s=e.cameras;for(let i=0;i<s.length;i++){const r=s[i];if(r.enabled){const a=r.camera;let n;const l=a.layers;for(let h=0;h<l.length;h++){const c=e.getLayerById(l[h]);if(c){const d=c.splitLights[oe];for(let f=0;f<d.length;f++){const u=d[f];u.castShadows&&!Ba.has(u)&&(Ba.add(u),n=n??[],n.push(u),this._shadowRendererDirectional.cull(u,e,a))}}}n&&this.cameraDirShadowLights.set(a,n),Ba.clear()}}}cullComposition(e){const{scene:t}=this;this.processingMeshInstances.clear();const s=e.cameras.length;this._camerasRendered+=s;for(let i=0;i<s;i++){const r=e.cameras[i];t?.fire(gx,r);const a=r.renderTarget;r.frameUpdate(a),this.updateCameraFrustum(r.camera);const n=r.layers;for(let l=0;l<n.length;l++){const h=e.getLayerById(n[l]);if(h&&h.enabled){this.cullLights(r.camera,h._lights);const c=h.getCulledInstances(r.camera);this.cull(r.camera,h.meshInstances,c)}}t?.fire(vx,r)}t.clusteredLightingEnabled&&this.updateLightTextureAtlas(),this.cullShadowmaps(e),t?.fire(WM)}updateShaders(e,t){const s=e.length;for(let i=0;i<s;i++){const r=e[i].material;if(r&&!Ba.has(r)&&(Ba.add(r),r.getShaderVariant!==ql.prototype.getShaderVariant)){if(t&&(!r.useLighting||r.emitter&&!r.emitter.lighting))continue;r.clearVariants()}}Ba.clear()}updateFrameUniforms(){this.blueNoiseTextureId.setValue(PD(this.device))}beginFrame(e){const t=this.scene,s=t.updateShaders||this.device._shadersDirty,i=e.layerList,r=i.length;for(let l=0;l<r;l++){const c=i[l].meshInstances,d=c.length;for(let f=0;f<d;f++){const u=c[f];u.visibleThisFrame=!1,s&&nu.push(u),u.skinInstance&&ou.push(u)}}if(s){const l=!t.updateShaders||!this.device._shadersDirty;this.updateShaders(nu,l),t.updateShaders=!1,this.device._shadersDirty=!1,t._shaderVersion++}this.updateFrameUniforms(),this.updateCpuSkinMatrices(ou),nu.length=0,ou.length=0;const a=this.lights,n=a.length;for(let l=0;l<n;l++)a[l].beginFrame()}updateLightTextureAtlas(){this.lightTextureAtlas.update(this.localLights,this.scene.lighting)}updateLayerComposition(e){const t=e.layerList.length,i=this.scene._shaderVersion;for(let r=0;r<t;r++){const a=e.layerList[r];a._shaderVersion=i}e._update()}frameUpdate(){this.clustersDebugRendered=!1,this.initViewBindGroupFormat(this.scene.clusteredLightingEnabled),this.dirLightShadows.clear()}}class bx{constructor(){this.camera=null,this.layer=null,this.transparent=!1,this.renderTarget=null,this.lightClusters=null,this.clearColor=!1,this.clearDepth=!1,this.clearStencil=!1,this.triggerPostprocess=!1,this.firstCameraUse=!1,this.lastCameraUse=!1,this.viewBindGroups=[],this.useCameraPasses=!1}destroy(){this.viewBindGroups.forEach(e=>{e.defaultUniformBuffer.destroy(),e.destroy()}),this.viewBindGroups.length=0}setupClears(e,t){this.clearColor=e?.clearColorBuffer||t.clearColorBuffer,this.clearDepth=e?.clearDepthBuffer||t.clearDepthBuffer,this.clearStencil=e?.clearStencilBuffer||t.clearStencilBuffer}}class ZD extends os{constructor(e,t,s,i){super(e),this.renderActions=[],this.noDepthClear=!1,this.layerComposition=t,this.scene=s,this.renderer=i}get rendersAnything(){return this.renderActions.length>0}addRenderAction(e){this.renderActions.push(e)}addLayer(e,t,s,i=!0){const r=new bx;if(r.renderTarget=this.renderTarget,r.camera=e,r.layer=t,r.transparent=s,i){const a=this.renderActions.length===0;r.setupClears(a?e:void 0,t)}this.addRenderAction(r)}addLayers(e,t,s,i,r,a=!0){const{layerList:n,subLayerList:l}=e;let h=i,c=s;for(;c<n.length;){const d=n[c],f=l[c];if(t.camera.layersSet.has(d.id)&&(this.addLayer(t,d,f,h),h=!1),c++,d.id===r&&f===a)break}return c}updateDirectionalShadows(){const{renderer:e,renderActions:t}=this;for(let s=0;s<t.length;s++){const a=t[s].camera.camera,n=this.renderer.cameraDirShadowLights.get(a);if(n)for(let l=0;l<n.length;l++){const h=n[l];if(e.dirLightShadows.get(h)!==a){e.dirLightShadows.set(h,a);const c=e._shadowRendererDirectional.getLightRenderPass(h,a);c&&this.beforePasses.push(c)}}}}updateClears(){const e=this.renderActions[0];if(e){const s=e.camera.camera,i=s.fullSizeClearRect;this.setClearColor(i&&e.clearColor?s.clearColor:void 0),this.setClearDepth(i&&e.clearDepth&&!this.noDepthClear?s.clearDepth:void 0),this.setClearStencil(i&&e.clearStencil?s.clearStencil:void 0)}}frameUpdate(){super.frameUpdate(),this.updateDirectionalShadows(),this.updateClears()}before(){const{renderActions:e}=this;for(let t=0;t<e.length;t++){const s=e[t];s.firstCameraUse&&this.scene.fire(VM,s.camera)}}execute(){const{layerComposition:e,renderActions:t}=this;for(let s=0;s<t.length;s++){const i=t[s],r=i.layer;e.isEnabled(r,i.transparent)&&this.renderRenderAction(i,s===0)}}after(){for(let e=0;e<this.renderActions.length;e++){const t=this.renderActions[e];t.lastCameraUse&&this.scene.fire(zM,t.camera)}this.beforePasses.length=0}renderRenderAction(e,t){const{renderer:s,scene:i}=this,r=s.device,{layer:a,transparent:n,camera:l}=e;if(l){const h=l.gammaCorrection,c=l.toneMapping;this.gammaCorrection!==void 0&&(l.gammaCorrection=this.gammaCorrection),this.toneMapping!==void 0&&(l.toneMapping=this.toneMapping),i.fire(HM,l,a,n);const d={lightClusters:e.lightClusters},f=l.camera.shaderPassInfo?.index??wa;(!t||!l.camera.fullSizeClearRect)&&(d.clearColor=e.clearColor,d.clearDepth=e.clearDepth,d.clearStencil=e.clearStencil);const u=e.renderTarget??r.backBuffer;s.renderForwardLayer(l.camera,u,a,n,f,e.viewBindGroups,d),r.setBlendState(dt.NOBLEND),r.setStencilState(null,null),r.setAlphaToCoverage(!1),i.fire(GM,l,a,n),this.gammaCorrection!==void 0&&(l.gammaCorrection=h),this.toneMapping!==void 0&&(l.toneMapping=c)}}}class QD extends os{constructor(e,t,s){super(e),this.renderer=t,this.renderAction=s,this.requiresCubemaps=!1}execute(){this.renderAction.camera.onPostprocessing()}}const JD=[[],[],[]],Gi=new q,Er={drawCalls:[],shaderInstances:[],isNewMaterial:[],lightMaskChanged:[],clear:function(){this.drawCalls.length=0,this.shaderInstances.length=0,this.isNewMaterial.length=0,this.lightMaskChanged.length=0}};function e1(o){const e=[];for(let t=0;t<o;++t){const s=Math.sqrt(t+.5)/Math.sqrt(o);e.push(s)}return e}function t1(o){const e=[];for(let t=0;t<o;t++){const s=t/o,i=Math.sqrt(s*s);e.push(i)}return e}class s1 extends KD{constructor(e){super(e);const t=this.device;this._forwardDrawCalls=0,this._materialSwitches=0,this._depthMapTime=0,this._forwardTime=0,this._sortTime=0;const s=t.scope;this.fogColorId=s.resolve("fog_color"),this.fogStartId=s.resolve("fog_start"),this.fogEndId=s.resolve("fog_end"),this.fogDensityId=s.resolve("fog_density"),this.ambientId=s.resolve("light_globalAmbient"),this.skyboxIntensityId=s.resolve("skyboxIntensity"),this.cubeMapRotationMatrixId=s.resolve("cubeMapRotationMatrix"),this.pcssDiskSamplesId=s.resolve("pcssDiskSamples[0]"),this.pcssSphereSamplesId=s.resolve("pcssSphereSamples[0]"),this.lightColorId=[],this.lightDir=[],this.lightDirId=[],this.lightShadowMapId=[],this.lightShadowMatrixId=[],this.lightShadowParamsId=[],this.lightShadowIntensity=[],this.lightRadiusId=[],this.lightPos=[],this.lightPosId=[],this.lightWidth=[],this.lightWidthId=[],this.lightHeight=[],this.lightHeightId=[],this.lightInAngleId=[],this.lightOutAngleId=[],this.lightCookieId=[],this.lightCookieIntId=[],this.lightCookieMatrixId=[],this.lightCookieOffsetId=[],this.lightShadowSearchAreaId=[],this.lightCameraParamsId=[],this.lightSoftShadowParamsId=[],this.shadowMatrixPaletteId=[],this.shadowCascadeDistancesId=[],this.shadowCascadeCountId=[],this.shadowCascadeBlendId=[],this.screenSizeId=s.resolve("uScreenSize"),this._screenSize=new Float32Array(4),this.fogColor=new Float32Array(3),this.ambientColor=new Float32Array(3),this.pcssDiskSamples=e1(16),this.pcssSphereSamples=t1(16)}destroy(){super.destroy()}dispatchGlobalLights(e){const t=this.ambientColor;if(Gi.linear(e.ambientLight),t[0]=Gi.r,t[1]=Gi.g,t[2]=Gi.b,e.physicalUnits)for(let s=0;s<3;s++)t[s]*=e.ambientLuminance;this.ambientId.setValue(t),this.skyboxIntensityId.setValue(e.physicalUnits?e.skyboxLuminance:e.skyboxIntensity),this.cubeMapRotationMatrixId.setValue(e._skyboxRotationMat3.data)}_resolveLight(e,t){const s=`light${t}`;this.lightColorId[t]=e.resolve(`${s}_color`),this.lightDir[t]=new Float32Array(3),this.lightDirId[t]=e.resolve(`${s}_direction`),this.lightShadowMapId[t]=e.resolve(`${s}_shadowMap`),this.lightShadowMatrixId[t]=e.resolve(`${s}_shadowMatrix`),this.lightShadowParamsId[t]=e.resolve(`${s}_shadowParams`),this.lightShadowIntensity[t]=e.resolve(`${s}_shadowIntensity`),this.lightShadowSearchAreaId[t]=e.resolve(`${s}_shadowSearchArea`),this.lightRadiusId[t]=e.resolve(`${s}_radius`),this.lightPos[t]=new Float32Array(3),this.lightPosId[t]=e.resolve(`${s}_position`),this.lightWidth[t]=new Float32Array(3),this.lightWidthId[t]=e.resolve(`${s}_halfWidth`),this.lightHeight[t]=new Float32Array(3),this.lightHeightId[t]=e.resolve(`${s}_halfHeight`),this.lightInAngleId[t]=e.resolve(`${s}_innerConeAngle`),this.lightOutAngleId[t]=e.resolve(`${s}_outerConeAngle`),this.lightCookieId[t]=e.resolve(`${s}_cookie`),this.lightCookieIntId[t]=e.resolve(`${s}_cookieIntensity`),this.lightCookieMatrixId[t]=e.resolve(`${s}_cookieMatrix`),this.lightCookieOffsetId[t]=e.resolve(`${s}_cookieOffset`),this.lightCameraParamsId[t]=e.resolve(`${s}_cameraParams`),this.lightSoftShadowParamsId[t]=e.resolve(`${s}_softShadowParams`),this.shadowMatrixPaletteId[t]=e.resolve(`${s}_shadowMatrixPalette[0]`),this.shadowCascadeDistancesId[t]=e.resolve(`${s}_shadowCascadeDistances`),this.shadowCascadeCountId[t]=e.resolve(`${s}_shadowCascadeCount`),this.shadowCascadeBlendId[t]=e.resolve(`${s}_shadowCascadeBlend`)}setLTCDirectionalLight(e,t,s,i,r){this.lightPos[t][0]=i.x-s.x*r,this.lightPos[t][1]=i.y-s.y*r,this.lightPos[t][2]=i.z-s.z*r,this.lightPosId[t].setValue(this.lightPos[t]);const a=e.transformVector(new x(-.5,0,0));this.lightWidth[t][0]=a.x*r,this.lightWidth[t][1]=a.y*r,this.lightWidth[t][2]=a.z*r,this.lightWidthId[t].setValue(this.lightWidth[t]);const n=e.transformVector(new x(0,0,.5));this.lightHeight[t][0]=n.x*r,this.lightHeight[t][1]=n.y*r,this.lightHeight[t][2]=n.z*r,this.lightHeightId[t].setValue(this.lightHeight[t])}dispatchDirectLights(e,t,s){let i=0;const r=this.device.scope;for(let a=0;a<e.length;a++){if(!(e[a].mask&t))continue;const n=e[a],l=n._node.getWorldTransform();if(this.lightColorId[i]||this._resolveLight(r,i),this.lightColorId[i].setValue(n._colorLinear),l.getY(n._direction).mulScalar(-1),n._direction.normalize(),this.lightDir[i][0]=n._direction.x,this.lightDir[i][1]=n._direction.y,this.lightDir[i][2]=n._direction.z,this.lightDirId[i].setValue(this.lightDir[i]),n.shape!==xs&&this.setLTCDirectionalLight(l,i,n._direction,s._node.getPosition(),s.farClip),n.castShadows){const h=n.getRenderData(s,0),c=n._getUniformBiasValues(h);this.lightShadowMapId[i].setValue(h.shadowBuffer),this.lightShadowMatrixId[i].setValue(h.shadowMatrix.data),this.shadowMatrixPaletteId[i].setValue(n._shadowMatrixPalette),this.shadowCascadeDistancesId[i].setValue(n._shadowCascadeDistances),this.shadowCascadeCountId[i].setValue(n.numCascades),this.shadowCascadeBlendId[i].setValue(1-n.cascadeBlend),this.lightShadowIntensity[i].setValue(n.shadowIntensity),this.lightSoftShadowParamsId[i].setValue(n._softShadowParams),h.shadowCamera.renderTarget&&this.lightShadowSearchAreaId[i].setValue(n.penumbraSize/h.shadowCamera.renderTarget.width*h.projectionCompensation);const f=n._shadowCameraParams;f.length=4,f[0]=0,f[1]=h.shadowCamera._farClip,f[2]=h.shadowCamera._nearClip,f[3]=1,this.lightCameraParamsId[i].setValue(f);const u=n._shadowRenderParams;u.length=4,u[0]=n._shadowResolution,u[1]=c.normalBias,u[2]=c.bias,u[3]=0,this.lightShadowParamsId[i].setValue(u)}i++}return i}setLTCPositionalLight(e,t){const s=e.transformVector(new x(-.5,0,0));this.lightWidth[t][0]=s.x,this.lightWidth[t][1]=s.y,this.lightWidth[t][2]=s.z,this.lightWidthId[t].setValue(this.lightWidth[t]);const i=e.transformVector(new x(0,0,.5));this.lightHeight[t][0]=i.x,this.lightHeight[t][1]=i.y,this.lightHeight[t][2]=i.z,this.lightHeightId[t].setValue(this.lightHeight[t])}dispatchOmniLight(e,t,s){const i=t._node.getWorldTransform();if(this.lightColorId[s]||this._resolveLight(e,s),this.lightRadiusId[s].setValue(t.attenuationEnd),this.lightColorId[s].setValue(t._colorLinear),i.getTranslation(t._position),this.lightPos[s][0]=t._position.x,this.lightPos[s][1]=t._position.y,this.lightPos[s][2]=t._position.z,this.lightPosId[s].setValue(this.lightPos[s]),t.shape!==xs&&this.setLTCPositionalLight(i,s),t.castShadows){const r=t.getRenderData(null,0);this.lightShadowMapId[s].setValue(r.shadowBuffer);const a=t._getUniformBiasValues(r),n=t._shadowRenderParams;n.length=4,n[0]=t._shadowResolution,n[1]=a.normalBias,n[2]=a.bias,n[3]=1/t.attenuationEnd,this.lightShadowParamsId[s].setValue(n),this.lightShadowIntensity[s].setValue(t.shadowIntensity);const l=t.penumbraSize/r.shadowCamera.renderTarget.width;this.lightShadowSearchAreaId[s].setValue(l);const h=t._shadowCameraParams;h.length=4,h[0]=0,h[1]=r.shadowCamera._farClip,h[2]=r.shadowCamera._nearClip,h[3]=0,this.lightCameraParamsId[s].setValue(h)}t._cookie&&(this.lightCookieId[s].setValue(t._cookie),this.lightShadowMatrixId[s].setValue(i.data),this.lightCookieIntId[s].setValue(t.cookieIntensity))}dispatchSpotLight(e,t,s){const i=t._node.getWorldTransform();if(this.lightColorId[s]||this._resolveLight(e,s),this.lightInAngleId[s].setValue(t._innerConeAngleCos),this.lightOutAngleId[s].setValue(t._outerConeAngleCos),this.lightRadiusId[s].setValue(t.attenuationEnd),this.lightColorId[s].setValue(t._colorLinear),i.getTranslation(t._position),this.lightPos[s][0]=t._position.x,this.lightPos[s][1]=t._position.y,this.lightPos[s][2]=t._position.z,this.lightPosId[s].setValue(this.lightPos[s]),t.shape!==xs&&this.setLTCPositionalLight(i,s),i.getY(t._direction).mulScalar(-1),t._direction.normalize(),this.lightDir[s][0]=t._direction.x,this.lightDir[s][1]=t._direction.y,this.lightDir[s][2]=t._direction.z,this.lightDirId[s].setValue(this.lightDir[s]),t.castShadows){const r=t.getRenderData(null,0);this.lightShadowMapId[s].setValue(r.shadowBuffer),this.lightShadowMatrixId[s].setValue(r.shadowMatrix.data);const a=t._getUniformBiasValues(r),n=t._shadowRenderParams;n.length=4,n[0]=t._shadowResolution,n[1]=a.normalBias,n[2]=a.bias,n[3]=1/t.attenuationEnd,this.lightShadowParamsId[s].setValue(n),this.lightShadowIntensity[s].setValue(t.shadowIntensity);const l=t.penumbraSize/r.shadowCamera.renderTarget.width,h=r.shadowCamera._fov*Math.PI/180,c=1/Math.tan(h/2);this.lightShadowSearchAreaId[s].setValue(l*c);const d=t._shadowCameraParams;d.length=4,d[0]=0,d[1]=r.shadowCamera._farClip,d[2]=r.shadowCamera._nearClip,d[3]=0,this.lightCameraParamsId[s].setValue(d)}if(t._cookie){if(!t.castShadows){const r=ro.evalSpotCookieMatrix(t);this.lightShadowMatrixId[s].setValue(r.data)}this.lightCookieId[s].setValue(t._cookie),this.lightCookieIntId[s].setValue(t.cookieIntensity),t._cookieTransform&&(t._cookieTransformUniform[0]=t._cookieTransform.x,t._cookieTransformUniform[1]=t._cookieTransform.y,t._cookieTransformUniform[2]=t._cookieTransform.z,t._cookieTransformUniform[3]=t._cookieTransform.w,this.lightCookieMatrixId[s].setValue(t._cookieTransformUniform),t._cookieOffsetUniform[0]=t._cookieOffset.x,t._cookieOffsetUniform[1]=t._cookieOffset.y,this.lightCookieOffsetId[s].setValue(t._cookieOffsetUniform))}}dispatchLocalLights(e,t,s){let i=s;const r=this.device.scope,a=e[Me],n=a.length;for(let c=0;c<n;c++){const d=a[c];d.mask&t&&(this.dispatchOmniLight(r,d,i),i++)}const l=e[Re],h=l.length;for(let c=0;c<h;c++){const d=l[c];d.mask&t&&(this.dispatchSpotLight(r,d,i),i++)}}renderForwardPrepareMaterials(e,t,s,i,r,a){const n=e.fogParams??this.scene.fog,l=e.shaderParams;l.fog=n.type,l.srgbRenderTarget=t?.isColorBufferSrgb(0)??!1;const h=(y,A,v,S)=>{Er.drawCalls.push(y),Er.shaderInstances.push(A),Er.isNewMaterial.push(v),Er.lightMaskChanged.push(S)};Er.clear();const c=this.device,d=this.scene,f=d.clusteredLightingEnabled,u=r?.getLightHash(f)??0;let p=null,m,_;const g=s.length;for(let y=0;y<g;y++){const A=s[y],v=A.instancingData;if(v&&v.count<=0)continue;A.ensureMaterial(c);const S=A.material,b=A._shaderDefs,E=A.mask;S&&S===p&&b!==m&&(p=null),S!==p&&(this._materialSwitches++,S._scene=d,S.dirty&&(S.updateUniforms(c,d),S.dirty=!1));const T=A.getShaderInstance(a,u,d,l,this.viewUniformFormat,this.viewBindGroupFormat,i);h(A,T,S!==p,!p||E!==_),p=S,m=b,_=E}return Er}renderForwardInternal(e,t,s,i,r,a,n){const l=this.device,h=this.scene,c=1<<i,d=a?-1:1,f=h.clusteredLightingEnabled,u=e.xr?.session&&e.xr.views.list.length?e.xr.views.list:null,p=t.drawCalls.length;for(let m=0;m<p;m++){const _=t.drawCalls[m],g=t.isNewMaterial[m],y=t.lightMaskChanged[m],A=t.shaderInstances[m],v=_.material,S=_.mask;if(A.shader.failed)continue;if(g){if(l.setShader(A.shader,!1),v.setParameters(l),y){const k=this.dispatchDirectLights(s[oe],S,e);f||this.dispatchLocalLights(s,S,k)}this.alphaTestId.setValue(v.alphaTest),l.setBlendState(v.blendState),l.setDepthState(v.depthState),l.setAlphaToCoverage(v.alphaToCoverage)}this.setupCullMode(e._cullFaces,d,_);const b=_.stencilFront??v.stencilFront,E=_.stencilBack??v.stencilBack;l.setStencilState(b,E),_.setParameters(l,c),l.scope.resolve("meshInstanceId").setValue(_.id);const T=_.mesh;this.setVertexBuffers(l,T),this.setMorphing(l,_.morphInstance),this.setSkinning(l,_);const w=_.instancingData;w&&l.setVertexBuffer(w.vertexBuffer),this.setMeshInstanceMatrices(_,!0),this.setupMeshUniformBuffers(A);const P=_.renderStyle,M=T.indexBuffer[P];r?.(_,m);const L=_.indirectData?.get(e);if(u)for(let D=0;D<u.length;D++){const k=u[D];if(l.setViewport(k.viewport.x,k.viewport.y,k.viewport.z,k.viewport.w),l.supportsUniformBuffers){const C=n[D];l.setBindGroup(_l,C)}else this.setupViewUniforms(k,D);const G=D===0,U=D===u.length-1;l.draw(T.primitive[P],M,w?.count,L,G,U),this._forwardDrawCalls++,_.instancingData&&this._instancedDrawCalls++}else l.draw(T.primitive[P],M,w?.count,L),this._forwardDrawCalls++,_.instancingData&&this._instancedDrawCalls++;m<p-1&&!t.isNewMaterial[m+1]&&v.setParameters(l,_.parameters)}}renderForward(e,t,s,i,r,a,n,l,h){const c=this.renderForwardPrepareMaterials(e,t,s,i,n,r);this.renderForwardInternal(e,c,i,r,a,l,h),Er.clear()}renderForwardLayer(e,t,s,i,r,a,n={}){const{scene:l,device:h}=this,c=l.clusteredLightingEnabled;this.setupViewport(e,t);let d,f;if(s){s.sortVisible(e,i);const v=s.getCulledInstances(e);d=i?v.transparent:v.opaque,l.immediate.onPreRenderLayer(s,d,i),s.requiresLightCube&&(this.lightCube.update(l.ambientLight,s._lights),this.constantLightCube.setValue(this.lightCube.colors)),f=s.splitLights}else d=n.meshInstances,f=n.splitLights??JD;c&&((n.lightClusters??this.worldClustersAllocator.empty).activate(),s&&!this.clustersDebugRendered&&l.lighting.debugLayer===s.id&&(this.clustersDebugRendered=!0)),l._activeCamera=e;const u=e.fogParams??this.scene.fog;this.setFogConstants(u);const p=this.setCameraUniforms(e,t);h.supportsUniformBuffers&&this.setupViewUniformBuffers(a,this.viewUniformFormat,this.viewBindGroupFormat,p);const m=n.clearColor??!1,_=n.clearDepth??!1,g=n.clearStencil??!1;(m||_||g)&&this.clear(e,m,_,g);const y=!!(e._flipFaces^t?.flipY),A=this._forwardDrawCalls;this.renderForward(e,t,d,f,r,null,s,y,a),s&&(s._forwardDrawCalls+=this._forwardDrawCalls-A)}setFogConstants(e){if(e.type!==po){Gi.linear(e.color);const t=this.fogColor;t[0]=Gi.r,t[1]=Gi.g,t[2]=Gi.b,this.fogColorId.setValue(t),e.type===uM?(this.fogStartId.setValue(e.start),this.fogEndId.setValue(e.end)):this.fogDensityId.setValue(e.density)}}setSceneConstants(){const e=this.scene;this.dispatchGlobalLights(e);const t=this.device;this._screenSize[0]=t.width,this._screenSize[1]=t.height,this._screenSize[2]=1/t.width,this._screenSize[3]=1/t.height,this.screenSizeId.setValue(this._screenSize),this.pcssDiskSamplesId.setValue(this.pcssDiskSamples),this.pcssSphereSamplesId.setValue(this.pcssSphereSamples)}buildFrameGraph(e,t){const s=this.scene;if(e.reset(),s.clusteredLightingEnabled){const{shadowsEnabled:l,cookiesEnabled:h}=s.lighting;this._renderPassUpdateClustered.update(e,l,h,this.lights,this.localLights),e.addRenderPass(this._renderPassUpdateClustered)}else this._shadowRendererLocal.buildNonClusteredRenderPasses(e,this.localLights);let i=0,r=!0,a=null;const n=t._renderActions;for(let l=i;l<n.length;l++){const h=n[l],{layer:c,camera:d}=h;if(h.useCameraPasses)d.camera.renderPasses.forEach(f=>{e.addRenderPass(f)});else{const f=c.id===kt,u=f&&(d.renderSceneColorMap||d.renderSceneDepthMap);r&&(r=!1,i=l,a=h.renderTarget);const p=n[l+1],_=(p?!p.useCameraPasses&&p.layer.id===kt:!1)&&(d.renderSceneColorMap||d.renderSceneDepthMap),g=p?p.firstCameraUse&&this.cameraDirShadowLights.has(p.camera.camera):!1;if(!p||p.renderTarget!==a||g||_||u){if(f&&i===l||this.addMainRenderPass(e,t,a,i,l),f){if(d.renderSceneColorMap){const A=d.camera.renderPassColorGrab;A.source=d.renderTarget,e.addRenderPass(A)}d.renderSceneDepthMap&&e.addRenderPass(d.camera.renderPassDepthGrab)}if(h.triggerPostprocess&&d?.onPostprocessing){const A=new QD(this.device,this,h);e.addRenderPass(A)}r=!0}}}}addMainRenderPass(e,t,s,i,r){const a=new ZD(this.device,t,this.scene,this);a.init(s);const n=t._renderActions;for(let l=i;l<=r;l++)a.addRenderAction(n[l]);e.addRenderPass(a)}update(e){this.frameUpdate(),this.shadowRenderer.frameUpdate(),this.scene._updateSkyMesh(),this.updateLayerComposition(e),this.collectLights(e),this.beginFrame(e),this.setSceneConstants(),this.cullComposition(e),this.gpuUpdate(this.processingMeshInstances)}}let lu=0;const wo=[],xh=new Set;function i1(o,e){return o.drawOrder-e.drawOrder}function r1(o,e){const t=o._sortKeyForward,s=e._sortKeyForward;return t===s?e.mesh.id-o.mesh.id:s-t}function a1(o,e){return e._sortKeyDynamic-o._sortKeyDynamic}function n1(o,e){return o._sortKeyDynamic-e._sortKeyDynamic}const o1=[null,i1,r1,a1,n1];class l1{constructor(){this.opaque=[],this.transparent=[]}}class Va{constructor(e={}){this.meshInstances=[],this.meshInstancesSet=new Set,this.shadowCasters=[],this.shadowCastersSet=new Set,this._visibleInstances=new WeakMap,this._lights=[],this._lightsSet=new Set,this._clusteredLightsSet=new Set,this._splitLights=[[],[],[]],this._splitLightsDirty=!0,this.requiresLightCube=!1,this.cameras=[],this.camerasSet=new Set,this._dirtyComposition=!1,e.id!==void 0?(this.id=e.id,lu=Math.max(this.id+1,lu)):this.id=lu++,this.name=e.name,this._enabled=e.enabled??!0,this._refCounter=this._enabled?1:0,this.opaqueSortMode=e.opaqueSortMode??MM,this.transparentSortMode=e.transparentSortMode??Fv,e.renderTarget&&(this.renderTarget=e.renderTarget),this._clearColorBuffer=!!e.clearColorBuffer,this._clearDepthBuffer=!!e.clearDepthBuffer,this._clearStencilBuffer=!!e.clearStencilBuffer,this.onEnable=e.onEnable,this.onDisable=e.onDisable,this._enabled&&this.onEnable&&this.onEnable(),this.customSortCallback=null,this.customCalculateSortValues=null,this._lightHash=0,this._lightHashDirty=!1,this._lightIdHash=0,this._lightIdHashDirty=!1,this._shaderVersion=-1}set enabled(e){e!==this._enabled&&(this._dirtyComposition=!0,this._enabled=e,e?(this.incrementCounter(),this.onEnable&&this.onEnable()):(this.decrementCounter(),this.onDisable&&this.onDisable()))}get enabled(){return this._enabled}set clearColorBuffer(e){this._clearColorBuffer=e,this._dirtyComposition=!0}get clearColorBuffer(){return this._clearColorBuffer}set clearDepthBuffer(e){this._clearDepthBuffer=e,this._dirtyComposition=!0}get clearDepthBuffer(){return this._clearDepthBuffer}set clearStencilBuffer(e){this._clearStencilBuffer=e,this._dirtyComposition=!0}get clearStencilBuffer(){return this._clearStencilBuffer}get hasClusteredLights(){return this._clusteredLightsSet.size>0}get clusteredLightsSet(){return this._clusteredLightsSet}incrementCounter(){this._refCounter===0&&(this._enabled=!0,this.onEnable&&this.onEnable()),this._refCounter++}decrementCounter(){if(this._refCounter===1)this._enabled=!1,this.onDisable&&this.onDisable();else if(this._refCounter===0)return;this._refCounter--}addMeshInstances(e,t){const s=this.meshInstances,i=this.meshInstancesSet;for(let r=0;r<e.length;r++){const a=e[r];i.has(a)||(s.push(a),i.add(a),xh.add(a.material))}if(t||this.addShadowCasters(e),xh.size>0){const r=this._shaderVersion;xh.forEach(a=>{r>=0&&a._shaderVersion!==r&&(a.getShaderVariant!==ql.prototype.getShaderVariant&&a.clearVariants(),a._shaderVersion=r)}),xh.clear()}}removeMeshInstances(e,t){const s=this.meshInstances,i=this.meshInstancesSet;for(let r=0;r<e.length;r++){const a=e[r];if(i.has(a)){i.delete(a);const n=s.indexOf(a);n>=0&&s.splice(n,1)}}t||this.removeShadowCasters(e)}addShadowCasters(e){const t=this.shadowCasters,s=this.shadowCastersSet;for(let i=0;i<e.length;i++){const r=e[i];r.castShadow&&!s.has(r)&&(s.add(r),t.push(r))}}removeShadowCasters(e){const t=this.shadowCasters,s=this.shadowCastersSet;for(let i=0;i<e.length;i++){const r=e[i];if(s.has(r)){s.delete(r);const a=t.indexOf(r);a>=0&&t.splice(a,1)}}}clearMeshInstances(e=!1){this.meshInstances.length=0,this.meshInstancesSet.clear(),e||(this.shadowCasters.length=0,this.shadowCastersSet.clear())}markLightsDirty(){this._lightHashDirty=!0,this._lightIdHashDirty=!0,this._splitLightsDirty=!0}hasLight(e){return this._lightsSet.has(e)}addLight(e){const t=e.light;this._lightsSet.has(t)||(this._lightsSet.add(t),this._lights.push(t),this.markLightsDirty()),t.type!==oe&&this._clusteredLightsSet.add(t)}removeLight(e){const t=e.light;this._lightsSet.has(t)&&(this._lightsSet.delete(t),this._lights.splice(this._lights.indexOf(t),1),this.markLightsDirty()),t.type!==oe&&this._clusteredLightsSet.delete(t)}clearLights(){this._lightsSet.forEach(e=>e.removeLayer(this)),this._lightsSet.clear(),this._clusteredLightsSet.clear(),this._lights.length=0,this.markLightsDirty()}get splitLights(){if(this._splitLightsDirty){this._splitLightsDirty=!1;const e=this._splitLights;for(let s=0;s<e.length;s++)e[s].length=0;const t=this._lights;for(let s=0;s<t.length;s++){const i=t[s];i.enabled&&e[i._type].push(i)}for(let s=0;s<e.length;s++)e[s].sort((i,r)=>i.key-r.key)}return this._splitLights}evaluateLightHash(e,t,s){let i=0;const r=this._lights;for(let a=0;a<r.length;a++){const n=r[a].type!==oe;(e&&n||t&&!n)&&wo.push(s?r[a].id:r[a].key)}return wo.length>0&&(wo.sort(),i=VT(wo),wo.length=0),i}getLightHash(e){return this._lightHashDirty&&(this._lightHashDirty=!1,this._lightHash=this.evaluateLightHash(!e,!0,!1)),this._lightHash}getLightIdHash(){return this._lightIdHashDirty&&(this._lightIdHashDirty=!1,this._lightIdHash=this.evaluateLightHash(!0,!1,!0)),this._lightIdHash}addCamera(e){this.camerasSet.has(e.camera)||(this.camerasSet.add(e.camera),this.cameras.push(e),this._dirtyComposition=!0)}removeCamera(e){if(this.camerasSet.has(e.camera)){this.camerasSet.delete(e.camera);const t=this.cameras.indexOf(e);this.cameras.splice(t,1),this._dirtyComposition=!0}}clearCameras(){this.cameras.length=0,this.camerasSet.clear(),this._dirtyComposition=!0}_calculateSortDistances(e,t,s){const i=e.length,{x:r,y:a,z:n}=t,{x:l,y:h,z:c}=s;for(let d=0;d<i;d++){const f=e[d];let u;if(f.calculateSortDistance)u=f.calculateSortDistance(f,t,s);else{const m=f.aabb.center;u=(m.x-r)*l+(m.y-a)*h+(m.z-n)*c}const p=f._drawBucket*1e9;f._sortKeyDynamic=p+u}}getCulledInstances(e){let t=this._visibleInstances.get(e);return t||(t=new l1,this._visibleInstances.set(e,t)),t}sortVisible(e,t){const s=t?this.transparentSortMode:this.opaqueSortMode;if(s===tc)return;const i=this.getCulledInstances(e),r=t?i.transparent:i.opaque,a=e.node;if(s===RM){const n=a.getPosition(),l=a.forward;this.customCalculateSortValues&&this.customCalculateSortValues(r,r.length,n,l),this.customSortCallback&&r.sort(this.customSortCallback)}else{if(s===Fv||s===DM){const n=a.getPosition(),l=a.forward;this._calculateSortDistances(r,n,l)}r.sort(o1[s])}}}const h1=(o,e)=>o.priority-e.priority,vl=o=>o.sort(h1);class uS extends ne{constructor(e="Untitled"){super(),this.layerList=[],this.layerIdMap=new Map,this.layerNameMap=new Map,this.layerOpaqueIndexMap=new Map,this.layerTransparentIndexMap=new Map,this.subLayerList=[],this.subLayerEnabled=[],this.cameras=[],this._renderActions=[],this._dirty=!1,this.name=e,this._opaqueOrder={},this._transparentOrder={}}destroy(){this.destroyRenderActions()}destroyRenderActions(){this._renderActions.forEach(e=>e.destroy()),this._renderActions.length=0}markDirty(){this._dirty=!0}_update(){const e=this.layerList.length;if(!this._dirty){for(let t=0;t<e;t++)if(this.layerList[t]._dirtyComposition){this._dirty=!0;break}}if(this._dirty){this._dirty=!1,this.cameras.length=0;for(let s=0;s<e;s++){const i=this.layerList[s];i._dirtyComposition=!1;for(let r=0;r<i.cameras.length;r++){const a=i.cameras[r];this.cameras.indexOf(a)<0&&this.cameras.push(a)}}this.cameras.length>1&&vl(this.cameras);let t=0;this.destroyRenderActions();for(let s=0;s<this.cameras.length;s++){const i=this.cameras[s];if(i.camera.renderPasses.length>0){this.addDummyRenderAction(t,i),t++;continue}let r=!0;const a=t;let n=null,l=!1;for(let h=0;h<e;h++){const c=this.layerList[h];if(c.enabled&&this.subLayerEnabled[h]&&c.cameras.length>0&&i.layers.indexOf(c.id)>=0){!l&&c.id===i.disablePostEffectsLayer&&(l=!0,n&&(n.triggerPostprocess=!0));const f=this.subLayerList[h];n=this.addRenderAction(t,c,f,i,r,l),t++,r=!1}}a<t&&(n.lastCameraUse=!0),!l&&n&&(n.triggerPostprocess=!0),i.renderTarget&&i.postEffectsEnabled&&this.propagateRenderTarget(a-1,i)}this._logRenderActions()}}getNextRenderAction(e){const t=new bx;return this._renderActions.push(t),t}addDummyRenderAction(e,t){const s=this.getNextRenderAction(e);s.camera=t,s.useCameraPasses=!0}addRenderAction(e,t,s,i,r,a){let n=t.id!==kt?i.renderTarget:null,l=!1;const h=this._renderActions;for(let u=e-1;u>=0;u--)if(h[u].camera===i&&h[u].renderTarget===n){l=!0;break}a&&i.postEffectsEnabled&&(n=null);const c=this.getNextRenderAction(e);c.triggerPostprocess=!1,c.layer=t,c.transparent=s,c.camera=i,c.renderTarget=n,c.firstCameraUse=r,c.lastCameraUse=!1;const d=r||!l,f=t.clearColorBuffer||t.clearDepthBuffer||t.clearStencilBuffer;return(d||f)&&c.setupClears(d?i:void 0,t),c}propagateRenderTarget(e,t){for(let s=e;s>=0;s--){const i=this._renderActions[s],r=i.layer;if(i.renderTarget&&r.id!==kt)break;if(r.id===kt)continue;if(i.useCameraPasses)break;const a=i?.camera.camera;if(a&&(!t.camera.rect.equals(a.rect)||!t.camera.scissorRect.equals(a.scissorRect)))break;i.renderTarget=t.renderTarget}}_logRenderActions(){}_isLayerAdded(e){return this.layerIdMap.get(e.id)===e}_isSublayerAdded(e,t){return(t?this.layerTransparentIndexMap:this.layerOpaqueIndexMap).get(e)!==void 0}push(e){this._isLayerAdded(e)||(this.layerList.push(e),this.layerList.push(e),this._opaqueOrder[e.id]=this.subLayerList.push(!1)-1,this._transparentOrder[e.id]=this.subLayerList.push(!0)-1,this.subLayerEnabled.push(!0),this.subLayerEnabled.push(!0),this._updateLayerMaps(),this._dirty=!0,this.fire("add",e))}insert(e,t){if(this._isLayerAdded(e))return;this.layerList.splice(t,0,e,e),this.subLayerList.splice(t,0,!1,!0);const s=this.layerList.length;this._updateOpaqueOrder(t,s-1),this._updateTransparentOrder(t,s-1),this.subLayerEnabled.splice(t,0,!0,!0),this._updateLayerMaps(),this._dirty=!0,this.fire("add",e)}remove(e){let t=this.layerList.indexOf(e);for(delete this._opaqueOrder[t],delete this._transparentOrder[t];t>=0;)this.layerList.splice(t,1),this.subLayerList.splice(t,1),this.subLayerEnabled.splice(t,1),t=this.layerList.indexOf(e),this._dirty=!0,this.fire("remove",e);const s=this.layerList.length;this._updateOpaqueOrder(0,s-1),this._updateTransparentOrder(0,s-1),this._updateLayerMaps()}pushOpaque(e){this._isSublayerAdded(e,!1)||(this.layerList.push(e),this._opaqueOrder[e.id]=this.subLayerList.push(!1)-1,this.subLayerEnabled.push(!0),this._updateLayerMaps(),this._dirty=!0,this.fire("add",e))}insertOpaque(e,t){if(this._isSublayerAdded(e,!1))return;this.layerList.splice(t,0,e),this.subLayerList.splice(t,0,!1);const s=this.subLayerList.length;this._updateOpaqueOrder(t,s-1),this.subLayerEnabled.splice(t,0,!0),this._updateLayerMaps(),this._dirty=!0,this.fire("add",e)}removeOpaque(e){for(let t=0,s=this.layerList.length;t<s;t++)if(this.layerList[t]===e&&!this.subLayerList[t]){this.layerList.splice(t,1),this.subLayerList.splice(t,1),s--,this._updateOpaqueOrder(t,s-1),this.subLayerEnabled.splice(t,1),this._dirty=!0,this.layerList.indexOf(e)<0&&this.fire("remove",e);break}this._updateLayerMaps()}pushTransparent(e){this._isSublayerAdded(e,!0)||(this.layerList.push(e),this._transparentOrder[e.id]=this.subLayerList.push(!0)-1,this.subLayerEnabled.push(!0),this._updateLayerMaps(),this._dirty=!0,this.fire("add",e))}insertTransparent(e,t){if(this._isSublayerAdded(e,!0))return;this.layerList.splice(t,0,e),this.subLayerList.splice(t,0,!0);const s=this.subLayerList.length;this._updateTransparentOrder(t,s-1),this.subLayerEnabled.splice(t,0,!0),this._updateLayerMaps(),this._dirty=!0,this.fire("add",e)}removeTransparent(e){for(let t=0,s=this.layerList.length;t<s;t++)if(this.layerList[t]===e&&this.subLayerList[t]){this.layerList.splice(t,1),this.subLayerList.splice(t,1),s--,this._updateTransparentOrder(t,s-1),this.subLayerEnabled.splice(t,1),this._dirty=!0,this.layerList.indexOf(e)<0&&this.fire("remove",e);break}this._updateLayerMaps()}getOpaqueIndex(e){return this.layerOpaqueIndexMap.get(e)??-1}getTransparentIndex(e){return this.layerTransparentIndexMap.get(e)??-1}isEnabled(e,t){if(e.enabled){const s=t?this.getTransparentIndex(e):this.getOpaqueIndex(e);if(s>=0)return this.subLayerEnabled[s]}return!1}_updateLayerMaps(){this.layerIdMap.clear(),this.layerNameMap.clear(),this.layerOpaqueIndexMap.clear(),this.layerTransparentIndexMap.clear();for(let e=0;e<this.layerList.length;e++){const t=this.layerList[e];this.layerIdMap.set(t.id,t),this.layerNameMap.set(t.name,t),(this.subLayerList[e]?this.layerTransparentIndexMap:this.layerOpaqueIndexMap).set(t,e)}}getLayerById(e){return this.layerIdMap.get(e)??null}getLayerByName(e){return this.layerNameMap.get(e)??null}_updateOpaqueOrder(e,t){for(let s=e;s<=t;s++)this.subLayerList[s]===!1&&(this._opaqueOrder[this.layerList[s].id]=s)}_updateTransparentOrder(e,t){for(let s=e;s<=t;s++)this.subLayerList[s]===!0&&(this._transparentOrder[this.layerList[s].id]=s)}_sortLayersDescending(e,t,s){let i=-1,r=-1;for(let a=0,n=e.length;a<n;a++){const l=e[a];s.hasOwnProperty(l)&&(i=Math.max(i,s[l]))}for(let a=0,n=t.length;a<n;a++){const l=t[a];s.hasOwnProperty(l)&&(r=Math.max(r,s[l]))}return i===-1&&r!==-1?1:r===-1&&i!==-1?-1:r-i}sortTransparentLayers(e,t){return this._sortLayersDescending(e,t,this._transparentOrder)}sortOpaqueLayers(e,t){return this._sortLayersDescending(e,t,this._opaqueOrder)}}const Eh=new x,oi={bias:0,normalBias:0},Co=new q,hu={r:0,g:1,b:2,a:3},fp={directional:oe,omni:Me,point:Me,spot:Re},c1=[[new K(0,0,1,1)],[new K(0,0,.5,.5),new K(0,.5,.5,.5)],[new K(0,0,.5,.5),new K(0,.5,.5,.5),new K(.5,0,.5,.5)],[new K(0,0,.5,.5),new K(0,.5,.5,.5),new K(.5,0,.5,.5),new K(.5,.5,.5,.5)]],d1={rrr:1,ggg:2,bbb:4,aaa:8,rgb:7};let f1=0;class u1{constructor(e,t,s){this.light=s,this.camera=e,this.shadowCamera=Ax.createShadowCamera(s._shadowType,s._type,t),this.shadowMatrix=new $,this.shadowViewport=new K(0,0,1,1),this.shadowScissor=new K(0,0,1,1),this.projectionCompensation=0,this.face=t,this.visibleCasters=[],this.viewBindGroups=[]}destroy(){this.viewBindGroups.forEach(e=>{e.defaultUniformBuffer.destroy(),e.destroy()}),this.viewBindGroups.length=0}get shadowBuffer(){const e=this.shadowCamera.renderTarget;return e?this.light._isPcf?e.depthBuffer:e.colorBuffer:null}}class Sl{constructor(e,t){this.layers=new Set,this.shadowDepthState=Gt.DEFAULT.clone(),this.clusteredFlags=0,this.clusteredData=new Uint32Array(3),this.clusteredData16=new Uint16Array(this.clusteredData.buffer),this._evtDeviceRestored=null,this.device=e,this.clusteredLighting=t,this.id=f1++,this._evtDeviceRestored=e.on("devicerestored",this.onDeviceRestored,this),this._type=oe,this._color=new q(.8,.8,.8),this._intensity=1,this._affectSpecularity=!0,this._luminance=0,this._castShadows=!1,this._enabled=!1,this._mask=As,this.isStatic=!1,this.key=0,this.bakeDir=!0,this.bakeNumSamples=1,this.bakeArea=0,this.attenuationStart=10,this.attenuationEnd=10,this._falloffMode=B_,this._shadowType=vs,this._vsmBlurSize=11,this.vsmBlurMode=z_,this.vsmBias=.01*.25,this._cookie=null,this.cookieIntensity=1,this._cookieFalloff=!0,this._cookieChannel="rgb",this._cookieTransform=null,this._cookieTransformUniform=new Float32Array(4),this._cookieOffset=null,this._cookieOffsetUniform=new Float32Array(2),this._cookieTransformSet=!1,this._cookieOffsetSet=!1,this._innerConeAngle=40,this._outerConeAngle=45,this.cascades=null,this._shadowMatrixPalette=null,this._shadowCascadeDistances=null,this.numCascades=1,this._cascadeBlend=0,this.cascadeDistribution=.5,this._shape=xs,this._colorLinear=new Float32Array(3),this._updateLinearColor(),this._position=new x(0,0,0),this._direction=new x(0,0,0),this._innerConeAngleCos=Math.cos(this._innerConeAngle*Math.PI/180),this._updateOuterAngle(this._outerConeAngle),this._usePhysicalUnits=void 0,this._shadowMap=null,this._shadowRenderParams=[],this._shadowCameraParams=[],this.shadowDistance=40,this._shadowResolution=1024,this._shadowBias=-5e-4,this._shadowIntensity=1,this._normalOffsetBias=0,this.shadowUpdateMode=Z_,this.shadowUpdateOverrides=null,this._isVsm=!1,this._isPcf=!0,this._softShadowParams=new Float32Array(4),this.shadowSamples=16,this.shadowBlockerSamples=16,this.penumbraSize=1,this.penumbraFalloff=1,this._cookieMatrix=null,this._atlasViewport=null,this.atlasViewportAllocated=!1,this.atlasVersion=0,this.atlasSlotIndex=0,this.atlasSlotUpdated=!1,this._node=null,this._renderData=[],this.visibleThisFrame=!1,this.maxScreenSize=0,this._updateShadowBias()}destroy(){this._evtDeviceRestored?.off(),this._evtDeviceRestored=null,this._destroyShadowMap(),this.releaseRenderData(),this._renderData=null}onDeviceRestored(){this.shadowUpdateMode===ss&&(this.shadowUpdateMode=rr)}releaseRenderData(){if(this._renderData){for(let e=0;e<this._renderData.length;e++)this._renderData[e].destroy();this._renderData.length=0}}addLayer(e){this.layers.add(e)}removeLayer(e){this.layers.delete(e)}set shadowSamples(e){this._softShadowParams[0]=e}get shadowSamples(){return this._softShadowParams[0]}set shadowBlockerSamples(e){this._softShadowParams[1]=e}get shadowBlockerSamples(){return this._softShadowParams[1]}set shadowBias(e){this._shadowBias!==e&&(this._shadowBias=e,this._updateShadowBias())}get shadowBias(){return this._shadowBias}set numCascades(e){(!this.cascades||this.numCascades!==e)&&(this.cascades=c1[e-1],this._shadowMatrixPalette=new Float32Array(64),this._shadowCascadeDistances=new Float32Array(4),this._destroyShadowMap(),this.updateKey())}get numCascades(){return this.cascades.length}set cascadeBlend(e){this._cascadeBlend!==e&&(this._cascadeBlend=e,this.updateKey())}get cascadeBlend(){return this._cascadeBlend}set shadowMap(e){this._shadowMap!==e&&(this._destroyShadowMap(),this._shadowMap=e)}get shadowMap(){return this._shadowMap}set mask(e){this._mask!==e&&(this._mask=e,this.updateKey(),this.updateClusteredFlags())}get mask(){return this._mask}get numShadowFaces(){const e=this._type;return e===oe?this.numCascades:e===Me?6:1}set type(e){if(this._type===e)return;this._type=e,this._destroyShadowMap(),this._updateShadowBias(),this.updateKey(),this.updateClusteredFlags();const t=this._shadowType;this._shadowType=null,this.shadowUpdateOverrides=null,this.shadowType=t}get type(){return this._type}set shape(e){if(this._shape===e)return;this._shape=e,this._destroyShadowMap(),this.updateKey(),this.updateClusteredFlags();const t=this._shadowType;this._shadowType=null,this.shadowType=t}get shape(){return this._shape}set usePhysicalUnits(e){this._usePhysicalUnits!==e&&(this._usePhysicalUnits=e,this._updateLinearColor())}get usePhysicalUnits(){return this._usePhysicalUnits}set shadowType(e){if(this._shadowType===e)return;let t=Li.get(e);t||(e=vs);const s=this.device;e===gl&&!s.textureFloatRenderable&&!s.textureHalfFloatRenderable&&(e=vs),this._type===Me&&e!==sx&&e!==vs&&e!==ix&&e!==rx&&e!==gl&&(e=vs),e===V_&&(!s.textureFloatRenderable||!s.textureFloatFilterable)&&(e=np),e===np&&!s.textureHalfFloatRenderable&&(e=vs),t=Li.get(e),this._isVsm=t?.vsm??!1,this._isPcf=t?.pcf??!1,this._shadowType=e,this._destroyShadowMap(),this.updateKey()}get shadowType(){return this._shadowType}set enabled(e){this._enabled!==e&&(this._enabled=e,this.layersDirty())}get enabled(){return this._enabled}set castShadows(e){this._castShadows!==e&&(this._castShadows=e,this._destroyShadowMap(),this.layersDirty(),this.updateKey())}get castShadows(){return this._castShadows&&this._mask!==sa&&this._mask!==0}set shadowIntensity(e){this._shadowIntensity!==e&&(this._shadowIntensity=e,this.updateKey())}get shadowIntensity(){return this._shadowIntensity}get bakeShadows(){return this._castShadows&&this._mask===sa}set shadowResolution(e){this._shadowResolution!==e&&(this._type===Me?e=Math.min(e,this.device.maxCubeMapSize):e=Math.min(e,this.device.maxTextureSize),this._shadowResolution=e,this._destroyShadowMap())}get shadowResolution(){return this._shadowResolution}set vsmBlurSize(e){this._vsmBlurSize!==e&&(e%2===0&&e++,this._vsmBlurSize=e)}get vsmBlurSize(){return this._vsmBlurSize}set normalOffsetBias(e){if(this._normalOffsetBias!==e){const t=!this._normalOffsetBias&&e||this._normalOffsetBias&&!e;this._normalOffsetBias=e,t&&this.updateKey()}}get normalOffsetBias(){return this._normalOffsetBias}set falloffMode(e){this._falloffMode!==e&&(this._falloffMode=e,this.updateKey(),this.updateClusteredFlags())}get falloffMode(){return this._falloffMode}set innerConeAngle(e){this._innerConeAngle!==e&&(this._innerConeAngle=e,this._innerConeAngleCos=Math.cos(e*Math.PI/180),this.updateClusterData(!1,!0),this._usePhysicalUnits&&this._updateLinearColor())}get innerConeAngle(){return this._innerConeAngle}set outerConeAngle(e){this._outerConeAngle!==e&&(this._outerConeAngle=e,this._updateOuterAngle(e),this._usePhysicalUnits&&this._updateLinearColor())}get outerConeAngle(){return this._outerConeAngle}set penumbraSize(e){this._penumbraSize=e,this._softShadowParams[2]=e}get penumbraSize(){return this._penumbraSize}set penumbraFalloff(e){this._softShadowParams[3]=e}get penumbraFalloff(){return this._softShadowParams[3]}_updateOuterAngle(e){const t=e*Math.PI/180;this._outerConeAngleCos=Math.cos(t),this._outerConeAngleSin=Math.sin(t),this.updateClusterData(!1,!0)}set intensity(e){this._intensity!==e&&(this._intensity=e,this._updateLinearColor())}get intensity(){return this._intensity}set affectSpecularity(e){this._type===oe&&(this._affectSpecularity=e,this.updateKey())}get affectSpecularity(){return this._affectSpecularity}set luminance(e){this._luminance!==e&&(this._luminance=e,this._updateLinearColor())}get luminance(){return this._luminance}get cookieMatrix(){return this._cookieMatrix||(this._cookieMatrix=new $),this._cookieMatrix}get atlasViewport(){return this._atlasViewport||(this._atlasViewport=new K(0,0,1,1)),this._atlasViewport}set cookie(e){this._cookie!==e&&(this._cookie=e,this.updateKey())}get cookie(){return this._cookie}set cookieFalloff(e){this._cookieFalloff!==e&&(this._cookieFalloff=e,this.updateKey())}get cookieFalloff(){return this._cookieFalloff}set cookieChannel(e){if(this._cookieChannel!==e){if(e.length<3){const t=e.charAt(e.length-1),s=3-e.length;for(let i=0;i<s;i++)e+=t}this._cookieChannel=e,this.updateKey(),this.updateClusteredFlags()}}get cookieChannel(){return this._cookieChannel}set cookieTransform(e){this._cookieTransform!==e&&(this._cookieTransform=e,this._cookieTransformSet=!!e,e&&!this._cookieOffset&&(this.cookieOffset=new z,this._cookieOffsetSet=!1),this.updateKey())}get cookieTransform(){return this._cookieTransform}set cookieOffset(e){if(this._cookieOffset===e)return;!!(this._cookieTransformSet||e)&&!e&&this._cookieOffset?this._cookieOffset.set(0,0):this._cookieOffset=e,this._cookieOffsetSet=!!e,e&&!this._cookieTransform&&(this.cookieTransform=new K(1,1,0,0),this._cookieTransformSet=!1),this.updateKey()}get cookieOffset(){return this._cookieOffset}beginFrame(){this.visibleThisFrame=this._type===oe&&this._enabled,this.maxScreenSize=0,this.atlasViewportAllocated=!1,this.atlasSlotUpdated=!1}_destroyShadowMap(){if(this.releaseRenderData(),this._shadowMap&&(this._shadowMap.cached||this._shadowMap.destroy(),this._shadowMap=null),this.shadowUpdateMode===ss&&(this.shadowUpdateMode=rr),this.shadowUpdateOverrides)for(let e=0;e<this.shadowUpdateOverrides.length;e++)this.shadowUpdateOverrides[e]===ss&&(this.shadowUpdateOverrides[e]=rr)}getRenderData(e,t){for(let i=0;i<this._renderData.length;i++){const r=this._renderData[i];if(r.camera===e&&r.face===t)return r}const s=new u1(e,t,this);return this._renderData.push(s),s}clone(){const e=new Sl(this.device,this.clusteredLighting);return e.type=this._type,e.setColor(this._color),e.intensity=this._intensity,e.affectSpecularity=this._affectSpecularity,e.luminance=this._luminance,e.castShadows=this.castShadows,e._enabled=this._enabled,e.attenuationStart=this.attenuationStart,e.attenuationEnd=this.attenuationEnd,e.falloffMode=this._falloffMode,e.shadowType=this._shadowType,e.vsmBlurSize=this._vsmBlurSize,e.vsmBlurMode=this.vsmBlurMode,e.vsmBias=this.vsmBias,e.shadowUpdateMode=this.shadowUpdateMode,e.mask=this.mask,this.shadowUpdateOverrides&&(e.shadowUpdateOverrides=this.shadowUpdateOverrides.slice()),e.innerConeAngle=this._innerConeAngle,e.outerConeAngle=this._outerConeAngle,e.numCascades=this.numCascades,e.cascadeDistribution=this.cascadeDistribution,e.cascadeBlend=this._cascadeBlend,e.shape=this._shape,e.shadowDepthState.copy(this.shadowDepthState),e.shadowBias=this.shadowBias,e.normalOffsetBias=this._normalOffsetBias,e.shadowResolution=this._shadowResolution,e.shadowDistance=this.shadowDistance,e.shadowIntensity=this.shadowIntensity,e.shadowSamples=this.shadowSamples,e.shadowBlockerSamples=this.shadowBlockerSamples,e.penumbraSize=this.penumbraSize,e.penumbraFalloff=this.penumbraFalloff,e}static getLightUnitConversion(e,t=Math.PI/4,s=0){switch(e){case Re:{const i=Math.cos(t),r=Math.cos(s);return 2*Math.PI*(1-r+(r-i)/2)}case Me:return 4*Math.PI;case oe:return 1}}_getUniformBiasValues(e){const t=e.shadowCamera._farClip;switch(this._type){case Me:oi.bias=this.shadowBias,oi.normalBias=this._normalOffsetBias;break;case Re:this._isVsm?oi.bias=-1e-5*20:oi.bias=this.shadowBias*20,oi.normalBias=this._isVsm?this.vsmBias/(this.attenuationEnd/7):this._normalOffsetBias;break;case oe:this._isVsm?oi.bias=-1e-5*20:oi.bias=this.shadowBias/t*100,oi.normalBias=this._isVsm?this.vsmBias/(t/7):this._normalOffsetBias;break}return oi}getColor(){return this._color}getBoundingSphere(e){if(this._type===Re){const t=this.attenuationEnd,s=this._outerConeAngle,i=this._outerConeAngleCos,r=this._node;Eh.copy(r.up),s>45?(e.radius=t*this._outerConeAngleSin,Eh.mulScalar(-t*i)):(e.radius=t/(2*i),Eh.mulScalar(-e.radius)),e.center.add2(r.getPosition(),Eh)}else this._type===Me&&(e.center=this._node.getPosition(),e.radius=this.attenuationEnd)}getBoundingBox(e){if(this._type===Re){const t=this.attenuationEnd,s=this._outerConeAngle,i=this._node,r=Math.abs(Math.sin(s*B.DEG_TO_RAD)*t);e.center.set(0,-t*.5,0),e.halfExtents.set(r,t*.5,r),e.setFromTransformedAabb(e,i.getWorldTransform(),!0)}else this._type===Me&&(e.center.copy(this._node.getPosition()),e.halfExtents.set(this.attenuationEnd,this.attenuationEnd,this.attenuationEnd))}_updateShadowBias(){if(this._type===Me&&!this.clusteredLighting)this.shadowDepthState.depthBias=0,this.shadowDepthState.depthBiasSlope=0;else{const e=this.shadowBias*-1e3;this.shadowDepthState.depthBias=e,this.shadowDepthState.depthBiasSlope=e}}_updateLinearColor(){let e=this._intensity;this._usePhysicalUnits&&(e=this._luminance/Sl.getLightUnitConversion(this._type,this._outerConeAngle*B.DEG_TO_RAD,this._innerConeAngle*B.DEG_TO_RAD));const t=this._color,s=this._colorLinear;e>=1?Co.linear(t).mulScalar(e):Co.copy(t).mulScalar(e).linear(),s[0]=Co.r,s[1]=Co.g,s[2]=Co.b,this.updateClusterData(!0)}setColor(){arguments.length===1?this._color.set(arguments[0].r,arguments[0].g,arguments[0].b):arguments.length===3&&this._color.set(arguments[0],arguments[1],arguments[2]),this._updateLinearColor()}layersDirty(){this.layers.forEach(e=>{e.hasLight(this)&&e.markLightsDirty()})}updateKey(){let e=this._type<<29|this._shadowType<<25|this._falloffMode<<23|(this._normalOffsetBias!==0?1:0)<<22|(this._cookie?1:0)<<21|(this._cookieFalloff?1:0)<<20|hu[this._cookieChannel.charAt(0)]<<18|(this._cookieTransform?1:0)<<12|this._shape<<10|(this.numCascades>0?1:0)<<9|(this._cascadeBlend>0?1:0)<<8|(this.affectSpecularity?1:0)<<7|this.mask<<6|(this._castShadows?1:0)<<3;this._cookieChannel.length===3&&(e|=hu[this._cookieChannel.charAt(1)]<<16,e|=hu[this._cookieChannel.charAt(2)]<<14),e!==this.key&&this.layersDirty(),this.key=e}updateClusteredFlags(){const e=!!(this.mask&As),t=!!(this.mask&ma);this.clusteredFlags=(this.type===Re?1:0)<<30|(this._shape&3)<<28|(this._falloffMode&1)<<27|(d1[this._cookieChannel]??0)<<23|(e?1:0)<<22|(t?1:0)<<21}getClusteredFlags(e,t){return this.clusteredFlags|((e?Math.floor(this.shadowIntensity*255):0)&255)<<0|((t?Math.floor(this.cookieIntensity*255):0)&255)<<8}updateClusterData(e,t){const{clusteredData16:s}=this,i=oa.float2Half;e&&(s[0]=i(B.clamp(this._colorLinear[0]/Qh,0,65504)),s[1]=i(B.clamp(this._colorLinear[1]/Qh,0,65504)),s[2]=i(B.clamp(this._colorLinear[2]/Qh,0,65504))),t&&(s[4]=i(this._innerConeAngleCos),s[5]=i(this._outerConeAngleCos))}}class wx{constructor(e,t,s){this._areaLightsEnabled=!1,this._cells=new x(10,3,10),this._maxLightsPerCell=255,this._shadowsEnabled=!0,this._shadowType=vs,this._shadowAtlasResolution=2048,this._cookiesEnabled=!1,this._cookieAtlasResolution=2048,this.atlasSplit=null,this._supportsAreaLights=e,this._maxTextureSize=t,this._dirtyLightsFnc=s}applySettings(e){this.shadowsEnabled=e.lightingShadowsEnabled??this.shadowsEnabled,this.cookiesEnabled=e.lightingCookiesEnabled??this.cookiesEnabled,this.areaLightsEnabled=e.lightingAreaLightsEnabled??this.areaLightsEnabled,this.shadowAtlasResolution=e.lightingShadowAtlasResolution??this.shadowAtlasResolution,this.cookieAtlasResolution=e.lightingCookieAtlasResolution??this.cookieAtlasResolution,this.maxLightsPerCell=e.lightingMaxLightsPerCell??this.maxLightsPerCell,this.shadowType=e.lightingShadowType??this.shadowType,e.lightingCells&&(this.cells=new x(e.lightingCells))}set cells(e){this._cells.copy(e)}get cells(){return this._cells}set maxLightsPerCell(e){this._maxLightsPerCell=B.clamp(e,1,255)}get maxLightsPerCell(){return this._maxLightsPerCell}set cookieAtlasResolution(e){this._cookieAtlasResolution=B.clamp(e,32,this._maxTextureSize)}get cookieAtlasResolution(){return this._cookieAtlasResolution}set shadowAtlasResolution(e){this._shadowAtlasResolution=B.clamp(e,32,this._maxTextureSize)}get shadowAtlasResolution(){return this._shadowAtlasResolution}set shadowType(e){this._shadowType!==e&&(this._shadowType=e,this._dirtyLightsFnc())}get shadowType(){return this._shadowType}set cookiesEnabled(e){this._cookiesEnabled!==e&&(this._cookiesEnabled=e,this._dirtyLightsFnc())}get cookiesEnabled(){return this._cookiesEnabled}set areaLightsEnabled(e){this._supportsAreaLights&&this._areaLightsEnabled!==e&&(this._areaLightsEnabled=e,this._dirtyLightsFnc())}get areaLightsEnabled(){return this._areaLightsEnabled}set shadowsEnabled(e){this._shadowsEnabled!==e&&(this._shadowsEnabled=e,this._dirtyLightsFnc())}get shadowsEnabled(){return this._shadowsEnabled}}class Sa{constructor(e){this.morph=e,e.incRefCount(),this.device=e.device;const t=e._targets.length;this.shader=this._createShader(t),this._weights=[],this._weightMap=new Map;for(let a=0;a<e._targets.length;a++){const n=e._targets[a];n.name&&this._weightMap.set(n.name,a),this.setWeight(a,n.defaultWeight)}this._shaderMorphWeights=new Float32Array(t),this._shaderMorphIndex=new Uint32Array(t);const s=(a,n)=>(this[n]=e._createTexture(a,e._renderTextureFormat),new ct({colorBuffer:this[n],depth:!1}));e.morphPositions&&(this.rtPositions=s("MorphRTPos","texturePositions")),e.morphNormals&&(this.rtNormals=s("MorphRTNrm","textureNormals")),this._textureParams=new Float32Array([e.morphTextureWidth,e.morphTextureHeight]);const i=e.aabb.halfExtents;this._aabbSize=new Float32Array([i.x*4,i.y*4,i.z*4]);const r=e.aabb.getMin();this._aabbMin=new Float32Array([r.x*2,r.y*2,r.z*2]),this._aabbNrmSize=new Float32Array([2,2,2]),this._aabbNrmMin=new Float32Array([-1,-1,-1]),this.aabbSizeId=this.device.scope.resolve("aabbSize"),this.aabbMinId=this.device.scope.resolve("aabbMin"),this.morphTextureId=this.device.scope.resolve("morphTexture"),this.morphFactor=this.device.scope.resolve("morphFactor[0]"),this.morphIndex=this.device.scope.resolve("morphIndex[0]"),this.countId=this.device.scope.resolve("count"),this.zeroTextures=!1}destroy(){this.shader=null;const e=this.morph;e&&(this.morph=null,e.decRefCount(),e.refCount<1&&e.destroy()),this.rtPositions?.destroy(),this.rtPositions=null,this.texturePositions?.destroy(),this.texturePositions=null,this.rtNormals?.destroy(),this.rtNormals=null,this.textureNormals?.destroy(),this.textureNormals=null}clone(){return new Sa(this.morph)}_getWeightIndex(e){return typeof e=="string"?this._weightMap.get(e):e}getWeight(e){const t=this._getWeightIndex(e);return this._weights[t]}setWeight(e,t){const s=this._getWeightIndex(e);this._weights[s]=t,this._dirty=!0}_createShader(e){const t=new Map;t.set("{MORPH_TEXTURE_MAX_COUNT}",e),this.morph.intRenderFormat&&t.set("MORPH_INT","");const s=this.morph.intRenderFormat?"uvec4":"vec4";return vt.createShader(this.device,{uniqueName:`TextureMorphShader_${e}-${this.morph.intRenderFormat?"int":"float"}`,attributes:{vertex_position:ue},vertexChunk:"morphVS",fragmentChunk:"morphPS",fragmentDefines:t,fragmentOutputTypes:[s]})}_updateTextureRenderTarget(e,t,s){const{morph:i,device:r}=this;this.setAabbUniforms(s),this.morphTextureId.setValue(s?i.targetsTexturePositions:i.targetsTextureNormals),r.setBlendState(dt.NOBLEND),this.countId.setValue(t),this.morphFactor.setValue(this._shaderMorphWeights),this.morphIndex.setValue(this._shaderMorphIndex),fr(r,e,this.shader)}_updateTextureMorph(e){this.device,(e>0||!this.zeroTextures)&&(this.rtPositions&&this._updateTextureRenderTarget(this.rtPositions,e,!0),this.rtNormals&&this._updateTextureRenderTarget(this.rtNormals,e,!1),this.zeroTextures=e===0)}setAabbUniforms(e=!0){this.aabbSizeId.setValue(e?this._aabbSize:this._aabbNrmSize),this.aabbMinId.setValue(e?this._aabbMin:this._aabbNrmMin)}prepareRendering(e){this.setAabbUniforms()}update(){this._dirty=!1;const e=this.morph._targets,t=1e-5,s=this._shaderMorphWeights,i=this._shaderMorphIndex;let r=0;for(let a=0;a<e.length;a++)Math.abs(this.getWeight(a))>t&&(s[r]=this.getWeight(a),i[r]=a,r++);this._updateTextureMorph(r)}}class Fi{constructor(){this.graph=null,this.meshInstances=[],this.skinInstances=[],this.morphInstances=[],this.cameras=[],this.lights=[],this._shadersVersion=0,this._immutable=!1}getGraph(){return this.graph}setGraph(e){this.graph=e}getCameras(){return this.cameras}setCameras(e){this.cameras=e}getLights(){return this.lights}setLights(e){this.lights=e}getMaterials(){const e=[];for(let t=0;t<this.meshInstances.length;t++){const s=this.meshInstances[t];e.indexOf(s.material)===-1&&e.push(s.material)}return e}clone(){const e=[],t=[],s=function(h){const c=h.clone();e.push(h),t.push(c);for(let d=0;d<h._children.length;d++)c.addChild(s(h._children[d]));return c},i=s(this.graph),r=[],a=[],n=[];for(let h=0;h<this.skinInstances.length;h++){const c=this.skinInstances[h].skin,d=new Wl(c),f=[];for(let u=0;u<c.boneNames.length;u++){const p=c.boneNames[u],m=i.findByName(p);f.push(m)}d.bones=f,a.push(d)}for(let h=0;h<this.morphInstances.length;h++){const c=this.morphInstances[h].morph,d=new Sa(c);n.push(d)}for(let h=0;h<this.meshInstances.length;h++){const c=this.meshInstances[h],d=e.indexOf(c.node),f=new Oe(c.mesh,c.material,t[d]);if(c.skinInstance){const u=this.skinInstances.indexOf(c.skinInstance);f.skinInstance=a[u]}if(c.morphInstance){const u=this.morphInstances.indexOf(c.morphInstance);f.morphInstance=n[u]}r.push(f)}const l=new Fi;return l.graph=i,l.meshInstances=r,l.skinInstances=a,l.morphInstances=n,l.getGraph().syncHierarchy(),l}destroy(){const e=this.meshInstances;for(let t=0;t<e.length;t++)e[t].destroy();this.meshInstances.length=0}generateWireframe(){Oe._prepareRenderStyleForArray(this.meshInstances,Dr)}}class Cx extends tf{constructor(e,t,{preferHighPrecision:s=!1}={}){super(),this.device=t;const i=t;this.preferHighPrecision=s,this._targets=e.slice();const r=i.textureHalfFloatRenderable?et:void 0,a=i.textureFloatRenderable?ft:void 0;this._renderTextureFormat=this.preferHighPrecision?a??r:r??a,this._renderTextureFormat=this._renderTextureFormat??kd,this.intRenderFormat=pn(this._renderTextureFormat),this._textureFormat=this.preferHighPrecision?ft:et,this._init(),this._updateMorphFlags()}destroy(){this.vertexBufferIds?.destroy(),this.vertexBufferIds=null,this.targetsTexturePositions?.destroy(),this.targetsTexturePositions=null,this.targetsTextureNormals?.destroy(),this.targetsTextureNormals=null}get aabb(){if(!this._aabb){const e=new x,t=new x;for(let s=0;s<this._targets.length;s++){const i=this._targets[s].aabb;e.min(i.getMin()),t.max(i.getMax())}this._aabb=new fe,this._aabb.setMinMax(e,t)}return this._aabb}get morphPositions(){return this._morphPositions}get morphNormals(){return this._morphNormals}_init(){this._initTextureBased();for(let e=0;e<this._targets.length;e++)this._targets[e]._postInit()}_findSparseSet(e,t,s){let i=1;const r=e[0].length;for(let a=0;a<r;a+=3){let n=!1;for(let l=0;l<e.length;l++){const h=e[l];if(h[a]!==0||h[a+1]!==0||h[a+2]!==0){n=!0;break}}n?(t.push(i),s.push(a/3),i++):t.push(0)}return i}_initTextureBased(){const e=[],t=[],s=this._targets;for(let _=0;_<s.length;_++){const g=s[_];g.options.deltaPositions&&(e.push(g.options.deltaPositions),t.push(!0)),g.options.deltaNormals&&(e.push(g.options.deltaNormals),t.push(!1))}const i=[],r=[],a=this._findSparseSet(e,i,r),n=this.device.maxTextureSize;let l=Math.ceil(Math.sqrt(a));l=Math.min(l,n);const h=Math.ceil(a/l);if(h>n)return;this.morphTextureWidth=l,this.morphTextureHeight=h;let c=!1;const d=oa.float2Half;this._textureFormat===et&&(c=!0);const f=[],u=[],p=l*h*4;for(let _=0;_<e.length;_++){const g=e[_],y=this._textureFormat===et?new Uint16Array(p):new Float32Array(p);if((t[_]?f:u).push(y),c)for(let A=0;A<r.length;A++){const v=r[A]*3,S=A*4+4;y[S]=d(g[v]),y[S+1]=d(g[v+1]),y[S+2]=d(g[v+2])}else for(let A=0;A<r.length;A++){const v=r[A]*3,S=A*4+4;y[S]=g[v],y[S+1]=g[v+1],y[S+2]=g[v+2]}}f.length>0&&(this.targetsTexturePositions=this._createTexture("MorphPositionsTexture",this._textureFormat,s.length,[f]),this.targetsTexturePositions.upload()),u.length>0&&(this.targetsTextureNormals=this._createTexture("MorphNormalsTexture",this._textureFormat,s.length,[u]),this.targetsTextureNormals.upload());const m=[{semantic:qn,components:1,type:Wd,asInt:!0}];return this.vertexBufferIds=new si(this.device,new Wt(this.device,m,i.length),i.length,{data:new Uint32Array(i)}),!0}get targets(){return this._targets}_updateMorphFlags(){this._morphPositions=!1,this._morphNormals=!1;for(let e=0;e<this._targets.length;e++){const t=this._targets[e];t.morphPositions&&(this._morphPositions=!0),t.morphNormals&&(this._morphNormals=!0)}}_createTexture(e,t,s,i){return new ae(this.device,{levels:i,arrayLength:s,width:this.morphTextureWidth,height:this.morphTextureHeight,format:t,cubemap:!1,mipmaps:!1,minFilter:pe,magFilter:pe,addressU:te,addressV:te,name:e})}}class uf{constructor(e){this.used=!1,this.options=e,this._name=e.name,this._defaultWeight=e.defaultWeight||0,this._aabb=e.aabb,this.deltaPositions=e.deltaPositions,this.morphPositions=!!e.deltaPositions,this.morphNormals=!!e.deltaNormals}get name(){return this._name}get defaultWeight(){return this._defaultWeight}get aabb(){return this._aabb||(this._aabb=new fe,this.deltaPositions&&this._aabb.compute(this.deltaPositions)),this._aabb}clone(){return new uf(this.options)}_postInit(){this.options.preserveData||(this.options=null),this.used=!0}}let li,pS=1;const J=4,cu=new $,du=new $,Is=new x,Fe=new x,ds=new x,za=new x,Lt=new x,Ke=new x,Ha=new x,Ga=new x,Po=new x,mS=new x,ut=new x,Ah=new x,Ar=new x;function gn(o){return o-Math.floor(o)}function p1(o){return Math.max(Math.min(o,1),0)}function fu(o,e){return o-e*Math.floor(o/e)}function m1(o){let e=gn(o),t=gn(255*o),s=gn(65025*o),i=gn(160581375*o);return e-=t/255,t-=s/255,s-=i/255,i-=i/255,[e,t,s,i]}function bh(o){let e=gn(o),t=gn(255*o);return e-=t/255,t-=t/255,[e,t]}class _1{constructor(e){this._emitter=e}calcSpawnPosition(e,t,s,i,r){const a=this._emitter,n=Math.random(),l=Math.random(),h=Math.random(),c=Math.random();if(a.useCpu&&(e[r*J+0+a.numParticlesPot*2*J]=n,e[r*J+1+a.numParticlesPot*2*J]=l,e[r*J+2+a.numParticlesPot*2*J]=h),Fe.x=n-.5,Fe.y=l-.5,Fe.z=h-.5,a.emitterShape===Vs){const u=Math.max(Math.abs(Fe.x),Math.max(Math.abs(Fe.y),Math.abs(Fe.z))),p=u+(.5-u)*s[0],m=u+(.5-u)*s[1],_=u+(.5-u)*s[2];Fe.x=p*(u===Math.abs(Fe.x)?Math.sign(Fe.x):2*Fe.x),Fe.y=m*(u===Math.abs(Fe.y)?Math.sign(Fe.y):2*Fe.y),Fe.z=_*(u===Math.abs(Fe.z)?Math.sign(Fe.z):2*Fe.z),a.localSpace?Is.copy(t.transformPoint(Fe)):Is.copy(i).add(t.transformPoint(Fe))}else{Fe.normalize();const u=a.emitterRadius===0?0:a.emitterRadiusInner/a.emitterRadius,p=c*(1-u)+u;a.localSpace?Is.copy(Fe.mulScalar(p*a.emitterRadius)):Is.copy(i).add(Fe.mulScalar(p*a.emitterRadius))}let f=-B.lerp(a.rate,a.rate2,n)*r;if(a.pack8){const u=(Is.x-a.worldBounds.center.x)/a.worldBoundsSize.x+.5,p=(Is.y-a.worldBounds.center.y)/a.worldBoundsSize.y+.5,m=(Is.z-a.worldBounds.center.z)/a.worldBoundsSize.z+.5;let _=B.lerp(a.startAngle*B.DEG_TO_RAD,a.startAngle2*B.DEG_TO_RAD,n);_=_%(Math.PI*2)/(Math.PI*2);const g=bh(u);e[r*J]=g[0],e[r*J+1]=g[1];const y=bh(p);e[r*J+2]=y[0],e[r*J+3]=y[1];const A=bh(m);e[r*J+0+a.numParticlesPot*J]=A[0],e[r*J+1+a.numParticlesPot*J]=A[1];const v=bh(_);e[r*J+2+a.numParticlesPot*J]=v[0],e[r*J+3+a.numParticlesPot*J]=v[1];const S=1;e[r*J+3+a.numParticlesPot*J*2]=S;const b=Math.max(a.lifetime,(a.numParticles-1)*Math.max(a.rate,a.rate2)),E=a.lifetime+1;f=(f+b)/(b+E);const T=m1(f);e[r*J+0+a.numParticlesPot*J*3]=T[0],e[r*J+1+a.numParticlesPot*J*3]=T[1],e[r*J+2+a.numParticlesPot*J*3]=T[2],e[r*J+3+a.numParticlesPot*J*3]=T[3]}else e[r*J]=Is.x,e[r*J+1]=Is.y,e[r*J+2]=Is.z,e[r*J+3]=B.lerp(a.startAngle*B.DEG_TO_RAD,a.startAngle2*B.DEG_TO_RAD,n),e[r*J+3+a.numParticlesPot*J]=f}update(e,t,s,i,r,a,n,l){let h,c,d;const f=this._emitter;if(f.meshInstance.node){const w=f.meshInstance.node.worldTransform;for(let P=0;P<12;P++)cu.data[P]=w.data[P];du.copy(cu),du.invert(),li=f.meshInstance.node.localScale,pS=Math.max(Math.max(li.x,li.y),li.z)}a=f.meshInstance.node===null||f.localSpace?x.ZERO:f.meshInstance.node.getPosition();const u=f.camera?f.camera._node.getPosition():x.ZERO,p=f.useMesh?17:15;let m,_,g,y,A,v,S,b,E;const T=f.precision-1;for(let w=0;w<f.numParticles;w++){const P=Math.floor(f.vbCPU[w*f.numParticleVerts*(f.useMesh?6:4)+3]),M=s[P*J+0+f.numParticlesPot*2*J];ds.x=M,ds.y=s[P*J+1+f.numParticlesPot*2*J],ds.z=s[P*J+2+f.numParticlesPot*2*J];const L=f.rate+(f.rate2-f.rate)*M,D=f.lifetime;let k=s[P*J+3+f.numParticlesPot*J]+n;const G=p1(k/D);let U=0,C=0;const I=0;(k-n<=0||k>=D)&&this.calcSpawnPosition(s,i,r,a,P);let O=k>0&&k<D;O&&(d=G*T,m=Math.floor(d),_=Math.ceil(d),d%=1,h=f.qRotSpeed[m],c=f.qRotSpeed[_],g=h+(c-h)*d,h=f.qRotSpeed2[m],c=f.qRotSpeed2[_],y=h+(c-h)*d,h=f.qScale[m],c=f.qScale[_],U=h+(c-h)*d,h=f.qScale2[m],c=f.qScale2[_],A=h+(c-h)*d,h=f.qAlpha[m],c=f.qAlpha[_],v=h+(c-h)*d,h=f.qAlpha2[m],c=f.qAlpha2[_],S=h+(c-h)*d,h=f.qRadialSpeed[m],c=f.qRadialSpeed[_],b=h+(c-h)*d,h=f.qRadialSpeed2[m],c=f.qRadialSpeed2[_],E=h+(c-h)*d,b+=(E-b)*(M*100%1),za.x=s[P*J],za.y=s[P*J+1],za.z=s[P*J+2],f.localSpace?Po.copy(za):Po.copy(za).sub(a),Po.normalize().mulScalar(b),m*=3,_*=3,h=f.qLocalVelocity[m],c=f.qLocalVelocity[_],Ke.x=h+(c-h)*d,h=f.qLocalVelocity[m+1],c=f.qLocalVelocity[_+1],Ke.y=h+(c-h)*d,h=f.qLocalVelocity[m+2],c=f.qLocalVelocity[_+2],Ke.z=h+(c-h)*d,h=f.qLocalVelocity2[m],c=f.qLocalVelocity2[_],Ga.x=h+(c-h)*d,h=f.qLocalVelocity2[m+1],c=f.qLocalVelocity2[_+1],Ga.y=h+(c-h)*d,h=f.qLocalVelocity2[m+2],c=f.qLocalVelocity2[_+2],Ga.z=h+(c-h)*d,h=f.qVelocity[m],c=f.qVelocity[_],Lt.x=h+(c-h)*d,h=f.qVelocity[m+1],c=f.qVelocity[_+1],Lt.y=h+(c-h)*d,h=f.qVelocity[m+2],c=f.qVelocity[_+2],Lt.z=h+(c-h)*d,h=f.qVelocity2[m],c=f.qVelocity2[_],Ha.x=h+(c-h)*d,h=f.qVelocity2[m+1],c=f.qVelocity2[_+1],Ha.y=h+(c-h)*d,h=f.qVelocity2[m+2],c=f.qVelocity2[_+2],Ha.z=h+(c-h)*d,Ke.x+=(Ga.x-Ke.x)*ds.x,Ke.y+=(Ga.y-Ke.y)*ds.y,Ke.z+=(Ga.z-Ke.z)*ds.z,f.initialVelocity>0&&(f.emitterShape===xM?(Fe.copy(ds).mulScalar(2).sub(x.ONE).normalize(),Ke.add(Fe.mulScalar(f.initialVelocity))):Ke.add(x.FORWARD.mulScalar(f.initialVelocity))),Lt.x+=(Ha.x-Lt.x)*ds.x,Lt.y+=(Ha.y-Lt.y)*ds.y,Lt.z+=(Ha.z-Lt.z)*ds.z,g+=(y-g)*ds.y,U=(U+(A-U)*(M*1e4%1))*pS,C=(S-v)*(M*1e3%1),f.meshInstance.node&&(f.localSpace?(Ke.x/=li.x,Ke.y/=li.y,Ke.z/=li.z):cu.transformPoint(Ke,Ke)),f.localSpace?(du.transformPoint(Lt,Lt),Ke.add(Lt).add(Po)):(Ke.add(Lt.mul(li)),Ke.add(Po.mul(li))),Ah.copy(Ke),mS.copy(za).add(Ke.mulScalar(n)),ut.copy(mS),s[P*J]=ut.x,s[P*J+1]=ut.y,s[P*J+2]=ut.z,s[P*J+3]+=g*n,f.wrap&&f.wrapBounds&&(f.localSpace||ut.sub(a),ut.x=fu(ut.x,f.wrapBounds.x)-f.wrapBounds.x*.5,ut.y=fu(ut.y,f.wrapBounds.y)-f.wrapBounds.y*.5,ut.z=fu(ut.z,f.wrapBounds.z)-f.wrapBounds.z*.5,f.localSpace||ut.add(a)),f.sort>0&&(f.sort===1?(Ar.copy(ut).sub(u),f.particleDistance[P]=-(Ar.x*Ar.x+Ar.y*Ar.y+Ar.z*Ar.z)):f.sort===2?f.particleDistance[P]=k:f.sort===3&&(f.particleDistance[P]=-k))),l?k<0&&(s[P*J+3+f.numParticlesPot*2*J]=-1):(k>=D&&(k-=Math.max(D,(f.numParticles-1)*L),s[P*J+3+f.numParticlesPot*2*J]=f.loop?1:-1),k<0&&f.loop&&(s[P*J+3+f.numParticlesPot*2*J]=1)),s[P*J+3+f.numParticlesPot*2*J]<0&&(O=!1),s[P*J+3+f.numParticlesPot*J]=k;for(let N=0;N<f.numParticleVerts;N++){const F=(w*f.numParticleVerts+N)*(f.useMesh?6:4);let W=f.vbCPU[F],X=f.vbCPU[F+1],V=f.vbCPU[F+2];O||(W=X=V=0);const Y=w*f.numParticleVerts*p+N*p;e[Y]=ut.x,e[Y+1]=ut.y,e[Y+2]=ut.z,e[Y+3]=G,e[Y+4]=f.alignToMotion?I:s[P*J+3],e[Y+5]=U,e[Y+6]=C,e[Y+7]=Ah.x,e[Y+8]=W,e[Y+9]=X,e[Y+10]=V,e[Y+11]=Ah.y,e[Y+12]=P,e[Y+13]=Ah.z,e[Y+14]=f.vbCPU[F+3],f.useMesh&&(e[Y+15]=f.vbCPU[F+4],e[Y+16]=f.vbCPU[F+5])}}if(f.sort>op&&f.camera){const w=f.useMesh?6:4,P=f.particleDistance;for(let M=0;M<f.numParticles;M++)t[M][0]=M,t[M][1]=P[Math.floor(f.vbCPU[M*f.numParticleVerts*w+3])];f.vbOld.set(f.vbCPU),t.sort((M,L)=>M[1]-L[1]);for(let M=0;M<f.numParticles;M++){const L=t[M][0]*f.numParticleVerts*w,D=M*f.numParticleVerts*w;for(let k=0;k<f.numParticleVerts*w;k++)f.vbCPU[D+k]=f.vbOld[L+k]}}}}const _S=new Ks,gS=new Ks,vS=new Ks;class g1{constructor(e,t){this._emitter=e,this.frameRandomUniform=new Float32Array(3),this.emitterPosUniform=new Float32Array(3),this.emitterScaleUniform=new Float32Array([1,1,1]),this.worldBoundsMulUniform=new Float32Array(3),this.worldBoundsAddUniform=new Float32Array(3),this.inBoundsSizeUniform=new Float32Array(3),this.inBoundsCenterUniform=new Float32Array(3),this.constantParticleTexIN=t.scope.resolve("particleTexIN"),this.constantParticleTexOUT=t.scope.resolve("particleTexOUT"),this.constantEmitterPos=t.scope.resolve("emitterPos"),this.constantEmitterScale=t.scope.resolve("emitterScale"),this.constantSpawnBounds=t.scope.resolve("spawnBounds"),this.constantSpawnPosInnerRatio=t.scope.resolve("spawnPosInnerRatio"),this.constantSpawnBoundsSphere=t.scope.resolve("spawnBoundsSphere"),this.constantSpawnBoundsSphereInnerRatio=t.scope.resolve("spawnBoundsSphereInnerRatio"),this.constantInitialVelocity=t.scope.resolve("initialVelocity"),this.constantFrameRandom=t.scope.resolve("frameRandom"),this.constantDelta=t.scope.resolve("delta"),this.constantRate=t.scope.resolve("rate"),this.constantRateDiv=t.scope.resolve("rateDiv"),this.constantLifetime=t.scope.resolve("lifetime"),this.constantGraphSampleSize=t.scope.resolve("graphSampleSize"),this.constantGraphNumSamples=t.scope.resolve("graphNumSamples"),this.constantInternalTex0=t.scope.resolve("internalTex0"),this.constantInternalTex1=t.scope.resolve("internalTex1"),this.constantInternalTex2=t.scope.resolve("internalTex2"),this.constantInternalTex3=t.scope.resolve("internalTex3"),this.constantEmitterMatrix=t.scope.resolve("emitterMatrix"),this.constantEmitterMatrixInv=t.scope.resolve("emitterMatrixInv"),this.constantNumParticles=t.scope.resolve("numParticles"),this.constantNumParticlesPot=t.scope.resolve("numParticlesPot"),this.constantLocalVelocityDivMult=t.scope.resolve("localVelocityDivMult"),this.constantVelocityDivMult=t.scope.resolve("velocityDivMult"),this.constantRotSpeedDivMult=t.scope.resolve("rotSpeedDivMult"),this.constantSeed=t.scope.resolve("seed"),this.constantStartAngle=t.scope.resolve("startAngle"),this.constantStartAngle2=t.scope.resolve("startAngle2"),this.constantOutBoundsMul=t.scope.resolve("outBoundsMul"),this.constantOutBoundsAdd=t.scope.resolve("outBoundsAdd"),this.constantInBoundsSize=t.scope.resolve("inBoundsSize"),this.constantInBoundsCenter=t.scope.resolve("inBoundsCenter"),this.constantMaxVel=t.scope.resolve("maxVel"),this.constantFaceTangent=t.scope.resolve("faceTangent"),this.constantFaceBinorm=t.scope.resolve("faceBinorm")}_setInputBounds(){this.inBoundsSizeUniform[0]=this._emitter.prevWorldBoundsSize.x,this.inBoundsSizeUniform[1]=this._emitter.prevWorldBoundsSize.y,this.inBoundsSizeUniform[2]=this._emitter.prevWorldBoundsSize.z,this.constantInBoundsSize.setValue(this.inBoundsSizeUniform),this.inBoundsCenterUniform[0]=this._emitter.prevWorldBoundsCenter.x,this.inBoundsCenterUniform[1]=this._emitter.prevWorldBoundsCenter.y,this.inBoundsCenterUniform[2]=this._emitter.prevWorldBoundsCenter.z,this.constantInBoundsCenter.setValue(this.inBoundsCenterUniform)}randomize(){this.frameRandomUniform[0]=Math.random(),this.frameRandomUniform[1]=Math.random(),this.frameRandomUniform[2]=Math.random()}update(e,t,s,i,r){const a=this._emitter;e.setBlendState(dt.NOBLEND),e.setDepthState(Gt.NODEPTH),e.setCullMode(lt),this.randomize(),this.constantGraphSampleSize.setValue(1/a.precision),this.constantGraphNumSamples.setValue(a.precision),this.constantNumParticles.setValue(a.numParticles),this.constantNumParticlesPot.setValue(a.numParticlesPot),this.constantInternalTex0.setValue(a.internalTex0),this.constantInternalTex1.setValue(a.internalTex1),this.constantInternalTex2.setValue(a.internalTex2),this.constantInternalTex3.setValue(a.internalTex3);const n=a.meshInstance.node,l=n===null?x.ONE:n.localScale;if(a.pack8){this.worldBoundsMulUniform[0]=a.worldBoundsMul.x,this.worldBoundsMulUniform[1]=a.worldBoundsMul.y,this.worldBoundsMulUniform[2]=a.worldBoundsMul.z,this.constantOutBoundsMul.setValue(this.worldBoundsMulUniform),this.worldBoundsAddUniform[0]=a.worldBoundsAdd.x,this.worldBoundsAddUniform[1]=a.worldBoundsAdd.y,this.worldBoundsAddUniform[2]=a.worldBoundsAdd.z,this.constantOutBoundsAdd.setValue(this.worldBoundsAddUniform),this._setInputBounds();let u=a.maxVel*Math.max(Math.max(l.x,l.y),l.z);u=Math.max(u,1),this.constantMaxVel.setValue(u)}const h=n===null||a.localSpace?x.ZERO:n.getPosition(),c=n===null?$.IDENTITY:n.getWorldTransform();a.emitterShape===Vs?(_S.setFromMat4(t),this.constantSpawnBounds.setValue(_S.data),this.constantSpawnPosInnerRatio.setValue(s)):(this.constantSpawnBoundsSphere.setValue(a.emitterRadius),this.constantSpawnBoundsSphereInnerRatio.setValue(a.emitterRadius===0?0:a.emitterRadiusInner/a.emitterRadius)),this.constantInitialVelocity.setValue(a.initialVelocity),gS.setFromMat4(c),vS.invertMat4(c),this.emitterPosUniform[0]=h.x,this.emitterPosUniform[1]=h.y,this.emitterPosUniform[2]=h.z,this.constantEmitterPos.setValue(this.emitterPosUniform),this.constantFrameRandom.setValue(this.frameRandomUniform),this.constantDelta.setValue(i),this.constantRate.setValue(a.rate),this.constantRateDiv.setValue(a.rate2-a.rate),this.constantStartAngle.setValue(a.startAngle*B.DEG_TO_RAD),this.constantStartAngle2.setValue(a.startAngle2*B.DEG_TO_RAD),this.constantSeed.setValue(a.seed),this.constantLifetime.setValue(a.lifetime),this.emitterScaleUniform[0]=l.x,this.emitterScaleUniform[1]=l.y,this.emitterScaleUniform[2]=l.z,this.constantEmitterScale.setValue(this.emitterScaleUniform),this.constantEmitterMatrix.setValue(gS.data),this.constantEmitterMatrixInv.setValue(vS.data),this.constantLocalVelocityDivMult.setValue(a.localVelocityUMax),this.constantVelocityDivMult.setValue(a.velocityUMax),this.constantRotSpeedDivMult.setValue(a.rotSpeedUMax[0]);let d=a.swapTex?a.particleTexOUT:a.particleTexIN;d=a.beenReset?a.particleTexStart:d;const f=a.swapTex?a.particleTexIN:a.particleTexOUT;this.constantParticleTexIN.setValue(d),fr(e,a.swapTex?a.rtParticleTexIN:a.rtParticleTexOUT,r?a.shaderParticleUpdateOnStop:a.loop?a.shaderParticleUpdateRespawn:a.shaderParticleUpdateNoRespawn),a.material.setParameter("particleTexOUT",d),a.material.setParameter("particleTexIN",f),a.beenReset=!1,a.swapTex=!a.swapTex,a.prevWorldBoundsSize.copy(a.worldBoundsSize),a.prevWorldBoundsCenter.copy(a.worldBounds.center),a.pack8&&this._setInputBounds()}}const SS=["NONE","VERTEX","MAP"];class v1 extends ga{generateKey(e){let s=`particle_${ga.definesHash(e.defines)}_`;for(const i in e)e.hasOwnProperty(i)&&(s+=e[i]);return s}createVertexDefines(e,t){const s=new Map(e.defines);return e.mesh&&s.set("USE_MESH",""),e.meshUv&&s.set("USE_MESH_UV",""),e.localSpace&&s.set("LOCAL_SPACE",""),e.screenSpace&&s.set("SCREEN_SPACE",""),e.animTex&&s.set("ANIMTEX",""),e.soft>0&&s.set("SOFT",""),e.stretch>0&&s.set("STRETCH",""),e.customFace&&s.set("CUSTOM_FACE",""),e.pack8&&s.set("PACK8",""),e.localSpace&&s.set("LOCAL_SPACE",""),e.animTexLoop&&s.set("ANIMTEX_LOOP",""),e.wrap&&s.set("WRAP",""),e.alignToMotion&&s.set("ALIGN_TO_MOTION",""),s.set("NORMAL",SS[e.normal]),t.particle_vertexData=ue,e.mesh&&e.meshUv&&(t.particle_uv=as),e.useCpu&&(t.particle_vertexData2=Ac,t.particle_vertexData3=d_,t.particle_vertexData4=f_,t.particle_vertexData5=u_),s}createFragmentDefines(e){const t=new Map(e.defines);return e.soft>0&&t.set("SOFT",""),e.halflambert&&t.set("HALF_LAMBERT",""),t.set("NORMAL",SS[e.normal]),t.set("BLEND",KT[e.blend]),t}createShaderDefinition(e,t){const s=e.isWebGPU?Be:Ee,i=de.get(e,s),r={},a=this.createVertexDefines(t,r),n=this.createFragmentDefines(t),l=`PARTICLE_${t.useCpu?"CPU":"GPU"}
`;a.set(l,""),n.set(l,"");const h=new Map(i);return Et.createDefinition(e,{name:"ParticleShader",shaderLanguage:s,attributes:r,vertexCode:i.get("particle_shaderVS"),fragmentCode:i.get("particle_shaderPS"),fragmentDefines:n,fragmentIncludes:h,vertexIncludes:h,vertexDefines:a})}}const S1=new v1;class y1 extends ql{constructor(e){super(),this.emitter=null,this.emitter=e}getShaderVariant(e){const{device:t,scene:s,cameraShaderParams:i,objDefs:r}=e,{emitter:a}=this,n={defines:vt.getCoreDefines(this,e),pass:wa,useCpu:this.emitter.useCpu,normal:a.lighting?a.normalMap!==null?2:1:0,halflambert:this.emitter.halfLambert,stretch:this.emitter.stretch,alignToMotion:this.emitter.alignToMotion,soft:this.emitter.depthSoftening,mesh:this.emitter.useMesh,meshUv:r&Y_,gamma:i?.shaderOutputGamma??Gl,toneMap:i?.toneMapping??G_,fog:s&&!this.emitter.noFog?s.fog.type:"none",wrap:this.emitter.wrap&&this.emitter.wrapBounds,localSpace:this.emitter.localSpace,screenSpace:a.inTools?!1:this.emitter.screenSpace,blend:this.emitter.blendType,animTex:this.emitter._isAnimated(),animTexLoop:this.emitter.animLoop,pack8:this.emitter.pack8,customFace:this.emitter.orientation!==Lc},l=new ff(e.viewUniformFormat,e.viewBindGroupFormat,e.vertexFormat),h=io(t);return h.register("particle",S1),h.getProgram("particle",n,l,this.userId)}}const yS=[[-1,-1],[1,-1],[1,1],[-1,1]];function jt(o,e,t,s,i=ft,r,a){let n=pe;a&&(i===Ae||i===zt)&&(n=Ze);const l=new ae(o,{width:e,height:t,format:i,cubemap:!1,mipmaps:!1,minFilter:n,magFilter:n,addressU:te,addressV:te,name:"ParticleSystemTexture"}),h=l.lock();if(i===Ae||i===zt){const c=new Uint8Array(s.length);for(let d=0;d<s.length;d++)c[d]=s[d]*r*255;s=c}return h.set(s),l.unlock(),l}function TS(o){return Math.max(Math.min(o,1),0)}const xS=new ys([0,0,1,0]),ES=new ys([0,1,1,1]),AS=new jr([0,0,1,0],[0,0,1,0],[0,0,1,0]),T1=new jr([0,1,1,1],[0,1,1,1],[0,1,1,1]);let hi=2;const wh=4,ci=new Float32Array(3),br=new $,bS=new x,Ch=new x,Ph=new x;let up,ic;function ee(o,e){ic[o]!==void 0&&ic[o]!==null?up[o]=ic[o]:up[o]=e}function Px(o,e,t){return(o*255<<16|e*255<<8|t*255)/(1<<24)}function wS(o,e){const t=o.length/3,s=new Array(t*4);for(let i=0;i<t;i++)s[i*4]=o[i*3],s[i*4+1]=o[i*3+1],s[i*4+2]=o[i*3+2],s[i*4+3]=Px(e[i*3],e[i*3+1],e[i*3+2]);return s}function x1(o,e){const t=new Array(e.length*4);for(let s=0;s<e.length;s++)t[s*4]=o[s*3],t[s*4+1]=o[s*3+1],t[s*4+2]=o[s*3+2],t[s*4+3]=e[s];return t}function E1(o,e,t,s,i){const r=new Array(o.length*4);for(let a=0;a<o.length;a++)r[a*4]=o[a],r[a*4+1]=e[a],r[a*4+2]=0,r[a*4+3]=Px(t[a],s[a],i[a]);return r}function A1(o,e){const t=new Array(o.length*4);for(let s=0;s<o.length;s++)t[s*4]=o[s],t[s*4+1]=e[s],t[s*4+2]=0,t[s*4+3]=0;return t}function b1(o){const e=Math.max(o.rate,o.rate2)*o.numParticles+o.lifetime;return Date.now()+e*1e3}function w1(o,e){const t=new Float32Array(o.length);for(let s=0;s<o.length;s++)t[s]=o[s]-e[s];return t}function Rr(o,e){const t=e.length,s=o.length/t;for(let i=0;i<s;i++)for(let r=0;r<t;r++){const a=Math.abs(o[i*t+r]);e[r]=Math.max(e[r],a)}}function C1(o,e){const t=e.length,s=o.length/t;for(let i=0;i<s;i++)for(let r=0;r<t;r++)o[i*t+r]/=e[r]===0?1:e[r],o[i*t+r]*=.5,o[i*t+r]+=.5}function wr(o,e,t){const s=w1(e,o);return Rr(s,t),C1(s,t),s}const P1=new Tt;class L1{constructor(e,t){this.material=null,this.internalTex0=null,this.internalTex1=null,this.internalTex2=null,this.colorParam=null,this.graphicsDevice=e;const s=e,i=32;this.precision=i,this._addTimeTime=0,up=this,ic=t,ee("numParticles",1),this.numParticles>e.maxTextureSize&&(this.numParticles=e.maxTextureSize),ee("rate",1),ee("rate2",this.rate),ee("lifetime",50),ee("emitterExtents",new x(0,0,0)),ee("emitterExtentsInner",new x(0,0,0)),ee("emitterRadius",0),ee("emitterRadiusInner",0),ee("emitterShape",Vs),ee("initialVelocity",1),ee("wrap",!1),ee("localSpace",!1),ee("screenSpace",!1),ee("wrapBounds",null),ee("colorMap",this.defaultParamTexture),ee("normalMap",null),ee("loop",!0),ee("preWarm",!1),ee("sort",op),ee("mode",ax),ee("scene",null),ee("lighting",!1),ee("halfLambert",!1),ee("intensity",1),ee("stretch",0),ee("alignToMotion",!1),ee("depthSoftening",0),ee("mesh",null),ee("particleNormal",new x(0,1,0)),ee("orientation",Lc),ee("depthWrite",!1),ee("noFog",!1),ee("blendType",ii),ee("node",null),ee("startAngle",0),ee("startAngle2",this.startAngle),ee("animTilesX",1),ee("animTilesY",1),ee("animStartFrame",0),ee("animNumFrames",1),ee("animNumAnimations",1),ee("animIndex",0),ee("randomizeAnimIndex",!1),ee("animSpeed",1),ee("animLoop",!0),this._gpuUpdater=new g1(this,s),this._cpuUpdater=new _1(this),this.emitterPosUniform=new Float32Array(3),this.wrapBoundsUniform=new Float32Array(3),this.emitterScaleUniform=new Float32Array([1,1,1]),ee("colorGraph",T1),ee("colorGraph2",this.colorGraph),ee("scaleGraph",ES),ee("scaleGraph2",this.scaleGraph),ee("alphaGraph",ES),ee("alphaGraph2",this.alphaGraph),ee("localVelocityGraph",AS),ee("localVelocityGraph2",this.localVelocityGraph),ee("velocityGraph",AS),ee("velocityGraph2",this.velocityGraph),ee("rotationSpeedGraph",xS),ee("rotationSpeedGraph2",this.rotationSpeedGraph),ee("radialSpeedGraph",xS),ee("radialSpeedGraph2",this.radialSpeedGraph),this.animTilesParams=new Float32Array(2),this.animParams=new Float32Array(4),this.animIndexParams=new Float32Array(2),this.vbToSort=null,this.vbOld=null,this.particleDistance=null,this.camera=null,this.swapTex=!1,this.useMesh=!0,this.useCpu=!e.supportsGpuParticles,this.pack8=!0,this.localBounds=new fe,this.worldBoundsNoTrail=new fe,this.worldBoundsTrail=[new fe,new fe],this.worldBounds=new fe,this.worldBoundsSize=new x,this.prevWorldBoundsSize=new x,this.prevWorldBoundsCenter=new x,this.prevEmitterExtents=this.emitterExtents,this.prevEmitterRadius=this.emitterRadius,this.worldBoundsMul=new x,this.worldBoundsAdd=new x,this.timeToSwitchBounds=0,this.shaderParticleUpdateRespawn=null,this.shaderParticleUpdateNoRespawn=null,this.shaderParticleUpdateOnStop=null,this.numParticleVerts=0,this.numParticleIndices=0,this.material=null,this.meshInstance=null,this.drawOrder=0,this.seed=Math.random(),this.fixedTimeStep=1/60,this.maxSubSteps=10,this.simTime=0,this.simTimeTotal=0,this.beenReset=!1,this._layer=null,this.rebuild()}get defaultParamTexture(){return P1.get(this.graphicsDevice,()=>{const s=new Float32Array(1024);for(let r=0;r<16;r++)for(let a=0;a<16;a++){const n=a+1-8.5,l=r+1-8.5,h=TS(1-TS(Math.sqrt(n*n+l*l)/16)-.5),c=r*16+a;s[c*4]=1,s[c*4+1]=1,s[c*4+2]=1,s[c*4+3]=h}const i=jt(this.graphicsDevice,16,16,s,zt,1,!0);return i.minFilter=Ze,i.magFilter=Ze,i})}onChangeCamera(){this.resetMaterial()}calculateBoundsMad(){this.worldBoundsMul.x=1/this.worldBoundsSize.x,this.worldBoundsMul.y=1/this.worldBoundsSize.y,this.worldBoundsMul.z=1/this.worldBoundsSize.z,this.worldBoundsAdd.copy(this.worldBounds.center).mul(this.worldBoundsMul).mulScalar(-1),this.worldBoundsAdd.x+=.5,this.worldBoundsAdd.y+=.5,this.worldBoundsAdd.z+=.5}calculateWorldBounds(){if(!this.node)return;if(this.prevWorldBoundsSize.copy(this.worldBoundsSize),this.prevWorldBoundsCenter.copy(this.worldBounds.center),!this.useCpu){let s=!1;this.emitterShape===Vs?s=!this.emitterExtents.equals(this.prevEmitterExtents):s=this.emitterRadius!==this.prevEmitterRadius,s&&this.calculateLocalBounds()}const e=this.node.getWorldTransform();this.localSpace?this.worldBoundsNoTrail.copy(this.localBounds):this.worldBoundsNoTrail.setFromTransformedAabb(this.localBounds,e),this.worldBoundsTrail[0].add(this.worldBoundsNoTrail),this.worldBoundsTrail[1].add(this.worldBoundsNoTrail);const t=this.simTimeTotal;t>=this.timeToSwitchBounds&&(this.worldBoundsTrail[0].copy(this.worldBoundsTrail[1]),this.worldBoundsTrail[1].copy(this.worldBoundsNoTrail),this.timeToSwitchBounds=t+this.lifetime),this.worldBounds.copy(this.worldBoundsTrail[0]),this.worldBoundsSize.copy(this.worldBounds.halfExtents).mulScalar(2),this.localSpace?(this.meshInstance.aabb.setFromTransformedAabb(this.worldBounds,e),this.meshInstance.mesh.aabb.setFromTransformedAabb(this.worldBounds,e)):(this.meshInstance.aabb.copy(this.worldBounds),this.meshInstance.mesh.aabb.copy(this.worldBounds)),this.meshInstance._aabbVer=1-this.meshInstance._aabbVer,this.pack8&&this.calculateBoundsMad()}resetWorldBounds(){this.node&&(this.worldBoundsNoTrail.setFromTransformedAabb(this.localBounds,this.localSpace?$.IDENTITY:this.node.getWorldTransform()),this.worldBoundsTrail[0].copy(this.worldBoundsNoTrail),this.worldBoundsTrail[1].copy(this.worldBoundsNoTrail),this.worldBounds.copy(this.worldBoundsTrail[0]),this.worldBoundsSize.copy(this.worldBounds.halfExtents).mulScalar(2),this.prevWorldBoundsSize.copy(this.worldBoundsSize),this.prevWorldBoundsCenter.copy(this.worldBounds.center),this.simTimeTotal=0,this.timeToSwitchBounds=0)}calculateLocalBounds(){let e=Number.MAX_VALUE,t=Number.MAX_VALUE,s=Number.MAX_VALUE,i=-Number.MAX_VALUE,r=-Number.MAX_VALUE,a=-Number.MAX_VALUE,n=0,l=0;const h=this.lifetime/this.precision,c=[this.qVelocity,this.qVelocity2],d=[this.qLocalVelocity,this.qLocalVelocity2],f=[0,0],u=[0,0],p=[0,0],m=[0,0],_=[0,0];let g,y,A;for(let S=0;S<this.precision+1;S++){const b=Math.min(S,this.precision-1);for(let E=0;E<2;E++)g=d[E][b*3+0]*h+f[E],y=d[E][b*3+1]*h+u[E],A=d[E][b*3+2]*h+p[E],e=Math.min(g,e),t=Math.min(y,t),s=Math.min(A,s),i=Math.max(g,i),r=Math.max(y,r),a=Math.max(A,a),f[E]=g,u[E]=y,p[E]=A;for(let E=0;E<2;E++)_[E]+=h*Math.sqrt(c[E][b*3+0]*c[E][b*3+0]+c[E][b*3+1]*c[E][b*3+1]+c[E][b*3+2]*c[E][b*3+2]);m[0]+=this.qRadialSpeed[b]*h,m[1]+=this.qRadialSpeed2[b]*h,n=Math.max(n,Math.max(Math.abs(m[0]),Math.abs(m[1]))),l=Math.max(l,this.qScale[b])}this.emitterShape===Vs?(g=this.emitterExtents.x*.5,y=this.emitterExtents.y*.5,A=this.emitterExtents.z*.5):(g=this.emitterRadius,y=this.emitterRadius,A=this.emitterRadius);const v=Math.max(_[0],_[1]);Ch.x=e-l-g-n-v,Ch.y=t-l-y-n-v,Ch.z=s-l-A-n-v,Ph.x=i+l+g+n+v,Ph.y=r+l+y+n+v,Ph.z=a+l+A+n+v,this.localBounds.setMinMax(Ch,Ph)}rebuild(){const e=this.graphicsDevice;this.colorMap===null&&(this.colorMap=this.defaultParamTexture),this.spawnBounds=this.emitterShape===Vs?this.emitterExtents:this.emitterRadius,this.useCpu=this.useCpu||this.sort>op||e.maxVertexTextures<=1||e.fragmentUniformsCount<64||e.forceCpuParticles,this._destroyResources(),this.pack8=(this.pack8||!e.textureFloatRenderable)&&!this.useCpu,hi=this.useCpu||this.pack8?4:2,this.useMesh=!!this.mesh,this.numParticlesPot=B.nextPowerOfTwo(this.numParticles),this.rebuildGraphs(),this.calculateLocalBounds(),this.resetWorldBounds(),this.node&&(this.worldBounds.setFromTransformedAabb(this.localBounds,this.localSpace?$.IDENTITY:this.node.getWorldTransform()),this.worldBoundsTrail[0].copy(this.worldBounds),this.worldBoundsTrail[1].copy(this.worldBounds),this.worldBoundsSize.copy(this.worldBounds.halfExtents).mulScalar(2),this.prevWorldBoundsSize.copy(this.worldBoundsSize),this.prevWorldBoundsCenter.copy(this.worldBounds.center),this.pack8&&this.calculateBoundsMad()),this.vbToSort=new Array(this.numParticles);for(let c=0;c<this.numParticles;c++)this.vbToSort[c]=[0,0];this.particleDistance=new Float32Array(this.numParticles),this._gpuUpdater.randomize(),this.particleTex=new Float32Array(this.numParticlesPot*hi*wh);const t=this.node===null||this.localSpace?x.ZERO:this.node.getPosition();this.emitterShape===Vs&&(this.node===null||this.localSpace?br.setTRS(x.ZERO,Q.IDENTITY,this.spawnBounds):br.setTRS(x.ZERO,this.node.getRotation(),bS.copy(this.spawnBounds).mul(this.node.localScale)),ci[0]=this.emitterExtents.x!==0?this.emitterExtentsInner.x/this.emitterExtents.x:0,ci[1]=this.emitterExtents.y!==0?this.emitterExtentsInner.y/this.emitterExtents.y:0,ci[2]=this.emitterExtents.z!==0?this.emitterExtentsInner.z/this.emitterExtents.z:0);for(let c=0;c<this.numParticles;c++)this._cpuUpdater.calcSpawnPosition(this.particleTex,br,ci,t,c),this.useCpu&&(this.particleTex[c*wh+3+this.numParticlesPot*2*wh]=1);this.particleTexStart=new Float32Array(this.numParticlesPot*hi*wh);for(let c=0;c<this.particleTexStart.length;c++)this.particleTexStart[c]=this.particleTex[c];this.useCpu||(this.pack8?(this.particleTexIN=jt(e,this.numParticlesPot,hi,this.particleTex,Ae,1,!1),this.particleTexOUT=jt(e,this.numParticlesPot,hi,this.particleTex,Ae,1,!1),this.particleTexStart=jt(e,this.numParticlesPot,hi,this.particleTexStart,Ae,1,!1)):(this.particleTexIN=jt(e,this.numParticlesPot,hi,this.particleTex),this.particleTexOUT=jt(e,this.numParticlesPot,hi,this.particleTex),this.particleTexStart=jt(e,this.numParticlesPot,hi,this.particleTexStart)),this.rtParticleTexIN=new ct({colorBuffer:this.particleTexIN,depth:!1}),this.rtParticleTexOUT=new ct({colorBuffer:this.particleTexOUT,depth:!1}),this.swapTex=!1);const s=new Map;this.localSpace&&s.set("LOCAL_SPACE",""),this.pack8&&s.set("PACK8",""),this.emitterShape===Vs&&s.set("EMITTERSHAPE_BOX","");const i=`Shape:${this.emitterShape}-Pack:${this.pack8}-Local:${this.localSpace}`,r=de.get(e,e.isWebGPU?Be:Ee),a=new Map(r),n={attributes:{vertex_position:ue},vertexChunk:"fullscreenQuadVS",fragmentChunk:"particle_simulationPS",fragmentDefines:s,fragmentIncludes:a};n.uniqueName=`ParticleUpdateRespawn-${i}`,s.set("RESPAWN",""),this.shaderParticleUpdateRespawn=vt.createShader(e,n),s.delete("RESPAWN"),n.uniqueName=`ParticleUpdateNoRespawn-${i}`,s.set("NO_RESPAWN",""),this.shaderParticleUpdateNoRespawn=vt.createShader(e,n),s.delete("NO_RESPAWN"),n.uniqueName=`ParticleUpdateStop-${i}`,s.set("ON_STOP",""),this.shaderParticleUpdateOnStop=vt.createShader(e,n),this.numParticleVerts=this.useMesh?this.mesh.vertexBuffer.numVertices:4,this.numParticleIndices=this.useMesh?this.mesh.indexBuffer[0].numIndices:6,this._allocate(this.numParticles);const l=new De(e);l.vertexBuffer=this.vertexBuffer,l.indexBuffer[0]=this.indexBuffer,l.primitive[0].type=Ci,l.primitive[0].base=0,l.primitive[0].count=this.numParticles*this.numParticleIndices,l.primitive[0].indexed=!0,this.material=this._createMaterial(),this.resetMaterial();const h=this.meshInstance?this.meshInstance.visible:!0;this.meshInstance=new Oe(l,this.material,this.node),this.meshInstance.pick=!1,this.meshInstance.updateKey(),this.meshInstance.cull=!0,this.localSpace?this.meshInstance.aabb.setFromTransformedAabb(this.worldBounds,this.node.getWorldTransform()):this.meshInstance.aabb.copy(this.worldBounds),this.meshInstance._updateAabb=!1,this.meshInstance.visible=h,this._setMaterialTextures(),this.resetTime(),this.addTime(0,!1),this.preWarm&&this.prewarm(this.lifetime)}_isAnimated(){return this.animNumFrames>=1&&(this.animTilesX>1||this.animTilesY>1)&&(this.colorMap&&this.colorMap!==this.defaultParamTexture||this.normalMap)}rebuildGraphs(){const e=this.precision,t=this.graphicsDevice;this.qLocalVelocity=this.localVelocityGraph.quantize(e),this.qVelocity=this.velocityGraph.quantize(e),this.qColor=this.colorGraph.quantizeClamped(e,0,1),this.qRotSpeed=this.rotationSpeedGraph.quantize(e),this.qScale=this.scaleGraph.quantize(e),this.qAlpha=this.alphaGraph.quantize(e),this.qRadialSpeed=this.radialSpeedGraph.quantize(e),this.qLocalVelocity2=this.localVelocityGraph2.quantize(e),this.qVelocity2=this.velocityGraph2.quantize(e),this.qColor2=this.colorGraph2.quantizeClamped(e,0,1),this.qRotSpeed2=this.rotationSpeedGraph2.quantize(e),this.qScale2=this.scaleGraph2.quantize(e),this.qAlpha2=this.alphaGraph2.quantize(e),this.qRadialSpeed2=this.radialSpeedGraph2.quantize(e);for(let s=0;s<e;s++)this.qRotSpeed[s]*=B.DEG_TO_RAD,this.qRotSpeed2[s]*=B.DEG_TO_RAD;if(this.localVelocityUMax=new Float32Array(3),this.velocityUMax=new Float32Array(3),this.colorUMax=new Float32Array(3),this.rotSpeedUMax=[0],this.scaleUMax=[0],this.alphaUMax=[0],this.radialSpeedUMax=[0],this.qLocalVelocityDiv=wr(this.qLocalVelocity,this.qLocalVelocity2,this.localVelocityUMax),this.qVelocityDiv=wr(this.qVelocity,this.qVelocity2,this.velocityUMax),this.qColorDiv=wr(this.qColor,this.qColor2,this.colorUMax),this.qRotSpeedDiv=wr(this.qRotSpeed,this.qRotSpeed2,this.rotSpeedUMax),this.qScaleDiv=wr(this.qScale,this.qScale2,this.scaleUMax),this.qAlphaDiv=wr(this.qAlpha,this.qAlpha2,this.alphaUMax),this.qRadialSpeedDiv=wr(this.qRadialSpeed,this.qRadialSpeed2,this.radialSpeedUMax),this.pack8){const s=[0,0,0];Rr(this.qVelocity,s);const i=[0,0,0];Rr(this.qVelocity2,i);const r=[0,0,0];Rr(this.qLocalVelocity,r);const a=[0,0,0];Rr(this.qLocalVelocity2,a);const n=[0];Rr(this.qRadialSpeed,n);const l=[0];Rr(this.qRadialSpeed2,l);let h=Math.max(s[0],i[0]);h=Math.max(h,s[1]),h=Math.max(h,i[1]),h=Math.max(h,s[2]),h=Math.max(h,i[2]);let c=Math.max(r[0],a[0]);c=Math.max(c,r[1]),c=Math.max(c,a[1]),c=Math.max(c,r[2]),c=Math.max(c,a[2]);const d=Math.max(n[0],l[0]);this.maxVel=h+c+d}this.useCpu||(this.internalTex0=jt(t,e,1,wS(this.qLocalVelocity,this.qLocalVelocityDiv)),this.internalTex1=jt(t,e,1,wS(this.qVelocity,this.qVelocityDiv)),this.internalTex2=jt(t,e,1,E1(this.qRotSpeed,this.qScale,this.qScaleDiv,this.qRotSpeedDiv,this.qAlphaDiv)),this.internalTex3=jt(t,e,1,A1(this.qRadialSpeed,this.qRadialSpeedDiv))),this.colorParam=jt(t,e,1,x1(this.qColor,this.qAlpha),zt,1,!0)}_setMaterialTextures(){this.colorMap&&(this.material.setParameter("colorMap",this.colorMap),this.lighting&&this.normalMap&&this.material.setParameter("normalMap",this.normalMap))}_createMaterial(){const e=new y1(this);return e.name=`EmitterMaterial:${this.node.name}`,e.cull=lt,e.alphaWrite=!1,e.blendType=this.blendType,e.depthWrite=this.depthWrite,e}resetMaterial(){const e=this.material;e.setParameter("stretch",this.stretch),this._isAnimated()&&(e.setParameter("animTexTilesParams",this.animTilesParams),e.setParameter("animTexParams",this.animParams),e.setParameter("animTexIndexParams",this.animIndexParams)),e.setParameter("colorMult",this.intensity),this.useCpu||(e.setParameter("internalTex0",this.internalTex0),e.setParameter("internalTex1",this.internalTex1),e.setParameter("internalTex2",this.internalTex2),e.setParameter("internalTex3",this.internalTex3)),e.setParameter("colorParam",this.colorParam),e.setParameter("numParticles",this.numParticles),e.setParameter("numParticlesPot",this.numParticlesPot),e.setParameter("lifetime",this.lifetime),e.setParameter("rate",this.rate),e.setParameter("rateDiv",this.rate2-this.rate),e.setParameter("seed",this.seed),e.setParameter("scaleDivMult",this.scaleUMax[0]),e.setParameter("alphaDivMult",this.alphaUMax[0]),e.setParameter("radialSpeedDivMult",this.radialSpeedUMax[0]),e.setParameter("graphNumSamples",this.precision),e.setParameter("graphSampleSize",1/this.precision),e.setParameter("emitterScale",new Float32Array([1,1,1])),this.pack8&&(this._gpuUpdater._setInputBounds(),e.setParameter("inBoundsSize",this._gpuUpdater.inBoundsSizeUniform),e.setParameter("inBoundsCenter",this._gpuUpdater.inBoundsCenterUniform),e.setParameter("maxVel",this.maxVel)),this.wrap&&this.wrapBounds&&(this.wrapBoundsUniform[0]=this.wrapBounds.x,this.wrapBoundsUniform[1]=this.wrapBounds.y,this.wrapBoundsUniform[2]=this.wrapBounds.z,e.setParameter("wrapBounds",this.wrapBoundsUniform)),this._setMaterialTextures(),this.depthSoftening>0&&e.setParameter("softening",1/(this.depthSoftening*this.depthSoftening*100)),this.stretch>0&&(e.cull=lt),this._compParticleFaceParams()}_compParticleFaceParams(){let e,t;if(this.orientation===Lc)e=new Float32Array([1,0,0]),t=new Float32Array([0,0,1]);else{let s;this.orientation===EM?s=this.particleNormal.normalize():s=(this.node===null?$.IDENTITY:this.node.getWorldTransform()).transformVector(this.particleNormal).normalize();const i=new x(1,0,0);Math.abs(i.dot(s))===1&&i.set(0,0,1);const r=new x().cross(s,i).normalize();i.cross(r,s).normalize(),e=new Float32Array([i.x,i.y,i.z]),t=new Float32Array([r.x,r.y,r.z])}this.material.setParameter("faceTangent",e),this.material.setParameter("faceBinorm",t)}getVertexInfo(){const e=[];return this.useCpu?e.push({semantic:tp,components:4,type:Le},{semantic:Ac,components:4,type:Le},{semantic:d_,components:4,type:Le},{semantic:f_,components:1,type:Le},{semantic:u_,components:this.useMesh?4:2,type:Le}):(e.push({semantic:tp,components:4,type:Le}),this.useMesh&&e.push({semantic:Ac,components:2,type:Le})),e}_allocate(e){const t=e*this.numParticleVerts,s=e*this.numParticleIndices;if(this.vertexBuffer===void 0||this.vertexBuffer.getNumVertices()!==t){const i=this.getVertexInfo(),r=new Wt(this.graphicsDevice,i);this.vertexBuffer=new si(this.graphicsDevice,r,t,{usage:Sc}),this.indexBuffer=new ua(this.graphicsDevice,cr,s);const a=new Float32Array(this.vertexBuffer.lock());let n,l,h;if(this.useMesh){n=new Float32Array(this.mesh.vertexBuffer.lock()),l=n.length/this.mesh.vertexBuffer.numVertices;for(let f=0;f<this.mesh.vertexBuffer.format.elements.length;f++)if(this.mesh.vertexBuffer.format.elements[f].name===as){h=this.mesh.vertexBuffer.format.elements[f].offset/4;break}}for(let f=0;f<t;f++){const u=Math.floor(f/this.numParticleVerts);if(this.useMesh){const p=f%this.numParticleVerts;a[f*6]=n[p*l],a[f*6+1]=n[p*l+1],a[f*6+2]=n[p*l+2],a[f*6+3]=u,a[f*6+4]=n[p*l+h+0],a[f*6+5]=1-n[p*l+h+1]}else{const p=f%4;a[f*4]=yS[p][0],a[f*4+1]=yS[p][1],a[f*4+2]=0,a[f*4+3]=u}}this.useCpu&&(this.vbCPU=new Float32Array(a),this.vbOld=new Float32Array(this.vbCPU.length)),this.vertexBuffer.unlock(),this.useMesh&&this.mesh.vertexBuffer.unlock();let c=0;const d=new Uint32Array(this.indexBuffer.lock());if(this.useMesh){const f=this.mesh.indexBuffer[0];n=new Pc[f.format](f.lock())}for(let f=0;f<e;f++)if(this.useMesh)for(let u=0;u<this.numParticleIndices;u++)d[f*this.numParticleIndices+u]=n[u]+f*this.numParticleVerts;else{const u=f*4;d[c++]=u,d[c++]=u+1,d[c++]=u+2,d[c++]=u,d[c++]=u+2,d[c++]=u+3}this.indexBuffer.unlock(),this.useMesh&&this.mesh.indexBuffer[0].unlock()}}reset(){if(this.beenReset=!0,this.seed=Math.random(),this.material.setParameter("seed",this.seed),this.useCpu)for(let t=0;t<this.particleTexStart.length;t++)this.particleTex[t]=this.particleTexStart[t];else this._setMaterialTextures();this.resetWorldBounds(),this.resetTime();const e=this.loop;this.loop=!0,this.addTime(0,!1),this.loop=e,this.preWarm&&this.prewarm(this.lifetime)}prewarm(e){const t=e/this.lifetime,s=Math.min(Math.floor(t*this.precision),this.precision),i=e/s;for(let r=0;r<s;r++)this.addTime(i,!1)}resetTime(){this.endTime=b1(this)}finishFrame(){this.useCpu&&this.vertexBuffer.unlock()}addTime(e,t){const s=this.graphicsDevice;if(this.simTimeTotal+=e,this.calculateWorldBounds(),this._isAnimated()){const a=this.animTilesParams;a[0]=1/this.animTilesX,a[1]=1/this.animTilesY;const n=this.animParams;n[0]=this.animStartFrame,n[1]=this.animNumFrames*this.animSpeed,n[2]=this.animNumFrames-1,n[3]=this.animNumAnimations-1;const l=this.animIndexParams;l[0]=this.animIndex,l[1]=this.randomizeAnimIndex}this.scene&&this.camera!==this.scene._activeCamera&&(this.camera=this.scene._activeCamera,this.onChangeCamera()),this.emitterShape===Vs&&(ci[0]=this.emitterExtents.x!==0?this.emitterExtentsInner.x/this.emitterExtents.x:0,ci[1]=this.emitterExtents.y!==0?this.emitterExtentsInner.y/this.emitterExtents.y:0,ci[2]=this.emitterExtents.z!==0?this.emitterExtentsInner.z/this.emitterExtents.z:0,this.meshInstance.node===null?br.setTRS(x.ZERO,Q.IDENTITY,this.emitterExtents):br.setTRS(x.ZERO,this.meshInstance.node.getRotation(),bS.copy(this.emitterExtents).mul(this.meshInstance.node.localScale)));let i;const r=this.meshInstance.node===null?x.ONE:this.meshInstance.node.localScale;if(this.emitterScaleUniform[0]=r.x,this.emitterScaleUniform[1]=r.y,this.emitterScaleUniform[2]=r.z,this.material.setParameter("emitterScale",this.emitterScaleUniform),this.localSpace&&this.meshInstance.node&&(i=this.meshInstance.node.getPosition(),this.emitterPosUniform[0]=i.x,this.emitterPosUniform[1]=i.y,this.emitterPosUniform[2]=i.z,this.material.setParameter("emitterPos",this.emitterPosUniform)),this._compParticleFaceParams(),!this.useCpu)this._gpuUpdater.update(s,br,ci,e,t);else{const a=new Float32Array(this.vertexBuffer.lock());this._cpuUpdater.update(a,this.vbToSort,this.particleTex,br,ci,i,e,t)}this.loop||Date.now()>this.endTime&&(this.onFinished&&this.onFinished(),this.meshInstance.visible=!1),this.meshInstance&&(this.meshInstance.drawOrder=this.drawOrder)}_destroyResources(){this.particleTexIN?.destroy(),this.particleTexIN=null,this.particleTexOUT?.destroy(),this.particleTexOUT=null,this.particleTexStart&&this.particleTexStart.destroy&&(this.particleTexStart.destroy(),this.particleTexStart=null),this.rtParticleTexIN?.destroy(),this.rtParticleTexIN=null,this.rtParticleTexOUT?.destroy(),this.rtParticleTexOUT=null,this.internalTex0?.destroy(),this.internalTex0=null,this.internalTex1?.destroy(),this.internalTex1=null,this.internalTex2?.destroy(),this.internalTex2=null,this.internalTex3?.destroy(),this.internalTex3=null,this.colorParam?.destroy(),this.colorParam=null,this.vertexBuffer?.destroy(),this.vertexBuffer=void 0,this.indexBuffer?.destroy(),this.indexBuffer=void 0,this.material?.destroy(),this.material=null}destroy(){this.camera=null,this._destroyResources()}}class I1 extends ga{generateKey(e){const t=e.shaderDesc,s=t.vertexGLSL?$s(t.vertexGLSL):0,i=t.fragmentGLSL?$s(t.fragmentGLSL):0,r=t.vertexWGSL?$s(t.vertexWGSL):0,a=t.fragmentWGSL?$s(t.fragmentWGSL):0,n=ga.definesHash(e.defines),l=e.shaderChunks?.key??"";let h=`${t.uniqueName}_${n}_${s}_${i}_${r}_${a}_${l}`;return e.skin&&(h+="_skin"),e.useInstancing&&(h+="_inst"),e.useMorphPosition&&(h+="_morphp"),e.useMorphNormal&&(h+="_morphn"),e.useMorphTextureBasedInt&&(h+="_morphi"),h}createAttributesDefinition(e,t){const s=t.shaderDesc.attributes,i=s?{...s}:void 0;t.skin&&(i.vertex_boneWeights=Qs,i.vertex_boneIndices=Ft),(t.useMorphPosition||t.useMorphNormal)&&(i.morph_vertex_id=qn),e.attributes=i}createVertexDefinition(e,t,s,i){const r=t.shaderDesc,a=new Map(s);a.set("transformInstancingVS","");const n=new Map(t.defines);t.skin&&n.set("SKIN",!0),t.useInstancing&&n.set("INSTANCING",!0),(t.useMorphPosition||t.useMorphNormal)&&(n.set("MORPHING",!0),t.useMorphTextureBasedInt&&n.set("MORPHING_INT",!0),t.useMorphPosition&&n.set("MORPHING_POSITION",!0),t.useMorphNormal&&n.set("MORPHING_NORMAL",!0)),e.vertexCode=i?r.vertexWGSL:r.vertexGLSL,e.vertexIncludes=a,e.vertexDefines=n}createFragmentDefinition(e,t,s,i){const r=t.shaderDesc,a=new Map(s),n=new Map(t.defines);e.fragmentCode=i?r.fragmentWGSL:r.fragmentGLSL,e.fragmentIncludes=a,e.fragmentDefines=n}createShaderDefinition(e,t){const s=t.shaderDesc,i=e.isWebGPU&&!!s.vertexWGSL&&!!s.fragmentWGSL&&(t.shaderChunks?.useWGSL??!0),r={name:`ShaderMaterial-${s.uniqueName}`,shaderLanguage:i?Be:Ee,fragmentOutputTypes:s.fragmentOutputTypes,meshUniformBufferFormat:s.meshUniformBufferFormat,meshBindGroupFormat:s.meshBindGroupFormat},a=i?Be:Ee,n=Rc.merge(de.get(e,a),t.shaderChunks[a]);return this.createAttributesDefinition(r,t),this.createVertexDefinition(r,t,n,i),this.createFragmentDefinition(r,t,n,i),Et.createDefinition(e,r)}}const M1=new I1;class yl extends ql{constructor(e){super(),this.shaderDesc=e}set shaderDesc(e){if(this._shaderDesc=void 0,e&&(this._shaderDesc={uniqueName:e.uniqueName,attributes:e.attributes,fragmentOutputTypes:e.fragmentOutputTypes,vertexGLSL:e.vertexGLSL,fragmentGLSL:e.fragmentGLSL,vertexWGSL:e.vertexWGSL,fragmentWGSL:e.fragmentWGSL},e.vertexCode||e.fragmentCode||e.shaderLanguage)){const t=e.shaderLanguage??Ee;t===Ee?(this._shaderDesc.vertexGLSL=e.vertexCode,this._shaderDesc.fragmentGLSL=e.fragmentCode):t===Be&&(this._shaderDesc.vertexWGSL=e.vertexCode,this._shaderDesc.fragmentWGSL=e.fragmentCode)}this.clearVariants()}get shaderDesc(){return this._shaderDesc}copy(e){return super.copy(e),this.shaderDesc=e.shaderDesc,this}getShaderVariant(e){const{objDefs:t}=e,s={defines:vt.getCoreDefines(this,e),skin:(t&af)!==0,useInstancing:(t&nf)!==0,useMorphPosition:(t&of)!==0,useMorphNormal:(t&lf)!==0,useMorphTextureBasedInt:(t&hf)!==0,pass:e.pass,gamma:e.cameraShaderParams.shaderOutputGamma,toneMapping:e.cameraShaderParams.toneMapping,fog:e.cameraShaderParams.fog,shaderDesc:this.shaderDesc,shaderChunks:this.shaderChunks},i=new ff(e.viewUniformFormat,e.viewBindGroupFormat,e.vertexFormat),r=io(e.device);return r.register("shader-material",M1),r.getProgram("shader-material",s,i,this.userId)}}const D1={linear:"decodeLinear",srgb:"decodeGamma",rgbm:"decodeRGBM",rgbe:"decodeRGBE",rgbp:"decodeRGBP",xy:"unpackNormalXY",xyz:"unpackNormalXYZ"},R1={linear:"encodeLinear",srgb:"encodeGamma",rgbm:"encodeRGBM",rgbe:"encodeRGBE",rgbp:"encodeRGBP"};class ar{static decodeFunc(e){return D1[e]??"decodeGamma"}static encodeFunc(e){return R1[e]??"encodeGamma"}}const Lx=(o,e)=>{const t=e.length/3,s=o.length/3,i=new x,r=new x,a=new x,n=new x,l=new x,h=new x,c=[];for(let d=0;d<o.length;d++)c[d]=0;for(let d=0;d<t;d++){const f=e[d*3],u=e[d*3+1],p=e[d*3+2];i.set(o[f*3],o[f*3+1],o[f*3+2]),r.set(o[u*3],o[u*3+1],o[u*3+2]),a.set(o[p*3],o[p*3+1],o[p*3+2]),n.sub2(r,i),l.sub2(a,i),h.cross(n,l).normalize(),c[f*3]+=h.x,c[f*3+1]+=h.y,c[f*3+2]+=h.z,c[u*3]+=h.x,c[u*3+1]+=h.y,c[u*3+2]+=h.z,c[p*3]+=h.x,c[p*3+1]+=h.y,c[p*3+2]+=h.z}for(let d=0;d<s;d++){const f=c[d*3],u=c[d*3+1],p=c[d*3+2],m=1/Math.sqrt(f*f+u*u+p*p);c[d*3]*=m,c[d*3+1]*=m,c[d*3+2]*=m}return c},gr=(o,e,t,s)=>{const i=s.length/3,r=o.length/3,a=new x,n=new x,l=new x,h=new z,c=new z,d=new z,f=new x,u=new x,p=new Float32Array(r*3),m=new Float32Array(r*3),_=[];for(let S=0;S<i;S++){const b=s[S*3],E=s[S*3+1],T=s[S*3+2];a.set(o[b*3],o[b*3+1],o[b*3+2]),n.set(o[E*3],o[E*3+1],o[E*3+2]),l.set(o[T*3],o[T*3+1],o[T*3+2]),h.set(t[b*2],t[b*2+1]),c.set(t[E*2],t[E*2+1]),d.set(t[T*2],t[T*2+1]);const w=n.x-a.x,P=l.x-a.x,M=n.y-a.y,L=l.y-a.y,D=n.z-a.z,k=l.z-a.z,G=c.x-h.x,U=d.x-h.x,C=c.y-h.y,I=d.y-h.y,R=G*I-U*C;if(R===0)f.set(0,1,0),u.set(1,0,0);else{const O=1/R;f.set((I*w-C*P)*O,(I*M-C*L)*O,(I*D-C*k)*O),u.set((G*P-U*w)*O,(G*L-U*M)*O,(G*k-U*D)*O)}p[b*3+0]+=f.x,p[b*3+1]+=f.y,p[b*3+2]+=f.z,p[E*3+0]+=f.x,p[E*3+1]+=f.y,p[E*3+2]+=f.z,p[T*3+0]+=f.x,p[T*3+1]+=f.y,p[T*3+2]+=f.z,m[b*3+0]+=u.x,m[b*3+1]+=u.y,m[b*3+2]+=u.z,m[E*3+0]+=u.x,m[E*3+1]+=u.y,m[E*3+2]+=u.z,m[T*3+0]+=u.x,m[T*3+1]+=u.y,m[T*3+2]+=u.z}const g=new x,y=new x,A=new x,v=new x;for(let S=0;S<r;S++){A.set(e[S*3],e[S*3+1],e[S*3+2]),g.set(p[S*3],p[S*3+1],p[S*3+2]),y.set(m[S*3],m[S*3+1],m[S*3+2]);const b=A.dot(g);v.copy(A).mulScalar(b),v.sub2(g,v).normalize(),_[S*4]=v.x,_[S*4+1]=v.y,_[S*4+2]=v.z,v.cross(A,g),_[S*4+3]=v.dot(y)<0?-1:1}return _};class ya{calculateNormals(){this.normals=Lx(this.positions,this.indices)}calculateTangents(){this.tangents=gr(this.positions,this.normals,this.uvs,this.indices)}}const pp=4/64,CS=1-pp*2;class mp extends ya{constructor(e={}){super();const t=e.halfExtents??new x(.5,.5,.5),s=e.widthSegments??1,i=e.lengthSegments??1,r=e.heightSegments??1,a=e.yOffset??0,n=-t.y+a,l=t.y+a,h=[new x(-t.x,n,t.z),new x(t.x,n,t.z),new x(t.x,l,t.z),new x(-t.x,l,t.z),new x(t.x,n,-t.z),new x(-t.x,n,-t.z),new x(-t.x,l,-t.z),new x(t.x,l,-t.z)],c=[[0,1,3],[4,5,7],[3,2,6],[1,0,4],[1,4,2],[5,0,6]],d=[[0,0,1],[0,0,-1],[0,1,0],[0,-1,0],[1,0,0],[-1,0,0]],f={FRONT:0,BACK:1,TOP:2,BOTTOM:3,RIGHT:4,LEFT:5},u=[],p=[],m=[],_=[];let g=0;const y=(A,v,S)=>{const b=new x,E=new x,T=new x,w=new x;for(let P=0;P<=v;P++)for(let M=0;M<=S;M++){b.lerp(h[c[A][0]],h[c[A][1]],P/v),E.lerp(h[c[A][0]],h[c[A][2]],M/S),T.sub2(E,h[c[A][0]]),w.add2(b,T);let L=P/v,D=M/S;u.push(w.x,w.y,w.z),p.push(d[A][0],d[A][1],d[A][2]),m.push(L,1-D),L=L*CS+pp,D=D*CS+pp,L/=3,D/=3,L+=A%3/3,D+=Math.floor(A/3)/3,P<v&&M<S&&(_.push(g+S+1,g+1,g),_.push(g+S+1,g+S+2,g+1)),g++}};y(f.FRONT,s,r),y(f.BACK,s,r),y(f.TOP,s,i),y(f.BOTTOM,s,i),y(f.RIGHT,i,r),y(f.LEFT,i,r),this.positions=u,this.normals=p,this.uvs=m,this.uvs1=m,this.indices=_,e.calculateTangents&&(this.tangents=gr(u,p,m,_))}}class Ix extends ya{constructor(e={}){super();const t=e.radius??.5,s=e.latitudeBands??16,i=e.longitudeBands??16,r=[],a=[],n=[],l=[];for(let h=0;h<=s;h++){const c=h*Math.PI/s,d=Math.sin(c),f=Math.cos(c);for(let u=0;u<=i;u++){const p=u*2*Math.PI/i-Math.PI/2,m=Math.sin(p),g=Math.cos(p)*d,y=f,A=m*d,v=1-u/i,S=1-h/s;r.push(g*t,y*t,A*t),a.push(g,y,A),n.push(v,1-S)}}for(let h=0;h<s;++h)for(let c=0;c<i;++c){const d=h*(i+1)+c,f=d+i+1;l.push(d+1,f,d),l.push(d+1,f+1,f)}this.positions=r,this.normals=a,this.uvs=n,this.uvs1=n,this.indices=l,e.calculateTangents&&(this.tangents=gr(r,a,n,l))}}class O1 extends Ix{constructor(e={}){const s=e.latitudeBands??16,i=e.longitudeBands??16;super({radius:.5,latitudeBands:s,longitudeBands:i});const r=.1,a=.95,n=a*a,l=this.positions;for(let h=0;h<l.length;h+=3){const c=l[h]/.5;let d=l[h+1]/.5;const f=l[h+2]/.5;d<0&&(d*=.3,c*c+f*f<n&&(d=-.1)),d+=r,d*=.5,l[h+1]=d}}}class Ko{static create(e,t){switch(t){case OM:return Ko.box(e);case NM:return Ko.dome(e)}return Ko.infinite(e)}static infinite(e){return De.fromGeometry(e,new mp(e))}static box(e){return De.fromGeometry(e,new mp({yOffset:.5}))}static dome(e){const t=new O1({latitudeBands:50,longitudeBands:50});return t.normals=void 0,t.uvs=void 0,De.fromGeometry(e,t)}}class N1{constructor(e,t,s,i,r){this.meshInstance=null,this._depthWrite=!1;const a=new yl({uniqueName:"SkyMaterial",vertexGLSL:de.get(e,Ee).get("skyboxVS"),fragmentGLSL:de.get(e,Ee).get("skyboxPS"),vertexWGSL:de.get(e,Be).get("skyboxVS"),fragmentWGSL:de.get(e,Be).get("skyboxPS"),attributes:{aPosition:ue}});a.setDefine("{SKYBOX_DECODE_FNC}",ar.decodeFunc(i.encoding)),r!==sc&&a.setDefine("SKYMESH",""),i.cubemap&&a.setDefine("SKY_CUBEMAP",""),a.setParameter("skyboxHighlightMultiplier",t.skyboxHighlightMultiplier),i.cubemap?a.setParameter("texture_cubeMap",i):(a.setParameter("texture_envAtlas",i),a.setParameter("mipLevel",t.skyboxMip)),a.cull=qo,a.depthWrite=this._depthWrite;const n=t.layers.getLayerById(k_);if(n){const l=Ko.create(e,r),h=new Oe(l,a,s);this.meshInstance=h,h.cull=!1,h.pick=!1,n.addMeshInstances([h]),this.skyLayer=n}}destroy(){this.meshInstance&&(this.skyLayer&&this.skyLayer.removeMeshInstances([this.meshInstance]),this.meshInstance.destroy(),this.meshInstance=null)}set depthWrite(e){this._depthWrite=e,this.meshInstance&&(this.meshInstance.material.depthWrite=e)}get depthWrite(){return this._depthWrite}}class F1{constructor(e){this._type=sc,this._center=new x(0,1,0),this.skyMesh=null,this._depthWrite=!1,this.node=new ze("SkyMeshNode"),this.device=e.device,this.scene=e,this.center=new x(0,1,0),this.centerArray=new Float32Array(3),this.projectedSkydomeCenterId=this.device.scope.resolve("projectedSkydomeCenter")}applySettings(e){this.type=e.skyType??sc,this.node.setLocalPosition(new x(e.skyMeshPosition??[0,0,0])),this.node.setLocalEulerAngles(new x(e.skyMeshRotation??[0,0,0])),this.node.setLocalScale(new x(e.skyMeshScale??[1,1,1])),e.skyCenter&&(this._center=new x(e.skyCenter))}set type(e){this._type!==e&&(this._type=e,this.scene.updateShaders=!0,this.updateSkyMesh())}get type(){return this._type}set center(e){this._center.copy(e)}get center(){return this._center}set depthWrite(e){this._depthWrite!==e&&(this._depthWrite=e,this.skyMesh&&(this.skyMesh.depthWrite=e))}get depthWrite(){return this._depthWrite}updateSkyMesh(){const e=this.scene._getSkyboxTex();e&&(this.resetSkyMesh(),this.skyMesh=new N1(this.device,this.scene,this.node,e,this.type),this.skyMesh.depthWrite=this._depthWrite,this.scene.fire("set:skybox",e))}resetSkyMesh(){this.skyMesh?.destroy(),this.skyMesh=null}update(){if(this.type!==sc){const{center:e,centerArray:t}=this,s=new x;this.node.getWorldTransform().transformPoint(e,s),t[0]=s.x,t[1]=s.y,t[2]=s.z,this.projectedSkydomeCenterId.setValue(t)}}}const Nc=new ze;Nc.worldTransform=$.IDENTITY;Nc._dirtyWorld=Nc._dirtyNormal=!1;class k1{constructor(e,t,s){this.material=t,this.layer=s,this.positions=[],this.colors=[],this.mesh=new De(e),this.meshInstance=null}addLines(e,t){const s=this.positions,i=e.length;for(let a=0;a<i;a++){const n=e[a];s.push(n.x,n.y,n.z)}const r=this.colors;if(t.length)for(let a=0;a<i;a++){const n=t[a];r.push(n.r,n.g,n.b,n.a)}else for(let a=0;a<i;a++)r.push(t.r,t.g,t.b,t.a)}addLinesArrays(e,t){const s=this.positions;for(let r=0;r<e.length;r+=3)s.push(e[r],e[r+1],e[r+2]);const i=this.colors;if(t.length)for(let r=0;r<t.length;r+=4)i.push(t[r],t[r+1],t[r+2],t[r+3]);else{const r=e.length/3;for(let a=0;a<r;a++)i.push(t.r,t.g,t.b,t.a)}}onPreRender(e,t){this.positions.length>0&&this.material.transparent===t&&(this.mesh.setPositions(this.positions),this.mesh.setColors(this.colors),this.mesh.update(zd,!1),this.meshInstance||(this.meshInstance=new Oe(this.mesh,this.material,Nc)),e.push(this.meshInstance))}clear(){this.positions.length=0,this.colors.length=0}}class U1{constructor(e){this.device=e,this.map=new Map}getBatch(e,t){let s=this.map.get(e);return s||(s=new k1(this.device,e,t),this.map.set(e,s)),s}onPreRender(e,t){this.map.forEach(s=>{s.onPreRender(e,t)})}clear(){this.map.forEach(e=>e.clear())}}const Kt=[],Wa=new x;class B1{constructor(e){this.shaderDescs=new Map,this.device=e,this.quadMesh=null,this.textureShader=null,this.depthTextureShader=null,this.cubeLocalPos=null,this.cubeWorldPos=null,this.batchesMap=new Map,this.allBatches=new Set,this.updatedLayers=new Set,this._materialDepth=null,this._materialNoDepth=null,this.layerMeshInstances=new Map}createMaterial(e){const t=new yl({uniqueName:"ImmediateLine",vertexGLSL:de.get(this.device,Ee).get("immediateLineVS"),fragmentGLSL:de.get(this.device,Ee).get("immediateLinePS"),vertexWGSL:de.get(this.device,Be).get("immediateLineVS"),fragmentWGSL:de.get(this.device,Be).get("immediateLinePS"),attributes:{vertex_position:ue,vertex_color:gt}});return t.blendType=ii,t.depthTest=e,t.update(),t}get materialDepth(){return this._materialDepth||(this._materialDepth=this.createMaterial(!0)),this._materialDepth}get materialNoDepth(){return this._materialNoDepth||(this._materialNoDepth=this.createMaterial(!1)),this._materialNoDepth}getBatch(e,t){let s=this.batchesMap.get(e);s||(s=new U1(this.device),this.batchesMap.set(e,s)),this.allBatches.add(s);const i=t?this.materialDepth:this.materialNoDepth;return s.getBatch(i,e)}getShaderDesc(e,t,s){return this.shaderDescs.has(e)||this.shaderDescs.set(e,{uniqueName:`DebugShader:${e}`,vertexGLSL:`
					attribute vec2 vertex_position;
					uniform mat4 matrix_model;
					varying vec2 uv0;
					void main(void) {
						gl_Position = matrix_model * vec4(vertex_position, 0, 1);
						uv0 = vertex_position.xy + 0.5;
					}
				`,vertexWGSL:`
					attribute vertex_position: vec2f;
					uniform matrix_model: mat4x4f;
					varying uv0: vec2f;
					@vertex fn vertexMain(input: VertexInput) -> VertexOutput {
						var output: VertexOutput;
						output.position = uniform.matrix_model * vec4f(input.vertex_position, 0.0, 1.0);
						output.uv0 = input.vertex_position.xy + vec2f(0.5);
						return output;
					}
				`,fragmentGLSL:t,fragmentWGSL:s,attributes:{vertex_position:ue}}),this.shaderDescs.get(e)}getTextureShaderDesc(e){const t=ar.decodeFunc(e);return this.getShaderDesc(`textureShader-${e}`,`
			#include "gammaPS"
			varying vec2 uv0;
			uniform sampler2D colorMap;
			void main (void) {
				vec3 linearColor = ${t}(texture2D(colorMap, uv0));
				gl_FragColor = vec4(gammaCorrectOutput(linearColor), 1);
			}
		`,`
			#include "gammaPS"
			varying uv0: vec2f;
			var colorMap: texture_2d<f32>;
			var colorMapSampler: sampler;
			@fragment fn fragmentMain(input : FragmentInput) -> FragmentOutput {
				var output: FragmentOutput;
				let sampledTex = textureSample(colorMap, colorMapSampler, input.uv0);
				let linearColor: vec3f = ${t}(sampledTex);
				output.color = vec4f(gammaCorrectOutput(linearColor), 1.0);
				return output;
			}
		`)}getUnfilterableTextureShaderDesc(){return this.getShaderDesc("textureShaderUnfilterable",`
			varying vec2 uv0;
			uniform highp sampler2D colorMap;
			void main (void) {
				ivec2 uv = ivec2(uv0 * textureSize(colorMap, 0));
				gl_FragColor = vec4(texelFetch(colorMap, uv, 0).xyz, 1);
			}
		`,`
			varying uv0: vec2f;
			var colorMap: texture_2d<uff>;
			@fragment fn fragmentMain(input : FragmentInput) -> FragmentOutput {
				var output: FragmentOutput;
				let uv : vec2<i32> = vec2<i32>(input.uv0 * vec2f(textureDimensions(colorMap, 0)));
				let fetchedColor : vec4f = textureLoad(colorMap, uv, 0);
				output.color = vec4f(fetchedColor.xyz, 1.0);
				return output;
			}
		`)}getDepthTextureShaderDesc(){return this.getShaderDesc("depthTextureShader",`
			#include "screenDepthPS"
			#include "gammaPS"
			varying vec2 uv0;
			void main() {
				float depth = getLinearScreenDepth(getImageEffectUV(uv0)) * camera_params.x;
				gl_FragColor = vec4(gammaCorrectOutput(vec3(depth)), 1.0);
			}
		`,`
			#include "screenDepthPS"
			#include "gammaPS"
			varying uv0: vec2f;
			@fragment fn fragmentMain(input: FragmentInput) -> FragmentOutput {
				var output: FragmentOutput;
				let depth: f32 = getLinearScreenDepth(getImageEffectUV(input.uv0)) * uniform.camera_params.x;
				output.color = vec4f(gammaCorrectOutput(vec3f(depth)), 1.0);
				return output;
			}
		`)}getQuadMesh(){return this.quadMesh||(this.quadMesh=new De(this.device),this.quadMesh.setPositions([-.5,-.5,0,.5,-.5,0,-.5,.5,0,.5,.5,0]),this.quadMesh.update(dr)),this.quadMesh}drawMesh(e,t,s,i,r){if(!i){const n=this.getGraphNode(t);i=new Oe(s,e,n)}let a=this.layerMeshInstances.get(r);a||(a=[],this.layerMeshInstances.set(r,a)),a.push(i)}drawWireAlignedBox(e,t,s,i,r,a){if(a){const l=(h,c,d)=>{Wa.set(h,c,d),a.transformPoint(Wa,Wa),Kt.push(Wa.x,Wa.y,Wa.z)};l(e.x,e.y,e.z),l(e.x,t.y,e.z),l(e.x,t.y,e.z),l(t.x,t.y,e.z),l(t.x,t.y,e.z),l(t.x,e.y,e.z),l(t.x,e.y,e.z),l(e.x,e.y,e.z),l(e.x,e.y,t.z),l(e.x,t.y,t.z),l(e.x,t.y,t.z),l(t.x,t.y,t.z),l(t.x,t.y,t.z),l(t.x,e.y,t.z),l(t.x,e.y,t.z),l(e.x,e.y,t.z),l(e.x,e.y,e.z),l(e.x,e.y,t.z),l(e.x,t.y,e.z),l(e.x,t.y,t.z),l(t.x,t.y,e.z),l(t.x,t.y,t.z),l(t.x,e.y,e.z),l(t.x,e.y,t.z)}else Kt.push(e.x,e.y,e.z,e.x,t.y,e.z,e.x,t.y,e.z,t.x,t.y,e.z,t.x,t.y,e.z,t.x,e.y,e.z,t.x,e.y,e.z,e.x,e.y,e.z,e.x,e.y,t.z,e.x,t.y,t.z,e.x,t.y,t.z,t.x,t.y,t.z,t.x,t.y,t.z,t.x,e.y,t.z,t.x,e.y,t.z,e.x,e.y,t.z,e.x,e.y,e.z,e.x,e.y,t.z,e.x,t.y,e.z,e.x,t.y,t.z,t.x,t.y,e.z,t.x,t.y,t.z,t.x,e.y,e.z,t.x,e.y,t.z);this.getBatch(r,i).addLinesArrays(Kt,s),Kt.length=0}drawWireSphere(e,t,s,i,r,a){const n=2*Math.PI/i;let l=0;for(let c=0;c<i;c++){const d=Math.sin(l),f=Math.cos(l);l+=n;const u=Math.sin(l),p=Math.cos(l);Kt.push(e.x+t*d,e.y,e.z+t*f),Kt.push(e.x+t*u,e.y,e.z+t*p),Kt.push(e.x+t*d,e.y+t*f,e.z),Kt.push(e.x+t*u,e.y+t*p,e.z),Kt.push(e.x,e.y+t*d,e.z+t*f),Kt.push(e.x,e.y+t*u,e.z+t*p)}this.getBatch(a,r).addLinesArrays(Kt,s),Kt.length=0}getGraphNode(e){const t=new ze("ImmediateDebug");return t.worldTransform=e,t._dirtyWorld=t._dirtyNormal=!1,t}onPreRenderLayer(e,t,s){if(this.batchesMap.forEach((i,r)=>{r===e&&i.onPreRender(t,s)}),!this.updatedLayers.has(e)){this.updatedLayers.add(e);const i=this.layerMeshInstances.get(e);if(i){for(let r=0;r<i.length;r++)t.push(i[r]);i.length=0}}}onPostRender(){this.allBatches.forEach(e=>e.clear()),this.allBatches.clear(),this.updatedLayers.clear()}}const PS=2.399963229728653,Yl={circlePoint(o){const e=Math.sqrt(Math.random()),t=Math.random()*2*Math.PI;o.x=e*Math.cos(t),o.y=e*Math.sin(t)},circlePointDeterministic(o,e,t){const s=e*PS,i=Math.sqrt(e)/Math.sqrt(t);o.x=i*Math.cos(s),o.y=i*Math.sin(s)},spherePointDeterministic(o,e,t,s=0,i=1){s=1-2*s,i=1-2*i;const r=B.lerp(s,i,e/t),a=Math.sqrt(1-r*r),n=PS*e;o.x=Math.cos(n)*a,o.y=r,o.z=Math.sin(n)*a},radicalInverse(o){let e=(o<<16|o>>>16)>>>0;return e=((e&1431655765)<<1|(e&2863311530)>>>1)>>>0,e=((e&858993459)<<2|(e&3435973836)>>>2)>>>0,e=((e&252645135)<<4|(e&4042322160)>>>4)>>>0,e=((e&16711935)<<8|(e&4278255360)>>>8)>>>0,e*23283064365386963e-26}},LS=o=>{switch(o){case sp:return"Cubemap";case LL:return"Octahedral";default:return"Equirect"}},Lh=(o,e,t)=>{if(o<=0)e[t+0]=0,e[t+1]=0,e[t+2]=0,e[t+3]=0;else if(o>=1)e[t+0]=255,e[t+1]=0,e[t+2]=0,e[t+3]=0;else{let s=1*o%1,i=255*o%1,r=65025*o%1;const a=16581375*o%1;s-=i/255,i-=r/255,r-=a/255,e[t+0]=Math.min(255,Math.floor(s*256)),e[t+1]=Math.min(255,Math.floor(i*256)),e[t+2]=Math.min(255,Math.floor(r*256)),e[t+3]=Math.min(255,Math.floor(a*256))}},V1=o=>{const e=o.length,t=Math.min(e,512),s=Math.ceil(e/t),i=new Uint8Array(t*s*4);let r=0;for(let a=0;a<e;a+=4)Lh(o[a+0]*.5+.5,i,r+0),Lh(o[a+1]*.5+.5,i,r+4),Lh(o[a+2]*.5+.5,i,r+8),Lh(o[a+3]/8,i,r+12),r+=16;return{width:t,height:s,data:i}},z1=(o,e,t,s)=>{const i=t*2*Math.PI,r=Math.pow(1-e,1/(s+1)),a=Math.sqrt(1-r*r);o.set(Math.cos(i)*a,Math.sin(i)*a,r).normalize()},H1=(o,e,t)=>{const s=t*2*Math.PI,i=Math.sqrt(1-e),r=Math.sqrt(e);o.set(Math.cos(s)*r,Math.sin(s)*r,i).normalize()},G1=(o,e,t,s)=>{const i=t*2*Math.PI,r=Math.sqrt((1-e)/(1+(s*s-1)*e)),a=Math.sqrt(1-r*r);o.set(Math.cos(i)*a,Math.sin(i)*a,r).normalize()},W1=(o,e)=>{const t=o*e,s=e/(1-o*o+t*t);return s*s*(1/Math.PI)},$1=(o,e)=>{const t=new x,s=[];for(let i=0;i<o;++i)z1(t,i/o,Yl.radicalInverse(i),e),s.push(t.x,t.y,t.z,0);return s},X1=(o,e)=>{const t=e/o,s=new x,i=[];for(let r=0;r<o;++r){H1(s,r/o,Yl.radicalInverse(r));const a=s.z/Math.PI,n=.5*Math.log2(t/a);i.push(s.x,s.y,s.z,n)}return i},q1={16:{2:26,8:20,32:17,128:16,512:16},32:{2:53,8:40,32:34,128:32,512:32},128:{2:214,8:163,32:139,128:130,512:128},1024:{2:1722,8:1310,32:1114,128:1041,512:1025}},Y1=(o,e)=>{const t=q1[o];return t&&t[e]||o},j1=(o,e,t)=>{const s=t/o,i=1-Math.log2(e)/11,r=i*i,a=new x,n=new x,l=new x(0,0,1),h=[],c=Y1(o,e);for(let d=0;d<c;++d){G1(a,d/c,Yl.radicalInverse(d),r);const f=a.z;if(n.set(a.x,a.y,a.z).mulScalar(2*f).sub(l),n.z>0){const u=W1(Math.min(1,f),r)/4+.001,p=.5*Math.log2(s/u);h.push(n.x,n.y,n.z,p)}}for(;h.length<o*4;)h.push(0,0,0,0);return h},K1=(o,e,t)=>{const s=V1(t);return new ae(o,{name:e,width:s.width,height:s.height,mipmaps:!1,minFilter:pe,magFilter:pe,levels:[s.data]})};class Mx{constructor(e=!0){this.map=new Map,this.destroyContent=e}destroy(){this.destroyContent&&this.map.forEach((e,t)=>{e.destroy()})}get(e,t){if(!this.map.has(e)){const s=t();return this.map.set(e,s),s}return this.map.get(e)}}const Z1=new Mx(!1),Q1=new Tt,eg=(o,e,t)=>Q1.get(o,()=>new Mx).get(e,()=>K1(o,e,Z1.get(e,t))),J1=(o,e,t)=>{const s=`lambert-samples-${e}-${t}`;return eg(o,s,()=>X1(e,t))},eR=(o,e,t)=>{const s=`phong-samples-${e}-${t}`;return eg(o,s,()=>$1(e,t))},tR=(o,e,t,s)=>{const i=`ggx-samples-${e}-${t}-${s}`;return eg(o,i,()=>j1(e,t,s))};function di(o,e,t={}){const s=t.seamPixels??0,i=(t.rect?.z??e.width)-s*2,r=(t.rect?.w??e.height)-s*2;if(i<1||r<1)return!1;const a={none:"reproject",lambert:"prefilterSamplesUnweighted",phong:"prefilterSamplesUnweighted",ggx:"prefilterSamples"},n=t.hasOwnProperty("specularPower")?t.specularPower:1,l=t.hasOwnProperty("face")?t.face:null,h=t.hasOwnProperty("distribution")?t.distribution:n===1?"none":"phong",c=a[h]||"reproject",d=c.startsWith("prefilterSamples"),f=ar.decodeFunc(o.encoding),u=ar.encodeFunc(e.encoding),p=`sample${LS(o.projection)}`,m=`getDirection${LS(e.projection)}`,_=t.hasOwnProperty("numSamples")?t.numSamples:1024,g=`ReprojectShader:${c}_${f}_${u}_${p}_${m}_${_}`,y=o.device;let A=io(y).getCachedShader(g);if(!A){const T=new Map;d&&T.set("USE_SAMPLES_TEX",""),o.cubemap&&T.set("CUBEMAP_SOURCE",""),T.set("{PROCESS_FUNC}",c),T.set("{DECODE_FUNC}",f),T.set("{ENCODE_FUNC}",u),T.set("{SOURCE_FUNC}",p),T.set("{TARGET_FUNC}",m),T.set("{NUM_SAMPLES}",_),T.set("{NUM_SAMPLES_SQRT}",Math.round(Math.sqrt(_)).toFixed(1));const w=y.isWebGPU,P=de.get(y,w?Be:Ee),M=new Map;M.set("decodePS",P.get("decodePS")),M.set("encodePS",P.get("encodePS")),A=vt.createShader(y,{uniqueName:g,attributes:{vertex_position:ue},vertexChunk:"reprojectVS",fragmentChunk:"reprojectPS",fragmentIncludes:M,fragmentDefines:T})}y.setBlendState(dt.NOBLEND),y.scope.resolve(o.cubemap?"sourceCube":"sourceTex").setValue(o);const S=y.scope.resolve("params"),b=y.scope.resolve("uvMod");s>0?b.setValue([(i+s*2)/i,(r+s*2)/r,-s/i,-s/r]):b.setValue([1,1,0,0]);const E=[0,e.width*e.height*(e.cubemap?6:1),o.width*o.height*(o.cubemap?6:1)];if(d){const T=o.width*o.height*(o.cubemap?6:1),w=h==="ggx"?tR(y,_,n,T):h==="lambert"?J1(y,_,T):eR(y,_,n);y.scope.resolve("samplesTex").setValue(w),y.scope.resolve("samplesTexInverseSize").setValue([1/w.width,1/w.height])}for(let T=0;T<(e.cubemap?6:1);T++)if(l===null||T===l){const w=new ct({colorBuffer:e,face:T,depth:!1,flipY:y.isWebGPU});E[0]=T,S.setValue(E),fr(y,w,A,t?.rect),w.destroy()}return!0}const uu=(o,e=0)=>1+Math.floor(Math.log2(Math.max(o,e))),sR=o=>o.textureHalfFloatRenderable,iR=o=>o.textureFloatRenderable,rR=o=>sR(o)?et:iR(o)?ft:Ae,aR=o=>Ae,nR=(o,e,t,s)=>new ae(o,{name:`lighting-${e}`,cubemap:!0,width:e,height:e,format:t,type:fl,addressU:te,addressV:te,mipmaps:!1});class Dx{static generateSkyboxCubemap(e,t){const s=e.device,i=nR(s,t||(e.cubemap?e.width:e.width/4),Ae);return di(e,i,{numSamples:1024}),i}static generateLightingSource(e,t){const s=e.device,i=rR(s),r=t?.target||new ae(s,{name:"lighting-source",cubemap:!0,width:t?.size||128,height:t?.size||128,format:i,type:i===Ae?fl:ti,addressU:te,addressV:te,mipmaps:!0});return di(e,r,{numSamples:e.mipmaps?1:1024}),r}static generateAtlas(e,t){const s=e.device,i=aR(),r=t?.target||new ae(s,{name:"envAtlas",width:t?.size||512,height:t?.size||512,format:i,type:fl,projection:dv,addressU:te,addressV:te,mipmaps:!1}),a=r.width/512,n=new K(0,0,512*a,256*a),l=uu(256)-uu(4);for(let h=0;h<l;++h)di(e,r,{numSamples:1,rect:n,seamPixels:a}),n.x+=n.w,n.y+=n.w,n.z=Math.max(1,Math.floor(n.z*.5)),n.w=Math.max(1,Math.floor(n.w*.5));n.set(0,256*a,256*a,128*a);for(let h=1;h<7;++h)di(e,r,{numSamples:t?.numReflectionSamples||1024,distribution:t?.distribution||"ggx",specularPower:Math.max(1,2048>>h*2),rect:n,seamPixels:a}),n.y+=n.w,n.z=Math.max(1,Math.floor(n.z*.5)),n.w=Math.max(1,Math.floor(n.w*.5));return n.set(128*a,384*a,64*a,32*a),di(e,r,{numSamples:t?.numAmbientSamples||2048,distribution:"lambert",rect:n,seamPixels:a}),r}static generatePrefilteredAtlas(e,t){const s=e[0].device,i=e[0].format,r=e[0].type,a=t?.target||new ae(s,{name:"envPrefilteredAtlas",width:t?.size||512,height:t?.size||512,format:i,type:r,projection:dv,addressU:te,addressV:te,mipmaps:!1}),n=a.width/512,l=new K(0,0,512*n,256*n),h=uu(512);for(let c=0;c<h;++c)di(e[0],a,{numSamples:1,rect:l,seamPixels:n}),l.x+=l.w,l.y+=l.w,l.z=Math.max(1,Math.floor(l.z*.5)),l.w=Math.max(1,Math.floor(l.w*.5));l.set(0,256*n,256*n,128*n);for(let c=1;c<e.length;++c)di(e[c],a,{numSamples:1,rect:l,seamPixels:n}),l.y+=l.w,l.z=Math.max(1,Math.floor(l.z*.5)),l.w=Math.max(1,Math.floor(l.w*.5));return l.set(128*n,384*n,64*n,32*n),t?.legacyAmbient?di(e[5],a,{numSamples:1,rect:l,seamPixels:n}):di(e[0],a,{numSamples:t?.numSamples||2048,distribution:"lambert",rect:l,seamPixels:n}),a}}class oR{constructor(){this.type=po,this.color=new q(0,0,0),this.density=0,this.start=1,this.end=1e3}}const Os=class Os extends ne{constructor(e){super(),this.ambientBake=!1,this.ambientBakeOcclusionBrightness=0,this.ambientBakeOcclusionContrast=0,this.ambientLight=new q(0,0,0),this.ambientLuminance=0,this.exposure=1,this.lightmapSizeMultiplier=1,this.lightmapMaxResolution=2048,this.lightmapMode=ec,this.lightmapFilterEnabled=!1,this.lightmapHDR=!1,this.root=null,this.physicalUnits=!1,this._envAtlas=null,this._skyboxCubeMap=null,this._fogParams=new oR,this.forcePassThroughSpecular=!1,this.device=e,this._gravity=new x(0,-9.8,0),this._layers=null,this._prefilteredCubemaps=[],this._internalEnvAtlas=null,this._skyboxIntensity=1,this._skyboxLuminance=0,this._skyboxMip=0,this._skyboxHighlightMultiplier=1,this._skyboxRotationShaderInclude=!1,this._skyboxRotation=new Q,this._skyboxRotationMat3=new Ks,this._skyboxRotationMat4=new $,this._ambientBakeNumSamples=1,this._ambientBakeSpherePart=.4,this._lightmapFilterRange=10,this._lightmapFilterSmoothness=.2,this._clusteredLightingEnabled=!0,this._lightingParams=new wx(this.device.supportsAreaLights,this.device.maxTextureSize,()=>{this.updateShaders=!0}),this._sky=new F1(this),this._stats={meshInstances:0,lights:0,dynamicLights:0,bakedLights:0,updateShadersTime:0},this.updateShaders=!0,this._shaderVersion=0,this.immediate=new B1(this.device)}get defaultDrawLayer(){return this.layers.getLayerById(U_)}set ambientBakeNumSamples(e){this._ambientBakeNumSamples=B.clamp(Math.floor(e),1,255)}get ambientBakeNumSamples(){return this._ambientBakeNumSamples}set ambientBakeSpherePart(e){this._ambientBakeSpherePart=B.clamp(e,.001,1)}get ambientBakeSpherePart(){return this._ambientBakeSpherePart}set clusteredLightingEnabled(e){if(!(this.device.isWebGPU&&!e)){if(!this._clusteredLightingEnabled&&e){console.error("Turning on disabled clustered lighting is not currently supported");return}this._clusteredLightingEnabled=e}}get clusteredLightingEnabled(){return this._clusteredLightingEnabled}set envAtlas(e){e!==this._envAtlas&&(this._envAtlas=e,e&&(e.addressU=te,e.addressV=te,e.minFilter=Ze,e.magFilter=Ze,e.mipmaps=!1),this._prefilteredCubemaps=[],this._internalEnvAtlas&&(this._internalEnvAtlas.destroy(),this._internalEnvAtlas=null),this._resetSkyMesh())}get envAtlas(){return this._envAtlas}set layers(e){const t=this._layers;this._layers=e,this.fire("set:layers",t,e)}get layers(){return this._layers}get sky(){return this._sky}get lighting(){return this._lightingParams}get fog(){return this._fogParams}set lightmapFilterRange(e){this._lightmapFilterRange=Math.max(e,.001)}get lightmapFilterRange(){return this._lightmapFilterRange}set lightmapFilterSmoothness(e){this._lightmapFilterSmoothness=Math.max(e,.001)}get lightmapFilterSmoothness(){return this._lightmapFilterSmoothness}set prefilteredCubemaps(e){e=e||[];const t=this._prefilteredCubemaps;(t.length!==e.length||t.some((i,r)=>i!==e[r]))&&(e.length===6&&e.every(r=>!!r)?(this._internalEnvAtlas=Dx.generatePrefilteredAtlas(e,{target:this._internalEnvAtlas}),this._envAtlas=this._internalEnvAtlas):(this._internalEnvAtlas&&(this._internalEnvAtlas.destroy(),this._internalEnvAtlas=null),this._envAtlas=null),this._prefilteredCubemaps=e.slice(),this._resetSkyMesh())}get prefilteredCubemaps(){return this._prefilteredCubemaps}set skybox(e){e!==this._skyboxCubeMap&&(this._skyboxCubeMap=e,this._resetSkyMesh())}get skybox(){return this._skyboxCubeMap}set skyboxIntensity(e){e!==this._skyboxIntensity&&(this._skyboxIntensity=e,this._resetSkyMesh())}get skyboxIntensity(){return this._skyboxIntensity}set skyboxLuminance(e){e!==this._skyboxLuminance&&(this._skyboxLuminance=e,this._resetSkyMesh())}get skyboxLuminance(){return this._skyboxLuminance}set skyboxMip(e){e!==this._skyboxMip&&(this._skyboxMip=e,this._resetSkyMesh())}get skyboxMip(){return this._skyboxMip}set skyboxHighlightMultiplier(e){e!==this._skyboxHighlightMultiplier&&(this._skyboxHighlightMultiplier=e,this._resetSkyMesh())}get skyboxHighlightMultiplier(){return this._skyboxHighlightMultiplier}set skyboxRotation(e){if(!this._skyboxRotation.equals(e)){const t=e.equals(Q.IDENTITY);this._skyboxRotation.copy(e),t?this._skyboxRotationMat3.setIdentity():(this._skyboxRotationMat4.setTRS(x.ZERO,e,x.ONE),this._skyboxRotationMat3.invertMat4(this._skyboxRotationMat4)),!this._skyboxRotationShaderInclude&&!t&&(this._skyboxRotationShaderInclude=!0,this._resetSkyMesh())}}get skyboxRotation(){return this._skyboxRotation}destroy(){this._resetSkyMesh(),this.root=null,this.off()}drawLine(e,t,s=q.WHITE,i=!0,r=this.defaultDrawLayer){this.immediate.getBatch(r,i).addLines([e,t],[s,s])}drawLines(e,t,s=!0,i=this.defaultDrawLayer){this.immediate.getBatch(i,s).addLines(e,t)}drawLineArrays(e,t,s=!0,i=this.defaultDrawLayer){this.immediate.getBatch(i,s).addLinesArrays(e,t)}applySettings(e){const t=e.physics,s=e.render;this._gravity.set(t.gravity[0],t.gravity[1],t.gravity[2]),this.ambientLight.set(s.global_ambient[0],s.global_ambient[1],s.global_ambient[2]),this.ambientLuminance=s.ambientLuminance,this.fog.type=s.fog,this.fog.color.set(s.fog_color[0],s.fog_color[1],s.fog_color[2]),this.fog.start=s.fog_start,this.fog.end=s.fog_end,this.fog.density=s.fog_density,this.lightmapSizeMultiplier=s.lightmapSizeMultiplier,this.lightmapMaxResolution=s.lightmapMaxResolution,this.lightmapMode=s.lightmapMode,this.exposure=s.exposure,this._skyboxIntensity=s.skyboxIntensity??1,this._skyboxLuminance=s.skyboxLuminance??2e4,this._skyboxMip=s.skyboxMip??0,s.skyboxRotation&&(this.skyboxRotation=new Q().setFromEulerAngles(s.skyboxRotation[0],s.skyboxRotation[1],s.skyboxRotation[2])),this.sky.applySettings(s),this.clusteredLightingEnabled=s.clusteredLightingEnabled??!1,this.lighting.applySettings(s),["lightmapFilterEnabled","lightmapFilterRange","lightmapFilterSmoothness","ambientBake","ambientBakeNumSamples","ambientBakeSpherePart","ambientBakeOcclusionBrightness","ambientBakeOcclusionContrast"].forEach(i=>{s.hasOwnProperty(i)&&(this[i]=s[i])}),this._resetSkyMesh()}_getSkyboxTex(){const e=this._prefilteredCubemaps;return this._skyboxMip?e[[0,1,3,4,5,6][this._skyboxMip]]||this._envAtlas||e[0]||this._skyboxCubeMap:this._skyboxCubeMap||e[0]||this._envAtlas}_updateSkyMesh(){this.sky.skyMesh||this.sky.updateSkyMesh(),this.sky.update()}_resetSkyMesh(){this.sky.resetSkyMesh(),this.updateShaders=!0}setSkybox(e){e?(this.skybox=e[0]||null,e[1]&&!e[1].cubemap?this.envAtlas=e[1]:this.prefilteredCubemaps=e.slice(1)):(this.skybox=null,this.envAtlas=null)}get lightmapPixelFormat(){return this.lightmapHDR&&this.device.getRenderableHdrFormat()||Ae}};Os.EVENT_SETLAYERS="set:layers",Os.EVENT_SETSKYBOX="set:skybox",Os.EVENT_PRERENDER="prerender",Os.EVENT_POSTRENDER="postrender",Os.EVENT_PRERENDER_LAYER="prerender:layer",Os.EVENT_POSTRENDER_LAYER="postrender:layer",Os.EVENT_PRECULL="precull",Os.EVENT_POSTCULL="postcull";let _p=Os;class Rx{constructor(e,t,s){this.device=e,this.inverseBindPose=t,this.boneNames=s}}const lR=[0,0,1,0,0,1,0,0,1,0,0,1],hR=[0,1,3,2,3,1];class cR extends ne{constructor(e,t){super(),this._device=e,this._pixelsPerUnit=t&&t.pixelsPerUnit!==void 0?t.pixelsPerUnit:1,this._renderMode=t&&t.renderMode!==void 0?t.renderMode:Ws,this._atlas=t&&t.atlas!==void 0?t.atlas:null,this._frameKeys=t&&t.frameKeys!==void 0?t.frameKeys:null,this._meshes=[],this._updatingProperties=!1,this._meshesDirty=!1,this._atlas&&this._frameKeys&&this._createMeshes()}set frameKeys(e){this._frameKeys=e,this._atlas&&this._frameKeys&&(this._updatingProperties?this._meshesDirty=!0:this._createMeshes()),this.fire("set:frameKeys",e)}get frameKeys(){return this._frameKeys}set atlas(e){e!==this._atlas&&(this._atlas&&(this._atlas.off("set:frames",this._onSetFrames,this),this._atlas.off("set:frame",this._onFrameChanged,this),this._atlas.off("remove:frame",this._onFrameRemoved,this)),this._atlas=e,this._atlas&&this._frameKeys&&(this._atlas.on("set:frames",this._onSetFrames,this),this._atlas.on("set:frame",this._onFrameChanged,this),this._atlas.on("remove:frame",this._onFrameRemoved,this),this._updatingProperties?this._meshesDirty=!0:this._createMeshes()),this.fire("set:atlas",e))}get atlas(){return this._atlas}set pixelsPerUnit(e){this._pixelsPerUnit!==e&&(this._pixelsPerUnit=e,this.fire("set:pixelsPerUnit",e),this._atlas&&this._frameKeys&&this.renderMode===Ws&&(this._updatingProperties?this._meshesDirty=!0:this._createMeshes()))}get pixelsPerUnit(){return this._pixelsPerUnit}set renderMode(e){if(this._renderMode===e)return;const t=this._renderMode;this._renderMode=e,this.fire("set:renderMode",e),(t===Ws||e===Ws)&&this._atlas&&this._frameKeys&&(this._updatingProperties?this._meshesDirty=!0:this._createMeshes())}get renderMode(){return this._renderMode}get meshes(){return this._meshes}_createMeshes(){const e=this._meshes.length;for(let i=0;i<e;i++){const r=this._meshes[i];r&&r.destroy()}const t=this._frameKeys.length;this._meshes=new Array(t);const s=this.renderMode===it||this._renderMode===rt?this._create9SliceMesh:this._createSimpleMesh;for(let i=0;i<t;i++){const r=this._atlas.frames[this._frameKeys[i]];this._meshes[i]=r?s.call(this,r):null}this.fire("set:meshes")}_createSimpleMesh(e){const t=e.rect,s=this._atlas.texture.width,i=this._atlas.texture.height,r=t.z/this._pixelsPerUnit,a=t.w/this._pixelsPerUnit,n=e.pivot.x,l=e.pivot.y,h=[-n*r,-l*a,0,(1-n)*r,-l*a,0,(1-n)*r,(1-l)*a,0,-n*r,(1-l)*a,0],c=t.x/s,d=1-t.y/i,f=(t.x+t.z)/s,u=1-(t.y+t.w)/i,p=[c,d,f,d,f,u,c,u],m=new ya;return m.positions=h,m.normals=lR,m.uvs=p,m.indices=hR,De.fromGeometry(this._device,m)}_create9SliceMesh(){const e=z.ONE,t=3,s=3,i=[],r=[],a=[],n=[];let l=0;for(let c=0;c<=t;c++){const d=c===0||c===t?0:1;for(let f=0;f<=s;f++){const u=-e.x+2*e.x*(c<=1?0:3)/t,p=0,m=-(-e.y+2*e.y*(f<=1?0:3)/s),_=f===0||f===s?0:1;i.push(-u,p,m),r.push(0,1,0),a.push(d,_),c<t&&f<s&&(n.push(l+s+1,l+1,l),n.push(l+s+1,l+s+2,l+1)),l++}}const h=new ya;return h.positions=i,h.normals=r,h.uvs=a,h.indices=n,De.fromGeometry(this._device,h)}_onSetFrames(e){this._updatingProperties?this._meshesDirty=!0:this._createMeshes()}_onFrameChanged(e,t){const s=this._frameKeys.indexOf(e);s<0||(t?this.renderMode===Ws&&(this._meshes[s]=this._createSimpleMesh(t)):this._meshes[s]=null,this.fire("set:meshes"))}_onFrameRemoved(e){const t=this._frameKeys.indexOf(e);t<0||(this._meshes[t]=null,this.fire("set:meshes"))}startUpdate(){this._updatingProperties=!0,this._meshesDirty=!1}endUpdate(){this._updatingProperties=!1,this._meshesDirty&&this._atlas&&this._frameKeys&&this._createMeshes(),this._meshesDirty=!1}destroy(){for(const e of this._meshes)e&&e.destroy();this._meshes.length=0}}class dR extends ne{constructor(){super(),this._texture=null,this._frames=null}set texture(e){this._texture=e,this.fire("set:texture",e)}get texture(){return this._texture}set frames(e){this._frames=e,this.fire("set:frames",e)}get frames(){return this._frames}setFrame(e,t){let s=this._frames[e];s?(s.rect.copy(t.rect),s.pivot.copy(t.pivot),s.border.copy(t.border)):(s={rect:t.rect.clone(),pivot:t.pivot.clone(),border:t.border.clone()},this._frames[e]=s),this.fire("set:frame",e.toString(),s)}removeFrame(e){const t=this._frames[e];t&&(delete this._frames[e],this.fire("remove:frame",e.toString(),t))}destroy(){this._texture&&this._texture.destroy()}}class IS{constructor(e,t,s,i){this.time=e,this.position=t,this.rotation=s,this.scale=i}}class MS{constructor(){this._name="",this._keys=[]}}class DS{constructor(){this.name="",this.duration=0,this._nodes=[],this._nodeDict={}}getNode(e){return this._nodeDict[e]}addNode(e){this._nodes.push(e),this._nodeDict[e._name]=e}get nodes(){return this._nodes}}class fR{constructor(){this._written=!1,this._name="",this._keyFrames=[],this._quat=new Q,this._pos=new x,this._scale=new x,this._targetNode=null}getTarget(){return this._targetNode}setTarget(e){this._targetNode=e}}class pu{constructor(e){this.looping=!0,this._animation=null,this._time=0,this._interpolatedKeys=[],this._interpolatedKeyDict={},this._currKeyIndices={},this.graph=null;const t=s=>{const i=new fR;i._name=s.name,this._interpolatedKeys.push(i),this._interpolatedKeyDict[s.name]=i,this._currKeyIndices[s.name]=0;for(let r=0;r<s._children.length;r++)t(s._children[r])};t(e)}set animation(e){this._animation=e,this.currentTime=0}get animation(){return this._animation}set currentTime(e){this._time=e;const t=this._interpolatedKeys.length;for(let s=0;s<t;s++){const r=this._interpolatedKeys[s]._name;this._currKeyIndices[r]=0}this.addTime(0),this.updateGraph()}get currentTime(){return this._time}get numNodes(){return this._interpolatedKeys.length}addTime(e){if(this._animation!==null){const t=this._animation._nodes,s=this._animation.duration;if(this._time===s&&!this.looping)return;if(this._time+=e,this._time>s){this._time=this.looping?0:s;for(let r=0;r<t.length;r++){const n=t[r]._name;this._currKeyIndices[n]=0}}else if(this._time<0){this._time=this.looping?s:0;for(let r=0;r<t.length;r++){const a=t[r],n=a._name;this._currKeyIndices[n]=a._keys.length-2}}const i=e>=0?1:-1;for(let r=0;r<t.length;r++){const a=t[r],n=a._name,l=a._keys,h=this._interpolatedKeyDict[n];if(h===void 0)continue;let c=!1;if(l.length!==1)for(let d=this._currKeyIndices[n];d<l.length-1&&d>=0;d+=i){const f=l[d],u=l[d+1];if(f.time<=this._time&&u.time>=this._time){const p=(this._time-f.time)/(u.time-f.time);h._pos.lerp(f.position,u.position,p),h._quat.slerp(f.rotation,u.rotation,p),h._scale.lerp(f.scale,u.scale,p),h._written=!0,this._currKeyIndices[n]=d,c=!0;break}}(l.length===1||!c&&this._time===0&&this.looping)&&(h._pos.copy(l[0].position),h._quat.copy(l[0].rotation),h._scale.copy(l[0].scale),h._written=!0)}}}blend(e,t,s){const i=this._interpolatedKeys.length;for(let r=0;r<i;r++){const a=e._interpolatedKeys[r],n=t._interpolatedKeys[r],l=this._interpolatedKeys[r];a._written&&n._written?(l._quat.slerp(a._quat,t._interpolatedKeys[r]._quat,s),l._pos.lerp(a._pos,t._interpolatedKeys[r]._pos,s),l._scale.lerp(a._scale,n._scale,s),l._written=!0):a._written?(l._quat.copy(a._quat),l._pos.copy(a._pos),l._scale.copy(a._scale),l._written=!0):n._written&&(l._quat.copy(n._quat),l._pos.copy(n._pos),l._scale.copy(n._scale),l._written=!0)}}setGraph(e){if(this.graph=e,e)for(let t=0;t<this._interpolatedKeys.length;t++){const s=this._interpolatedKeys[t],i=e.findByName(s._name);this._interpolatedKeys[t].setTarget(i)}else for(let t=0;t<this._interpolatedKeys.length;t++)this._interpolatedKeys[t].setTarget(null)}updateGraph(){if(this.graph)for(let e=0;e<this._interpolatedKeys.length;e++){const t=this._interpolatedKeys[e];if(t._written){const s=t.getTarget();s.localPosition.copy(t._pos),s.localRotation.copy(t._quat),s.localScale.copy(t._scale),s._dirtyLocal||s._dirtifyLocal(),t._written=!1}}}}class uR{constructor(){this.hasTangents=!1,this.shaderChunks=null,this.pass=0,this.alphaTest=!1,this.blendType=ts,this.separateAmbient=!1,this.screenSpace=!1,this.skin=!1,this.batch=!1,this.useInstancing=!1,this.useMorphPosition=!1,this.useMorphNormal=!1,this.useMorphTextureBasedInt=!1,this.nineSlicedMode=0,this.clusteredLightingEnabled=!0,this.clusteredLightingCookiesEnabled=!1,this.clusteredLightingShadowsEnabled=!1,this.clusteredLightingShadowType=0,this.clusteredLightingAreaLightsEnabled=!1,this.vertexColors=!1,this.lightMapEnabled=!1,this.dirLightMapEnabled=!1,this.useHeights=!1,this.useNormals=!1,this.useClearCoatNormals=!1,this.useAo=!1,this.diffuseMapEnabled=!1,this.pixelSnap=!1,this.ambientSH=!1,this.ssao=!1,this.twoSidedLighting=!1,this.occludeDirect=!1,this.occludeSpecular=0,this.occludeSpecularFloat=!1,this.useMsdf=!1,this.msdfTextAttribute=!1,this.alphaToCoverage=!1,this.opacityFadesSpecular=!1,this.opacityDither=_a,this.opacityShadowDither=_a,this.cubeMapProjection=0,this.useSpecular=!1,this.useSpecularityFactor=!1,this.enableGGXSpecular=!1,this.fresnelModel=0,this.useRefraction=!1,this.useClearCoat=!1,this.useSheen=!1,this.useIridescence=!1,this.useMetalness=!1,this.useDynamicRefraction=!1,this.dispersion=!1,this.fog=po,this.gamma=Gl,this.toneMap=-1,this.reflectionSource=ir,this.reflectionEncoding=null,this.reflectionCubemapEncoding=null,this.ambientSource="constant",this.ambientEncoding=null,this.skyboxIntensity=1,this.useCubeMapRotation=!1,this.lightMapWithoutAmbient=!1,this.lights=[],this.noShadow=!1,this.lightMaskDynamic=0,this.userAttributes={},this.linearDepth=!1,this.shadowCatcher=!1}}class gs{static update(e,t,s,i,r,a,n){gs.updateSharedOptions(e,t,s,r,a),gs.updateMaterialOptions(e,t),gs.updateEnvOptions(e,t,s,i),gs.updateLightingOptions(e,t,s,r,n)}static updateSharedOptions(e,t,s,i,r){e.shaderChunks=t.shaderChunks,e.pass=r,e.alphaTest=t.alphaTest>0,e.blendType=t.blendType,e.screenSpace=i&&(i&j_)!==0,e.skin=i&&(i&af)!==0,e.useInstancing=i&&(i&nf)!==0,e.useMorphPosition=i&&(i&of)!==0,e.useMorphNormal=i&&(i&lf)!==0,e.useMorphTextureBasedInt=i&&(i&hf)!==0,e.hasTangents=i&&(i&K_)!==0,e.nineSlicedMode=t.nineSlicedMode||Ws,t.useLighting&&s.clusteredLightingEnabled?(e.clusteredLightingEnabled=!0,e.clusteredLightingCookiesEnabled=s.lighting.cookiesEnabled,e.clusteredLightingShadowsEnabled=s.lighting.shadowsEnabled,e.clusteredLightingShadowType=s.lighting.shadowType,e.clusteredLightingAreaLightsEnabled=s.lighting.areaLightsEnabled):(e.clusteredLightingEnabled=!1,e.clusteredLightingCookiesEnabled=!1,e.clusteredLightingShadowsEnabled=!1,e.clusteredLightingAreaLightsEnabled=!1)}static updateMaterialOptions(e,t){e.separateAmbient=!1,e.pixelSnap=t.pixelSnap,e.ambientSH=t.ambientSH,e.twoSidedLighting=t.twoSidedLighting,e.occludeDirect=t.occludeDirect,e.occludeSpecular=t.occludeSpecular,e.occludeSpecularFloat=t.occludeSpecularIntensity!==1,e.useMsdf=!1,e.msdfTextAttribute=!1,e.alphaToCoverage=t.alphaToCoverage,e.opacityFadesSpecular=t.opacityFadesSpecular,e.opacityDither=t.opacityDither,e.cubeMapProjection=H_,e.useSpecular=t.hasSpecular,e.useSpecularityFactor=t.hasSpecularityFactor,e.enableGGXSpecular=t.ggxSpecular,e.fresnelModel=t.fresnelModel,e.useRefraction=t.hasRefraction,e.useClearCoat=t.hasClearCoat,e.useSheen=t.hasSheen,e.useIridescence=t.hasIrridescence,e.useMetalness=t.hasMetalness,e.useDynamicRefraction=t.dynamicRefraction,e.dispersion=t.dispersion>0,e.vertexColors=!1,e.lightMapEnabled=t.hasLighting,e.dirLightMapEnabled=t.dirLightMap,e.useHeights=t.hasHeights,e.useNormals=t.hasNormals,e.useClearCoatNormals=t.hasClearCoatNormals,e.useAo=t.hasAo,e.diffuseMapEnabled=t.hasDiffuseMap}static updateEnvOptions(e,t,s,i){e.fog=t.useFog?i.fog:po,e.gamma=i.shaderOutputGamma,e.toneMap=t.useTonemap?i.toneMapping:ox,t.useSkybox&&s.envAtlas&&s.skybox?(e.reflectionSource=Mc,e.reflectionEncoding=s.envAtlas.encoding,e.reflectionCubemapEncoding=s.skybox.encoding):t.useSkybox&&s.envAtlas?(e.reflectionSource=Ic,e.reflectionEncoding=s.envAtlas.encoding):t.useSkybox&&s.skybox?(e.reflectionSource=Dc,e.reflectionEncoding=s.skybox.encoding):(e.reflectionSource=ir,e.reflectionEncoding=null),t.ambientSH?(e.ambientSource=W_,e.ambientEncoding=null):e.reflectionSource!==ir&&s.envAtlas?(e.ambientSource=$_,e.ambientEncoding=s.envAtlas.encoding):(e.ambientSource=X_,e.ambientEncoding=null);const r=e.reflectionSource!==ir;e.skyboxIntensity=r,e.useCubeMapRotation=r&&s._skyboxRotationShaderInclude}static updateLightingOptions(e,t,s,i,r){if(e.lightMapWithoutAmbient=!1,t.useLighting){const a=[],n=i?i>>16:As;e.lightMaskDynamic=!!(n&As),e.lightMapWithoutAmbient=!1,r&&(gs.collectLights(oe,r[oe],a,n),s.clusteredLightingEnabled||(gs.collectLights(Me,r[Me],a,n),gs.collectLights(Re,r[Re],a,n))),e.lights=a}else e.lights=[];(e.lights.length===0&&!s.clusteredLightingEnabled||(i&q_)!==0)&&(e.noShadow=!0)}static collectLights(e,t,s,i){for(let r=0;r<t.length;r++){const a=t[r];a.enabled&&a.mask&i&&s.push(a)}}}const mu={vertex_normal:Ht,vertex_tangent:ei,vertex_texCoord0:as,vertex_texCoord1:ba,vertex_color:gt,vertex_boneWeights:Qs,vertex_boneIndices:Ft};class pR{constructor(e,t,s=!0){this.varyingsCode="",this.vDefines=new Map,this.fDefines=new Map,this.includes=new Map,this.chunks=null,this.device=e,this.options=t;const i=t.shaderChunks;if(this.shaderLanguage=e.isWebGPU&&s&&i?.useWGSL?Be:Ee,this.attributes={vertex_position:ue},t.userAttributes)for(const[a,n]of Object.entries(t.userAttributes))this.attributes[n]=a;const r=de.get(e,this.shaderLanguage);this.chunks=new Map(r),i&&(this.shaderLanguage===Ee?i.glsl:i.wgsl).forEach((n,l)=>{for(const h in mu)mu.hasOwnProperty(h)&&n.indexOf(h)>=0&&(this.attributes[h]=mu[h]);this.chunks.set(l,n)}),this.shaderPassInfo=Js.get(this.device).getByIndex(t.pass),this.shadowPass=this.shaderPassInfo.isShadow,this.lighting=t.lights.length>0||t.dirLightMapEnabled||t.clusteredLightingEnabled,this.reflections=t.reflectionSource!==ir,this.needsNormal=this.lighting||this.reflections||t.useSpecular||t.ambientSH||t.useHeights||t.enableGGXSpecular||t.clusteredLightingEnabled&&!this.shadowPass||t.useClearCoatNormals,this.needsNormal=this.needsNormal&&!this.shadowPass,this.needsSceneColor=t.useDynamicRefraction,this.needsScreenSize=t.useDynamicRefraction,this.needsTransforms=t.useDynamicRefraction,this.vshader=null,this.fshader=null}fDefineSet(e,t,s=""){e&&this.fDefines.set(t,s)}generateVertexShader(e,t,s){const{options:i,vDefines:r,attributes:a}=this,n=new Map;if(n.set("vPositionW","vec3"),(i.nineSlicedMode===it||i.nineSlicedMode===rt)&&r.set("NINESLICED",!0),this.options.linearDepth&&(r.set("LINEAR_DEPTH",!0),n.set("vLinearDepth","float")),this.needsNormal&&r.set("NORMALS",!0),this.options.useInstancing){const d=de.get(this.device,this.shaderLanguage);this.chunks.get("transformInstancingVS")===d.get("transformInstancingVS")&&(a.instance_line1=p_,a.instance_line2=m_,a.instance_line3=g_,a.instance_line4=qn)}this.needsNormal&&(a.vertex_normal=Ht,n.set("vNormalW","vec3"),i.hasTangents&&(i.useHeights||i.useNormals||i.useClearCoatNormals||i.enableGGXSpecular)?(r.set("TANGENTS",!0),a.vertex_tangent=ei,n.set("vTangentW","vec3"),n.set("vBinormalW","vec3")):i.enableGGXSpecular&&(r.set("GGX_SPECULAR",!0),n.set("vObjectSpaceUpW","vec3")));const l=2;for(let d=0;d<l;d++)e[d]&&(r.set(`UV${d}`,!0),a[`vertex_texCoord${d}`]=`TEXCOORD${d}`),t[d]&&(r.set(`UV${d}_UNMODIFIED`,!0),n.set(`vUv${d}`,"vec2"));let h=0;const c=new Set;s.forEach(d=>{const{id:f,uv:u,name:p}=d,m=f+u*100;if(!c.has(m)){c.add(m),n.set(`vUV${u}_${f}`,"vec2");const _=`texture_${p}MapTransform`;r.set(`{TRANSFORM_NAME_${h}}`,_),r.set(`{TRANSFORM_UV_${h}}`,u),r.set(`{TRANSFORM_ID_${h}}`,f),h++}}),r.set("UV_TRANSFORMS_COUNT",h),i.vertexColors&&(a.vertex_color=gt,r.set("VERTEX_COLOR",!0),n.set("vVertexColor","vec4")),i.useMsdf&&i.msdfTextAttribute&&(a.vertex_outlineParameters=cl,a.vertex_shadowParameters=dl,r.set("MSDF",!0)),(i.useMorphPosition||i.useMorphNormal)&&(r.set("MORPHING",!0),i.useMorphTextureBasedInt&&r.set("MORPHING_INT",!0),i.useMorphPosition&&r.set("MORPHING_POSITION",!0),i.useMorphNormal&&r.set("MORPHING_NORMAL",!0),a.morph_vertex_id=qn),i.skin&&(a.vertex_boneIndices=Ft,i.batch?r.set("BATCH",!0):(a.vertex_boneWeights=Qs,r.set("SKIN",!0))),i.useInstancing&&r.set("INSTANCING",!0),i.screenSpace&&r.set("SCREENSPACE",!0),i.pixelSnap&&r.set("PIXELSNAP",!0),n.forEach((d,f)=>{this.varyingsCode+=`#define VARYING_${f.toUpperCase()}
`,this.varyingsCode+=this.shaderLanguage===Be?`varying ${f}: ${FT.get(d)};
`:`varying ${d} ${f};
`}),this.includes.set("varyingsVS",this.varyingsCode),this.includes.set("varyingsPS",this.varyingsCode),this.vshader=`
						#include "litMainVS"
				`}_setupLightingDefines(e,t){const s=this.fDefines,i=this.options;if(this.fDefines.set("LIGHT_COUNT",i.lights.length),e&&s.set("AREA_LIGHTS",!0),t&&this.lighting&&(s.set("LIT_CLUSTERED_LIGHTS",!0),i.clusteredLightingCookiesEnabled&&s.set("CLUSTER_COOKIES",!0),i.clusteredLightingAreaLightsEnabled&&s.set("CLUSTER_AREALIGHTS",!0),i.lightMaskDynamic&&s.set("CLUSTER_MESH_DYNAMIC_LIGHTS",!0),i.clusteredLightingShadowsEnabled&&!i.noShadow)){const r=Li.get(i.clusteredLightingShadowType);s.set("CLUSTER_SHADOWS",!0),s.set(`SHADOW_KIND_${r.kind}`,!0),s.set(`CLUSTER_SHADOW_TYPE_${r.kind}`,!0)}for(let r=0;r<i.lights.length;r++){const a=i.lights[r],n=a._type;if(t&&n!==oe)continue;const l=e&&a._shape?a._shape:xs,h=a._shadowType,c=a.castShadows&&!i.noShadow,d=Li.get(h);s.set(`LIGHT${r}`,!0),s.set(`LIGHT${r}TYPE`,`${Ov[n]}`),s.set(`LIGHT${r}SHADOWTYPE`,`${d.name}`),s.set(`LIGHT${r}SHAPE`,`${gM[l]}`),s.set(`LIGHT${r}FALLOFF`,`${vM[a._falloffMode]}`),a.affectSpecularity&&s.set(`LIGHT${r}AFFECT_SPECULARITY`,!0),a._cookie&&(n===Re&&!a._cookie._cubemap||n===Me&&a._cookie._cubemap)&&(s.set(`LIGHT${r}COOKIE`,!0),s.set(`{LIGHT${r}COOKIE_CHANNEL}`,a._cookieChannel),n===Re&&(a._cookieTransform&&s.set(`LIGHT${r}COOKIE_TRANSFORM`,!0),a._cookieFalloff&&s.set(`LIGHT${r}COOKIE_FALLOFF`,!0))),c&&(s.set(`LIGHT${r}CASTSHADOW`,!0),d.pcf&&s.set(`LIGHT${r}SHADOW_PCF`,!0),a._normalOffsetBias&&!a._isVsm&&s.set(`LIGHT${r}_SHADOW_SAMPLE_NORMAL_OFFSET`,!0),n===oe&&(s.set(`LIGHT${r}_SHADOW_SAMPLE_ORTHO`,!0),a.cascadeBlend>0&&s.set(`LIGHT${r}_SHADOW_CASCADE_BLEND`,!0),a.numCascades>1&&s.set(`LIGHT${r}_SHADOW_CASCADES`,!0)),(d.pcf||d.pcss||this.device.isWebGPU)&&s.set(`LIGHT${r}_SHADOW_SAMPLE_SOURCE_ZBUFFER`,!0),n===Me&&s.set(`LIGHT${r}_SHADOW_SAMPLE_POINT`,!0)),c&&(s.set(`SHADOW_KIND_${d.kind}`,!0),n===oe&&s.set("SHADOW_DIRECTIONAL",!0))}}prepareForwardPass(e){const{options:t}=this,i=t.clusteredLightingEnabled&&t.clusteredLightingAreaLightsEnabled||t.lights.some(n=>n._shape&&n._shape!==xs),r=!t.lightMapEnabled||t.lightMapWithoutAmbient,a=this.needsNormal&&(t.useNormals||t.useClearCoatNormals||t.enableGGXSpecular&&!t.useHeights);t.useSpecular&&(this.fDefineSet(!0,"LIT_SPECULAR"),this.fDefineSet(this.reflections,"LIT_REFLECTIONS"),this.fDefineSet(t.useClearCoat,"LIT_CLEARCOAT"),this.fDefineSet(t.fresnelModel>0,"LIT_SPECULAR_FRESNEL"),this.fDefineSet(t.useSheen,"LIT_SHEEN"),this.fDefineSet(t.useIridescence,"LIT_IRIDESCENCE")),this.fDefineSet(this.lighting&&t.useSpecular||this.reflections,"LIT_SPECULAR_OR_REFLECTION"),this.fDefineSet(this.needsSceneColor,"LIT_SCENE_COLOR"),this.fDefineSet(this.needsScreenSize,"LIT_SCREEN_SIZE"),this.fDefineSet(this.needsTransforms,"LIT_TRANSFORMS"),this.fDefineSet(this.needsNormal,"LIT_NEEDS_NORMAL"),this.fDefineSet(this.lighting,"LIT_LIGHTING"),this.fDefineSet(t.useMetalness,"LIT_METALNESS"),this.fDefineSet(t.enableGGXSpecular,"LIT_GGX_SPECULAR"),this.fDefineSet(t.useSpecularityFactor,"LIT_SPECULARITY_FACTOR"),this.fDefineSet(t.useCubeMapRotation,"CUBEMAP_ROTATION"),this.fDefineSet(t.occludeSpecularFloat,"LIT_OCCLUDE_SPECULAR_FLOAT"),this.fDefineSet(t.separateAmbient,"LIT_SEPARATE_AMBIENT"),this.fDefineSet(t.twoSidedLighting,"LIT_TWO_SIDED_LIGHTING"),this.fDefineSet(t.lightMapEnabled,"LIT_LIGHTMAP"),this.fDefineSet(t.dirLightMapEnabled,"LIT_DIR_LIGHTMAP"),this.fDefineSet(t.skyboxIntensity>0,"LIT_SKYBOX_INTENSITY"),this.fDefineSet(t.clusteredLightingShadowsEnabled,"LIT_CLUSTERED_SHADOWS"),this.fDefineSet(t.clusteredLightingAreaLightsEnabled,"LIT_CLUSTERED_AREA_LIGHTS"),this.fDefineSet(a,"LIT_TBN"),this.fDefineSet(r,"LIT_ADD_AMBIENT"),this.fDefineSet(t.hasTangents,"LIT_TANGENTS"),this.fDefineSet(t.useNormals,"LIT_USE_NORMALS"),this.fDefineSet(t.useClearCoatNormals,"LIT_USE_CLEARCOAT_NORMALS"),this.fDefineSet(t.useRefraction,"LIT_REFRACTION"),this.fDefineSet(t.useDynamicRefraction,"LIT_DYNAMIC_REFRACTION"),this.fDefineSet(t.dispersion,"LIT_DISPERSION"),this.fDefineSet(t.useHeights,"LIT_HEIGHTS"),this.fDefineSet(t.opacityFadesSpecular,"LIT_OPACITY_FADES_SPECULAR"),this.fDefineSet(t.alphaToCoverage,"LIT_ALPHA_TO_COVERAGE"),this.fDefineSet(t.alphaTest,"LIT_ALPHA_TEST"),this.fDefineSet(t.useMsdf,"LIT_MSDF"),this.fDefineSet(t.ssao,"LIT_SSAO"),this.fDefineSet(t.useAo,"LIT_AO"),this.fDefineSet(t.occludeDirect,"LIT_OCCLUDE_DIRECT"),this.fDefineSet(t.msdfTextAttribute,"LIT_MSDF_TEXT_ATTRIBUTE"),this.fDefineSet(t.diffuseMapEnabled,"LIT_DIFFUSE_MAP"),this.fDefineSet(t.shadowCatcher,"LIT_SHADOW_CATCHER"),this.fDefineSet(!0,"LIT_FRESNEL_MODEL",mM[t.fresnelModel]),this.fDefineSet(!0,"LIT_NONE_SLICE_MODE",LM[t.nineSlicedMode]),this.fDefineSet(!0,"LIT_BLEND_TYPE",KT[t.blendType]),this.fDefineSet(!0,"LIT_CUBEMAP_PROJECTION",AM[t.cubeMapProjection]),this.fDefineSet(!0,"LIT_OCCLUDE_SPECULAR",wM[t.occludeSpecular]),this.fDefineSet(!0,"LIT_REFLECTION_SOURCE",CM[t.reflectionSource]),this.fDefineSet(!0,"LIT_AMBIENT_SOURCE",PM[t.ambientSource]),this.fDefineSet(!0,"{lightingUv}",e??""),this.fDefineSet(!0,"{reflectionDecode}",ar.decodeFunc(t.reflectionEncoding)),this.fDefineSet(!0,"{reflectionCubemapDecode}",ar.decodeFunc(t.reflectionCubemapEncoding)),this.fDefineSet(!0,"{ambientDecode}",ar.decodeFunc(t.ambientEncoding)),this._setupLightingDefines(i,t.clusteredLightingEnabled)}prepareShadowPass(){const{options:e}=this,t=this.shaderPassInfo.lightType,s=this.shaderPassInfo.shadowType,i=Li.get(s),r=t===oe||!i.vsm&&t===Re;this.fDefineSet(r,"PERSPECTIVE_DEPTH"),this.fDefineSet(!0,"LIGHT_TYPE",`${Ov[t]}`),this.fDefineSet(!0,"SHADOW_TYPE",`${i.name}`),this.fDefineSet(e.alphaTest,"LIT_ALPHA_TEST")}generateFragmentShader(e,t,s){const i=this.options;this.includes.set("frontendDeclPS",e??""),this.includes.set("frontendCodePS",t??""),i.pass===df||i.pass===cf||(this.shadowPass?this.prepareShadowPass():this.prepareForwardPass(s)),this.fshader=`
						#include "litMainPS"
				`}}const Ox={generateKey(o){return`lit${Object.keys(o).sort().map(e=>e==="shaderChunks"?o.shaderChunks?.key??"":e==="lights"?Ox.generateLightsKey(o):e+o[e]).join(`
`)}`},generateLightsKey(o){return`lights:${o.lights.map(e=>!o.clusteredLightingEnabled||e._type===oe?`${e.key},`:"").join("")}`}};class Fc{get pass(){return this.litOptions.pass}constructor(){this.defines=new Map,this.forceUv1=!1,this.specularTint=!1,this.metalnessTint=!1,this.glossTint=!1,this.emissiveEncoding="linear",this.lightMapEncoding="linear",this.packedNormal=!1,this.normalDetailPackedNormal=!1,this.clearCoatPackedNormal=!1,this.glossInvert=!1,this.sheenGlossInvert=!1,this.clearCoatGlossInvert=!1,this.useAO=!1,this.litOptions=new uR}}const On=[],_u=o=>Object.keys(o).filter(e=>e!=="litOptions").sort();class mR extends ga{generateKey(e){let t;return e===this.optionsContextMin?(this.propsMin||(this.propsMin=_u(e)),t=this.propsMin):e===this.optionsContext?(this.props||(this.props=_u(e)),t=this.props):t=_u(e),`standard:
${ga.definesHash(e.defines)}
${t.map(r=>r+e[r]).join(`
`)}${Ox.generateKey(e.litOptions)}`}_getUvSourceExpression(e,t,s){const i=s[e],r=s[t],a=s.litOptions.pass===wa;let n;return a&&s.litOptions.nineSlicedMode===it||a&&s.litOptions.nineSlicedMode===rt?n="nineSlicedUv":(i===0?n=`vUv${r}`:n=`vUV${r}_${i}`,s.heightMap&&e!=="heightMapTransform"&&(n+=" + dUvOffset")),n}_validateMapChunk(e,t,s){}_addMapDefines(e,t,s,i,r,a,n=null){const l=`${t}Map`,h=t.toUpperCase(),c=`${l}Uv`,d=`${l}Identifier`,f=`${l}Transform`,u=`${l}Channel`,p=`${t}VertexColorChannel`,m=`${t}Tint`,_=`${t}VertexColor`,g=`${t}Mode`,y=`${t}Invert`,A=i[m],v=i[_],S=i[l],b=i[d],E=i[g],T=r.get(s);if(S){e.set(`STD_${h}_TEXTURE`,"");const w=this._getUvSourceExpression(f,c,i);e.set(`{STD_${h}_TEXTURE_UV}`,w),e.set(`{STD_${h}_TEXTURE_CHANNEL}`,i[u]);const P=`{STD_${h}_TEXTURE_NAME}`;if(T.includes(P)){let M=`texture_${l}`;const L=a[b];L?M=L:(a[b]=M,e.set(`STD_${h}_TEXTURE_ALLOCATE`,"")),e.set(P,M)}if(n){const M=i[u]==="aaa"?"passThrough":ar.decodeFunc(n);e.set(`{STD_${h}_TEXTURE_DECODE}`,M)}}v&&(e.set(`STD_${h}_VERTEX`,""),e.set(`{STD_${h}_VERTEX_CHANNEL}`,i[p])),E&&e.set(`{STD_${h}_DETAILMODE}`,E),A&&e.set(`STD_${h}_CONSTANT`,""),i[y]&&e.set(`STD_${h}_INVERT`,"")}_correctChannel(e,t,s){if(s[e]>0){if(s[e]<t.length)return t.substring(0,s[e]);if(s[e]>t.length){let i=t;const r=i.charAt(i.length-1),a=s[e]-i.length;for(let n=0;n<a;n++)i+=r;return i}return t}}createVertexShader(e,t){const s=[],i=[],r=[];for(const n in On){const l=`${n}Map`;if(t[`${n}VertexColor`]){const h=`${n}VertexColorChannel`;t[h]=this._correctChannel(n,t[h],On)}if(t[l]){const h=`${l}Channel`,c=`${l}Transform`,d=`${l}Uv`;t[d]=Math.min(t[d],1),t[h]=this._correctChannel(n,t[h],On);const f=t[d];s[f]=!0,i[f]=i[f]||t[l]&&!t[c],t[c]&&r.push({name:n,id:t[c],uv:t[d]})}}t.forceUv1&&(s[1]=!0,i[1]=i[1]!==void 0?i[1]:!0),e.generateVertexShader(s,i,r)}prepareFragmentDefines(e,t,s){const i=(r,a,n="")=>{r&&t.set(a,n)};i(e.lightMap,"STD_LIGHTMAP",""),i(e.lightVertexColor,"STD_LIGHT_VERTEX_COLOR",""),i(e.dirLightMap&&e.litOptions.useSpecular,"STD_LIGHTMAP_DIR",""),i(e.heightMap,"STD_HEIGHT_MAP",""),i(e.useSpecularColor,"STD_SPECULAR_COLOR",""),i(e.aoMap||e.aoVertexColor||e.useAO,"STD_AO",""),i(!0,"STD_OPACITY_DITHER",BM[s.isForward?e.litOptions.opacityDither:e.litOptions.opacityShadowDither])}createShaderDefinition(e,t){const s=Js.get(e).getByIndex(t.litOptions.pass),i=s.isForward,r=new pR(e,t.litOptions);this.createVertexShader(r,t);const a={};t.litOptions.fresnelModel=t.litOptions.fresnelModel===0?F_:t.litOptions.fresnelModel;const n=r.fDefines;this.prepareFragmentDefines(t,n,s);let l="";if(i){if(t.heightMap&&this._addMapDefines(n,"height","parallaxPS",t,r.chunks,a),(t.litOptions.blendType!==ts||t.litOptions.alphaTest||t.litOptions.alphaToCoverage||t.litOptions.opacityDither!==_a)&&this._addMapDefines(n,"opacity","opacityPS",t,r.chunks,a),r.needsNormal){if((t.normalMap||t.clearCoatNormalMap)&&!t.litOptions.hasTangents){const f=t.normalMap?"normalMap":"clearCoatNormalMap";l=this._getUvSourceExpression(`${f}Transform`,`${f}Uv`,t)}this._addMapDefines(n,"normalDetail","normalMapPS",t,r.chunks,a,t.normalDetailPackedNormal?"xy":"xyz"),this._addMapDefines(n,"normal","normalMapPS",t,r.chunks,a,t.packedNormal?"xy":"xyz")}t.diffuseDetail&&this._addMapDefines(n,"diffuseDetail","diffusePS",t,r.chunks,a,t.diffuseDetailEncoding),this._addMapDefines(n,"diffuse","diffusePS",t,r.chunks,a,t.diffuseEncoding),t.litOptions.useRefraction&&(this._addMapDefines(n,"refraction","transmissionPS",t,r.chunks,a),this._addMapDefines(n,"thickness","thicknessPS",t,r.chunks,a)),t.litOptions.useIridescence&&(this._addMapDefines(n,"iridescence","iridescencePS",t,r.chunks,a),this._addMapDefines(n,"iridescenceThickness","iridescenceThicknessPS",t,r.chunks,a)),(r.lighting&&t.litOptions.useSpecular||r.reflections)&&(t.litOptions.useSheen&&(this._addMapDefines(n,"sheen","sheenPS",t,r.chunks,a,t.sheenEncoding),this._addMapDefines(n,"sheenGloss","sheenGlossPS",t,r.chunks,a)),t.litOptions.useMetalness&&(this._addMapDefines(n,"metalness","metalnessPS",t,r.chunks,a),this._addMapDefines(n,"ior","iorPS",t,r.chunks,a)),t.litOptions.useSpecularityFactor&&this._addMapDefines(n,"specularityFactor","specularityFactorPS",t,r.chunks,a),t.useSpecularColor&&this._addMapDefines(n,"specular","specularPS",t,r.chunks,a,t.specularEncoding),this._addMapDefines(n,"gloss","glossPS",t,r.chunks,a)),t.aoDetail&&this._addMapDefines(n,"aoDetail","aoPS",t,r.chunks,a),(t.aoMap||t.aoVertexColor||t.useAO)&&this._addMapDefines(n,"ao","aoPS",t,r.chunks,a),this._addMapDefines(n,"emissive","emissivePS",t,r.chunks,a,t.emissiveEncoding),t.litOptions.useClearCoat&&(this._addMapDefines(n,"clearCoat","clearCoatPS",t,r.chunks,a),this._addMapDefines(n,"clearCoatGloss","clearCoatGlossPS",t,r.chunks,a),this._addMapDefines(n,"clearCoatNormal","clearCoatNormalPS",t,r.chunks,a,t.clearCoatPackedNormal?"xy":"xyz")),t.litOptions.enableGGXSpecular&&this._addMapDefines(n,"anisotropy","anisotropyPS",t,r.chunks,a),(t.lightMap||t.lightVertexColor)&&this._addMapDefines(n,"light","lightmapPS",t,r.chunks,a,t.lightMapEncoding)}else{const f=t.litOptions.opacityShadowDither;(t.litOptions.alphaTest||f)&&this._addMapDefines(n,"opacity","opacityPS",t,r.chunks,a)}r.generateFragmentShader(r.chunks.get("stdDeclarationPS"),r.chunks.get("stdFrontEndPS"),l);const h=Rc.merge(r.chunks,r.includes),c=r.vDefines;t.defines.forEach((f,u)=>c.set(u,f)),t.defines.forEach((f,u)=>n.set(u,f));const d=Et.createDefinition(e,{name:"StandardShader",attributes:r.attributes,shaderLanguage:r.shaderLanguage,vertexCode:r.vshader,fragmentCode:r.fshader,vertexIncludes:h,fragmentIncludes:h,fragmentDefines:n,vertexDefines:c});return r.shaderPassInfo.isForward&&(d.tag=EL),d}constructor(...e){super(...e),this.optionsContext=new Fc,this.optionsContextMin=new Fc}}const gu=new mR,RS=(o,e)=>{if(o.length!==e.length)return!1;for(let t=0;t<o.length;++t)if(o[t]!==e[t])return!1;return!0},_R=o=>o.r!==1||o.g!==1||o.b!==1,gR=o=>o.r!==0||o.g!==0||o.b!==0;class vR{constructor(){this._mapXForms=null}updateMinRef(e,t,s,i,r,a){this._updateSharedOptions(e,t,s,i,r),this._updateMinOptions(e,s,r),this._updateUVOptions(e,s,i,!0)}updateRef(e,t,s,i,r,a,n){this._updateSharedOptions(e,t,i,r,a),this._updateEnvOptions(e,i,t,s),this._updateMaterialOptions(e,i,t),e.litOptions.hasTangents=r&&(r&K_)!==0,this._updateLightOptions(e,t,i,r,n),this._updateUVOptions(e,i,r,!1,s)}_updateSharedOptions(e,t,s,i,r){e.forceUv1=s.forceUv1,s.userAttributes&&(e.litOptions.userAttributes=Object.fromEntries(s.userAttributes.entries())),e.litOptions.shaderChunks=s.shaderChunks,e.litOptions.pass=r,e.litOptions.alphaTest=s.alphaTest>0,e.litOptions.blendType=s.blendType,e.litOptions.screenSpace=i&&(i&j_)!==0,e.litOptions.skin=i&&(i&af)!==0,e.litOptions.batch=i&&(i&hp)!==0,e.litOptions.useInstancing=i&&(i&nf)!==0,e.litOptions.useMorphPosition=i&&(i&of)!==0,e.litOptions.useMorphNormal=i&&(i&lf)!==0,e.litOptions.useMorphTextureBasedInt=i&&(i&hf)!==0,e.litOptions.nineSlicedMode=s.nineSlicedMode||0,t.clusteredLightingEnabled&&s.useLighting?(e.litOptions.clusteredLightingEnabled=!0,e.litOptions.clusteredLightingCookiesEnabled=t.lighting.cookiesEnabled,e.litOptions.clusteredLightingShadowsEnabled=t.lighting.shadowsEnabled,e.litOptions.clusteredLightingShadowType=t.lighting.shadowType,e.litOptions.clusteredLightingAreaLightsEnabled=t.lighting.areaLightsEnabled):(e.litOptions.clusteredLightingEnabled=!1,e.litOptions.clusteredLightingCookiesEnabled=!1,e.litOptions.clusteredLightingShadowsEnabled=!1,e.litOptions.clusteredLightingAreaLightsEnabled=!1)}_updateUVOptions(e,t,s,i,r){let a=!1,n=!1,l=!1;s&&(a=(s&Y_)!==0,n=(s&fx)!==0,l=(s&ux)!==0),e.litOptions.vertexColors=!1,this._mapXForms=[];const h={};for(const c in On)this._updateTexOptions(e,t,c,a,n,l,i,h);this._mapXForms=null,e.litOptions.ssao=r?.ssaoEnabled,e.useAO=e.litOptions.ssao,e.litOptions.lightMapEnabled=e.lightMap,e.litOptions.dirLightMapEnabled=e.dirLightMap,e.litOptions.useHeights=e.heightMap,e.litOptions.useNormals=e.normalMap,e.litOptions.useClearCoatNormals=e.clearCoatNormalMap,e.litOptions.useAo=e.aoMap||e.aoVertexColor||e.litOptions.ssao,e.litOptions.diffuseMapEnabled=e.diffuseMap}_updateTexOptions(e,t,s,i,r,a,n,l){const h=s==="opacity";if(!n||h){const c=`${s}Map`,d=`${s}VertexColor`,f=`${s}VertexColorChannel`,u=`${c}Channel`,p=`${c}Transform`,m=`${c}Uv`,_=`${c}Identifier`;if(s!=="light"&&(e[c]=!1,e[_]=void 0,e[u]="",e[p]=0,e[m]=0),e[d]=!1,e[f]="",h&&t.blendType===ts&&t.alphaTest===0&&!t.alphaToCoverage&&t.opacityDither===_a)return;if(s!=="height"&&t[d]&&a&&(e[d]=t[d],e[f]=t[f],e.litOptions.vertexColors=!0),t[c]){let g=!0;if(t[m]===0&&!i&&(g=!1),t[m]===1&&!r&&(g=!1),g){const y=t[c].id;let A=l[y];A===void 0&&(l[y]=s,A=s),e[c]=!!t[c],e[_]=A,e[p]=this._getMapTransformID(t.getUniform(p),t[m]),e[u]=t[u],e[m]=t[m]}}}}_updateMinOptions(e,t,s){const i=s===cf;e.litOptions.opacityShadowDither=i?t.opacityDither:t.opacityShadowDither,e.litOptions.linearDepth=i,e.litOptions.lights=[]}_updateMaterialOptions(e,t,s){const i=!!(t.useMetalness||t.specularMap||t.sphereMap||t.cubeMap||gR(t.specular)||t.specularityFactor>0&&t.useMetalness||t.enableGGXSpecular||t.clearCoat>0),r=!t.useMetalness||t.useMetalnessSpecularColor,a=i&&(t.specularTint||!t.specularMap&&!t.specularVertexColor)&&_R(t.specular),n=i&&t.useMetalnessSpecularColor&&(t.specularityFactorTint||t.specularityFactor<1&&!t.specularityFactorMap),l=c=>c?c.format===Ml||c.type===v_:!1,h=(c,d)=>Math.abs(c-d)<1e-4;e.specularTint=a,e.specularityFactorTint=n,e.metalnessTint=t.useMetalness&&t.metalness<1,e.glossTint=!0,e.diffuseEncoding=t.diffuseMap?.encoding,e.diffuseDetailEncoding=t.diffuseDetailMap?.encoding,e.emissiveEncoding=t.emissiveMap?.encoding,e.lightMapEncoding=t.lightMap?.encoding,e.packedNormal=l(t.normalMap),e.refractionTint=h(t.refraction,1),e.refractionIndexTint=h(t.refractionIndex,1/1.5),e.thicknessTint=t.useDynamicRefraction&&t.thickness!==1,e.specularEncoding=t.specularMap?.encoding,e.sheenEncoding=t.sheenMap?.encoding,e.aoMapUv=t.aoUvSet,e.aoDetail=!!t.aoDetailMap,e.diffuseDetail=!!t.diffuseDetailMap,e.normalDetail=!!t.normalMap,e.normalDetailPackedNormal=l(t.normalDetailMap),e.diffuseDetailMode=t.diffuseDetailMode,e.aoDetailMode=t.aoDetailMode,e.clearCoatGloss=!!t.clearCoatGloss,e.clearCoatPackedNormal=l(t.clearCoatNormalMap),e.iorTint=h(t.refractionIndex,1/1.5),s.forcePassThroughSpecular&&(e.specularEncoding="linear",e.sheenEncoding="linear"),e.iridescenceTint=t.iridescence!==1,e.glossInvert=t.glossInvert,e.sheenGlossInvert=t.sheenGlossInvert,e.clearCoatGlossInvert=t.clearCoatGlossInvert,e.useSpecularColor=r,e.litOptions.separateAmbient=!1,e.litOptions.pixelSnap=t.pixelSnap,e.litOptions.ambientSH=!!t.ambientSH,e.litOptions.twoSidedLighting=t.twoSidedLighting,e.litOptions.occludeSpecular=t.occludeSpecular,e.litOptions.occludeSpecularFloat=t.occludeSpecularIntensity!==1,e.litOptions.useMsdf=!!t.msdfMap,e.litOptions.msdfTextAttribute=!!t.msdfTextAttribute,e.litOptions.alphaToCoverage=t.alphaToCoverage,e.litOptions.opacityFadesSpecular=t.opacityFadesSpecular,e.litOptions.opacityDither=t.opacityDither,e.litOptions.cubeMapProjection=t.cubeMapProjection,e.litOptions.occludeDirect=t.occludeDirect,e.litOptions.useSpecular=i,e.litOptions.useSpecularityFactor=(n||!!t.specularityFactorMap)&&t.useMetalnessSpecularColor,e.litOptions.enableGGXSpecular=t.enableGGXSpecular,e.litOptions.fresnelModel=t.fresnelModel,e.litOptions.useRefraction=(t.refraction||!!t.refractionMap)&&(t.useDynamicRefraction||e.litOptions.reflectionSource!==ir),e.litOptions.useClearCoat=!!t.clearCoat,e.litOptions.useSheen=t.useSheen,e.litOptions.useIridescence=t.useIridescence&&t.iridescence!==0,e.litOptions.useMetalness=t.useMetalness,e.litOptions.useDynamicRefraction=t.useDynamicRefraction,e.litOptions.dispersion=t.dispersion>0,e.litOptions.shadowCatcher=t.shadowCatcher}_updateEnvOptions(e,t,s,i){e.litOptions.fog=t.useFog?i.fog:po,e.litOptions.gamma=i.shaderOutputGamma,e.litOptions.toneMap=t.useTonemap?i.toneMapping:ox;let r=!1;if(t.envAtlas&&t.cubeMap?(e.litOptions.reflectionSource=Mc,e.litOptions.reflectionEncoding=t.envAtlas.encoding,e.litOptions.reflectionCubemapEncoding=t.cubeMap.encoding):t.envAtlas?(e.litOptions.reflectionSource=Ic,e.litOptions.reflectionEncoding=t.envAtlas.encoding):t.cubeMap?(e.litOptions.reflectionSource=Dc,e.litOptions.reflectionEncoding=t.cubeMap.encoding):t.sphereMap?(e.litOptions.reflectionSource=dx,e.litOptions.reflectionEncoding=t.sphereMap.encoding):t.useSkybox&&s.envAtlas&&s.skybox?(e.litOptions.reflectionSource=Mc,e.litOptions.reflectionEncoding=s.envAtlas.encoding,e.litOptions.reflectionCubemapEncoding=s.skybox.encoding,r=!0):t.useSkybox&&s.envAtlas?(e.litOptions.reflectionSource=Ic,e.litOptions.reflectionEncoding=s.envAtlas.encoding,r=!0):t.useSkybox&&s.skybox?(e.litOptions.reflectionSource=Dc,e.litOptions.reflectionEncoding=s.skybox.encoding,r=!0):(e.litOptions.reflectionSource=ir,e.litOptions.reflectionEncoding=null),t.ambientSH)e.litOptions.ambientSource=W_,e.litOptions.ambientEncoding=null;else{const a=t.envAtlas||(t.useSkybox&&s.envAtlas?s.envAtlas:null);a&&!t.sphereMap?(e.litOptions.ambientSource=$_,e.litOptions.ambientEncoding=a.encoding):(e.litOptions.ambientSource=X_,e.litOptions.ambientEncoding=null)}e.litOptions.skyboxIntensity=r,e.litOptions.useCubeMapRotation=r&&s._skyboxRotationShaderInclude}_updateLightOptions(e,t,s,i,r){if(e.lightMap=!1,e.lightMapChannel="",e.lightMapUv=0,e.lightMapTransform=0,e.litOptions.lightMapWithoutAmbient=!1,e.dirLightMap=!1,i&&(e.litOptions.noShadow=(i&q_)!==0,(i&lp)!==0&&(e.lightMapEncoding=t.lightmapPixelFormat===Ae?"rgbm":"linear",e.lightMap=!0,e.lightMapChannel="rgb",e.lightMapUv=1,e.lightMapTransform=0,e.litOptions.lightMapWithoutAmbient=!s.lightMap,(i&px)!==0&&(e.dirLightMap=!0),(i&mx)!==0&&(e.litOptions.lightMapWithoutAmbient=!1))),s.useLighting){const a=[],n=i?i>>16:As;e.litOptions.lightMaskDynamic=!!(n&As),r&&(gs.collectLights(oe,r[oe],a,n),t.clusteredLightingEnabled||(gs.collectLights(Me,r[Me],a,n),gs.collectLights(Re,r[Re],a,n))),e.litOptions.lights=a}else e.litOptions.lights=[];e.litOptions.lights.length===0&&!t.clusteredLightingEnabled&&(e.litOptions.noShadow=!0)}_getMapTransformID(e,t){if(!e)return 0;let s=this._mapXForms[t];s||(s=[],this._mapXForms[t]=s);for(let i=0;i<s.length;i++)if(RS(s[i][0].value,e[0].value)&&RS(s[i][1].value,e[1].value))return i+1;return s.push(e)}}function $e(o,e=!0,t=!0){const s={};return s[`${o}Map`]="texture",s[`${o}MapTiling`]="vec2",s[`${o}MapOffset`]="vec2",s[`${o}MapRotation`]="number",s[`${o}MapUv`]="number",e&&(s[`${o}MapChannel`]="string",t&&(s[`${o}VertexColor`]="boolean",s[`${o}VertexColorChannel`]="string")),s}const ao={name:"string",chunks:"chunks",mappingFormat:"string",_engine:"boolean",ambient:"rgb",...$e("ao"),...$e("aoDetail",!0,!1),aoDetailMode:"string",aoIntensity:"number",diffuse:"rgb",...$e("diffuse"),...$e("diffuseDetail",!0,!1),diffuseDetailMode:"string",specular:"rgb",specularTint:"boolean",...$e("specular"),occludeSpecular:"enum:occludeSpecular",specularityFactor:"number",specularityFactorTint:"boolean",...$e("specularityFactor"),useMetalness:"boolean",metalness:"number",enableGGXSpecular:"boolean",metalnessTint:"boolean",...$e("metalness"),useMetalnessSpecularColor:"boolean",anisotropyIntensity:"number",anisotropyRotation:"number",...$e("anisotropy"),shininess:"number",gloss:"number",glossInvert:"boolean",...$e("gloss"),clearCoat:"number",...$e("clearCoat"),clearCoatGloss:"number",clearCoatGlossInvert:"boolean",...$e("clearCoatGloss"),clearCoatBumpiness:"number",...$e("clearCoatNormal",!1),useSheen:"boolean",sheen:"rgb",...$e("sheen"),sheenGloss:"number",sheenGlossInvert:"boolean",...$e("sheenGloss"),fresnelModel:"number",emissive:"rgb",...$e("emissive"),emissiveIntensity:"number",...$e("normal",!1),bumpiness:"number",...$e("normalDetail",!1),normalDetailMapBumpiness:"number",...$e("height",!0,!1),heightMapFactor:"number",alphaToCoverage:"boolean",alphaTest:"number",alphaFade:"number",opacity:"number",...$e("opacity"),opacityFadesSpecular:"boolean",opacityDither:"string",opacityShadowDither:"string",reflectivity:"number",refraction:"number",refractionTint:"boolean",...$e("refraction"),refractionIndex:"number",dispersion:"number",thickness:"number",thicknessTint:"boolean",...$e("thickness"),attenuation:"rgb",attenuationDistance:"number",useDynamicRefraction:"boolean",sphereMap:"texture",cubeMap:"cubemap",cubeMapProjection:"number",cubeMapProjectionBox:"boundingbox",useIridescence:"boolean",iridescence:"number",iridescenceTint:"boolean",...$e("iridescence"),iridescenceThicknessTint:"boolean",iridescenceThicknessMin:"number",iridescenceThicknessMax:"number",iridescenceRefractionIndex:"number",...$e("iridescenceThickness"),...$e("light"),depthTest:"boolean",depthFunc:"enum:depthFunc",depthWrite:"boolean",depthBias:"number",slopeDepthBias:"number",cull:"enum:cull",blendType:"enum:blendType",useFog:"boolean",useLighting:"boolean",useSkybox:"boolean",useTonemap:"boolean",envAtlas:"texture",twoSidedLighting:"boolean",shadowCatcher:"boolean"},pf=[];for(const o in ao)ao[o]==="texture"&&pf.push(o);const tg=[];for(const o in ao)ao[o]==="cubemap"&&tg.push(o);const SR={aoMapVertexColor:"boolean",diffuseMapTint:"boolean",diffuseMapVertexColor:"boolean",emissiveMapTint:"boolean",emissiveMapVertexColor:"boolean",glossMapVertexColor:"boolean",metalnessMapVertexColor:"boolean",opacityMapVertexColor:"boolean",specularAntialias:"boolean",specularMapTint:"boolean",specularMapVertexColor:"boolean",ambientTint:"boolean",emissiveTint:"boolean",diffuseTint:"boolean",sheenTint:"boolean",conserveEnergy:"boolean",useGamma:"boolean",useGammaTonemap:"boolean",sheenGlossTint:"boolean",anisotropy:"boolean"},rc={},Nx={};let Lo=new Set;const Ih=new q,rd=class rd extends ql{constructor(){super(),this.userAttributes=new Map,this._assetReferences={},this._activeParams=new Set,this._activeLightingParams=new Set,this.shaderOptBuilder=new vR,this.reset()}reset(){Object.keys(rc).forEach(e=>{this[`_${e}`]=rc[e].value()}),this._uniformCache={}}copy(e){return super.copy(e),Object.keys(rc).forEach(t=>{this[t]=e[t]}),this.userAttributes=new Map(e.userAttributes),this}setAttribute(e,t){this.userAttributes.set(t,e)}_setParameter(e,t){Lo.add(e),this.setParameter(e,t)}_setParameters(e){e.forEach(t=>{this._setParameter(t.name,t.value)})}_processParameters(e){const t=this[e];t.forEach(s=>{Lo.has(s)||delete this.parameters[s]}),this[e]=Lo,Lo=t,Lo.clear()}_updateMap(e){const t=`${e}Map`,s=this[t];if(s){this._setParameter(`texture_${t}`,s);const i=`${t}Transform`,r=this.getUniform(i);r&&this._setParameters(r)}}_allocUniform(e,t){let s=this._uniformCache[e];return s||(s=t(),this._uniformCache[e]=s),s}getUniform(e,t,s){return Nx[e](this,t,s)}updateUniforms(e,t){const s=i=>this.getUniform(i,e,t);this._setParameter("material_ambient",s("ambient")),this._setParameter("material_diffuse",s("diffuse")),this._setParameter("material_aoIntensity",this.aoIntensity),this.useMetalness?((!this.metalnessMap||this.metalness<1)&&this._setParameter("material_metalness",this.metalness),(!this.specularMap||this.specularTint)&&this._setParameter("material_specular",s("specular")),(!this.specularityFactorMap||this.specularityFactorTint)&&this._setParameter("material_specularityFactor",this.specularityFactor),this._setParameter("material_sheen",s("sheen")),this._setParameter("material_sheenGloss",this.sheenGloss),this._setParameter("material_refractionIndex",this.refractionIndex)):(!this.specularMap||this.specularTint)&&this._setParameter("material_specular",s("specular")),this.enableGGXSpecular&&(this._setParameter("material_anisotropyIntensity",this.anisotropyIntensity),this._setParameter("material_anisotropyRotation",[Math.cos(this.anisotropyRotation*B.DEG_TO_RAD),Math.sin(this.anisotropyRotation*B.DEG_TO_RAD)])),this.clearCoat>0&&(this._setParameter("material_clearCoat",this.clearCoat),this._setParameter("material_clearCoatGloss",this.clearCoatGloss),this._setParameter("material_clearCoatBumpiness",this.clearCoatBumpiness)),this._setParameter("material_gloss",this.gloss),this._setParameter("material_emissive",s("emissive")),this._setParameter("material_emissiveIntensity",this.emissiveIntensity),this.refraction>0&&this._setParameter("material_refraction",this.refraction),this.dispersion>0&&this._setParameter("material_dispersion",this.dispersion),this.useDynamicRefraction&&(this._setParameter("material_thickness",this.thickness),this._setParameter("material_attenuation",s("attenuation")),this._setParameter("material_invAttenuationDistance",this.attenuationDistance===0?0:1/this.attenuationDistance)),this.useIridescence&&(this._setParameter("material_iridescence",this.iridescence),this._setParameter("material_iridescenceRefractionIndex",this.iridescenceRefractionIndex),this._setParameter("material_iridescenceThicknessMin",this.iridescenceThicknessMin),this._setParameter("material_iridescenceThicknessMax",this.iridescenceThicknessMax)),this._setParameter("material_opacity",this.opacity),this.opacityFadesSpecular===!1&&this._setParameter("material_alphaFade",this.alphaFade),this.occludeSpecular&&this._setParameter("material_occludeSpecularIntensity",this.occludeSpecularIntensity),this.cubeMapProjection===nx&&this._setParameter(s("cubeMapProjectionBox"));for(const i in On)this._updateMap(i);this.ambientSH&&this._setParameter("ambientSH[0]",this.ambientSH),this.normalMap&&this._setParameter("material_bumpiness",this.bumpiness),this.normalMap&&this.normalDetailMap&&this._setParameter("material_normalDetailMapBumpiness",this.normalDetailMapBumpiness),this.heightMap&&this._setParameter("material_heightMapFactor",s("heightMapFactor")),this.envAtlas&&this.cubeMap?(this._setParameter("texture_envAtlas",this.envAtlas),this._setParameter("texture_cubeMap",this.cubeMap)):this.envAtlas?this._setParameter("texture_envAtlas",this.envAtlas):this.cubeMap?this._setParameter("texture_cubeMap",this.cubeMap):this.sphereMap&&this._setParameter("texture_sphereMap",this.sphereMap),this._setParameter("material_reflectivity",this.reflectivity),this._processParameters("_activeParams"),super.updateUniforms(e,t)}updateEnvUniforms(e,t){!(this.envAtlas||this.cubeMap||this.sphereMap)&&this.useSkybox&&(t.envAtlas&&t.skybox?(this._setParameter("texture_envAtlas",t.envAtlas),this._setParameter("texture_cubeMap",t.skybox)):t.envAtlas?this._setParameter("texture_envAtlas",t.envAtlas):t.skybox&&this._setParameter("texture_cubeMap",t.skybox)),this._processParameters("_activeLightingParams")}getShaderVariant(e){const{device:t,scene:s,pass:i,objDefs:r,sortedLights:a,cameraShaderParams:n}=e;this.updateEnvUniforms(t,s);const l=Js.get(t).getByIndex(i),h=i===df||i===cf||l.isShadow;let c=h?gu.optionsContextMin:gu.optionsContext;c.defines=vt.getCoreDefines(this,e),h?this.shaderOptBuilder.updateMinRef(c,s,this,r,i,a):this.shaderOptBuilder.updateRef(c,s,n,this,r,i,a),this.useFog||c.defines.set("FOG","NONE"),c.defines.set("TONEMAP",lx[c.litOptions.toneMap]),this.onUpdateShader&&(c=this.onUpdateShader(c));const d=new ff(e.viewUniformFormat,e.viewBindGroupFormat,e.vertexFormat),f=io(t);f.register("standard",gu);const u=f.getProgram("standard",c,d,this.userId);return this._dirtyShader=!1,u}destroy(){for(const e in this._assetReferences)this._assetReferences[e]._unbind();this._assetReferences=null,super.destroy()}};rd.TEXTURE_PARAMETERS=pf,rd.CUBEMAP_PARAMETERS=tg;let bs=rd;const mf=(o,e)=>{Nx[o]=e},sg=(o,e,t,s)=>{Object.defineProperty(bs.prototype,o,{get:s||function(){return this[`_${o}`]},set:t}),rc[o]={value:e}},yR=o=>{const e=`_${o.name}`,t=o.dirtyShaderFunc||(()=>!0),s=function(i){const r=this[e];r!==i&&(this._dirtyShader=this._dirtyShader||t(r,i),this[e]=i)};sg(o.name,()=>o.defaultValue,s,o.getterFunc)},TR=o=>{const e=`_${o.name}`,t=o.dirtyShaderFunc||(()=>!0),s=function(i){const r=this[e];r.equals(i)||(this._dirtyShader=this._dirtyShader||t(r,i),this[e]=r.copy(i))};sg(o.name,()=>o.defaultValue.clone(),s,o.getterFunc)},Jt=o=>o.defaultValue&&o.defaultValue.clone?TR(o):yR(o);function ke(o,e="rgb",t=!0,s=0){On[o]=e.length||-1,Jt({name:`${o}Map`,defaultValue:null,dirtyShaderFunc:(l,h)=>!!l!=!!h||l&&(l.type!==h.type||l.format!==h.format)}),Jt({name:`${o}MapTiling`,defaultValue:new z(1,1)}),Jt({name:`${o}MapOffset`,defaultValue:new z(0,0)}),Jt({name:`${o}MapRotation`,defaultValue:0}),Jt({name:`${o}MapUv`,defaultValue:s}),e&&(Jt({name:`${o}MapChannel`,defaultValue:e}),t&&(Jt({name:`${o}VertexColor`,defaultValue:!1}),Jt({name:`${o}VertexColorChannel`,defaultValue:e})));const i=`${o}MapTiling`,r=`${o}MapOffset`,a=`${o}MapRotation`,n=`${o}MapTransform`;mf(n,(l,h,c)=>{const d=l[i],f=l[r],u=l[a];if(d.x===1&&d.y===1&&f.x===0&&f.y===0&&u===0)return null;const p=l._allocUniform(n,()=>[{name:`texture_${n}0`,value:new Float32Array(3)},{name:`texture_${n}1`,value:new Float32Array(3)}]),m=Math.cos(u*B.DEG_TO_RAD),_=Math.sin(u*B.DEG_TO_RAD),g=p[0].value;g[0]=m*d.x,g[1]=-_*d.y,g[2]=f.x;const y=p[1].value;return y[0]=_*d.x,y[1]=m*d.y,y[2]=1-d.y-f.y,p})}function $a(o,e){Jt({name:o,defaultValue:e,getterFunc:function(){return this._dirtyShader=!0,this[`_${o}`]}}),mf(o,(t,s,i)=>{const r=t._allocUniform(o,()=>new Float32Array(3)),a=t[o];return Ih.linear(a),r[0]=Ih.r,r[1]=Ih.g,r[2]=Ih.b,r})}function xe(o,e,t){Jt({name:o,defaultValue:e,dirtyShaderFunc:(s,i)=>(s===0||s===1)!=(i===0||i===1)}),mf(o,t)}function Io(o,e){Jt({name:o,defaultValue:null,dirtyShaderFunc:(t,s)=>!!t==!!s}),mf(o,e)}function ye(o,e){Jt({name:o,defaultValue:e})}function xR(){$a("ambient",new q(1,1,1)),$a("diffuse",new q(1,1,1)),$a("specular",new q(0,0,0)),$a("emissive",new q(0,0,0)),$a("sheen",new q(1,1,1)),$a("attenuation",new q(1,1,1)),xe("emissiveIntensity",1),xe("specularityFactor",1),xe("sheenGloss",0),xe("gloss",.25),xe("aoIntensity",1),xe("heightMapFactor",1,(s,i,r)=>s.heightMapFactor*.025),xe("opacity",1),xe("alphaFade",1),xe("alphaTest",0),xe("bumpiness",1),xe("normalDetailMapBumpiness",1),xe("reflectivity",1),xe("occludeSpecularIntensity",1),xe("refraction",0),xe("refractionIndex",1/1.5),xe("dispersion",0),xe("thickness",0),xe("attenuationDistance",0),xe("metalness",1),xe("anisotropyIntensity",0),xe("anisotropyRotation",0),xe("clearCoat",0),xe("clearCoatGloss",1),xe("clearCoatBumpiness",1),xe("aoUvSet",0,null),xe("iridescence",0),xe("iridescenceRefractionIndex",1/1.5),xe("iridescenceThicknessMin",0),xe("iridescenceThicknessMax",0),Io("ambientSH"),Io("cubeMapProjectionBox",(s,i,r)=>{const a=s._allocUniform("cubeMapProjectionBox",()=>[{name:"envBoxMin",value:new Float32Array(3)},{name:"envBoxMax",value:new Float32Array(3)}]),n=s.cubeMapProjectionBox.getMin(),l=a[0].value;l[0]=n.x,l[1]=n.y,l[2]=n.z;const h=s.cubeMapProjectionBox.getMax(),c=a[1].value;return c[0]=h.x,c[1]=h.y,c[2]=h.z,a}),ye("specularTint",!1),ye("specularityFactorTint",!1),ye("useMetalness",!1),ye("useMetalnessSpecularColor",!1),ye("useSheen",!1),ye("enableGGXSpecular",!1),ye("occludeDirect",!1),ye("opacityFadesSpecular",!0),ye("occludeSpecular",rf),ye("fresnelModel",F_),ye("useDynamicRefraction",!1),ye("cubeMapProjection",H_),ye("useFog",!0),ye("useLighting",!0),ye("useTonemap",!0),ye("useSkybox",!0),ye("forceUv1",!1),ye("pixelSnap",!1),ye("twoSidedLighting",!1),ye("nineSlicedMode",void 0),ye("msdfTextAttribute",!1),ye("useIridescence",!1),ye("glossInvert",!1),ye("sheenGlossInvert",!1),ye("clearCoatGlossInvert",!1),ye("opacityDither",_a),ye("opacityShadowDither",_a),ye("shadowCatcher",!1),ke("diffuse"),ke("specular"),ke("emissive"),ke("thickness","g"),ke("specularityFactor","g"),ke("normal",""),ke("metalness","g"),ke("gloss","g"),ke("opacity","a"),ke("refraction","g"),ke("height","g",!1),ke("ao","g"),ke("light","rgb",!0,1),ke("msdf",""),ke("diffuseDetail","rgb",!1),ke("normalDetail",""),ke("aoDetail","g",!1),ke("clearCoat","g"),ke("clearCoatGloss","g"),ke("clearCoatNormal",""),ke("sheen","rgb"),ke("sheenGloss","g"),ke("iridescence","g"),ke("iridescenceThickness","g"),ke("anisotropy",""),ye("diffuseDetailMode",Nv),ye("aoDetailMode",Nv),Io("cubeMap"),Io("sphereMap"),Io("envAtlas");const o=function(){return this._prefilteredCubemaps},e=function(s){const i=this._prefilteredCubemaps;s=s||[];let r=!1,a=!0;for(let n=0;n<6;++n){const l=s[n]||null;i[n]!==l&&(i[n]=l,r=!0),a=a&&!!i[n]}r&&(a?this.envAtlas=Dx.generatePrefilteredAtlas(i,{target:this.envAtlas}):this.envAtlas&&(this.envAtlas.destroy(),this.envAtlas=null),this._dirtyShader=!0)},t=[null,null,null,null,null,null];sg("prefilteredCubemaps",()=>t.slice(),e,o)}xR();const ms=4/64,Ms=1-ms*2;class ig extends ya{constructor(e,t,s,i,r,a){super();const n=new x,l=new x,h=new x,c=new x,d=new x,f=new x,u=[],p=[],m=[],_=[],g=[];let y;if(s>0)for(let A=0;A<=i;A++)for(let v=0;v<=r;v++){const S=v/r*2*Math.PI-Math.PI,b=Math.sin(S),E=Math.cos(S);d.set(b*e,-s/2,E*e),c.set(b*t,s/2,E*t),n.lerp(d,c,A/i),l.sub2(c,d).normalize(),f.set(E,0,-b),h.cross(f,l).normalize(),u.push(n.x,n.y,n.z),p.push(h.x,h.y,h.z);let T=v/r,w=A/i;m.push(T,1-w);const P=w;if(w=T,T=P,T=T*Ms+ms,w=w*Ms+ms,T/=3,_.push(T,1-w),A<i&&v<r){const M=A*(r+1)+v,L=A*(r+1)+(v+1),D=(A+1)*(r+1)+v,k=(A+1)*(r+1)+(v+1);g.push(M,L,D),g.push(L,k,D)}}if(a){const A=Math.floor(r/2),v=r,S=s/2;for(let b=0;b<=A;b++){const E=b*Math.PI*.5/A,T=Math.sin(E),w=Math.cos(E);for(let P=0;P<=v;P++){const M=P*2*Math.PI/v-Math.PI/2,L=Math.sin(M),k=Math.cos(M)*T,G=w,U=L*T;let C=1-P/v,I=1-b/A;u.push(k*t,G*t+S,U*t),p.push(k,G,U),m.push(C,1-I),C=C*Ms+ms,I=I*Ms+ms,C/=3,I/=3,C+=1/3,_.push(C,1-I)}}y=(i+1)*(r+1);for(let b=0;b<A;++b)for(let E=0;E<v;++E){const T=b*(v+1)+E,w=T+v+1;g.push(y+T+1,y+w,y+T),g.push(y+T+1,y+w+1,y+w)}for(let b=0;b<=A;b++){const E=Math.PI*.5+b*Math.PI*.5/A,T=Math.sin(E),w=Math.cos(E);for(let P=0;P<=v;P++){const M=P*2*Math.PI/v-Math.PI/2,L=Math.sin(M),k=Math.cos(M)*T,G=w,U=L*T;let C=1-P/v,I=1-b/A;u.push(k*t,G*t-S,U*t),p.push(k,G,U),m.push(C,1-I),C=C*Ms+ms,I=I*Ms+ms,C/=3,I/=3,C+=2/3,_.push(C,1-I)}}y=(i+1)*(r+1)+(v+1)*(A+1);for(let b=0;b<A;++b)for(let E=0;E<v;++E){const T=b*(v+1)+E,w=T+v+1;g.push(y+T+1,y+w,y+T),g.push(y+T+1,y+w+1,y+w)}}else{if(y=(i+1)*(r+1),e>0)for(let A=0;A<r;A++){const v=A/r*2*Math.PI,S=Math.sin(v),b=-s/2,E=Math.cos(v);let T=1-(S+1)/2,w=(E+1)/2;u.push(S*e,b,E*e),p.push(0,-1,0),m.push(T,1-w),T=T*Ms+ms,w=w*Ms+ms,T/=3,w/=3,T+=1/3,_.push(T,1-w),A>1&&g.push(y,y+A,y+A-1)}if(y+=r,t>0)for(let A=0;A<r;A++){const v=A/r*2*Math.PI,S=Math.sin(v),b=s/2,E=Math.cos(v);let T=1-(S+1)/2,w=(E+1)/2;u.push(S*t,b,E*t),p.push(0,1,0),m.push(T,1-w),T=T*Ms+ms,w=w*Ms+ms,T/=3,w/=3,T+=2/3,_.push(T,1-w),A>1&&g.push(y,y+A-1,y+A)}}this.positions=u,this.normals=p,this.uvs=m,this.uvs1=_,this.indices=g}}class ER extends ig{constructor(e={}){const t=e.radius??.3,s=e.height??1,i=e.heightSegments??1,r=e.sides??20;super(t,t,s-2*t,i,r,!0),e.calculateTangents&&(this.tangents=gr(this.positions,this.normals,this.uvs,this.indices))}}class AR extends ig{constructor(e={}){const t=e.baseRadius??.5,s=e.peakRadius??0,i=e.height??1,r=e.heightSegments??5,a=e.capSegments??18;super(t,s,i,r,a,!1),e.calculateTangents&&(this.tangents=gr(this.positions,this.normals,this.uvs,this.indices))}}class bR extends ig{constructor(e={}){const t=e.radius??.5,s=e.height??1,i=e.heightSegments??5,r=e.capSegments??20;super(t,t,s,i,r,!1),e.calculateTangents&&(this.tangents=gr(this.positions,this.normals,this.uvs,this.indices))}}class wR extends ya{constructor(e={}){super();const t=e.halfExtents??new z(.5,.5),s=e.widthSegments??5,i=e.lengthSegments??5,r=[],a=[],n=[],l=[];let h=0;for(let c=0;c<=s;c++)for(let d=0;d<=i;d++){const f=-t.x+2*t.x*c/s,u=0,p=-(-t.y+2*t.y*d/i),m=c/s,_=d/i;r.push(f,u,p),a.push(0,1,0),n.push(m,1-_),c<s&&d<i&&(l.push(h+i+1,h+1,h),l.push(h+i+1,h+i+2,h+1)),h++}this.positions=r,this.normals=a,this.uvs=n,this.uvs1=n,this.indices=l,e.calculateTangents&&(this.tangents=gr(r,a,n,l))}}class CR extends ya{constructor(e={}){super();const t=e.tubeRadius??.2,s=e.ringRadius??.3,i=(e.sectorAngle??360)*B.DEG_TO_RAD,r=e.segments??30,a=e.sides??20,n=[],l=[],h=[],c=[];for(let d=0;d<=a;d++)for(let f=0;f<=r;f++){const u=Math.cos(i*f/r)*(s+t*Math.cos(2*Math.PI*d/a)),p=Math.sin(2*Math.PI*d/a)*t,m=Math.sin(i*f/r)*(s+t*Math.cos(2*Math.PI*d/a)),_=Math.cos(i*f/r)*Math.cos(2*Math.PI*d/a),g=Math.sin(2*Math.PI*d/a),y=Math.sin(i*f/r)*Math.cos(2*Math.PI*d/a),A=d/a,v=1-f/r;if(n.push(u,p,m),l.push(_,g,y),h.push(A,1-v),d<a&&f<r){const S=d*(r+1)+f,b=(d+1)*(r+1)+f,E=d*(r+1)+(f+1),T=(d+1)*(r+1)+(f+1);c.push(S,b,E),c.push(b,T,E)}}this.positions=n,this.normals=l,this.uvs=h,this.uvs1=h,this.indices=c,e.calculateTangents&&(this.tangents=gr(n,l,h,c))}}class PR{constructor(e,t){this.processedCache=new Map,this.definitionsCache=new Map,this._generators=new Map,this._device=e,this._isClearingCache=!1,this._precached=!1,this._programsCollection=[],this._defaultStdMatOption=new Fc,this._defaultStdMatOptionMin=new Fc;const s=new Tx;t.shaderOptBuilder.updateRef(this._defaultStdMatOption,{},s,t,null,[],wa,null),t.shaderOptBuilder.updateMinRef(this._defaultStdMatOptionMin,{},t,null,_x,null),e.on("destroy:shader",i=>{this.removeFromCache(i)})}destroy(){this.clearCache()}register(e,t){this._generators.has(e)||this._generators.set(e,t)}unregister(e){this._generators.has(e)&&this._generators.delete(e)}isRegistered(e){return this._generators.has(e)}generateShaderDefinition(e,t,s,i){let r=this.definitionsCache.get(s);if(!r){let a;i.litOptions?.lights&&(a=i.litOptions.lights,i.litOptions.lights=a.map(l=>{const h=l.clone?l.clone():l;return h.key=l.key,h})),this.storeNewProgram(t,i),i.litOptions?.lights&&(i.litOptions.lights=a),this._precached;const n=this._device;r=e.createShaderDefinition(n,i),r.name=r.name??(i.pass?`${t}-pass:${i.pass}`:t),this.definitionsCache.set(s,r)}return r}getCachedShader(e){return this.processedCache.get(e)}setCachedShader(e,t){this.processedCache.set(e,t)}getProgram(e,t,s,i){const r=this._generators.get(e);if(!r)return null;const a=r.generateKey(t),n=$s(a),l=s.generateKey(this._device),h=$s(l),c=`${n}#${h}`;let d=this.getCachedShader(c);if(!d){const f=this.generateShaderDefinition(r,e,n,t);let u="",p;t.pass!==void 0&&(p=Js.get(this._device).getByIndex(t.pass),u=`-${p.name}`),this._device.fire("shader:generate",{userMaterialId:i,shaderPassInfo:p,definition:f});const m={name:`${f.name}${u}-proc`,attributes:f.attributes,vshader:f.vshader,vincludes:f.vincludes,fincludes:f.fincludes,fshader:f.fshader,processingOptions:s,shaderLanguage:f.shaderLanguage,meshUniformBufferFormat:f.meshUniformBufferFormat,meshBindGroupFormat:f.meshBindGroupFormat};d=new YT(this._device,m),this.setCachedShader(c,d)}return d}storeNewProgram(e,t){let s={};if(e==="standard"){const i=this._getDefaultStdMatOptions(t.pass);for(const r in t)(t.hasOwnProperty(r)&&i[r]!==t[r]||r==="pass")&&(s[r]=t[r]);for(const r in t.litOptions)s[r]=t.litOptions[r]}else s=t;this._programsCollection.push(JSON.stringify({name:e,options:s}))}dumpPrograms(){let e=`let device = pc.app ? pc.app.graphicsDevice : pc.Application.getApplication().graphicsDevice;
`;e+="let shaders = [",this._programsCollection[0]&&(e+=`
	${this._programsCollection[0]}`);for(let s=1;s<this._programsCollection.length;++s)e+=`,
	${this._programsCollection[s]}`;e+=`
];
`,e+=`pc.getProgramLibrary(device).precompile(shaders);
`,e+=`if (pc.version != "${K0}" || pc.revision != "${FP}")
`,e+='	console.warn("precompile-shaders.js: engine version mismatch, rebuild shaders lib with current engine");';const t=document.createElement("a");t.setAttribute("href",`data:text/plain;charset=utf-8,${encodeURIComponent(e)}`),t.setAttribute("download","precompile-shaders.js"),t.style.display="none",document.body.appendChild(t),t.click(),document.body.removeChild(t)}clearCache(){this._isClearingCache=!0,this.processedCache.forEach(e=>{e.destroy()}),this.processedCache.clear(),this._isClearingCache=!1}removeFromCache(e){this._isClearingCache||this.processedCache.forEach((t,s)=>{e===t&&this.processedCache.delete(s)})}_getDefaultStdMatOptions(e){const t=Js.get(this._device).getByIndex(e);return e===df||e===cf||t.isShadow?this._defaultStdMatOptionMin:this._defaultStdMatOption}precompile(e){if(e){const t=new Array(e.length);for(let s=0;s<e.length;s++){if(e[s].name==="standard"){const i=e[s].options,r=this._getDefaultStdMatOptions(i.pass);for(const a in r)r.hasOwnProperty(a)&&i[a]===void 0&&(i[a]=r[a])}t[s]=this.getProgram(e[s].name,e[s].options)}}this._precached=!0}}const Xa=new $,OS=new Q,vu=new fe,NS=new fe,LR=new q(1,1,0,.4),Su=.28209479177387814;class IR{constructor(e,t,s,i,r){const a=e.getProp("x"),n=e.getProp("y"),l=e.getProp("z"),h=e.getProp("rot_1"),c=e.getProp("rot_2"),d=e.getProp("rot_3"),f=e.getProp("rot_0"),u=e.getProp("scale_0"),p=e.getProp("scale_1"),m=e.getProp("scale_2"),_=e.getProp("f_dc_0"),g=e.getProp("f_dc_1"),y=e.getProp("f_dc_2"),A=e.getProp("opacity"),v=S=>{if(S>0)return 1/(1+Math.exp(-S));const b=Math.exp(S);return b/(1+b)};this.read=S=>{t&&(t.x=a[S],t.y=n[S],t.z=l[S]),s&&s.set(h[S],c[S],d[S],f[S]),i&&i.set(Math.exp(u[S]),Math.exp(p[S]),Math.exp(m[S])),r&&r.set(.5+_[S]*Su,.5+g[S]*Su,.5+y[S]*Su,v(A[S]))}}}const FS=(o,e,t)=>{OS.set(t.x,t.y,t.z,t.w).normalize(),o.setTRS(e,OS,x.ONE)};class Ta{constructor(e,t=[]){this.elements=e,this.numSplats=this.getElement("vertex").count,this.comments=t}static calcSplatAabb(e,t,s,i){FS(Xa,t,s),vu.center.set(0,0,0),vu.halfExtents.set(i.x*2,i.y*2,i.z*2),e.setFromTransformedAabb(vu,Xa)}getProp(e,t="vertex"){return this.getElement(t)?.properties.find(s=>s.name===e)?.storage}getElement(e){return this.elements.find(t=>t.name===e)}addProp(e,t){this.getElement("vertex").properties.push({type:"float",name:e,storage:t,byteSize:4})}createIter(e,t,s,i){return new IR(this,e,t,s,i)}calcAabb(e,t){let s,i,r,a,n,l,h=!0;const c=this.getProp("x"),d=this.getProp("y"),f=this.getProp("z"),u=this.getProp("scale_0"),p=this.getProp("scale_1"),m=this.getProp("scale_2");for(let _=0;_<this.numSplats;++_){if(t&&!t(_))continue;const g=c[_],y=d[_],A=f[_],v=Math.max(u[_],p[_],m[_]);if(!isFinite(g)||!isFinite(y)||!isFinite(A)||!isFinite(v))continue;const S=2*Math.exp(v);h?(h=!1,s=g-S,i=y-S,r=A-S,a=g+S,n=y+S,l=A+S):(s=Math.min(s,g-S),i=Math.min(i,y-S),r=Math.min(r,A-S),a=Math.max(a,g+S),n=Math.max(n,y+S),l=Math.max(l,A+S))}return h||(e.center.set((s+a)*.5,(i+n)*.5,(r+l)*.5),e.halfExtents.set((a-s)*.5,(n-i)*.5,(l-r)*.5)),!h}calcAabbExact(e,t){const s=new x,i=new Q,r=new x,a=this.createIter(s,i,r);let n=!0;for(let l=0;l<this.numSplats;++l)t&&!t(l)||(a.read(l),n?(n=!1,Ta.calcSplatAabb(e,s,i,r)):(Ta.calcSplatAabb(NS,s,i,r),e.add(NS)));return!n}getCenters(e){const t=this.getProp("x"),s=this.getProp("y"),i=this.getProp("z");for(let r=0;r<this.numSplats;++r)e[r*3+0]=t[r],e[r*3+1]=s[r],e[r*3+2]=i[r]}calcFocalPoint(e,t){const s=this.getProp("x"),i=this.getProp("y"),r=this.getProp("z"),a=this.getProp("scale_0"),n=this.getProp("scale_1"),l=this.getProp("scale_2");e.x=0,e.y=0,e.z=0;let h=0;for(let c=0;c<this.numSplats;++c){if(t&&!t(c))continue;const d=s[c],f=i[c],u=r[c];if(!isFinite(d)||!isFinite(f)||!isFinite(u))continue;const p=1/(1+Math.exp(Math.max(a[c],n[c],l[c])));e.x+=d*p,e.y+=f*p,e.z+=u*p,h+=p}e.mulScalar(1/h)}renderWireframeBounds(e,t){const s=new x,i=new Q,r=new x,a=new x,n=new x,l=this.createIter(s,i,r);for(let h=0;h<this.numSplats;++h)l.read(h),FS(Xa,s,i),Xa.mul2(t,Xa),a.set(r.x*-2,r.y*-2,r.z*-2),n.set(r.x*2,r.y*2,r.z*2),e.immediate.drawWireAlignedBox(a,n,LR,!0,e.defaultDrawLayer,Xa)}get isCompressed(){return!1}get shBands(){return{9:1,24:2,45:3}[(()=>{for(let s=0;s<45;++s)if(!this.getProp(`f_rest_${s}`))return s;return 45})()]??0}calcMortonOrder(){const e=A=>{let v=A[0],S=A[0];for(let b=1;b<A.length;b++)A[b]<v&&(v=A[b]),A[b]>S&&(S=A[b]);return{min:v,max:S}},t=(A,v,S)=>{const b=E=>(E&=1023,E=(E^E<<16)&4278190335,E=(E^E<<8)&50393103,E=(E^E<<4)&51130563,E=(E^E<<2)&153391689,E);return(b(S)<<2)+(b(v)<<1)+b(A)},s=this.getProp("x"),i=this.getProp("y"),r=this.getProp("z"),{min:a,max:n}=e(s),{min:l,max:h}=e(i),{min:c,max:d}=e(r),f=a===n?0:1024/(n-a),u=l===h?0:1024/(h-l),p=c===d?0:1024/(d-c),m=new Map;for(let A=0;A<this.numSplats;A++){const v=Math.min(1023,Math.floor((s[A]-a)*f)),S=Math.min(1023,Math.floor((i[A]-l)*u)),b=Math.min(1023,Math.floor((r[A]-c)*p)),E=t(v,S,b),T=m.get(E);T?T.push(A):m.set(E,[A])}const _=Array.from(m.keys()).sort((A,v)=>A-v),g=new Uint32Array(this.numSplats);let y=0;for(let A=0;A<_.length;++A){const v=m.get(_[A]);for(let S=0;S<v.length;++S)g[y++]=v[S]}return g}reorder(e){const t=new Map,s=a=>{if(t.has(a)){const n=t.get(a);return t.delete(a),n}return new ArrayBuffer(a)},i=a=>{t.set(a.byteLength,a)},r=a=>{const n=new a.constructor(s(a.byteLength));for(let l=0;l<e.length;l++)n[l]=a[e[l]];return i(a.buffer),n};this.elements.forEach(a=>{a.properties.forEach(n=>{n.storage&&(n.storage=r(n.storage))})})}reorderData(){this.reorder(this.calcMortonOrder())}}class rg{constructor(e,t){this.device=e,this.gsplatData=t,this.centers=new Float32Array(t.numSplats*3),t.getCenters(this.centers),this.aabb=new fe,t.calcAabb(this.aabb);const s=128,r=Math.ceil(t.numSplats/s)*s/s,a=new Uint32Array(r);for(let c=0;c<r;++c)a[c]=c*s;const n=new Wt(e,[{semantic:__,components:1,type:Wd,asInt:!0}]),l=new Float32Array(12*s),h=new Uint32Array(6*s);for(let c=0;c<s;++c){l.set([-1,-1,c,1,-1,c,1,1,c,-1,1,c],c*12);const d=c*4;h.set([0+d,1+d,2+d,0+d,2+d,3+d],c*6)}this.mesh=new De(e),this.mesh.setPositions(l,3),this.mesh.setIndices(h),this.mesh.update(),this.mesh.incRefCount(),this.mesh.aabb.copy(this.aabb),this.instanceIndices=new si(e,n,r,{usage:Es,data:a.buffer})}destroy(){this.mesh?.destroy(),this.instanceIndices?.destroy()}get instanceSize(){return 128}get numSplats(){return this.gsplatData.numSplats}configureMaterial(e){}evalTextureSize(e){return z.ZERO}createTexture(e,t,s,i){return new ae(this.device,{name:e,width:s.x,height:s.y,format:t,cubemap:!1,mipmaps:!1,minFilter:pe,magFilter:pe,addressU:te,addressV:te,...i?{levels:[i]}:{}})}instantiate(){}}const MR=(o,e)=>{const t=[];for(let s=0;s<e;++s)t.push(o.getProp(`f_rest_${s}`));return t};class Fx extends rg{constructor(e,t){super(e,t);const s=t.numSplats,i=this.evalTextureSize(s);this.colorTexture=this.createTexture("splatColor",et,i),this.transformATexture=this.createTexture("transformA",Nt,i),this.transformBTexture=this.createTexture("transformB",et,i),this.updateColorData(t),this.updateTransformData(t),this.shBands=t.shBands,this.shBands>0&&(this.sh1to3Texture=this.createTexture("splatSH_1to3",Nt,i),this.shBands>1&&(this.sh4to7Texture=this.createTexture("splatSH_4to7",Nt,i),this.shBands>2?(this.sh8to11Texture=this.createTexture("splatSH_8to11",Nt,i),this.sh12to15Texture=this.createTexture("splatSH_12to15",Nt,i)):this.sh8to11Texture=this.createTexture("splatSH_8to11",Ol,i)),this.updateSHData(t))}destroy(){this.colorTexture?.destroy(),this.transformATexture?.destroy(),this.transformBTexture?.destroy(),this.sh1to3Texture?.destroy(),this.sh4to7Texture?.destroy(),this.sh8to11Texture?.destroy(),this.sh12to15Texture?.destroy(),super.destroy()}configureMaterial(e){e.setParameter("splatColor",this.colorTexture),e.setParameter("transformA",this.transformATexture),e.setParameter("transformB",this.transformBTexture),e.setDefine("SH_BANDS",this.shBands),this.sh1to3Texture&&e.setParameter("splatSH_1to3",this.sh1to3Texture),this.sh4to7Texture&&e.setParameter("splatSH_4to7",this.sh4to7Texture),this.sh8to11Texture&&e.setParameter("splatSH_8to11",this.sh8to11Texture),this.sh12to15Texture&&e.setParameter("splatSH_12to15",this.sh12to15Texture)}evalTextureSize(e){const t=Math.ceil(Math.sqrt(e)),s=Math.ceil(e/t);return new z(t,s)}updateColorData(e){const t=this.colorTexture;if(!t)return;const s=oa.float2Half,i=t.lock(),r=e.getProp("f_dc_0"),a=e.getProp("f_dc_1"),n=e.getProp("f_dc_2"),l=e.getProp("opacity"),h=.28209479177387814;for(let c=0;c<this.numSplats;++c){const d=r[c]*h+.5,f=a[c]*h+.5,u=n[c]*h+.5,p=1/(1+Math.exp(-l[c]));i[c*4+0]=s(d),i[c*4+1]=s(f),i[c*4+2]=s(u),i[c*4+3]=s(p)}t.unlock()}updateTransformData(e){const t=oa.float2Half;if(!this.transformATexture)return;const s=this.transformATexture.lock(),i=new Float32Array(s.buffer),r=this.transformBTexture.lock(),a=new x,n=new Q,l=new x,h=e.createIter(a,n,l);for(let c=0;c<this.numSplats;c++)h.read(c),n.normalize(),n.w<0&&n.mulScalar(-1),i[c*4+0]=a.x,i[c*4+1]=a.y,i[c*4+2]=a.z,s[c*4+3]=t(n.x)|t(n.y)<<16,r[c*4+0]=t(l.x),r[c*4+1]=t(l.y),r[c*4+2]=t(l.z),r[c*4+3]=t(n.z);this.transformATexture.unlock(),this.transformBTexture.unlock()}updateSHData(e){const t=this.sh1to3Texture.lock(),s=this.sh4to7Texture?.lock(),i=this.sh8to11Texture?.lock(),r=this.sh12to15Texture?.lock(),a={1:3,2:8,3:15}[this.shBands],n=MR(e,a*3),l=2047,h=1023,c=new Float32Array(1),d=new Uint32Array(c.buffer),f=new Array(a*3).fill(0);for(let u=0;u<e.numSplats;++u){for(let m=0;m<a;++m)f[m*3]=n[m][u],f[m*3+1]=n[m+a][u],f[m*3+2]=n[m+a*2][u];let p=f[0];for(let m=1;m<a*3;++m)p=Math.max(p,Math.abs(f[m]));if(p!==0){for(let m=0;m<a;++m)f[m*3+0]=Math.max(0,Math.min(l,Math.floor((f[m*3+0]/p*.5+.5)*l+.5))),f[m*3+1]=Math.max(0,Math.min(h,Math.floor((f[m*3+1]/p*.5+.5)*h+.5))),f[m*3+2]=Math.max(0,Math.min(l,Math.floor((f[m*3+2]/p*.5+.5)*l+.5)));c[0]=p,t[u*4+0]=d[0],t[u*4+1]=f[0]<<21|f[1]<<11|f[2],t[u*4+2]=f[3]<<21|f[4]<<11|f[5],t[u*4+3]=f[6]<<21|f[7]<<11|f[8],this.shBands>1&&(s[u*4+0]=f[9]<<21|f[10]<<11|f[11],s[u*4+1]=f[12]<<21|f[13]<<11|f[14],s[u*4+2]=f[15]<<21|f[16]<<11|f[17],s[u*4+3]=f[18]<<21|f[19]<<11|f[20],this.shBands>2?(i[u*4+0]=f[21]<<21|f[22]<<11|f[23],i[u*4+1]=f[24]<<21|f[25]<<11|f[26],i[u*4+2]=f[27]<<21|f[28]<<11|f[29],i[u*4+3]=f[30]<<21|f[31]<<11|f[32],r[u*4+0]=f[33]<<21|f[34]<<11|f[35],r[u*4+1]=f[36]<<21|f[37]<<11|f[38],r[u*4+2]=f[39]<<21|f[40]<<11|f[41],r[u*4+3]=f[42]<<21|f[43]<<11|f[44]):i[u]=f[21]<<21|f[22]<<11|f[23])}}this.sh1to3Texture.unlock(),this.sh4to7Texture?.unlock(),this.sh8to11Texture?.unlock(),this.sh12to15Texture?.unlock()}}const DR=`
	attribute vec2 vertex_position;
	void main(void) {
		gl_Position = vec4(vertex_position, 0.0, 1.0);
	}
`,RR=`
	#include "gsplatEvalSHVS"
	vec4 packRgb(vec3 v) {
		uvec3 vb = uvec3(clamp(v, vec3(0.0), vec3(1.0)) * vec3(2047.0, 2047.0, 1023.0));
		uint bits = (vb.x << 21) | (vb.y << 10) | vb.z;
		return vec4((uvec4(bits) >> uvec4(24, 16, 8, 0)) & uvec4(0xff)) / vec4(255.0);
	}
	uniform mediump vec3 dir;
	uniform mediump sampler2D centroids;
	uniform mediump float shN_mins;
	uniform mediump float shN_maxs;
	void main(void) {
		ivec2 uv = ivec2(gl_FragCoord.xy) * ivec2(SH_COEFFS, 1);
		mediump vec3 coefficients[SH_COEFFS];
		for (int i = 0; i < SH_COEFFS; i++) {
			vec3 s = texelFetch(centroids, ivec2(uv.x + i, uv.y), 0).xyz;
			coefficients[i] = mix(vec3(shN_mins), vec3(shN_maxs), s);
		}
		gl_FragColor = packRgb(evalSH(coefficients, dir) * 0.25 + 0.5);
	}
`,OR=`
	attribute vertex_position: vec2f;
	@vertex
	fn vertexMain(input: VertexInput) -> VertexOutput {
		var output: VertexOutput;
		output.position = vec4f(vertex_position, 0.0, 1.0);
		return output;
	}
`,NR=`
	#include "gsplatEvalSHVS"
	fn packRgb(v: vec3f) -> vec4f {
		let vb = vec3u(clamp(v, vec3f(0.0), vec3f(1.0)) * vec3f(2047.0, 2047.0, 1023.0));
		let bits = dot(vb, vec3u(1 << 21, 1 << 10, 1));
		return vec4f((vec4u(bits) >> vec4u(24, 16, 8, 0)) & vec4u(0xff)) / vec4f(255.0);
	}
	uniform dir: vec3f;
	uniform shN_mins: f32;
	uniform shN_maxs: f32;
	var centroids: texture_2d<f32>;
	@fragment
	fn fragmentMain(input: FragmentInput) -> FragmentOutput {
		var output: FragmentOutput;
		var uv = vec2i(input.position.xy) * vec2i(SH_COEFFS, 1);
		var coefficients: array<vec3f, SH_COEFFS>;
		for (var i: i32 = 0; i < SH_COEFFS; i++) {
			let s: vec3f = textureLoad(centroids, vec2i(uv.x + i, uv.y), 0).xyz;
			coefficients[i] = mix(vec3f(uniform.shN_mins), vec3f(uniform.shN_maxs), s);
		}
		output.color = packRgb(evalSH(&coefficients, uniform.dir) * 0.25 + 0.5);
		return output;
	}
`,FR=`
	uniform mediump sampler2D sh0;
	uniform highp sampler2D sh_labels;
	uniform mediump sampler2D sh_result;
	uniform vec4 sh0_mins;
	uniform vec4 sh0_maxs;
	float SH_C0 = 0.28209479177387814;
	vec3 unpackRgb(vec4 v) {
		uvec4 uv = uvec4(v * 255.0);
		uint bits = (uv.x << 24) | (uv.y << 16) | (uv.z << 8) | uv.w;
		uvec3 vb = (uvec3(bits) >> uvec3(21, 10, 0)) & uvec3(0x7ffu, 0x7ffu, 0x3ffu);
		return vec3(vb) / vec3(2047.0, 2047.0, 1023.0);
	}
	vec4 readColor(in SplatSource source) {
		vec4 baseSample = mix(sh0_mins, sh0_maxs, texelFetch(sh0, source.uv, 0));
		vec4 base = vec4(vec3(0.5) + baseSample.xyz * SH_C0, 1.0 / (1.0 + exp(-baseSample.w)));
		ivec2 labelSample = ivec2(texelFetch(sh_labels, source.uv, 0).xy * 255.0);
		int n = labelSample.x + labelSample.y * 256;
		vec4 shSample = texelFetch(sh_result, ivec2(n % 64, n / 64), 0);
		vec3 sh = (unpackRgb(shSample) - vec3(0.5)) * 4.0;
		return vec4(base.xyz + sh, base.w);
	}
`,kR=`
	var sh0: texture_2d<f32>;
	var sh_labels: texture_2d<f32>;
	var sh_result: texture_2d<f32>;
	uniform sh0_mins: vec4f;
	uniform sh0_maxs: vec4f;
	const SH_C0: f32 = 0.28209479177387814;
	fn unpackRgb(v: vec4f) -> vec3f {
		let bits = dot(vec4u(v * 255.0), vec4u(1u << 24, 1u << 16, 1u << 8, 1u));
		let vb = (vec3u(bits) >> vec3u(21, 10, 0)) & vec3u(0x7ffu, 0x7ffu, 0x3ffu);
		return vec3f(vb) / vec3f(2047.0, 2047.0, 1023.0);
	}
	fn readColor(source: ptr<function, SplatSource>) -> vec4f {
		let baseSample: vec4f = mix(uniform.sh0_mins, uniform.sh0_maxs, textureLoad(sh0, source.uv, 0));
		let base = vec4f(vec3f(0.5) + baseSample.xyz * SH_C0, 1.0 / (1.0 + exp(-baseSample.w)));
		let labelSample: vec2i = vec2i(textureLoad(sh_labels, source.uv, 0).xy * 255.0);
		let n = labelSample.x + labelSample.y * 256;
		let shSample: vec4f = textureLoad(sh_result, vec2i(n % 64, n / 64), 0);
		let sh: vec3f = (unpackRgb(shSample) - vec3f(0.5)) * 4.0;
		return vec4f(base.xyz + sh, base.w);
	}
`,UR=(o,e)=>{for(const t in e)o.resolve(t).setValue(e[t])};class BR extends os{execute(){this.executeCallback?.()}constructor(...e){super(...e),this.executeCallback=null}}const kS=new $,Mo=new x;class VR{constructor(e,t){this.prevDir=new x,this.updateMode="enable",this.device=e,this.gsplatInstance=t;const{resource:s}=t,i=new Map(de.get(e,e.isWebGPU?"wgsl":"glsl"));this.shader=vt.createShader(e,{uniqueName:"gsplatResolveSH",vertexGLSL:DR,fragmentGLSL:RR,vertexWGSL:OR,fragmentWGSL:NR,vertexIncludes:i,fragmentIncludes:i,fragmentDefines:new Map([["SH_BANDS",s.gsplatData.shBands.toString()]]),attributes:{vertex_position:ue}}),this.texture=s.createTexture("centroids",Ae,new z(64,1024)),this.renderTarget=new ct({colorBuffer:this.texture,depth:!1}),this.renderPass=new BR(e),this.renderPass.init(this.renderTarget,{}),this.renderPass.colorOps.clear=!0,this.quadRender=new Oc(this.shader);const{material:r}=t;r.setDefine("SH_BANDS","0");const{shaderChunks:a}=r;a.glsl.set("gsplatSogsColorVS",FR),a.wgsl.set("gsplatSogsColorVS",kR),r.update(),e.scope.resolve("sh_result").setValue(this.texture)}destroy(){const{gsplatInstance:e}=this,{material:t}=e;t.setDefine("SH_BANDS",e.resource.gsplatData.shBands.toString());const{shaderChunks:s}=t;s.glsl.delete("gsplatSogsColorVS"),s.wgsl.delete("gsplatSogsColorVS"),t.update(),this.quadRender.destroy(),this.renderPass.destroy(),this.renderTarget.destroy(),this.texture.destroy(),this.shader.destroy()}render(e,t){const{prevDir:s,updateMode:i}=this;if(i==="disable"||(kS.invert(t),kS.transformVector(e.forward,Mo),Mo.normalize(),i==="enable"&&Mo.equalsApprox(s,.001)))return;s.copy(Mo);const r=()=>{const{device:a}=this,{sh_centroids:n,meta:l}=this.gsplatInstance.resource.gsplatData;UR(a.scope,{dir:Mo.toArray(),centroids:n,shN_mins:l.shN.mins,shN_maxs:l.shN.maxs}),a.setCullMode(lt),a.setDepthState(Gt.NODEPTH),a.setStencilState(null,null),a.setBlendState(dt.NOBLEND),this.quadRender.render()};this.renderPass.executeCallback=r,this.renderPass.render()}}function zR(){const o=typeof self<"u"&&self||require("node:worker_threads").parentPort;let e,t,s,i,r,a,n=!1;const l={x:0,y:0,z:0},h={x:0,y:0,z:0},c={x:0,y:0,z:0},d={x:0,y:0,z:0};let f,u;const p=32,m=new Array(p).fill(0),_=new Array(p).fill(0),g=new Array(p).fill(0),y=(v,S,b)=>{for(;v<=S;){const E=S+v>>1,T=b(E);if(T>0)v=E+1;else if(T<0)S=E-1;else return E}return~v},A=()=>{if(!e||!t||t.length===0||!r||!a)return;const v=r.x,S=r.y,b=r.z,E=a.x,T=a.y,w=a.z,P=.001;if(!n&&Math.abs(v-l.x)<P&&Math.abs(S-l.y)<P&&Math.abs(b-l.z)<P&&Math.abs(E-h.x)<P&&Math.abs(T-h.y)<P&&Math.abs(w-h.z)<P)return;n=!1,l.x=v,l.y=S,l.z=b,h.x=E,h.y=T,h.z=w;let M,L;for(let N=0;N<8;++N){const F=N&1?c.x:d.x,W=N&2?c.y:d.y,X=N&4?c.z:d.z,V=F*E+W*T+X*w;N===0?M=L=V:(M=Math.min(M,V),L=Math.max(L,V))}const D=t.length/3,G=2**Math.max(10,Math.min(20,Math.round(Math.log2(D/4))))+1;f?.length!==D&&(f=new Uint32Array(D)),!u||u.length!==G?u=new Uint32Array(G):u.fill(0);const U=L-M;if(U<1e-6)for(let N=0;N<D;++N)f[N]=0,u[0]++;else{const N=s.length/4;m.fill(0);for(let V=0;V<N;++V){const Y=s[V*4+0],j=s[V*4+1],re=s[V*4+2],Ie=s[V*4+3],Ge=Y*E+j*T+re*w-M,We=Math.max(0,Math.floor((Ge-Ie)*p/U)),Cs=Math.min(p,Math.ceil((Ge+Ie)*p/U));for(let ri=We;ri<Cs;++ri)m[ri]++}const F=m.reduce((V,Y)=>V+Y,0);for(let V=0;V<p;++V)g[V]=m[V]/F*G>>>0;for(let V=0;V<p;++V)_[V]=V===0?0:_[V-1]+g[V-1];const W=U/p;let X=0;for(let V=0;V<D;++V){const Y=t[X++],j=t[X++],re=t[X++],Ie=(Y*E+j*T+re*w-M)/W,Ge=Ie>>>0,We=_[Ge]+g[Ge]*(Ie-Ge)>>>0;f[V]=We,u[We]++}}for(let N=1;N<G;N++)u[N]+=u[N-1];for(let N=0;N<D;N++){const F=f[N],W=--u[F];e[W]=N}const C=v*E+S*T+b*w,I=N=>{let F=e[N]*3;return t[F++]*E+t[F++]*T+t[F]*w-C},R=()=>{const N=y(0,D-1,F=>-I(F));return Math.min(D,Math.abs(N))},O=I(D-1)>=0?R():D;if(i)for(let N=0;N<D;++N)e[N]=i[e[N]];o.postMessage({order:e.buffer,count:O},[e.buffer]),e=null};o.addEventListener("message",v=>{const S=v.data??v;if(S.order&&(e=new Uint32Array(S.order)),S.centers)if(t=new Float32Array(S.centers),n=!0,S.chunks){const b=new Float32Array(S.chunks);s=new Float32Array(S.chunks,0,b.length*4/6),c.x=b[0],c.y=b[1],c.z=b[2],d.x=b[3],d.y=b[4],d.z=b[5];for(let E=0;E<b.length/6;++E){const T=b[E*6+0],w=b[E*6+1],P=b[E*6+2],M=b[E*6+3],L=b[E*6+4],D=b[E*6+5];s[E*4+0]=(T+M)*.5,s[E*4+1]=(w+L)*.5,s[E*4+2]=(P+D)*.5,s[E*4+3]=Math.sqrt((M-T)**2+(L-w)**2+(D-P)**2)*.5,T<c.x&&(c.x=T),w<c.y&&(c.y=w),P<c.z&&(c.z=P),M>d.x&&(d.x=M),L>d.y&&(d.y=L),D>d.z&&(d.z=D)}}else{const b=t.length/3,E=Math.ceil(b/256);s=new Float32Array(E*4),c.x=c.y=c.z=1/0,d.x=d.y=d.z=-1/0;let T,w,P,M,L,D;for(let k=0;k<E;++k){T=w=P=1/0,M=L=D=-1/0;const G=k*256,U=Math.min(b,(k+1)*256);for(let C=G;C<U;++C){const I=t[C*3+0],R=t[C*3+1],O=t[C*3+2],N=Number.isFinite(I),F=Number.isFinite(R),W=Number.isFinite(O);N||(t[C*3+0]=0),F||(t[C*3+1]=0),W||(t[C*3+2]=0),!(!N||!F||!W)&&(I<T?T=I:I>M&&(M=I),R<w?w=R:R>L&&(L=R),O<P?P=O:O>D&&(D=O),I<c.x?c.x=I:I>d.x&&(d.x=I),R<c.y?c.y=R:R>d.y&&(d.y=R),O<c.z?c.z=O:O>d.z&&(d.z=O))}s[k*4+0]=(T+M)*.5,s[k*4+1]=(w+L)*.5,s[k*4+2]=(P+D)*.5,s[k*4+3]=Math.sqrt((M-T)**2+(L-w)**2+(D-P)**2)*.5}}S.hasOwnProperty("mapping")&&(i=S.mapping?new Uint32Array(S.mapping):null,n=!0),S.cameraPosition&&(r=S.cameraPosition),S.cameraDirection&&(a=S.cameraDirection),A()})}class HR extends ne{constructor(){super();const e=s=>{const i=s.data??s,r=i.order,a=this.orderTexture._levels[0].buffer;this.worker.postMessage({order:a},[a]),this.orderTexture._levels[0]=new Uint32Array(r),this.orderTexture.upload(),this.fire("updated",i.count)},t=`(${zR.toString()})()`;Se.environment==="node"?(this.worker=new Worker(t,{eval:!0}),this.worker.on("message",e)):(this.worker=new Worker(URL.createObjectURL(new Blob([t],{type:"application/javascript"}))),this.worker.addEventListener("message",e))}destroy(){this.worker.terminate(),this.worker=null}init(e,t,s){this.orderTexture=e,this.centers=t.slice();const i=this.orderTexture.lock({mode:TT}).slice();this.orderTexture.unlock();for(let n=0;n<i.length;++n)i[n]=n;const r={order:i.buffer,centers:t.buffer,chunks:s?.buffer},a=[i.buffer,t.buffer].concat(s?[s.buffer]:[]);this.worker.postMessage(r,a)}setMapping(e){if(e){const t=new Float32Array(e.length*3);for(let s=0;s<e.length;++s){const i=e[s]*3,r=s*3;t[r+0]=this.centers[i+0],t[r+1]=this.centers[i+1],t[r+2]=this.centers[i+2]}this.worker.postMessage({centers:t.buffer,mapping:e.buffer},[t.buffer,e.buffer])}else{const t=this.centers.slice();this.worker.postMessage({centers:t.buffer,mapping:null},[t.buffer])}}setCamera(e,t){this.worker.postMessage({cameraPosition:{x:e.x,y:e.y,z:e.z},cameraDirection:{x:t.x,y:t.y,z:t.z}})}}var GR=`
	uniform highp sampler2D means_l;
	uniform highp sampler2D means_u;
	uniform highp sampler2D quats;
	uniform highp sampler2D scales;
	uniform highp sampler2D sh_labels;
	uniform highp uint numSplats;
	uint packU32(vec4 v) {
		return uint(v.x * 255.0) << 24u |
			   uint(v.y * 255.0) << 16u |
			   uint(v.z * 255.0) << 8u |
			   uint(v.w * 255.0);
	}
	uvec4 packU32(vec4 a, vec4 b, vec4 c, vec4 d) {
		return uvec4(packU32(a), packU32(b), packU32(c), packU32(d));
	}
	void main(void) {
		int w = int(textureSize(means_l, 0).x);
		ivec2 uv = ivec2(gl_FragCoord.xy);
		if (uint(uv.x + uv.y * w) >= numSplats) {
			discard;
		}
		vec3 meansLSample = texelFetch(means_l, uv, 0).xyz;
		vec3 meansUSample = texelFetch(means_u, uv, 0).xyz;
		vec4 quatsSample = texelFetch(quats, uv, 0);
		vec3 scalesSample = texelFetch(scales, uv, 0).xyz;
		vec2 shLabelsSample = texelFetch(sh_labels, uv, 0).xy;
		pcFragColor0 = packU32(
			vec4(meansLSample, shLabelsSample.x),
			vec4(meansUSample, shLabelsSample.y),
			vec4(quatsSample),
			vec4(scalesSample, 0.0)
		);
	}
`,WR=`
	var means_l: texture_2d<f32>;
	var means_u: texture_2d<f32>;
	var quats: texture_2d<f32>;
	var scales: texture_2d<f32>;
	var sh_labels: texture_2d<f32>;
	uniform numSplats: u32;
	fn packU32(v: vec4<f32>) -> u32 {
		return (u32(v.x * 255.0) << 24u)  |
			   (u32(v.y * 255.0) << 16u)  |
			   (u32(v.z * 255.0) << 8u) |
			   u32(v.w * 255.0);
	}
	fn packUVec32(a: vec4<f32>, b: vec4<f32>, c: vec4<f32>, d: vec4<f32>) -> vec4<u32> {
		return vec4<u32>(packU32(a), packU32(b), packU32(c), packU32(d));
	}
	@fragment
	fn fragmentMain(input: FragmentInput) -> FragmentOutput {
		var output: FragmentOutput;
		let w: u32 = textureDimensions(means_l, 0).x;
		let uv: vec2<u32> = vec2<u32>(pcPosition.xy);
		if (uv.x + uv.y * w >= uniform.numSplats) {
			discard;
			return output;
		}
		let meansLSample: vec3<f32> = textureLoad(means_l, uv, 0).xyz;
		let meansUSample: vec3<f32> = textureLoad(means_u, uv, 0).xyz;
		let quatsSample: vec4<f32> = textureLoad(quats, uv, 0);
		let scalesSample: vec3<f32> = textureLoad(scales, uv, 0).xyz;
		let shLabelsSample: vec2<f32> = textureLoad(sh_labels, uv, 0).xy;
		output.color = packUVec32(
			vec4(meansLSample, shLabelsSample.x),
			vec4(meansUSample, shLabelsSample.y),
			vec4(quatsSample),
			vec4(scalesSample, 0.0)
		);
		return output;
	}
`;const Nn=.28209479177387814,fi=o=>o.read(0,0,o.width,o.height,{mipLevel:0,face:0,immediate:!0}),$R=(o,e)=>{for(const t in e)o.resolve(t).setValue(e[t])};class XR{constructor(e,t,s,i,r,a){const n=(S,b,E)=>S*(1-E)+b*E,{meta:l}=e,{means:h,scales:c,sh0:d,shN:f}=l,u=t&&e.means_l._levels[0],p=t&&e.means_u._levels[0],m=s&&e.quats._levels[0],_=i&&e.scales._levels[0],g=r&&e.sh0._levels[0],y=a&&e.sh_labels._levels[0],A=a&&e.sh_centroids._levels[0],v=2/Math.sqrt(2);this.read=S=>{if(t){const b=n(h.mins[0],h.maxs[0],((p[S*4+0]<<8)+u[S*4+0])/65535),E=n(h.mins[1],h.maxs[1],((p[S*4+1]<<8)+u[S*4+1])/65535),T=n(h.mins[2],h.maxs[2],((p[S*4+2]<<8)+u[S*4+2])/65535);t.x=Math.sign(b)*(Math.exp(Math.abs(b))-1),t.y=Math.sign(E)*(Math.exp(Math.abs(E))-1),t.z=Math.sign(T)*(Math.exp(Math.abs(T))-1)}if(s){const b=(m[S*4+0]/255-.5)*v,E=(m[S*4+1]/255-.5)*v,T=(m[S*4+2]/255-.5)*v,w=Math.sqrt(Math.max(0,1-(b*b+E*E+T*T)));switch(m[S*4+3]-252){case 0:s.set(b,E,T,w);break;case 1:s.set(w,E,T,b);break;case 2:s.set(E,w,T,b);break;case 3:s.set(E,T,w,b);break}}if(i){const b=n(c.mins[0],c.maxs[0],_[S*4+0]/255),E=n(c.mins[1],c.maxs[1],_[S*4+1]/255),T=n(c.mins[2],c.maxs[2],_[S*4+2]/255);i.set(b,E,T)}if(r){const b=n(d.mins[0],d.maxs[0],g[S*4+0]/255),E=n(d.mins[1],d.maxs[1],g[S*4+1]/255),T=n(d.mins[2],d.maxs[2],g[S*4+2]/255),w=n(d.mins[3],d.maxs[3],g[S*4+3]/255);r.set(.5+b*Nn,.5+E*Nn,.5+T*Nn,1/(1+Math.exp(-w)))}if(a){const b=y[S*4+0]+(y[S*4+1]<<8),E=b%64*15,T=Math.floor(b/64);for(let w=0;w<3;++w)for(let P=0;P<15;++P)a[w*15+P]=n(f.mins,f.maxs,A[(E+P)*4+w+T*e.sh_centroids.width*4]/255)}}}}class kx{destroy(){this.means_l?.destroy(),this.means_u?.destroy(),this.quats?.destroy(),this.scales?.destroy(),this.sh0?.destroy(),this.sh_centroids?.destroy(),this.sh_labels?.destroy(),this.packedTexture?.destroy()}createIter(e,t,s,i,r){return new XR(this,e,t,s,i,r)}calcAabb(e){const{mins:t,maxs:s}=this.meta.means,i=r=>Math.sign(r)*(Math.exp(Math.abs(r))-1);e.center.set((i(t[0])+i(s[0]))*.5,(i(t[1])+i(s[1]))*.5,(i(t[2])+i(s[2]))*.5),e.halfExtents.set((i(s[0])-i(t[0]))*.5,(i(s[1])-i(t[1]))*.5,(i(s[2])-i(t[2]))*.5)}getCenters(e){const{meta:t,means_l:s,means_u:i,numSplats:r}=this,{means:a}=t,n=new Uint32Array(i._levels[0].buffer),l=new Uint32Array(s._levels[0].buffer),h=a.mins[0]/65535,c=a.mins[1]/65535,d=a.mins[2]/65535,f=a.maxs[0]/65535,u=a.maxs[1]/65535,p=a.maxs[2]/65535;for(let m=0;m<r;m++){const _=m,g=n[_],y=l[_],A=g<<8&65280|y&255,v=g&65280|y>>>8&255,S=g>>>8&65280|y>>>16&255,b=h*(65535-A)+f*A,E=c*(65535-v)+u*v,T=d*(65535-S)+p*S,w=b<0?-b:b,P=E<0?-E:E,M=T<0?-T:T;e[m*3]=(b<0?-1:1)*(Math.exp(w)-1),e[m*3+1]=(E<0?-1:1)*(Math.exp(P)-1),e[m*3+2]=(T<0?-1:1)*(Math.exp(M)-1)}}calcFocalPoint(e,t){e.set(0,0,0)}get isSogs(){return!0}get shBands(){return{192:1,512:2,960:3}[this.sh_centroids?.width]??0}async decompress(){const e=["x","y","z","f_dc_0","f_dc_1","f_dc_2","opacity","scale_0","scale_1","scale_2","rot_0","rot_1","rot_2","rot_3"],{shBands:t}=this,{means_l:s,means_u:i,quats:r,scales:a,sh0:n,sh_labels:l,sh_centroids:h}=this;if(s._levels[0]=await fi(s),i._levels[0]=await fi(i),r._levels[0]=await fi(r),a._levels[0]=await fi(a),n._levels[0]=await fi(n),t>0){l._levels[0]=await fi(l),h._levels[0]=await fi(h);const g=[];for(let y=0;y<45;++y)g.push(`f_rest_${y}`);e.splice(e.indexOf("f_dc_0")+1,0,...g)}const c={};e.forEach(g=>{c[g]=new Float32Array(this.numSplats)});const d=new x,f=new Q,u=new x,p=new K,m=t>0?new Float32Array(45):null,_=this.createIter(d,f,u,p,m);for(let g=0;g<this.numSplats;++g)if(_.read(g),c.x[g]=d.x,c.y[g]=d.y,c.z[g]=d.z,c.rot_1[g]=f.x,c.rot_2[g]=f.y,c.rot_3[g]=f.z,c.rot_0[g]=f.w,c.scale_0[g]=u.x,c.scale_1[g]=u.y,c.scale_2[g]=u.z,c.f_dc_0[g]=(p.x-.5)/Nn,c.f_dc_1[g]=(p.y-.5)/Nn,c.f_dc_2[g]=(p.z-.5)/Nn,c.opacity[g]=p.w<=0?-40:p.w>=1?40:-Math.log(1/p.w-1),m)for(let y=0;y<45;++y)c[`f_rest_${y}`][g]=m[y];return new Ta([{name:"vertex",count:this.numSplats,properties:e.map(g=>({name:g,type:"float",byteSize:4,storage:c[g]}))}])}packGpuMemory(){const{means_l:e,means_u:t,quats:s,scales:i,sh_labels:r,numSplats:a}=this,{device:n}=e,{scope:l}=n,h=vt.createShader(n,{uniqueName:"GsplatSogsReorderShader",attributes:{vertex_position:ue},vertexChunk:"fullscreenQuadVS",fragmentGLSL:GR,fragmentWGSL:WR,fragmentOutputTypes:["uvec4"]}),c=new ct({colorBuffer:this.packedTexture,depth:!1,mipLevel:0});n.setCullMode(lt),n.setBlendState(dt.NOBLEND),n.setDepthState(Gt.NODEPTH),$R(l,{means_l:e,means_u:t,quats:s,scales:i,sh_labels:r??e,numSplats:a}),fr(n,c,h),c.destroy(),h.destroy()}async prepareGpuData(){const{device:e,height:t,width:s}=this.means_l;this.means_l._levels[0]=await fi(this.means_l),this.means_u._levels[0]=await fi(this.means_u),this.packedTexture=new ae(e,{name:"sogsPackedTexture",width:s,height:t,format:Nt,mipmaps:!1}),e.on("devicerestored",()=>{this.packGpuMemory()}),this.packGpuMemory()}reorderData(){return this.prepareGpuData()}}const qR=new $,qa=new x,Ya=new x,Mh=[0,0];class YR{constructor(e,t={}){this.options={},this.sorter=null,this.lastCameraPosition=new x,this.lastCameraDirection=new x,this.resolveSH=null,this.cameras=[],this.resource=e,this.orderTexture=e.createTexture("splatOrder",Ol,e.evalTextureSize(e.numSplats)),t.material?(this._material=t.material,this._material.setParameter("splatOrder",this.orderTexture)):(this._material=new yl({uniqueName:"SplatMaterial",vertexGLSL:'#include "gsplatVS"',fragmentGLSL:'#include "gsplatPS"',vertexWGSL:'#include "gsplatVS"',fragmentWGSL:'#include "gsplatPS"',attributes:{vertex_position:ue,vertex_id_attrib:__}}),this.configureMaterial(this._material),this._material.update()),this.meshInstance=new Oe(e.mesh,this._material),this.meshInstance.setInstancing(e.instanceIndices,!0),this.meshInstance.gsplatInstance=this,this.meshInstance.instancingCount=0;const s=e.centers.slice(),i=e.chunks?.slice();this.sorter=new HR,this.sorter.init(this.orderTexture,s,i),this.sorter.on("updated",r=>{this.meshInstance.instancingCount=Math.ceil(r/e.instanceSize),this.material.setParameter("numSplats",r)}),this.setHighQualitySH(t.highQualitySH??!1)}destroy(){this.resolveSH?.destroy(),this.material?.destroy(),this.meshInstance?.destroy(),this.sorter?.destroy()}set material(e){this._material!==e&&(this._material=e,this._material.setParameter("splatOrder",this.orderTexture),this.meshInstance&&(this.meshInstance.material=e))}get material(){return this._material}configureMaterial(e,t={}){this.resource.configureMaterial(e),e.setParameter("numSplats",0),e.setParameter("splatOrder",this.orderTexture),e.setParameter("alphaClip",.3),e.setDefine(`DITHER_${t.dither?"BLUENOISE":"NONE"}`,""),e.cull=lt,e.blendType=t.dither?ts:pa,e.depthWrite=!!t.dither}updateViewport(e){const t=e?.camera,s=t?.renderTarget,{width:i,height:r}=s??this.resource.device;Mh[0]=i,Mh[1]=r;const a=t?.camera?.xr;a?.active&&a.views.list.length===2&&(Mh[0]*=.5),this.material.setParameter("viewport",Mh)}sort(e){if(this.sorter){const t=e.getWorldTransform();t.getTranslation(qa),t.getZ(Ya);const s=this.meshInstance.node.getWorldTransform(),i=qR.invert(s);i.transformPoint(qa,qa),i.transformVector(Ya,Ya),(!qa.equalsApprox(this.lastCameraPosition)||!Ya.equalsApprox(this.lastCameraDirection))&&(this.lastCameraPosition.copy(qa),this.lastCameraDirection.copy(Ya),this.sorter.setCamera(qa,Ya))}this.updateViewport(e)}update(){if(this.cameras.length>0){const e=this.cameras[0];this.sort(e._node),this.resolveSH?.render(e._node,this.meshInstance.node.getWorldTransform()),this.cameras.length=0}}setHighQualitySH(e){const{resource:t}=this,{gsplatData:s}=t;s instanceof kx&&s.shBands>0&&e===!!this.resolveSH&&(this.resolveSH?(this.resolveSH.destroy(),this.resolveSH=null):this.resolveSH=new VR(t.device,this))}}class jR extends rg{destroy(){this.gsplatData.destroy(),super.destroy()}configureMaterial(e){const{gsplatData:t}=this;e.setDefine("GSPLAT_SOGS_DATA",!0),e.setDefine("SH_BANDS",this.gsplatData.shBands),["packedTexture","sh0","sh_centroids"].forEach(s=>{t[s]&&e.setParameter(s,t[s])}),["means","scales","sh0","shN"].forEach(s=>{const i=t.meta[s];i&&(e.setParameter(`${s}_mins`,i.mins),e.setParameter(`${s}_maxs`,i.maxs))})}evalTextureSize(e){return new z(this.gsplatData.means_l.width,this.gsplatData.means_l.height)}}const KR="NONE",ZR="FILL_WINDOW",US="KEEP_ASPECT",gp="AUTO",QR="FIXED";let Ux;function ia(){return Ux}function vp(o){Ux=o}class JR{addRenderPass(e){e.frameUpdate();const t=e.beforePasses;for(let i=0;i<t.length;i++){const r=t[i];r.enabled&&this.addRenderPass(r)}e.enabled&&this.renderPasses.push(e);const s=e.afterPasses;for(let i=0;i<s.length;i++){const r=s[i];r.enabled&&this.addRenderPass(r)}}reset(){this.renderPasses.length=0}compile(){const e=this.renderTargetMap,t=this.renderPasses;for(let r=0;r<t.length;r++){const a=t[r],n=a.renderTarget;if(n!==void 0){const l=e.get(n);if(l){const h=a.colorArrayOps.length;for(let c=0;c<h;c++)a.colorArrayOps[c].clear||(l.colorArrayOps[c].store=!0);a.depthStencilOps.clearDepth||(l.depthStencilOps.storeDepth=!0),a.depthStencilOps.clearStencil||(l.depthStencilOps.storeStencil=!0)}e.set(n,a)}}for(let r=0;r<t.length-1;r++){const a=t[r],n=a.renderTarget,l=t[r+1],h=l.renderTarget;n!==h||n===void 0||l.depthStencilOps.clearDepth||l.depthStencilOps.clearStencil||l.colorArrayOps.some(c=>c.clear)||a.afterPasses.length>0||l.beforePasses.length>0||(a._skipEnd=!0,l._skipStart=!0)}let s=null,i=null;for(let r=0;r<t.length;r++){const a=t[r],n=a.renderTarget,l=n?.colorBuffer;if(l?.cubemap){if(s===l){const h=i.colorArrayOps.length;for(let c=0;c<h;c++)i.colorArrayOps[c].mipmaps=!1}s=n.colorBuffer,i=a}else a.requiresCubemaps&&(s=null,i=null)}e.clear()}render(e){this.compile();const t=this.renderPasses;for(let s=0;s<t.length;s++)t[s].render()}constructor(){this.renderPasses=[],this.renderTargetMap=new Map}}class e2{constructor(e,t){this.texture0=e,this.texture1=t}destroy(){this.texture0?.destroy(),this.texture1?.destroy()}}const BS=new Tt;class Xr{static createTexture(e,t,s,i=""){return new ae(e,{name:`AreaLightLUT${i}`,width:s,height:s,format:t,addressU:te,addressV:te,type:ti,magFilter:Ze,minFilter:pe,anisotropy:1,mipmaps:!1})}static applyTextures(e,t,s){BS.remove(e),BS.get(e,()=>new e2(t,t===s?null:s)),e.scope.resolve("areaLightsLutTex1").setValue(t),e.scope.resolve("areaLightsLutTex2").setValue(s)}static createPlaceholder(e){const t=Xr.createTexture(e,et,2,"placeholder");t.lock().fill(0),t.unlock(),Xr.applyTextures(e,t,t)}static set(e,t,s){function i(f,u,p){const m=Xr.createTexture(f,p,64);return m.lock().set(u),m.unlock(),m}function r(f){const u=f.length,p=new Uint16Array(u),m=oa.float2Half;for(let _=0;_<u;_++)p[_]=m(f[_]);return p}const a=t,n=s,l=r(a),h=r(n),c=i(e,l,et),d=i(e,h,et);Xr.applyTextures(e,c,d)}}const kc="en-US",Uc={en:"en-US",es:"en-ES",zh:"zh-CN","zh-HK":"zh-TW","zh-TW":"zh-HK","zh-MO":"zh-HK",fr:"fr-FR",de:"de-DE",it:"it-IT",ru:"ru-RU",ja:"ja-JP"},ag={};function vr(o,e){for(let t=0,s=o.length;t<s;t++)ag[o[t]]=e}function _i(o){const e=o.indexOf("-");return e!==-1?o.substring(0,e):o}function t2(o,e){const t=o.indexOf("-");return t!==-1?e+o.substring(t):e}function Bx(o,e){if(e[o])return o;let t=Uc[o];if(t&&e[t])return t;const s=_i(o);return t=Uc[s],e[t]?t:e[s]?s:kc}vr(["ja","ko","th","vi","zh","id"],o=>0);vr(["fa","hi"],o=>o>=0&&o<=1?0:1);vr(["fr","pt"],o=>o>=0&&o<2?0:1);vr(["da"],o=>o===1||!Number.isInteger(o)&&o>=0&&o<=1?0:1);vr(["de","en","it","el","es","tr","fi","sv","nb","no","ur"],o=>o===1?0:1);vr(["ru","uk"],o=>{if(Number.isInteger(o)){const e=o%10,t=o%100;if(e===1&&t!==11)return 0;if(e>=2&&e<=4&&(t<12||t>14))return 1;if(e===0||e>=5&&e<=9||t>=11&&t<=14)return 2}return 3});vr(["pl"],o=>{if(Number.isInteger(o)){if(o===1)return 0;const e=o%10,t=o%100;if(e>=2&&e<=4&&(t<12||t>14))return 1;if(e>=0&&e<=1||e>=5&&e<=9||t>=12&&t<=14)return 2}return 3});vr(["ar"],o=>{if(o===0)return 0;if(o===1)return 1;if(o===2)return 2;if(Number.isInteger(o)){const e=o%100;if(e>=3&&e<=10)return 3;if(e>=11&&e<=99)return 4}return 5});const s2=ag[_i(kc)];function yu(o){return ag[o]||s2}const no=new RegExp("^\\s*(?:(?:[a-z]+[a-z0-9\\-+.]*:)?//|data:|blob:)","i");class i2{constructor(e="",t="",s=null,i=null,r=null,a=null){this.url=e,this.filename=t,this.hash=s,this.size=i,this.opt=r,this.contents=a}equals(e){return this.url===e.url&&this.filename===e.filename&&this.hash===e.hash&&this.size===e.size&&this.opt===e.opt&&this.contents===e.contents}}let r2=-1;const a2={pvr:"extCompressedTexturePVRTC",dxt:"extCompressedTextureS3TC",etc2:"extCompressedTextureETC",etc1:"extCompressedTextureETC1",basis:"canvas"},VS=["pvr","dxt","etc2","etc1","basis"],Ns=class Ns extends ne{constructor(e,t,s,i={},r={}){super(),this._file=null,this._i18n={},this._preload=!1,this._resources=[],this.id=r2--,this.loaded=!1,this.loading=!1,this.options={},this.registry=null,this.tags=new vc(this),this.urlObject=null,this._name=e||"",this.type=t,this._data=i||{},this.options=r||{},s&&(this.file=s)}set name(e){if(this._name===e)return;const t=this._name;this._name=e,this.fire("name",this,this._name,t)}get name(){return this._name}set file(e){if(e&&e.variants&&["texture","textureatlas","bundle"].indexOf(this.type)!==-1){const i=this.registry?._loader?._app||ia(),r=i?.graphicsDevice;if(r)for(let a=0,n=VS.length;a<n;a++){const l=VS[a];if(e.variants[l]&&r[a2[l]]){e=e.variants[l];break}if(i.enableBundles){const h=i.bundles.listBundlesForAsset(this);if(h&&h.find(c=>c?.file?.variants[l]))break}}}const t=this._file,s=e?new i2(e.url,e.filename,e.hash,e.size,e.opt,e.contents):null;(!!s!=!!t||s&&!s.equals(t))&&(this._file=s,this.fire("change",this,"file",s,t),this.reload())}get file(){return this._file}set data(e){const t=this._data;this._data=e,e!==t&&(this.fire("change",this,"data",e,t),this.loaded&&this.registry._loader.patch(this,this.registry))}get data(){return this._data}set resource(e){const t=this._resources[0];this._resources[0]=e,this.fire("change",this,"resource",e,t)}get resource(){return this._resources[0]}set resources(e){const t=this._resources;this._resources=e,this.fire("change",this,"resources",e,t)}get resources(){return this._resources}set preload(e){e=!!e,this._preload!==e&&(this._preload=e,this._preload&&!this.loaded&&!this.loading&&this.registry&&this.registry.load(this))}get preload(){return this._preload}set loadFaces(e){e=!!e,(!this.hasOwnProperty("_loadFaces")||e!==this._loadFaces)&&(this._loadFaces=e,this.loaded&&this.registry._loader.patch(this,this.registry))}get loadFaces(){return this._loadFaces}getFileUrl(){const e=this.file;if(!e||!e.url)return null;let t=e.url;if(this.registry&&this.registry.prefix&&!no.test(t)&&(t=this.registry.prefix+t),this.type!=="script"&&e.hash){const s=t.indexOf("?")!==-1?"&":"?";t+=`${s}t=${e.hash}`}return t}getAbsoluteUrl(e){if(e.startsWith("blob:")||e.startsWith("data:"))return e;const t=le.getDirectory(this.file.url);return le.join(t,e)}getLocalizedAssetId(e){return e=Bx(e,this._i18n),this._i18n[e]||null}addLocalizedAssetId(e,t){this._i18n[e]=t,this.fire("add:localized",e,t)}removeLocalizedAssetId(e){const t=this._i18n[e];t&&(delete this._i18n[e],this.fire("remove:localized",e,t))}ready(e,t){t=t||this,this.loaded?e.call(t,this):this.once("load",s=>{e.call(t,s)})}reload(){this.loaded&&(this.loaded=!1,this.registry.load(this))}unload(){if(!this.loaded&&this._resources.length===0)return;this.fire("unload",this),this.registry.fire(`unload:${this.id}`,this);const e=this._resources;this.urlObject&&(URL.revokeObjectURL(this.urlObject),this.urlObject=null),this.resources=[],this.loaded=!1,this.file&&this.registry._loader.clearCache(this.getFileUrl(),this.type);for(let t=0;t<e.length;++t){const s=e[t];s&&s.destroy&&s.destroy()}}static fetchArrayBuffer(e,t,s,i=0){s?.file?.contents?setTimeout(()=>{t(null,s.file.contents)}):He.get(e,{cache:!0,responseType:"arraybuffer",retry:i>0,maxRetries:i},t)}};Ns.EVENT_LOAD="load",Ns.EVENT_UNLOAD="unload",Ns.EVENT_REMOVE="remove",Ns.EVENT_ERROR="error",Ns.EVENT_CHANGE="change",Ns.EVENT_PROGRESS="progress",Ns.EVENT_ADDLOCALIZED="add:localized",Ns.EVENT_REMOVELOCALIZED="remove:localized";let ie=Ns;class n2{constructor(e=null){this._index={},this._key=e}addItem(e){const t=e.tags._list;for(const s of t)this.add(s,e)}removeItem(e){const t=e.tags._list;for(const s of t)this.remove(s,e)}add(e,t){this._index[e]&&this._index[e].list.indexOf(t)!==-1||(this._index[e]||(this._index[e]={list:[]},this._key&&(this._index[e].keys={})),this._index[e].list.push(t),this._key&&(this._index[e].keys[t[this._key]]=t))}remove(e,t){if(!this._index[e]||this._key&&!this._index[e].keys[t[this._key]])return;const s=this._index[e].list.indexOf(t);s!==-1&&(this._index[e].list.splice(s,1),this._key&&delete this._index[e].keys[t[this._key]],this._index[e].list.length===0&&delete this._index[e])}find(e){const t={},s=[];let i,r,a,n,l;const h=(c,d)=>this._index[c].list.length-this._index[d].list.length;for(let c=0;c<e.length;c++){if(r=e[c],r instanceof Array){if(r.length===0)continue;if(r.length===1)r=r[0];else{l=!1;for(let d=0;d<r.length;d++)if(!this._index[r[d]]){l=!0;break}if(l)continue;a=r.slice(0).sort(h),n=a.slice(1),n.length===1&&(n=n[0]);for(let d=0;d<this._index[a[0]].list.length;d++)i=this._index[a[0]].list[d],(this._key?!t[i[this._key]]:s.indexOf(i)===-1)&&i.tags.has(n)&&(this._key&&(t[i[this._key]]=!0),s.push(i));continue}}if(r&&typeof r=="string"&&this._index[r])for(let d=0;d<this._index[r].list.length;d++)i=this._index[r].list[d],this._key?t[i[this._key]]||(t[i[this._key]]=!0,s.push(i)):s.indexOf(i)===-1&&s.push(i)}return s}}const En=class En extends ne{constructor(e){super(),this._assets=new Set,this._idToAsset=new Map,this._urlToAsset=new Map,this._nameToAsset=new Map,this._tags=new n2("id"),this.prefix=null,this.bundles=null,this._loader=e}list(e={}){const t=Array.from(this._assets);return e.preload!==void 0?t.filter(s=>s.preload===e.preload):t}add(e){this._assets.has(e)||(this._assets.add(e),this._idToAsset.set(e.id,e),e.file?.url&&this._urlToAsset.set(e.file.url,e),this._nameToAsset.has(e.name)||this._nameToAsset.set(e.name,new Set),this._nameToAsset.get(e.name).add(e),e.on("name",this._onNameChange,this),e.registry=this,this._tags.addItem(e),e.tags.on("add",this._onTagAdd,this),e.tags.on("remove",this._onTagRemove,this),this.fire("add",e),this.fire(`add:${e.id}`,e),e.file?.url&&this.fire(`add:url:${e.file.url}`,e),e.preload&&this.load(e))}remove(e){if(!this._assets.has(e))return!1;if(this._assets.delete(e),this._idToAsset.delete(e.id),e.file?.url&&this._urlToAsset.delete(e.file.url),e.off("name",this._onNameChange,this),this._nameToAsset.has(e.name)){const t=this._nameToAsset.get(e.name);t.delete(e),t.size===0&&this._nameToAsset.delete(e.name)}return this._tags.removeItem(e),e.tags.off("add",this._onTagAdd,this),e.tags.off("remove",this._onTagRemove,this),e.fire("remove",e),this.fire("remove",e),this.fire(`remove:${e.id}`,e),e.file?.url&&this.fire(`remove:url:${e.file.url}`,e),!0}get(e){return this._idToAsset.get(Number(e))}getByUrl(e){return this._urlToAsset.get(e)}load(e,t){if((e.loading||e.loaded)&&!t?.force)return;const s=e.file,i=()=>{this.fire("load",e),this.fire(`load:${e.id}`,e),s&&s.url&&this.fire(`load:url:${s.url}`,e),e.fire("load",e)},r=n=>{if(n instanceof Array?e.resources=n:e.resource=n,this._loader.patch(e,this),e.type==="bundle"){const l=e.data.assets;for(let h=0;h<l.length;h++){const c=this._idToAsset.get(l[h]);c&&!c.loaded&&this.load(c,{force:!0})}e.resource.loaded?i():(this.fire("load:start",e),this.fire(`load:start:${e.id}`,e),s&&s.url&&this.fire(`load:start:url:${s.url}`,e),e.fire("load:start",e),e.resource.on("load",i))}else i()},a=(n,l,h)=>{if(e.loaded=!0,e.loading=!1,n)this.fire("error",n,e),this.fire(`error:${e.id}`,n,e),e.fire("error",n,e);else{if(e.type==="script"){const c=this._loader.getHandler("script");c._cache[e.id]&&c._cache[e.id].parentNode===document.head&&document.head.removeChild(c._cache[e.id]),c._cache[e.id]=h}r(l)}};if(s||e.type==="cubemap"){this.fire("load:start",e),this.fire(`load:${e.id}:start`,e),e.loading=!0;const n=e.getFileUrl();if(e.type==="bundle"){const l=e.data.assets;for(let h=0;h<l.length;h++){const c=this._idToAsset.get(l[h]);c&&(c.loaded||c.resource||c.loading||(c.loading=!0))}}this._loader.load(n,e.type,a,e,t)}else{const n=this._loader.open(e.type,e.data);e.loaded=!0,r(n)}}loadFromUrl(e,t,s){this.loadFromUrlAndFilename(e,null,t,s)}loadFromUrlAndFilename(e,t,s,i){const r=le.getBasename(t||e),a={filename:t||r,url:e};let n=this.getByUrl(e);if(!n)n=new ie(r,s,a),this.add(n);else if(n.loaded){i(n.loadFromUrlError||null,n);return}const l=h=>{h.once("load",c=>{s==="material"?this._loadTextures(c,(d,f)=>{i(d,c)}):i(null,c)}),h.once("error",c=>{c&&(this.loadFromUrlError=c),i(c,h)}),this.load(h)};n.resource?i(null,n):s==="model"?this._loadModel(n,l):l(n)}_loadModel(e,t){const s=e.getFileUrl(),i=le.getExtension(s);if(i===".json"||i===".glb"){const r=le.getDirectory(s),a=le.getBasename(s),n=le.join(r,a.replace(i,".mapping.json"));this._loader.load(n,"json",(l,h)=>{l?(e.data={mapping:[]},t(e)):this._loadMaterials(e,h,(c,d)=>{e.data=h,t(e)})})}else t(e)}_loadMaterials(e,t,s){const i=[];let r=0;const a=(n,l)=>{this._loadTextures(l,(h,c)=>{i.push(l),i.length===r&&s(null,i)})};for(let n=0;n<t.mapping.length;n++){const l=t.mapping[n].path;if(l){r++;const h=e.getAbsoluteUrl(l);this.loadFromUrl(h,"material",a)}}r===0&&s(null,i)}_loadTextures(e,t){const s=[];let i=0;const r=e.data;if(r.mappingFormat!=="path"){t(null,s);return}const a=(l,h)=>{l&&console.error(l),s.push(h),s.length===i&&t(null,s)},n=pf;for(let l=0;l<n.length;l++){const h=r[n[l]];if(h&&typeof h=="string"){i++;const c=e.getAbsoluteUrl(h);this.loadFromUrl(c,"texture",a)}}i===0&&t(null,s)}_onTagAdd(e,t){this._tags.add(e,t)}_onTagRemove(e,t){this._tags.remove(e,t)}_onNameChange(e,t,s){if(this._nameToAsset.has(s)){const i=this._nameToAsset.get(s);i.delete(e),i.size===0&&this._nameToAsset.delete(s)}this._nameToAsset.has(e.name)||this._nameToAsset.set(e.name,new Set),this._nameToAsset.get(e.name).add(e)}findByTag(...e){return this._tags.find(e)}filter(e){return Array.from(this._assets).filter(t=>e(t))}find(e,t){const s=this._nameToAsset.get(e);if(!s)return null;for(const i of s)if(!t||i.type===t)return i;return null}findAll(e,t){const s=this._nameToAsset.get(e);if(!s)return[];const i=Array.from(s);return t?i.filter(r=>r.type===t):i}};En.EVENT_LOAD="load",En.EVENT_ADD="add",En.EVENT_REMOVE="remove",En.EVENT_ERROR="error";let Sp=En;class o2{constructor(e){this._idToBundle=new Map,this._assetToBundles=new Map,this._urlsToBundles=new Map,this._fileRequests=new Map,this._assets=e,this._assets.bundles=this,this._assets.on("add",this._onAssetAdd,this),this._assets.on("remove",this._onAssetRemove,this)}_onAssetAdd(e){if(e.type==="bundle"){this._idToBundle.set(e.id,e),this._assets.on(`load:start:${e.id}`,this._onBundleLoadStart,this),this._assets.on(`load:${e.id}`,this._onBundleLoad,this),this._assets.on(`error:${e.id}`,this._onBundleError,this);const t=e.data.assets;for(let s=0;s<t.length;s++)this._indexAssetInBundle(t[s],e)}else this._assetToBundles.has(e.id)&&this._indexAssetFileUrls(e)}_unbindAssetEvents(e){this._assets.off(`load:start:${e}`,this._onBundleLoadStart,this),this._assets.off(`load:${e}`,this._onBundleLoad,this),this._assets.off(`error:${e}`,this._onBundleError,this)}_indexAssetInBundle(e,t){let s=this._assetToBundles.get(e);s||(s=new Set,this._assetToBundles.set(e,s)),s.add(t);const i=this._assets.get(e);i&&this._indexAssetFileUrls(i)}_indexAssetFileUrls(e){const t=this._getAssetFileUrls(e);if(t)for(let s=0;s<t.length;s++){const i=this._assetToBundles.get(e.id);i&&this._urlsToBundles.set(t[s],i)}}_getAssetFileUrls(e){let t=e.getFileUrl();if(!t)return null;t=t.split("?")[0];const s=[t];if(e.type==="font"){const i=e.data.info.maps.length;for(let r=1;r<i;r++)s.push(t.replace(".png",`${r}.png`))}return s}_onAssetRemove(e){if(e.type==="bundle"){this._idToBundle.delete(e.id),this._unbindAssetEvents(e.id);const t=e.data.assets;for(let s=0;s<t.length;s++){const i=this._assetToBundles.get(t[s]);if(i&&(i.delete(e),i.size===0)){this._assetToBundles.delete(t[s]);for(const[r,a]of this._urlsToBundles)a===i&&this._urlsToBundles.delete(r)}}this._onBundleError(`Bundle ${e.id} was removed`)}else{if(!this._assetToBundles.get(e.id))return;this._assetToBundles.delete(e.id);const s=this._getAssetFileUrls(e);if(!s)return;for(let i=0;i<s.length;i++)this._urlsToBundles.delete(s[i])}}_onBundleLoadStart(e){e.resource.on("add",(t,s)=>{const i=this._fileRequests.get(t);if(i){for(let r=0;r<i.length;r++)i[r](null,s);this._fileRequests.delete(t)}})}_onBundleLoad(e){if(!e.resource){this._onBundleError(`Bundle ${e.id} failed to load`);return}if(this._fileRequests)for(const[t,s]of this._fileRequests){const i=this._urlsToBundles.get(t);if(!i||!i.has(e))continue;const r=decodeURIComponent(t);let a,n;if(e.resource.has(r))n=e.resource.get(r);else if(e.resource.loaded)a=`Bundle ${e.id} does not contain URL ${t}`;else continue;for(let l=0;l<s.length;l++)s[l](a,a||n);this._fileRequests.delete(t)}}_onBundleError(e){for(const[t,s]of this._fileRequests)if(!this._findLoadedOrLoadingBundleForUrl(t)){for(let r=0;r<s.length;r++)s[r](e);this._fileRequests.delete(t)}}_findLoadedOrLoadingBundleForUrl(e){const t=this._urlsToBundles.get(e);if(!t)return null;let s=null;for(const i of t){if(i.loaded&&i.resource)return i;i.loading&&(s=i)}return s}listBundlesForAsset(e){const t=this._assetToBundles.get(e.id);return t?Array.from(t):null}list(){return Array.from(this._idToBundle.values())}hasUrl(e){return this._urlsToBundles.has(e)}urlIsLoadedOrLoading(e){return!!this._findLoadedOrLoadingBundleForUrl(e)}loadUrl(e,t){const s=this._findLoadedOrLoadingBundleForUrl(e);if(!s){t(`URL ${e} not found in any bundles`);return}if(s.loaded){const r=decodeURIComponent(e);if(s.resource.has(r)){t(null,s.resource.get(r));return}else if(s.resource.loaded){t(`Bundle ${s.id} does not contain URL ${e}`);return}}let i=this._fileRequests.get(e);i||(i=[],this._fileRequests.set(e,i)),i.push(t)}destroy(){this._assets.off("add",this._onAssetAdd,this),this._assets.off("remove",this._onAssetRemove,this);for(const e of this._idToBundle.keys())this._unbindAssetEvents(e);this._assets=null,this._idToBundle.clear(),this._idToBundle=null,this._assetToBundles.clear(),this._assetToBundles=null,this._urlsToBundles.clear(),this._urlsToBundles=null,this._fileRequests.clear(),this._fileRequests=null}}class l2 extends ne{constructor(){super(),this.list=[]}add(e){const t=e.id;if(this[t])throw new Error(`ComponentSystem name '${t}' already registered or not allowed`);this[t]=e,this.list.push(e)}remove(e){const t=e.id;if(!this[t])throw new Error(`No ComponentSystem named '${t}' registered`);delete this[t];const s=this.list.indexOf(this[t]);s!==-1&&this.list.splice(s,1)}destroy(){this.off();for(let e=0;e<this.list.length;e++)this.list[e].destroy()}}const ad=class ad extends ne{addFile(e,t){this._index.has(e)||(this._index.set(e,t),this.fire("add",e,t))}has(e){return this._index.has(e)}get(e){return this._index.get(e)||null}destroy(){this._index.clear()}set loaded(e){!e||this._loaded||(this._loaded=!0,this.fire("load"))}get loaded(){return this._loaded}constructor(...e){super(...e),this._index=new Map,this._loaded=!1}};ad.EVENT_ADD="add",ad.EVENT_LOAD="load";let yp=ad;class h2 extends ne{constructor(e,t=""){super(),this.headerSize=512,this.paddingSize=512,this.bytesRead=0,this.bytesReceived=0,this.headerRead=!1,this.reader=null,this.data=new Uint8Array(0),this.decoder=null,this.prefix="",this.fileName="",this.fileSize=0,this.fileType="",this.ustarFormat="",this.prefix=t||"",this.reader=e.body.getReader(),this.reader.read().then(s=>{this.pump(s.done,s.value)}).catch(s=>{this.fire("error",s)})}pump(e,t){if(e)return this.fire("done"),null;this.bytesReceived+=t.byteLength;const s=new Uint8Array(this.data.length+t.length);for(s.set(this.data),s.set(t,this.data.length),this.data=s;this.readFile(););return this.reader.read().then(i=>{this.pump(i.done,i.value)}).catch(i=>{this.fire("error",i)})}readFile(){if(!this.headerRead&&this.bytesReceived>this.bytesRead+this.headerSize){this.headerRead=!0;const e=new DataView(this.data.buffer,this.bytesRead,this.headerSize);this.decoder??=new TextDecoder("windows-1252");const t=this.decoder.decode(e);if(this.fileName=t.substring(0,100).replace(/\0/g,""),this.fileSize=parseInt(t.substring(124,136),8),this.fileType=t.substring(156,157),this.ustarFormat=t.substring(257,263),this.ustarFormat.indexOf("ustar")!==-1){const s=t.substring(345,500).replace(/\0/g,"");s.length>0&&(this.fileName=s.trim()+this.fileName.trim())}this.bytesRead+=512}if(this.headerRead){if(this.bytesReceived<this.bytesRead+this.fileSize)return!1;if(this.fileType===""||this.fileType==="0"){const t=new DataView(this.data.buffer,this.bytesRead,this.fileSize),s={name:this.prefix+this.fileName,size:this.fileSize,data:t};this.fire("file",s)}this.bytesRead+=this.fileSize,this.headerRead=!1;const e=this.bytesRead%this.paddingSize;return e!==0&&(this.bytesRead+=this.paddingSize-e),!0}return!1}}class Ne{constructor(e,t){this.handlerType="",this._maxRetries=0,this._app=e,this.handlerType=t}set maxRetries(e){this._maxRetries=e}get maxRetries(){return this._maxRetries}load(e,t,s){}open(e,t,s){return t}patch(e,t){}}class c2 extends Ne{constructor(e){super(e,"bundle"),this._assets=e.assets}_fetchRetries(e,t,s=0){return new Promise((i,r)=>{const a=()=>{fetch(e,t).then(i).catch(n=>{s++,s<this.maxRetries?a():r(n)})};a()})}load(e,t){typeof e=="string"&&(e={load:e,original:e}),this._fetchRetries(e.load,{mode:"cors"},this.maxRetries).then(s=>{const i=new yp;t(null,i);const r=new h2(s,this._assets.prefix);r.on("file",a=>{i.addFile(a.name,a.data)}),r.on("done",()=>{i.loaded=!0}),r.on("error",a=>{t(a)})}).catch(s=>{t(s)})}open(e,t){return t}}class Fn{constructor(e){this._handlers={},this._requests={},this._cache={},this._app=e}addHandler(e,t){this._handlers[e]=t,t._loader=this}removeHandler(e){delete this._handlers[e]}getHandler(e){return this._handlers[e]}static makeKey(e,t){return`${e}-${t}`}load(e,t,s,i,r){const a=this._handlers[t];if(!a){const l=`No resource handler for asset type: '${t}' when loading [${e}]`;s(l);return}if(!e){this._loadNull(a,s,i);return}const n=Fn.makeKey(e,t);if(this._cache[n]!==void 0)s(null,this._cache[n]);else if(this._requests[n])this._requests[n].push(s);else{this._requests[n]=[s];const l=this,h=function(d,f){if(d){l._onFailure(n,d);return}if(f.load instanceof DataView){if(a.openBinary){if(!l._requests[n])return;try{const u=a.openBinary(f.load);l._onSuccess(n,u)}catch(u){l._onFailure(n,u)}return}f.load=URL.createObjectURL(new Blob([f.load])),i&&(i.urlObject&&URL.revokeObjectURL(i.urlObject),i.urlObject=f.load)}a.load(f,(u,p,m)=>{if(l._requests[n]){if(u){l._onFailure(n,u);return}try{l._onSuccess(n,a.open(f.original,p,i),m)}catch(_){l._onFailure(n,_)}}},i)},c=e.split("?")[0];if(this._app.enableBundles&&this._app.bundles.hasUrl(c)&&!(r&&r.bundlesIgnore)){if(!this._app.bundles.urlIsLoadedOrLoading(c)){const d=this._app.bundles.listBundlesForAsset(i);let f;r&&r.bundlesFilter&&(f=r.bundlesFilter(d)),f||(d?.sort((u,p)=>u.file.size-p.file.size),f=d?.[0]),f&&this._app.assets?.load(f)}this._app.bundles.loadUrl(c,(d,f)=>{h(d,{load:f,original:c})})}else h(null,{load:e,original:i&&i.file.filename||e})}}_loadNull(e,t,s){const i=function(r,a,n){if(r)t(r);else try{t(null,e.open(null,a,s),n)}catch(l){t(l)}};e.load(null,i,s)}_onSuccess(e,t,s){t!==null?this._cache[e]=t:delete this._cache[e];for(let i=0;i<this._requests[e].length;i++)this._requests[e][i](null,t,s);delete this._requests[e]}_onFailure(e,t){if(console.error(t),this._requests[e]){for(let s=0;s<this._requests[e].length;s++)this._requests[e][s](t);delete this._requests[e]}}open(e,t){const s=this._handlers[e];return s?s.open(null,t):(console.warn(`No resource handler found for: ${e}`),t)}patch(e,t){const s=this._handlers[e.type];if(!s){console.warn(`No resource handler found for: ${e.type}`);return}s.patch&&s.patch(e,t)}clearCache(e,t){const s=Fn.makeKey(e,t);delete this._cache[s]}getFromCache(e,t){const s=Fn.makeKey(e,t);if(this._cache[s])return this._cache[s]}enableRetry(e=5){e=Math.max(0,e)||0;for(const t in this._handlers)this._handlers[t].maxRetries=e}disableRetry(){for(const e in this._handlers)this._handlers[e].maxRetries=0}destroy(){this._handlers={},this._requests={},this._cache={}}}class d2{_validate(e){if(!e.header)throw new Error('pc.I18n#addData: Missing "header" field');if(!e.header.version)throw new Error('pc.I18n#addData: Missing "header.version" field');if(e.header.version!==1)throw new Error('pc.I18n#addData: Invalid "header.version" field');if(e.data){if(!Array.isArray(e.data))throw new Error('pc.I18n#addData: "data" field must be an array')}else throw new Error('pc.I18n#addData: Missing "data" field');for(let t=0,s=e.data.length;t<s;t++){const i=e.data[t];if(!i.info)throw new Error(`pc.I18n#addData: missing "data[${t}].info" field`);if(!i.info.locale)throw new Error(`pc.I18n#addData: missing "data[${t}].info.locale" field`);if(typeof i.info.locale!="string")throw new Error(`pc.I18n#addData: "data[${t}].info.locale" must be a string`);if(!i.messages)throw new Error(`pc.I18n#addData: missing "data[${t}].messages" field`)}}parse(e){return e.data}}const nd=class nd extends ne{constructor(e){super(),this.locale=kc,this._translations={},this._availableLangs={},this._app=e,this._assets=[],this._parser=new d2}set assets(e){const t={};for(let i=0,r=e.length;i<r;i++){const a=e[i]instanceof ie?e[i].id:e[i];t[a]=!0}let s=this._assets.length;for(;s--;){const i=this._assets[s];if(!t[i]){this._app.assets.off(`add:${i}`,this._onAssetAdd,this);const r=this._app.assets.get(i);r&&this._onAssetRemove(r),this._assets.splice(s,1)}}for(const i in t){const r=parseInt(i,10);if(this._assets.indexOf(r)!==-1)continue;this._assets.push(r);const a=this._app.assets.get(r);a?this._onAssetAdd(a):this._app.assets.once(`add:${r}`,this._onAssetAdd,this)}}get assets(){return this._assets}set locale(e){if(this._locale===e)return;let t=_i(e);if(t==="in"&&(t="id",e=t2(e,t),this._locale===e))return;const s=this._locale;this._locale=e,this._lang=t,this._pluralFn=yu(this._lang),this.fire(nd.EVENT_CHANGE,e,s)}get locale(){return this._locale}static findAvailableLocale(e,t){return Bx(e,t)}findAvailableLocale(e){if(this._translations[e])return e;const t=_i(e);return this._findFallbackLocale(e,t)}getText(e,t){let s=e,i;t||(t=this._locale,i=this._lang);let r=this._translations[t];return r||(i||(i=_i(t)),t=this._findFallbackLocale(t,i),r=this._translations[t]),r&&r.hasOwnProperty(e)&&(s=r[e],Array.isArray(s)&&(s=s[0]),s==null&&(s=e)),s}getPluralText(e,t,s){let i=e,r,a;s?(r=_i(s),a=yu(r)):(s=this._locale,r=this._lang,a=this._pluralFn);let n=this._translations[s];if(n||(s=this._findFallbackLocale(s,r),r=_i(s),a=yu(r),n=this._translations[s]),n&&n[e]&&a){const l=a(t);i=n[e][l],i==null&&(i=e)}return i}addData(e){let t;try{t=this._parser.parse(e)}catch(s){console.error(s);return}for(let s=0,i=t.length;s<i;s++){const r=t[s],a=r.info.locale,n=r.messages;if(!this._translations[a]){this._translations[a]={};const l=_i(a);this._availableLangs[l]||(this._availableLangs[l]=a)}Object.assign(this._translations[a],n),this.fire("data:add",a,n)}}removeData(e){let t;try{t=this._parser.parse(e)}catch(s){console.error(s);return}for(let s=0,i=t.length;s<i;s++){const r=t[s],a=r.info.locale,n=this._translations[a];if(!n)continue;const l=r.messages;for(const h in l)delete n[h];Object.keys(n).length===0&&(delete this._translations[a],delete this._availableLangs[_i(a)]),this.fire("data:remove",a,l)}}destroy(){this._translations=null,this._availableLangs=null,this._assets=null,this._parser=null,this.off()}_findFallbackLocale(e,t){let s=Uc[e];return s&&this._translations[s]||(s=Uc[t],s&&this._translations[s])||(s=this._availableLangs[t],s&&this._translations[s])?s:kc}_onAssetAdd(e){e.on("load",this._onAssetLoad,this),e.on("change",this._onAssetChange,this),e.on("remove",this._onAssetRemove,this),e.on("unload",this._onAssetUnload,this),e.resource&&this._onAssetLoad(e)}_onAssetLoad(e){this.addData(e.resource)}_onAssetChange(e){e.resource&&this.addData(e.resource)}_onAssetRemove(e){e.off("load",this._onAssetLoad,this),e.off("change",this._onAssetChange,this),e.off("remove",this._onAssetRemove,this),e.off("unload",this._onAssetUnload,this),e.resource&&this.removeData(e.resource),this._app.assets.once(`add:${e.id}`,this._onAssetAdd,this)}_onAssetUnload(e){e.resource&&this.removeData(e.resource)}};nd.EVENT_CHANGE="change";let xa=nd;class f2 extends ne{constructor(e){super(),this._scripts={},this._list=[],this._scriptSchemas=new Map,this.app=e}destroy(){this.app=null,this.off()}addSchema(e,t){t&&this._scriptSchemas.set(e,t)}getSchema(e){return this._scriptSchemas.get(e)}add(e){const t=e.__name;return this._scripts.hasOwnProperty(t)?(setTimeout(()=>{if(e.prototype.swap){const s=this._scripts[t],i=this._list.indexOf(s);this._list[i]=e,this._scripts[t]=e,this.fire("swap",t,e),this.fire(`swap:${t}`,e)}else console.warn(`script registry already has '${t}' script, define 'swap' method for new script type to enable code hot swapping`)}),!1):(this._scripts[t]=e,this._list.push(e),this.fire("add",t,e),this.fire(`add:${t}`,e),setTimeout(()=>{if(!this._scripts.hasOwnProperty(t)||!this.app||!this.app.systems||!this.app.systems.script)return;const s=this.app.systems.script._components;let i;const r=[],a=[];for(s.loopIndex=0;s.loopIndex<s.length;s.loopIndex++){const n=s.items[s.loopIndex];if(n._scriptsIndex[t]&&n._scriptsIndex[t].awaiting){n._scriptsData&&n._scriptsData[t]&&(i=n._scriptsData[t].attributes);const l=n.create(t,{preloading:!0,ind:n._scriptsIndex[t].ind,attributes:i});l&&r.push(l);for(const h of n.scripts)n.initializeAttributes(h)}}for(let n=0;n<r.length;n++)r[n].enabled&&(r[n]._initialized=!0,a.push(r[n]),r[n].initialize&&r[n].initialize());for(let n=0;n<a.length;n++)!a[n].enabled||a[n]._postInitialized||(a[n]._postInitialized=!0,a[n].postInitialize&&a[n].postInitialize())}),!0)}remove(e){let t=e,s=e;if(typeof s!="string"?s=t.__name:t=this.get(s),this.get(s)!==t)return!1;delete this._scripts[s];const i=this._list.indexOf(t);return this._list.splice(i,1),this.fire("remove",s,t),this.fire(`remove:${s}`,t),!0}get(e){return this._scripts[e]||null}has(e){if(typeof e=="string")return this._scripts.hasOwnProperty(e);if(!e)return!1;const t=e.__name;return this._scripts[t]===e}list(){return this._list}}const u2=(o,e)=>o.constructor.order-e.constructor.order,p2=o=>o.sort(u2),Do=[],Vx=[],m2=()=>Vx.pop()??[],zS=o=>{o.length=0,Vx.push(o)},od=class od extends ze{constructor(e,t=ia()){super(e),this.c={},this._destroying=!1,this._guid=null,this._template=!1,this._app=t}addComponent(e,t){const s=this._app.systems[e];return!s||this.c[e]?null:s.addComponent(this,t)}removeComponent(e){const t=this._app.systems[e];t&&this.c[e]&&t.removeComponent(this)}findComponent(e){const t=this.findOne(s=>s.c?.[e]);return t&&t.c[e]}findComponents(e){return this.find(t=>t.c?.[e]).map(t=>t.c[e])}findScript(e){return this.findOne(s=>s.c?.script?.has(e))?.c.script.get(e)}findScripts(e){return this.find(s=>s.c?.script?.has(e)).map(s=>s.c.script.get(e))}getGuid(){return this._guid||this.setGuid(kP.create()),this._guid}setGuid(e){const t=this._app._entityIndex;this._guid&&delete t[this._guid],this._guid=e,t[this._guid]=this}_notifyHierarchyStateChanged(e,t){let s=!1;e===this&&Do.length===0&&(s=!0),e._beingEnabled=!0,e._onHierarchyStateChanged(t),e._onHierarchyStatePostChanged&&Do.push(e);const i=e._children;for(let r=0,a=i.length;r<a;r++)i[r]._enabled&&this._notifyHierarchyStateChanged(i[r],t);if(e._beingEnabled=!1,s){for(let r=0;r<Do.length;r++)Do[r]._onHierarchyStatePostChanged();Do.length=0}}_onHierarchyStateChanged(e){super._onHierarchyStateChanged(e);const t=this._getSortedComponents();for(let s=0;s<t.length;s++){const i=t[s];i.enabled&&(e?i.onEnable():i.onDisable())}zS(t)}_onHierarchyStatePostChanged(){const e=this._getSortedComponents();for(let t=0;t<e.length;t++)e[t].onPostStateChange();zS(e)}findByGuid(e){if(this._guid===e)return this;const t=this._app._entityIndex[e];return t&&(t===this||t.isDescendantOf(this))?t:null}destroy(){this._destroying=!0;for(const e in this.c)this.c[e].enabled=!1;for(const e in this.c)this.c[e].system.removeComponent(this);super.destroy(),this._guid&&delete this._app._entityIndex[this._guid],this._destroying=!1}clone(){const e={},t=this._cloneRecursively(e);return e[this.getGuid()]=t,zx(this,this,t,e),t}_getSortedComponents(){const e=this.c,t=m2();let s=0;for(const i in e)if(e.hasOwnProperty(i)){const r=e[i];s|=r.constructor.order!==0,t.push(r)}return s&&t.length>1&&p2(t),t}_cloneRecursively(e){const t=new this.constructor(void 0,this._app);super._cloneInternal(t);for(const s in this.c)this.c[s].system.cloneComponent(this,t);for(let s=0;s<this._children.length;s++){const i=this._children[s];if(i instanceof od){const r=i._cloneRecursively(e);t.addChild(r),e[i.getGuid()]=r}}return t}};od.EVENT_DESTROY="destroy";let Ve=od;function zx(o,e,t,s){if(e instanceof Ve){const i=e.c;for(const n in i){const l=i[n],h=l.system.getPropertiesOfType("entity");for(let c=0,d=h.length;c<d;c++){const u=h[c].name,p=l[u];if(!!o.findByGuid(p)){const _=s[p].getGuid();_&&(t.c[n][u]=_)}}}i.script&&t.script.resolveDuplicatedEntityReferenceProperties(i.script,s),i.render&&t.render.resolveDuplicatedEntityReferenceProperties(i.render,s),i.button&&t.button.resolveDuplicatedEntityReferenceProperties(i.button,s),i.scrollview&&t.scrollview.resolveDuplicatedEntityReferenceProperties(i.scrollview,s),i.scrollbar&&t.scrollbar.resolveDuplicatedEntityReferenceProperties(i.scrollbar,s),i.anim&&t.anim.resolveDuplicatedEntityReferenceProperties(i.anim,s);const r=e.children.filter(n=>n instanceof Ve),a=t.children.filter(n=>n instanceof Ve);for(let n=0,l=r.length;n<l;n++)zx(o,r[n],a[n],s)}}class HS{constructor(e,t){this.data=null,this._loading=!1,this._onLoadedCallbacks=[],this.name=e,this.url=t}get loaded(){return!!this.data}get loading(){return this._loading}}class _2{constructor(e){this._list=[],this._index={},this._urlIndex={},this._app=e}destroy(){this._app=null}list(){return this._list}add(e,t){if(this._index.hasOwnProperty(e))return!1;const s=new HS(e,t),i=this._list.push(s);return this._index[s.name]=i-1,this._urlIndex[s.url]=i-1,!0}find(e){return this._index.hasOwnProperty(e)?this._list[this._index[e]]:null}findByUrl(e){return this._urlIndex.hasOwnProperty(e)?this._list[this._urlIndex[e]]:null}remove(e){if(this._index.hasOwnProperty(e)){const t=this._index[e];let s=this._list[t];delete this._urlIndex[s.url],delete this._index[e],this._list.splice(t,1);for(let i=0;i<this._list.length;i++)s=this._list[i],this._index[s.name]=i,this._urlIndex[s.url]=i}}_loadSceneData(e,t,s){const i=this._app;let r=e;if(typeof e=="string"&&(e=this.findByUrl(r)||this.find(r)||new HS("Untitled",r)),r=e.url,!r){s("Cannot find scene to load");return}if(e.loaded){s(null,e);return}i.assets&&i.assets.prefix&&!no.test(r)&&(r=le.join(i.assets.prefix,r)),e._onLoadedCallbacks.push(s),e._loading||i.loader.getHandler("hierarchy").load(r,(n,l)=>{e.data=l,e._loading=!1;for(let h=0;h<e._onLoadedCallbacks.length;h++)e._onLoadedCallbacks[h](n,e);t||(e.data=null),e._onLoadedCallbacks.length=0}),e._loading=!0}loadSceneData(e,t){this._loadSceneData(e,!0,t)}unloadSceneData(e){typeof e=="string"&&(e=this.findByUrl(e)),e&&(e.data=null)}_loadSceneHierarchy(e,t,s){this._loadSceneData(e,!1,(i,r)=>{if(i){s&&s(i);return}t&&t(r);const a=this._app,n=()=>{const l=a.loader.getHandler("hierarchy");a.systems.script.preloading=!0;const h=l.open(r.url,r.data);a.systems.script.preloading=!1,a.loader.clearCache(r.url,"hierarchy"),a.root.addChild(h),a.systems.fire("initialize",h),a.systems.fire("postInitialize",h),a.systems.fire("postPostInitialize",h),s&&s(null,h)};a._preloadScripts(r.data,n)})}loadSceneHierarchy(e,t){this._loadSceneHierarchy(e,null,t)}loadSceneSettings(e,t){this._loadSceneData(e,!1,(s,i)=>{s?t&&t(s):(this._app.applySceneSettings(i.data.settings),t&&t(null))})}changeScene(e,t){const s=this._app,i=r=>{const{children:a}=s.root;for(;a.length;)a[0].destroy();s.applySceneSettings(r.data.settings)};this._loadSceneHierarchy(e,i,t)}loadScene(e,t){const s=this._app,i=s.loader.getHandler("scene");s.assets&&s.assets.prefix&&!no.test(e)&&(e=le.join(s.assets.prefix,e)),i.load(e,(r,a)=>{if(r)t&&t(r);else{const n=()=>{s.systems.script.preloading=!0;const l=i.open(e,a),h=this.findByUrl(e);h&&!h.loaded&&(h.data=a),s.systems.script.preloading=!1,s.loader.clearCache(e,"scene"),s.loader.patch({resource:l,type:"scene"},s.assets),s.root.addChild(l.root),s.systems.rigidbody&&typeof Ammo<"u"&&s.systems.rigidbody.gravity.set(l._gravity.x,l._gravity.y,l._gravity.z),t&&t(null,l)};s._preloadScripts(a,n)}})}}class g2{constructor(e){this.frame={fps:0,ms:0,dt:0,updateStart:0,updateTime:0,renderStart:0,renderTime:0,physicsStart:0,physicsTime:0,cullTime:0,sortTime:0,skinTime:0,morphTime:0,instancingTime:0,triangles:0,otherPrimitives:0,shaders:0,materials:0,cameras:0,shadowMapUpdates:0,shadowMapTime:0,depthMapTime:0,forwardTime:0,lightClustersTime:0,lightClusters:0,_timeToCountFrames:0,_fpsAccum:0},this.drawCalls={forward:0,depth:0,shadow:0,immediate:0,misc:0,total:0,skinned:0,instanced:0,removedByInstancing:0},this.misc={renderTargetCreationTime:0},this.particles={updatesPerFrame:0,_updatesPerFrame:0,frameTime:0,_frameTime:0},this.shaders=e._shaderStats,this.vram=e._vram,Object.defineProperty(this.vram,"totalUsed",{get:function(){return this.tex+this.vb+this.ib}}),Object.defineProperty(this.vram,"geom",{get:function(){return this.vb+this.ib}})}get scene(){return ia().scene._stats}get lightmapper(){return ia().lightmapper?.stats}get batcher(){const e=ia()._batcher;return e?e._stats:null}}var v2=`
uniform float alpha_ref;
void alphaTest(float a) {
	if (a < alpha_ref) discard;
}
`,S2=`
#ifdef LIT_AMBIENT_SOURCE == AMBIENTSH
	uniform vec3 ambientSH[9];
#endif
#if LIT_AMBIENT_SOURCE == ENVALATLAS
	#include "envAtlasPS"
	#ifndef ENV_ATLAS
	#define ENV_ATLAS
		uniform sampler2D texture_envAtlas;
	#endif
#endif
void addAmbient(vec3 worldNormal) {
	#ifdef LIT_AMBIENT_SOURCE == AMBIENTSH
		vec3 n = cubeMapRotate(worldNormal);
		vec3 color =
			ambientSH[0] +
			ambientSH[1] * n.x +
			ambientSH[2] * n.y +
			ambientSH[3] * n.z +
			ambientSH[4] * n.x * n.z +
			ambientSH[5] * n.z * n.y +
			ambientSH[6] * n.y * n.x +
			ambientSH[7] * (3.0 * n.z * n.z - 1.0) +
			ambientSH[8] * (n.x * n.x - n.y * n.y);
		dDiffuseLight += processEnvironment(max(color, vec3(0.0)));
	#endif
	#if LIT_AMBIENT_SOURCE == ENVALATLAS
		vec3 dir = normalize(cubeMapRotate(worldNormal) * vec3(-1.0, 1.0, 1.0));
		vec2 uv = mapUv(toSphericalUv(dir), vec4(128.0, 256.0 + 128.0, 64.0, 32.0) / atlasSize);
		vec4 raw = texture2D(texture_envAtlas, uv);
		vec3 linear = {ambientDecode}(raw);
		dDiffuseLight += processEnvironment(linear);
	#endif
	#if LIT_AMBIENT_SOURCE == CONSTANT
		dDiffuseLight += light_globalAmbient;
	#endif
}
`,y2=`
#ifdef LIT_GGX_SPECULAR
	uniform float material_anisotropyIntensity;
	uniform vec2 material_anisotropyRotation;
#endif
void getAnisotropy() {
	dAnisotropy = 0.0;
	dAnisotropyRotation = vec2(1.0, 0.0);
#ifdef LIT_GGX_SPECULAR
	dAnisotropy = material_anisotropyIntensity;
	dAnisotropyRotation = material_anisotropyRotation;
#endif
	#ifdef STD_ANISOTROPY_TEXTURE
	vec3 anisotropyTex = texture2DBias({STD_ANISOTROPY_TEXTURE_NAME}, {STD_ANISOTROPY_TEXTURE_UV}, textureBias).rgb;
	dAnisotropy *= anisotropyTex.b;
	vec2 anisotropyRotationFromTex = anisotropyTex.rg * 2.0 - vec2(1.0);
	mat2 rotationMatrix = mat2(dAnisotropyRotation.x, dAnisotropyRotation.y, -dAnisotropyRotation.y, dAnisotropyRotation.x);
	dAnisotropyRotation = rotationMatrix * anisotropyRotationFromTex;
	#endif
	
	dAnisotropy = clamp(dAnisotropy, 0.0, 1.0);
}
`,T2=`
#if defined(STD_AO_TEXTURE) || defined(STD_AO_VERTEX)
	uniform float material_aoIntensity;
#endif
#ifdef STD_AODETAIL_TEXTURE
	#include "detailModesPS"
#endif
void getAO() {
	dAo = 1.0;
	#ifdef STD_AO_TEXTURE
		float aoBase = texture2DBias({STD_AO_TEXTURE_NAME}, {STD_AO_TEXTURE_UV}, textureBias).{STD_AO_TEXTURE_CHANNEL};
		#ifdef STD_AODETAIL_TEXTURE
			float aoDetail = texture2DBias({STD_AODETAIL_TEXTURE_NAME}, {STD_AODETAIL_TEXTURE_UV}, textureBias).{STD_AODETAIL_TEXTURE_CHANNEL};
			aoBase = detailMode_{STD_AODETAIL_DETAILMODE}(vec3(aoBase), vec3(aoDetail)).r;
		#endif
		dAo *= aoBase;
	#endif
	#ifdef STD_AO_VERTEX
		dAo *= saturate(vVertexColor.{STD_AO_VERTEX_CHANNEL});
	#endif
	#if defined(STD_AO_TEXTURE) || defined(STD_AO_VERTEX)
		dAo = mix(1.0, dAo, material_aoIntensity);
	#endif
}
`,x2=`
void occludeDiffuse(float ao) {
	dDiffuseLight *= ao;
}
`,E2=`
#if LIT_OCCLUDE_SPECULAR != NONE
	#ifdef LIT_OCCLUDE_SPECULAR_FLOAT
		uniform float material_occludeSpecularIntensity;
	#endif
#endif
void occludeSpecular(float gloss, float ao, vec3 worldNormal, vec3 viewDir) {
	#if LIT_OCCLUDE_SPECULAR == AO
		#ifdef LIT_OCCLUDE_SPECULAR_FLOAT
			float specOcc = mix(1.0, ao, material_occludeSpecularIntensity);
		#else
			float specOcc = ao;
		#endif
	#endif
	#if LIT_OCCLUDE_SPECULAR == GLOSSDEPENDENT
		float specPow = exp2(gloss * 11.0);
		float specOcc = saturate(pow(dot(worldNormal, viewDir) + ao, 0.01 * specPow) - 1.0 + ao);
		#ifdef LIT_OCCLUDE_SPECULAR_FLOAT
			specOcc = mix(1.0, specOcc, material_occludeSpecularIntensity);
		#endif
	#endif
	#if LIT_OCCLUDE_SPECULAR != NONE
		dSpecularLight *= specOcc;
		dReflection *= specOcc;
		#ifdef LIT_SHEEN
			sSpecularLight *= specOcc;
			sReflection *= specOcc;
		#endif
	#endif
}
`,A2=`
	vec4 dirLm = texture2D(texture_dirLightMap, vUv1);
	if (bakeDir > 0.5) {
		if (dAtten > 0.00001) {
			dirLm.xyz = dirLm.xyz * 2.0 - vec3(1.0);
			dAtten = saturate(dAtten);
			gl_FragColor.rgb = normalize(dLightDirNormW.xyz*dAtten + dirLm.xyz*dirLm.w) * 0.5 + vec3(0.5);
			gl_FragColor.a = dirLm.w + dAtten;
			gl_FragColor.a = max(gl_FragColor.a, 1.0 / 255.0);
		} else {
			gl_FragColor = dirLm;
		}
	} else {
		gl_FragColor.rgb = dirLm.xyz;
		gl_FragColor.a = max(dirLm.w, dAtten > 0.00001 ? (1.0/255.0) : 0.0);
	}
`,b2=`
#ifdef LIT_LIGHTMAP_BAKING_ADD_AMBIENT
	dDiffuseLight = ((dDiffuseLight - 0.5) * max(ambientBakeOcclusionContrast + 1.0, 0.0)) + 0.5;
	dDiffuseLight += vec3(ambientBakeOcclusionBrightness);
	dDiffuseLight = saturate(dDiffuseLight);
	dDiffuseLight *= dAmbientLight;
#endif
#ifdef LIGHTMAP_RGBM
	gl_FragColor.rgb = dDiffuseLight;
	gl_FragColor.rgb = pow(gl_FragColor.rgb, vec3(0.5));
	gl_FragColor.rgb /= 8.0;
	gl_FragColor.a = clamp( max( max( gl_FragColor.r, gl_FragColor.g ), max( gl_FragColor.b, 1.0 / 255.0 ) ), 0.0,1.0 );
	gl_FragColor.a = ceil(gl_FragColor.a * 255.0) / 255.0;
	gl_FragColor.rgb /= gl_FragColor.a;
#else
	gl_FragColor = vec4(dDiffuseLight, 1.0);
#endif
`,w2=`
uniform vec3 view_position;
uniform vec3 light_globalAmbient;
float square(float x) {
	return x*x;
}
float saturate(float x) {
	return clamp(x, 0.0, 1.0);
}
vec3 saturate(vec3 x) {
	return clamp(x, vec3(0.0), vec3(1.0));
}
`,C2=`
#define NINESLICED
varying vec2 vMask;
varying vec2 vTiledUv;
uniform mediump vec4 innerOffset;
uniform mediump vec2 outerScale;
uniform mediump vec4 atlasRect;
vec2 nineSlicedUv;
`,P2=`
#define NINESLICED
#define NINESLICETILED
varying vec2 vMask;
varying vec2 vTiledUv;
uniform mediump vec4 innerOffset;
uniform mediump vec2 outerScale;
uniform mediump vec4 atlasRect;
vec2 nineSlicedUv;
`,L2=`
float bayer2(vec2 p) {
	return mod(2.0 * p.y + p.x + 1.0, 4.0);
}
float bayer4(vec2 p) {
	vec2 p1 = mod(p, 2.0);
	vec2 p2 = floor(0.5 * mod(p, 4.0));
	return 4.0 * bayer2(p1) + bayer2(p2);
}
float bayer8(vec2 p) {
	vec2 p1 = mod(p, 2.0);
	vec2 p2 = floor(0.5 * mod(p, 4.0));
	vec2 p4 = floor(0.25 * mod(p, 8.0));
	return 4.0 * (4.0 * bayer2(p1) + bayer2(p2)) + bayer2(p4);
}
`,I2=`
varying vec2 vUv0;
uniform sampler2D source;
uniform vec2 pixelOffset;
#ifdef GAUSS
	uniform float weight[{SAMPLES}];
#endif
void main(void) {
	vec3 moments = vec3(0.0);
	vec2 uv = vUv0 - pixelOffset * (float({SAMPLES}) * 0.5);
	for (int i = 0; i < {SAMPLES}; i++) {
		vec4 c = texture2D(source, uv + pixelOffset * float(i));
		#ifdef GAUSS
			moments += c.xyz * weight[i];
		#else
			moments += c.xyz;
		#endif
	}
	#ifndef GAUSS
		moments *= 1.0 / float({SAMPLES});
	#endif
	gl_FragColor = vec4(moments.x, moments.y, moments.z, 1.0);
}
`,M2=`
uniform float material_clearCoat;
void getClearCoat() {
	ccSpecularity = material_clearCoat;
	#ifdef STD_CLEARCOAT_TEXTURE
	ccSpecularity *= texture2DBias({STD_CLEARCOAT_TEXTURE_NAME}, {STD_CLEARCOAT_TEXTURE_UV}, textureBias).{STD_CLEARCOAT_TEXTURE_CHANNEL};
	#endif
	#ifdef STD_CLEARCOAT_VERTEX
	ccSpecularity *= saturate(vVertexColor.{STD_CLEARCOAT_VERTEX_CHANNEL});
	#endif
}
`,D2=`
uniform float material_clearCoatGloss;
void getClearCoatGlossiness() {
	ccGlossiness = material_clearCoatGloss;
	#ifdef STD_CLEARCOATGLOSS_TEXTURE
	ccGlossiness *= texture2DBias({STD_CLEARCOATGLOSS_TEXTURE_NAME}, {STD_CLEARCOATGLOSS_TEXTURE_UV}, textureBias).{STD_CLEARCOATGLOSS_TEXTURE_CHANNEL};
	#endif
	#ifdef STD_CLEARCOATGLOSS_VERTEX
	ccGlossiness *= saturate(vVertexColor.{STD_CLEARCOATGLOSS_VERTEX_CHANNEL});
	#endif
	#ifdef STD_CLEARCOATGLOSS_INVERT
	ccGlossiness = 1.0 - ccGlossiness;
	#endif
	ccGlossiness += 0.0000001;
}
`,R2=`
#ifdef STD_CLEARCOATNORMAL_TEXTURE
uniform float material_clearCoatBumpiness;
#endif
void getClearCoatNormal() {
#ifdef STD_CLEARCOATNORMAL_TEXTURE
	vec3 normalMap = {STD_CLEARCOATNORMAL_TEXTURE_DECODE}(texture2DBias({STD_CLEARCOATNORMAL_TEXTURE_NAME}, {STD_CLEARCOATNORMAL_TEXTURE_UV}, textureBias));
	normalMap = mix(vec3(0.0, 0.0, 1.0), normalMap, material_clearCoatBumpiness);
	ccNormalW = normalize(dTBN * normalMap);
#else
	ccNormalW = dVertexNormalW;
#endif
}
`,O2=`
vec2 getCubemapFaceCoordinates(const vec3 dir, out float faceIndex, out vec2 tileOffset)
{
	vec3 vAbs = abs(dir);
	float ma;
	vec2 uv;
	if (vAbs.z >= vAbs.x && vAbs.z >= vAbs.y) {
		faceIndex = dir.z < 0.0 ? 5.0 : 4.0;
		ma = 0.5 / vAbs.z;
		uv = vec2(dir.z < 0.0 ? -dir.x : dir.x, -dir.y);
		tileOffset.x = 2.0;
		tileOffset.y = dir.z < 0.0 ? 1.0 : 0.0;
	} else if(vAbs.y >= vAbs.x) {
		faceIndex = dir.y < 0.0 ? 3.0 : 2.0;
		ma = 0.5 / vAbs.y;
		uv = vec2(dir.x, dir.y < 0.0 ? -dir.z : dir.z);
		tileOffset.x = 1.0;
		tileOffset.y = dir.y < 0.0 ? 1.0 : 0.0;
	} else {
		faceIndex = dir.x < 0.0 ? 1.0 : 0.0;
		ma = 0.5 / vAbs.x;
		uv = vec2(dir.x < 0.0 ? dir.z : -dir.z, -dir.y);
		tileOffset.x = 0.0;
		tileOffset.y = dir.x < 0.0 ? 1.0 : 0.0;
	}
	return uv * ma + 0.5;
}
vec2 getCubemapAtlasCoordinates(const vec3 omniAtlasViewport, float shadowEdgePixels, float shadowTextureResolution, const vec3 dir) {
	float faceIndex;
	vec2 tileOffset;
	vec2 uv = getCubemapFaceCoordinates(dir, faceIndex, tileOffset);
	float atlasFaceSize = omniAtlasViewport.z;
	float tileSize = shadowTextureResolution * atlasFaceSize;
	float offset = shadowEdgePixels / tileSize;
	uv = uv * vec2(1.0 - offset * 2.0) + vec2(offset * 1.0);
	uv *= atlasFaceSize;
	uv += tileOffset * atlasFaceSize;
	uv += omniAtlasViewport.xy;
	return uv;
}
`,N2=`
vec3 _getCookieClustered(TEXTURE_ACCEPT(tex), vec2 uv, float intensity, vec4 cookieChannel) {
	vec4 pixel = mix(vec4(1.0), texture2DLod(tex, uv, 0.0), intensity);
	bool isRgb = dot(cookieChannel.rgb, vec3(1.0)) == 3.0;
	return isRgb ? pixel.rgb : vec3(dot(pixel, cookieChannel));
}
vec3 getCookie2DClustered(TEXTURE_ACCEPT(tex), mat4 transform, vec3 worldPosition, float intensity, vec4 cookieChannel) {
	vec4 projPos = transform * vec4(worldPosition, 1.0);
	return _getCookieClustered(TEXTURE_PASS(tex), projPos.xy / projPos.w, intensity, cookieChannel);
}
vec3 getCookieCubeClustered(TEXTURE_ACCEPT(tex), vec3 dir, float intensity, vec4 cookieChannel, float shadowTextureResolution, float shadowEdgePixels, vec3 omniAtlasViewport) {
	vec2 uv = getCubemapAtlasCoordinates(omniAtlasViewport, shadowEdgePixels, shadowTextureResolution, dir);
	return _getCookieClustered(TEXTURE_PASS(tex), uv, intensity, cookieChannel);
}
`,F2=`
vec3 _getShadowCoordPerspZbuffer(mat4 shadowMatrix, vec4 shadowParams, vec3 wPos) {
	vec4 projPos = shadowMatrix * vec4(wPos, 1.0);
	projPos.xyz /= projPos.w;
	return projPos.xyz;
}
vec3 getShadowCoordPerspZbufferNormalOffset(mat4 shadowMatrix, vec4 shadowParams, vec3 normal) {
	vec3 wPos = vPositionW + normal * shadowParams.y;
	return _getShadowCoordPerspZbuffer(shadowMatrix, shadowParams, wPos);
}
vec3 normalOffsetPointShadow(vec4 shadowParams, vec3 lightPos, vec3 lightDir, vec3 lightDirNorm, vec3 normal) {
	float distScale = length(lightDir);
	vec3 wPos = vPositionW + normal * shadowParams.y * clamp(1.0 - dot(normal, -lightDirNorm), 0.0, 1.0) * distScale;
	vec3 dir = wPos - lightPos;
	return dir;
}
#if defined(CLUSTER_SHADOW_TYPE_PCF1)
float getShadowOmniClusteredPCF1(SHADOWMAP_ACCEPT(shadowMap), vec4 shadowParams, vec3 omniAtlasViewport, float shadowEdgePixels, vec3 lightDir) {
	float shadowTextureResolution = shadowParams.x;
	vec2 uv = getCubemapAtlasCoordinates(omniAtlasViewport, shadowEdgePixels, shadowTextureResolution, lightDir);
	float shadowZ = length(lightDir) * shadowParams.w + shadowParams.z;
	return textureShadow(shadowMap, vec3(uv, shadowZ));
}
#endif
#if defined(CLUSTER_SHADOW_TYPE_PCF3)
float getShadowOmniClusteredPCF3(SHADOWMAP_ACCEPT(shadowMap), vec4 shadowParams, vec3 omniAtlasViewport, float shadowEdgePixels, vec3 lightDir) {
	float shadowTextureResolution = shadowParams.x;
	vec2 uv = getCubemapAtlasCoordinates(omniAtlasViewport, shadowEdgePixels, shadowTextureResolution, lightDir);
	float shadowZ = length(lightDir) * shadowParams.w + shadowParams.z;
	vec3 shadowCoord = vec3(uv, shadowZ);
	return getShadowPCF3x3(SHADOWMAP_PASS(shadowMap), shadowCoord, shadowParams);
}
#endif
#if defined(CLUSTER_SHADOW_TYPE_PCF5)
float getShadowOmniClusteredPCF5(SHADOWMAP_ACCEPT(shadowMap), vec4 shadowParams, vec3 omniAtlasViewport, float shadowEdgePixels, vec3 lightDir) {
	float shadowTextureResolution = shadowParams.x;
	vec2 uv = getCubemapAtlasCoordinates(omniAtlasViewport, shadowEdgePixels, shadowTextureResolution, lightDir);
	float shadowZ = length(lightDir) * shadowParams.w + shadowParams.z;
	vec3 shadowCoord = vec3(uv, shadowZ);
	return getShadowPCF5x5(SHADOWMAP_PASS(shadowMap), shadowCoord, shadowParams);
}
#endif
#if defined(CLUSTER_SHADOW_TYPE_PCF1)
float getShadowSpotClusteredPCF1(SHADOWMAP_ACCEPT(shadowMap), vec3 shadowCoord, vec4 shadowParams) {
	return textureShadow(shadowMap, shadowCoord);
}
#endif
#if defined(CLUSTER_SHADOW_TYPE_PCF3)
float getShadowSpotClusteredPCF3(SHADOWMAP_ACCEPT(shadowMap), vec3 shadowCoord, vec4 shadowParams) {
	return getShadowSpotPCF3x3(SHADOWMAP_PASS(shadowMap), shadowCoord, shadowParams);
}
#endif
#if defined(CLUSTER_SHADOW_TYPE_PCF5)
float getShadowSpotClusteredPCF5(SHADOWMAP_ACCEPT(shadowMap), vec3 shadowCoord, vec4 shadowParams) {
	return getShadowPCF5x5(SHADOWMAP_PASS(shadowMap), shadowCoord, shadowParams);
}
#endif
`,k2=`
#include "lightBufferDefinesPS"
#include "clusteredLightUtilsPS"
#ifdef CLUSTER_COOKIES
	#include "clusteredLightCookiesPS"
#endif
#ifdef CLUSTER_SHADOWS
	#include "clusteredLightShadowsPS"
#endif
uniform highp sampler2D clusterWorldTexture;
uniform highp sampler2D lightsTexture;
#ifdef CLUSTER_SHADOWS
	uniform sampler2DShadow shadowAtlasTexture;
#endif
#ifdef CLUSTER_COOKIES
	uniform sampler2D cookieAtlasTexture;
#endif
uniform int clusterMaxCells;
uniform float clusterSkip;
uniform vec3 clusterCellsCountByBoundsSize;
uniform vec3 clusterTextureSize;
uniform vec3 clusterBoundsMin;
uniform vec3 clusterBoundsDelta;
uniform vec3 clusterCellsDot;
uniform vec3 clusterCellsMax;
uniform vec2 shadowAtlasParams;
struct ClusterLightData {
	uint flags;
	vec3 halfWidth;
	bool isSpot;
	vec3 halfHeight;
	int lightIndex;
	vec3 position;
	uint shape;
	vec3 direction;
	bool falloffModeLinear;
	vec3 color;
	float shadowIntensity;
	vec3 omniAtlasViewport;
	float range;
	vec4 cookieChannelMask;
	float biasesData;
	float shadowBias;
	float shadowNormalBias;
	float anglesData;
	float innerConeAngleCos;
	float outerConeAngleCos;
	float cookieIntensity;
	bool isDynamic;
	bool isLightmapped;
};
mat4 lightProjectionMatrix;
vec4 sampleLightTextureF(const ClusterLightData clusterLightData, int index) {
	return texelFetch(lightsTexture, ivec2(index, clusterLightData.lightIndex), 0);
}
void decodeClusterLightCore(inout ClusterLightData clusterLightData, float lightIndex) {
	clusterLightData.lightIndex = int(lightIndex);
	vec4 halfData = sampleLightTextureF(clusterLightData, {CLUSTER_TEXTURE_COLOR_ANGLES_BIAS});
	clusterLightData.anglesData = halfData.z;
	clusterLightData.biasesData = halfData.w;
	vec2 colorRG = unpackHalf2x16(floatBitsToUint(halfData.x));
	vec2 colorB_ = unpackHalf2x16(floatBitsToUint(halfData.y));
	clusterLightData.color = vec3(colorRG, colorB_.x) * {LIGHT_COLOR_DIVIDER};
	vec4 lightPosRange = sampleLightTextureF(clusterLightData, {CLUSTER_TEXTURE_POSITION_RANGE});
	clusterLightData.position = lightPosRange.xyz;
	clusterLightData.range = lightPosRange.w;
	vec4 lightDir_Flags = sampleLightTextureF(clusterLightData, {CLUSTER_TEXTURE_DIRECTION_FLAGS});
	clusterLightData.direction = lightDir_Flags.xyz;
	clusterLightData.flags = floatBitsToUint(lightDir_Flags.w);
	clusterLightData.isSpot = (clusterLightData.flags & (1u << 30u)) != 0u;
	clusterLightData.shape = (clusterLightData.flags >> 28u) & 0x3u;
	clusterLightData.falloffModeLinear = (clusterLightData.flags & (1u << 27u)) == 0u;
	clusterLightData.shadowIntensity = float((clusterLightData.flags >> 0u) & 0xFFu) / 255.0;
	clusterLightData.cookieIntensity = float((clusterLightData.flags >> 8u) & 0xFFu) / 255.0;
	clusterLightData.isDynamic = (clusterLightData.flags & (1u << 22u)) != 0u;
	clusterLightData.isLightmapped = (clusterLightData.flags & (1u << 21u)) != 0u;
}
void decodeClusterLightSpot(inout ClusterLightData clusterLightData) {
	vec2 angles = unpackHalf2x16(floatBitsToUint(clusterLightData.anglesData));
	clusterLightData.innerConeAngleCos = angles.x;
	clusterLightData.outerConeAngleCos = angles.y;
}
void decodeClusterLightOmniAtlasViewport(inout ClusterLightData clusterLightData) {
	clusterLightData.omniAtlasViewport = sampleLightTextureF(clusterLightData, {CLUSTER_TEXTURE_PROJ_MAT_0}).xyz;
}
void decodeClusterLightAreaData(inout ClusterLightData clusterLightData) {
	clusterLightData.halfWidth = sampleLightTextureF(clusterLightData, {CLUSTER_TEXTURE_AREA_DATA_WIDTH}).xyz;
	clusterLightData.halfHeight = sampleLightTextureF(clusterLightData, {CLUSTER_TEXTURE_AREA_DATA_HEIGHT}).xyz;
}
void decodeClusterLightProjectionMatrixData(inout ClusterLightData clusterLightData) {
	
	vec4 m0 = sampleLightTextureF(clusterLightData, {CLUSTER_TEXTURE_PROJ_MAT_0});
	vec4 m1 = sampleLightTextureF(clusterLightData, {CLUSTER_TEXTURE_PROJ_MAT_1});
	vec4 m2 = sampleLightTextureF(clusterLightData, {CLUSTER_TEXTURE_PROJ_MAT_2});
	vec4 m3 = sampleLightTextureF(clusterLightData, {CLUSTER_TEXTURE_PROJ_MAT_3});
	lightProjectionMatrix = mat4(m0, m1, m2, m3);
}
void decodeClusterLightShadowData(inout ClusterLightData clusterLightData) {
	
	vec2 biases = unpackHalf2x16(floatBitsToUint(clusterLightData.biasesData));
	clusterLightData.shadowBias = biases.x;
	clusterLightData.shadowNormalBias = biases.y;
}
void decodeClusterLightCookieData(inout ClusterLightData clusterLightData) {
	uint cookieFlags = (clusterLightData.flags >> 23u) & 0x0Fu;
	clusterLightData.cookieChannelMask = vec4(uvec4(cookieFlags) & uvec4(1u, 2u, 4u, 8u));
	clusterLightData.cookieChannelMask = step(1.0, clusterLightData.cookieChannelMask);
}
void evaluateLight(
	ClusterLightData light, 
	vec3 worldNormal, 
	vec3 viewDir, 
	vec3 reflectionDir,
#if defined(LIT_CLEARCOAT)
	vec3 clearcoatReflectionDir,
#endif
	float gloss, 
	vec3 specularity, 
	vec3 geometricNormal, 
	mat3 tbn, 
#if defined(LIT_IRIDESCENCE)
	vec3 iridescenceFresnel,
#endif
	vec3 clearcoat_worldNormal,
	float clearcoat_gloss,
	float sheen_gloss,
	float iridescence_intensity
) {
	vec3 cookieAttenuation = vec3(1.0);
	float diffuseAttenuation = 1.0;
	float falloffAttenuation = 1.0;
	vec3 lightDirW = evalOmniLight(light.position);
	vec3 lightDirNormW = normalize(lightDirW);
	#ifdef CLUSTER_AREALIGHTS
	if (light.shape != {LIGHTSHAPE_PUNCTUAL}) {
		decodeClusterLightAreaData(light);
		if (light.shape == {LIGHTSHAPE_RECT}) {
			calcRectLightValues(light.position, light.halfWidth, light.halfHeight);
		} else if (light.shape == {LIGHTSHAPE_DISK}) {
			calcDiskLightValues(light.position, light.halfWidth, light.halfHeight);
		} else {
			calcSphereLightValues(light.position, light.halfWidth, light.halfHeight);
		}
		falloffAttenuation = getFalloffWindow(light.range, lightDirW);
	} else
	#endif
	{
		if (light.falloffModeLinear)
			falloffAttenuation = getFalloffLinear(light.range, lightDirW);
		else
			falloffAttenuation = getFalloffInvSquared(light.range, lightDirW);
	}
	if (falloffAttenuation > 0.00001) {
		#ifdef CLUSTER_AREALIGHTS
		if (light.shape != {LIGHTSHAPE_PUNCTUAL}) {
			if (light.shape == {LIGHTSHAPE_RECT}) {
				diffuseAttenuation = getRectLightDiffuse(worldNormal, viewDir, lightDirW, lightDirNormW) * 16.0;
			} else if (light.shape == {LIGHTSHAPE_DISK}) {
				diffuseAttenuation = getDiskLightDiffuse(worldNormal, viewDir, lightDirW, lightDirNormW) * 16.0;
			} else {
				diffuseAttenuation = getSphereLightDiffuse(worldNormal, viewDir, lightDirW, lightDirNormW) * 16.0;
			}
		} else
		#endif
		{
			falloffAttenuation *= getLightDiffuse(worldNormal, viewDir, lightDirNormW); 
		}
		if (light.isSpot) {
			decodeClusterLightSpot(light);
			falloffAttenuation *= getSpotEffect(light.direction, light.innerConeAngleCos, light.outerConeAngleCos, lightDirNormW);
		}
		#if defined(CLUSTER_COOKIES) || defined(CLUSTER_SHADOWS)
		if (falloffAttenuation > 0.00001) {
			if (light.shadowIntensity > 0.0 || light.cookieIntensity > 0.0) {
				if (light.isSpot) {
					decodeClusterLightProjectionMatrixData(light);
				} else {
					decodeClusterLightOmniAtlasViewport(light);
				}
				float shadowTextureResolution = shadowAtlasParams.x;
				float shadowEdgePixels = shadowAtlasParams.y;
				#ifdef CLUSTER_COOKIES
				if (light.cookieIntensity > 0.0) {
					decodeClusterLightCookieData(light);
					if (light.isSpot) {
						cookieAttenuation = getCookie2DClustered(TEXTURE_PASS(cookieAtlasTexture), lightProjectionMatrix, vPositionW, light.cookieIntensity, light.cookieChannelMask);
					} else {
						cookieAttenuation = getCookieCubeClustered(TEXTURE_PASS(cookieAtlasTexture), lightDirW, light.cookieIntensity, light.cookieChannelMask, shadowTextureResolution, shadowEdgePixels, light.omniAtlasViewport);
					}
				}
				#endif
				#ifdef CLUSTER_SHADOWS
				if (light.shadowIntensity > 0.0) {
					decodeClusterLightShadowData(light);
					vec4 shadowParams = vec4(shadowTextureResolution, light.shadowNormalBias, light.shadowBias, 1.0 / light.range);
					if (light.isSpot) {
						vec3 shadowCoord = getShadowCoordPerspZbufferNormalOffset(lightProjectionMatrix, shadowParams, geometricNormal);
						
						#if defined(CLUSTER_SHADOW_TYPE_PCF1)
							float shadow = getShadowSpotClusteredPCF1(SHADOWMAP_PASS(shadowAtlasTexture), shadowCoord, shadowParams);
						#elif defined(CLUSTER_SHADOW_TYPE_PCF3)
							float shadow = getShadowSpotClusteredPCF3(SHADOWMAP_PASS(shadowAtlasTexture), shadowCoord, shadowParams);
						#elif defined(CLUSTER_SHADOW_TYPE_PCF5)
							float shadow = getShadowSpotClusteredPCF5(SHADOWMAP_PASS(shadowAtlasTexture), shadowCoord, shadowParams);
						#elif defined(CLUSTER_SHADOW_TYPE_PCSS)
							float shadow = getShadowSpotClusteredPCSS(SHADOWMAP_PASS(shadowAtlasTexture), shadowCoord, shadowParams);
						#endif
						falloffAttenuation *= mix(1.0, shadow, light.shadowIntensity);
					} else {
						vec3 dir = normalOffsetPointShadow(shadowParams, light.position, lightDirW, lightDirNormW, geometricNormal);
						#if defined(CLUSTER_SHADOW_TYPE_PCF1)
							float shadow = getShadowOmniClusteredPCF1(SHADOWMAP_PASS(shadowAtlasTexture), shadowParams, light.omniAtlasViewport, shadowEdgePixels, dir);
						#elif defined(CLUSTER_SHADOW_TYPE_PCF3)
							float shadow = getShadowOmniClusteredPCF3(SHADOWMAP_PASS(shadowAtlasTexture), shadowParams, light.omniAtlasViewport, shadowEdgePixels, dir);
						#elif defined(CLUSTER_SHADOW_TYPE_PCF5)
							float shadow = getShadowOmniClusteredPCF5(SHADOWMAP_PASS(shadowAtlasTexture), shadowParams, light.omniAtlasViewport, shadowEdgePixels, dir);
						#endif
						falloffAttenuation *= mix(1.0, shadow, light.shadowIntensity);
					}
				}
				#endif
			}
		}
		#endif
		#ifdef CLUSTER_AREALIGHTS
		if (light.shape != {LIGHTSHAPE_PUNCTUAL}) {
			{
				vec3 areaDiffuse = (diffuseAttenuation * falloffAttenuation) * light.color * cookieAttenuation;
				#if defined(LIT_SPECULAR)
					areaDiffuse = mix(areaDiffuse, vec3(0), dLTCSpecFres);
				#endif
				dDiffuseLight += areaDiffuse;
			}
			#ifdef LIT_SPECULAR
				float areaLightSpecular;
				if (light.shape == {LIGHTSHAPE_RECT}) {
					areaLightSpecular = getRectLightSpecular(worldNormal, viewDir);
				} else if (light.shape == {LIGHTSHAPE_DISK}) {
					areaLightSpecular = getDiskLightSpecular(worldNormal, viewDir);
				} else {
					areaLightSpecular = getSphereLightSpecular(worldNormal, viewDir);
				}
				dSpecularLight += dLTCSpecFres * areaLightSpecular * falloffAttenuation * light.color * cookieAttenuation;
				#ifdef LIT_CLEARCOAT
					float areaLightSpecularCC;
					if (light.shape == {LIGHTSHAPE_RECT}) {
						areaLightSpecularCC = getRectLightSpecular(clearcoat_worldNormal, viewDir);
					} else if (light.shape == {LIGHTSHAPE_DISK}) {
						areaLightSpecularCC = getDiskLightSpecular(clearcoat_worldNormal, viewDir);
					} else {
						areaLightSpecularCC = getSphereLightSpecular(clearcoat_worldNormal, viewDir);
					}
					ccSpecularLight += ccLTCSpecFres * areaLightSpecularCC * falloffAttenuation * light.color  * cookieAttenuation;
				#endif
			#endif
		} else
		#endif
		{
			{
				vec3 punctualDiffuse = falloffAttenuation * light.color * cookieAttenuation;
				#if defined(CLUSTER_AREALIGHTS)
				#if defined(LIT_SPECULAR)
					punctualDiffuse = mix(punctualDiffuse, vec3(0), specularity);
				#endif
				#endif
				dDiffuseLight += punctualDiffuse;
			}
	 
			#ifdef LIT_SPECULAR
				vec3 halfDir = normalize(-lightDirNormW + viewDir);
				
				#ifdef LIT_SPECULAR_FRESNEL
					dSpecularLight += 
						getLightSpecular(halfDir, reflectionDir, worldNormal, viewDir, lightDirNormW, gloss, tbn) * falloffAttenuation * light.color * cookieAttenuation * 
						getFresnel(
							dot(viewDir, halfDir), 
							gloss, 
							specularity
						#if defined(LIT_IRIDESCENCE)
							, iridescenceFresnel,
							iridescence_intensity
						#endif
							);
				#else
					dSpecularLight += getLightSpecular(halfDir, reflectionDir, worldNormal, viewDir, lightDirNormW, gloss, tbn) * falloffAttenuation * light.color * cookieAttenuation * specularity;
				#endif
				#ifdef LIT_CLEARCOAT
					#ifdef LIT_SPECULAR_FRESNEL
						ccSpecularLight += getLightSpecular(halfDir, clearcoatReflectionDir, clearcoat_worldNormal, viewDir, lightDirNormW, clearcoat_gloss, tbn) * falloffAttenuation * light.color * cookieAttenuation * getFresnelCC(dot(viewDir, halfDir));
					#else
						ccSpecularLight += getLightSpecular(halfDir, clearcoatReflectionDir, clearcoat_worldNormal, viewDir, lightDirNormW, clearcoat_gloss, tbn) * falloffAttenuation * light.color * cookieAttenuation; 
					#endif
				#endif
				#ifdef LIT_SHEEN
					sSpecularLight += getLightSpecularSheen(halfDir, worldNormal, viewDir, lightDirNormW, sheen_gloss) * falloffAttenuation * light.color * cookieAttenuation;
				#endif
			#endif
		}
	}
	dAtten = falloffAttenuation;
	dLightDirNormW = lightDirNormW;
}
void evaluateClusterLight(
	float lightIndex, 
	vec3 worldNormal, 
	vec3 viewDir, 
	vec3 reflectionDir, 
#if defined(LIT_CLEARCOAT)
	vec3 clearcoatReflectionDir,
#endif
	float gloss, 
	vec3 specularity, 
	vec3 geometricNormal, 
	mat3 tbn, 
#if defined(LIT_IRIDESCENCE)
	vec3 iridescenceFresnel,
#endif
	vec3 clearcoat_worldNormal,
	float clearcoat_gloss,
	float sheen_gloss,
	float iridescence_intensity
) {
	ClusterLightData clusterLightData;
	decodeClusterLightCore(clusterLightData, lightIndex);
	#ifdef CLUSTER_MESH_DYNAMIC_LIGHTS
		bool acceptLightMask = clusterLightData.isDynamic;
	#else
		bool acceptLightMask = clusterLightData.isLightmapped;
	#endif
	if (acceptLightMask)
		evaluateLight(
			clusterLightData, 
			worldNormal, 
			viewDir, 
			reflectionDir, 
#if defined(LIT_CLEARCOAT)
			clearcoatReflectionDir, 
#endif
			gloss, 
			specularity, 
			geometricNormal, 
			tbn, 
#if defined(LIT_IRIDESCENCE)
			iridescenceFresnel,
#endif
			clearcoat_worldNormal,
			clearcoat_gloss,
			sheen_gloss,
			iridescence_intensity
		);
}
void addClusteredLights(
	vec3 worldNormal, 
	vec3 viewDir, 
	vec3 reflectionDir, 
#if defined(LIT_CLEARCOAT)
	vec3 clearcoatReflectionDir,
#endif
	float gloss, 
	vec3 specularity, 
	vec3 geometricNormal, 
	mat3 tbn, 
#if defined(LIT_IRIDESCENCE)
	vec3 iridescenceFresnel,
#endif
	vec3 clearcoat_worldNormal,
	float clearcoat_gloss,
	float sheen_gloss,
	float iridescence_intensity
) {
	if (clusterSkip > 0.5)
		return;
	vec3 cellCoords = floor((vPositionW - clusterBoundsMin) * clusterCellsCountByBoundsSize);
	if (!(any(lessThan(cellCoords, vec3(0.0))) || any(greaterThanEqual(cellCoords, clusterCellsMax)))) {
		float cellIndex = dot(clusterCellsDot, cellCoords);
		float clusterV = floor(cellIndex * clusterTextureSize.y);
		float clusterU = cellIndex - (clusterV * clusterTextureSize.x);
		for (int lightCellIndex = 0; lightCellIndex < clusterMaxCells; lightCellIndex++) {
			float lightIndex = texelFetch(clusterWorldTexture, ivec2(int(clusterU) + lightCellIndex, clusterV), 0).x;
			if (lightIndex <= 0.0)
				break;
			evaluateClusterLight(
				lightIndex * 255.0, 
				worldNormal, 
				viewDir, 
				reflectionDir,
#if defined(LIT_CLEARCOAT)
				clearcoatReflectionDir,
#endif
				gloss, 
				specularity, 
				geometricNormal, 
				tbn, 
#if defined(LIT_IRIDESCENCE)
				iridescenceFresnel,
#endif
				clearcoat_worldNormal,
				clearcoat_gloss,
				sheen_gloss,
				iridescence_intensity
			); 
		}
	}
}
`,U2=`
vec3 combineColor(vec3 albedo, vec3 sheenSpecularity, float clearcoatSpecularity) {
	vec3 ret = vec3(0);
#ifdef LIT_OLD_AMBIENT
	ret += (dDiffuseLight - light_globalAmbient) * albedo + material_ambient * light_globalAmbient;
#else
	ret += albedo * dDiffuseLight;
#endif
#ifdef LIT_SPECULAR
	ret += dSpecularLight;
#endif
#ifdef LIT_REFLECTIONS
	ret += dReflection.rgb * dReflection.a;
#endif
#ifdef LIT_SHEEN
	float sheenScaling = 1.0 - max(max(sheenSpecularity.r, sheenSpecularity.g), sheenSpecularity.b) * 0.157;
	ret = ret * sheenScaling + (sSpecularLight + sReflection.rgb) * sheenSpecularity;
#endif
#ifdef LIT_CLEARCOAT
	float clearCoatScaling = 1.0 - ccFresnel * clearcoatSpecularity;
	ret = ret * clearCoatScaling + (ccSpecularLight + ccReflection) * clearcoatSpecularity;
#endif
	return ret;
}
`,B2=`
	varying vec2 uv0;
	uniform sampler2D blitTexture;
	void main(void) {
		gl_FragColor = texture2D(blitTexture, uv0);
	}
`,V2=`
	varying vec2 uv0;
	uniform samplerCube blitTexture;
	uniform mat4 invViewProj;
	void main(void) {
		vec4 projPos = vec4(uv0 * 2.0 - 1.0, 0.5, 1.0);
		vec4 worldPos = invViewProj * projPos;
		gl_FragColor = textureCube(blitTexture, worldPos.xyz);
	}
`,z2=`
	attribute vec2 vertex_position;
	varying vec2 uv0;
	void main(void) {
		gl_Position = vec4(vertex_position, 0.5, 1.0);
		uv0 = vertex_position.xy * 0.5 + 0.5;
		#ifndef WEBGPU
			uv0.y = 1.0 - uv0.y;
		#endif
	}
`,H2=`
vec4 getCookie2D(sampler2D tex, mat4 transform, float intensity) {
	vec4 projPos = transform * vec4(vPositionW, 1.0);
	projPos.xy /= projPos.w;
	return mix(vec4(1.0), texture2D(tex, projPos.xy), intensity);
}
vec4 getCookie2DClip(sampler2D tex, mat4 transform, float intensity) {
	vec4 projPos = transform * vec4(vPositionW, 1.0);
	projPos.xy /= projPos.w;
	if (projPos.x < 0.0 || projPos.x > 1.0 || projPos.y < 0.0 || projPos.y > 1.0 || projPos.z < 0.0) return vec4(0.0);
	return mix(vec4(1.0), texture2D(tex, projPos.xy), intensity);
}
vec4 getCookie2DXform(sampler2D tex, mat4 transform, float intensity, vec4 cookieMatrix, vec2 cookieOffset) {
	vec4 projPos = transform * vec4(vPositionW, 1.0);
	projPos.xy /= projPos.w;
	projPos.xy += cookieOffset;
	vec2 uv = mat2(cookieMatrix) * (projPos.xy-vec2(0.5)) + vec2(0.5);
	return mix(vec4(1.0), texture2D(tex, uv), intensity);
}
vec4 getCookie2DClipXform(sampler2D tex, mat4 transform, float intensity, vec4 cookieMatrix, vec2 cookieOffset) {
	vec4 projPos = transform * vec4(vPositionW, 1.0);
	projPos.xy /= projPos.w;
	projPos.xy += cookieOffset;
	if (projPos.x < 0.0 || projPos.x > 1.0 || projPos.y < 0.0 || projPos.y > 1.0 || projPos.z < 0.0) return vec4(0.0);
	vec2 uv = mat2(cookieMatrix) * (projPos.xy-vec2(0.5)) + vec2(0.5);
	return mix(vec4(1.0), texture2D(tex, uv), intensity);
}
vec4 getCookieCube(samplerCube tex, mat4 transform, float intensity) {
	return mix(vec4(1.0), textureCube(tex, dLightDirNormW * mat3(transform)), intensity);
}
`,G2=`
#if LIT_CUBEMAP_PROJECTION == BOX
	uniform vec3 envBoxMin;
	uniform vec3 envBoxMax;
#endif
vec3 cubeMapProject(vec3 nrdir) {
	#if LIT_CUBEMAP_PROJECTION == NONE
		return cubeMapRotate(nrdir);
	#endif
	#if LIT_CUBEMAP_PROJECTION == BOX
		nrdir = cubeMapRotate(nrdir);
		vec3 rbmax = (envBoxMax - vPositionW) / nrdir;
		vec3 rbmin = (envBoxMin - vPositionW) / nrdir;
		vec3 rbminmax = mix(rbmin, rbmax, vec3(greaterThan(nrdir, vec3(0.0))));
		float fa = min(min(rbminmax.x, rbminmax.y), rbminmax.z);
		vec3 posonbox = vPositionW + nrdir * fa;
		vec3 envBoxPos = (envBoxMin + envBoxMax) * 0.5;
		return normalize(posonbox - envBoxPos);
	#endif
}
`,W2=`
#ifdef CUBEMAP_ROTATION
uniform mat3 cubeMapRotationMatrix;
#endif
vec3 cubeMapRotate(vec3 refDir) {
#ifdef CUBEMAP_ROTATION
	return refDir * cubeMapRotationMatrix;
#else
	return refDir;
#endif
}
`,$2=`
#ifdef DEBUG_ALBEDO_PASS
gl_FragColor = vec4(gammaCorrectOutput(dAlbedo), 1.0);
#endif
#ifdef DEBUG_UV0_PASS
gl_FragColor = vec4(litArgs_albedo , 1.0);
#endif
#ifdef DEBUG_WORLD_NORMAL_PASS
gl_FragColor = vec4(litArgs_worldNormal * 0.5 + 0.5, 1.0);
#endif
#ifdef DEBUG_OPACITY_PASS
gl_FragColor = vec4(vec3(litArgs_opacity) , 1.0);
#endif
#ifdef DEBUG_SPECULARITY_PASS
gl_FragColor = vec4(litArgs_specularity, 1.0);
#endif
#ifdef DEBUG_GLOSS_PASS
gl_FragColor = vec4(vec3(litArgs_gloss) , 1.0);
#endif
#ifdef DEBUG_METALNESS_PASS
gl_FragColor = vec4(vec3(litArgs_metalness) , 1.0);
#endif
#ifdef DEBUG_AO_PASS
gl_FragColor = vec4(vec3(litArgs_ao) , 1.0);
#endif
#ifdef DEBUG_EMISSION_PASS
gl_FragColor = vec4(gammaCorrectOutput(litArgs_emission), 1.0);
#endif
`,X2=`
#ifdef DEBUG_LIGHTING_PASS
litArgs_albedo = vec3(0.5);
#endif
#ifdef DEBUG_UV0_PASS
#ifdef VARYING_VUV0
litArgs_albedo = vec3(vUv0, 0);
#else
litArgs_albedo = vec3(0);
#endif
#endif
`,q2=`
#ifndef _DECODE_INCLUDED_
#define _DECODE_INCLUDED_
vec3 decodeLinear(vec4 raw) {
	return raw.rgb;
}
float decodeGamma(float raw) {
	return pow(raw, 2.2);
}
vec3 decodeGamma(vec3 raw) {
	return pow(raw, vec3(2.2));
}
vec3 decodeGamma(vec4 raw) {
	return pow(raw.xyz, vec3(2.2));
}
vec3 decodeRGBM(vec4 raw) {
	vec3 color = (8.0 * raw.a) * raw.rgb;
	return color * color;
}
vec3 decodeRGBP(vec4 raw) {
	vec3 color = raw.rgb * (-raw.a * 7.0 + 8.0);
	return color * color;
}
vec3 decodeRGBE(vec4 raw) {
	if (raw.a == 0.0) {
		return vec3(0.0, 0.0, 0.0);
	} else {
		return raw.xyz * pow(2.0, raw.w * 255.0 - 128.0);
	}
}
vec4 passThrough(vec4 raw) {
	return raw;
}
vec3 unpackNormalXYZ(vec4 nmap) {
	return nmap.xyz * 2.0 - 1.0;
}
vec3 unpackNormalXY(vec4 nmap) {
	vec3 normal;
	normal.xy = nmap.wy * 2.0 - 1.0;
	normal.z = sqrt(1.0 - clamp(dot(normal.xy, normal.xy), 0.0, 1.0));
	return normal;
}
#endif
`,Y2=`
#ifndef _DETAILMODES_INCLUDED_
#define _DETAILMODES_INCLUDED_
vec3 detailMode_mul(vec3 c1, vec3 c2) {
	return c1 * c2;
}
vec3 detailMode_add(vec3 c1, vec3 c2) {
	return c1 + c2;
}
vec3 detailMode_screen(vec3 c1, vec3 c2) {
	return 1.0 - (1.0 - c1)*(1.0 - c2);
}
vec3 detailMode_overlay(vec3 c1, vec3 c2) {
	return mix(1.0 - 2.0 * (1.0 - c1)*(1.0 - c2), 2.0 * c1 * c2, step(c1, vec3(0.5)));
}
vec3 detailMode_min(vec3 c1, vec3 c2) {
	return min(c1, c2);
}
vec3 detailMode_max(vec3 c1, vec3 c2) {
	return max(c1, c2);
}
#endif
`,j2=`
uniform vec3 material_diffuse;
#ifdef STD_DIFFUSEDETAIL_TEXTURE
	#include "detailModesPS"
#endif
void getAlbedo() {
	dAlbedo = material_diffuse.rgb;
	#ifdef STD_DIFFUSE_TEXTURE
		vec3 albedoTexture = {STD_DIFFUSE_TEXTURE_DECODE}(texture2DBias({STD_DIFFUSE_TEXTURE_NAME}, {STD_DIFFUSE_TEXTURE_UV}, textureBias)).{STD_DIFFUSE_TEXTURE_CHANNEL};
		#ifdef STD_DIFFUSEDETAIL_TEXTURE
			vec3 albedoDetail = {STD_DIFFUSEDETAIL_TEXTURE_DECODE}(texture2DBias({STD_DIFFUSEDETAIL_TEXTURE_NAME}, {STD_DIFFUSEDETAIL_TEXTURE_UV}, textureBias)).{STD_DIFFUSEDETAIL_TEXTURE_CHANNEL};
			albedoTexture = detailMode_{STD_DIFFUSEDETAIL_DETAILMODE}(albedoTexture, albedoDetail);
		#endif
		dAlbedo *= albedoTexture;
	#endif
	#ifdef STD_DIFFUSE_VERTEX
		dAlbedo *= gammaCorrectInput(saturate(vVertexColor.{STD_DIFFUSE_VERTEX_CHANNEL}));
	#endif
}
`,K2=`
uniform vec3 material_emissive;
uniform float material_emissiveIntensity;
void getEmission() {
	dEmission = material_emissive * material_emissiveIntensity;
	#ifdef STD_EMISSIVE_TEXTURE
	dEmission *= {STD_EMISSIVE_TEXTURE_DECODE}(texture2DBias({STD_EMISSIVE_TEXTURE_NAME}, {STD_EMISSIVE_TEXTURE_UV}, textureBias)).{STD_EMISSIVE_TEXTURE_CHANNEL};
	#endif
	#ifdef STD_EMISSIVE_VERTEX
	dEmission *= gammaCorrectInput(saturate(vVertexColor.{STD_EMISSIVE_VERTEX_CHANNEL}));
	#endif
}
`,Z2=`
vec4 encodeLinear(vec3 source) {
	return vec4(source, 1.0);
}
vec4 encodeGamma(vec3 source) {
	return vec4(pow(source + 0.0000001, vec3(1.0 / 2.2)), 1.0);
}
vec4 encodeRGBM(vec3 source) {
	vec4 result;
	result.rgb = pow(source.rgb, vec3(0.5));
	result.rgb *= 1.0 / 8.0;
	result.a = saturate( max( max( result.r, result.g ), max( result.b, 1.0 / 255.0 ) ) );
	result.a = ceil(result.a * 255.0) / 255.0;
	result.rgb /= result.a;
	return result;
}
vec4 encodeRGBP(vec3 source) {
	vec3 gamma = pow(source, vec3(0.5));
	float maxVal = min(8.0, max(1.0, max(gamma.x, max(gamma.y, gamma.z))));
	float v = 1.0 - ((maxVal - 1.0) / 7.0);
	v = ceil(v * 255.0) / 255.0;
	return vec4(gamma / (-v * 7.0 + 8.0), v);	
}
vec4 encodeRGBE(vec3 source) {
	float maxVal = max(source.x, max(source.y, source.z));
	if (maxVal < 1e-32) {
		return vec4(0, 0, 0, 0);
	} else {
		float e = ceil(log2(maxVal));
		return vec4(source / pow(2.0, e), (e + 128.0) / 255.0);
	}
}
`,Q2=`
	gl_FragColor.rgb = combineColor(litArgs_albedo, litArgs_sheen_specularity, litArgs_clearcoat_specularity);
	gl_FragColor.rgb += litArgs_emission;
	gl_FragColor.rgb = addFog(gl_FragColor.rgb);
	gl_FragColor.rgb = toneMap(gl_FragColor.rgb);
	gl_FragColor.rgb = gammaCorrectOutput(gl_FragColor.rgb);
`,J2=`
#ifndef _ENVATLAS_INCLUDED_
#define _ENVATLAS_INCLUDED_
const float atlasSize = 512.0;
const float seamSize = 1.0 / atlasSize;
vec2 mapUv(vec2 uv, vec4 rect) {
	return vec2(mix(rect.x + seamSize, rect.x + rect.z - seamSize, uv.x),
				mix(rect.y + seamSize, rect.y + rect.w - seamSize, uv.y));
}
vec2 mapRoughnessUv(vec2 uv, float level) {
	float t = 1.0 / exp2(level);
	return mapUv(uv, vec4(0, 1.0 - t, t, t * 0.5));
}
vec2 mapShinyUv(vec2 uv, float level) {
	float t = 1.0 / exp2(level);
	return mapUv(uv, vec4(1.0 - t, 1.0 - t, t, t * 0.5));
}
#endif
`,e3=`
#ifdef LIT_SKYBOX_INTENSITY
	uniform float skyboxIntensity;
#endif
vec3 processEnvironment(vec3 color) {
	#ifdef LIT_SKYBOX_INTENSITY
		return color * skyboxIntensity;
	#else
		return color;
	#endif
}
`,t3=`
float getFalloffWindow(float lightRadius, vec3 lightDir) {
	float sqrDist = dot(lightDir, lightDir);
	float invRadius = 1.0 / lightRadius;
	return square(saturate(1.0 - square(sqrDist * square(invRadius))));
}
float getFalloffInvSquared(float lightRadius, vec3 lightDir) {
	float sqrDist = dot(lightDir, lightDir);
	float falloff = 1.0 / (sqrDist + 1.0);
	float invRadius = 1.0 / lightRadius;
	falloff *= 16.0;
	falloff *= square(saturate(1.0 - square(sqrDist * square(invRadius))));
	return falloff;
}
`,s3=`
float getFalloffLinear(float lightRadius, vec3 lightDir) {
	float d = length(lightDir);
	return max(((lightRadius - d) / lightRadius), 0.0);
}
`,i3=`
#ifndef FLOAT_AS_UINT
#define FLOAT_AS_UINT
vec4 float2uint(float value) {
	uint intBits = floatBitsToUint(value);
	return vec4(
		float((intBits >> 24u) & 0xFFu) / 255.0,
		float((intBits >> 16u) & 0xFFu) / 255.0,
		float((intBits >> 8u) & 0xFFu) / 255.0,
		float(intBits & 0xFFu) / 255.0
	);
}
float uint2float(vec4 value) {
	uint intBits = 
		(uint(value.r * 255.0) << 24u) |
		(uint(value.g * 255.0) << 16u) |
		(uint(value.b * 255.0) << 8u) |
		uint(value.a * 255.0);
	return uintBitsToFloat(intBits);
}
vec4 float2vec4(float value) {
	#if defined(CAPS_TEXTURE_FLOAT_RENDERABLE)
		return vec4(value, 1.0, 1.0, 1.0);
	#else
		return float2uint(value);
	#endif
}
#endif
`,r3=`
float dBlendModeFogFactor = 1.0;
#if (FOG != NONE)
	uniform vec3 fog_color;
	#if (FOG == LINEAR)
		uniform float fog_start;
		uniform float fog_end;
	#else
		uniform float fog_density;
	#endif
#endif
float getFogFactor() {
	float depth = gl_FragCoord.z / gl_FragCoord.w;
	float fogFactor = 0.0;
	#if (FOG == LINEAR)
		fogFactor = (fog_end - depth) / (fog_end - fog_start);
	#elif (FOG == EXP)
		fogFactor = exp(-depth * fog_density);
	#elif (FOG == EXP2)
		fogFactor = exp(-depth * depth * fog_density * fog_density);
	#endif
	return clamp(fogFactor, 0.0, 1.0);
}
vec3 addFog(vec3 color) {
	#if (FOG != NONE)
		return mix(fog_color * dBlendModeFogFactor, color, getFogFactor());
	#endif
	return color;
}
`,a3=`
vec3 getFresnel(
		float cosTheta, 
		float gloss, 
		vec3 specularity
#if defined(LIT_IRIDESCENCE)
		, vec3 iridescenceFresnel, 
		float iridescenceIntensity
#endif
	) {
	float fresnel = pow(1.0 - saturate(cosTheta), 5.0);
	float glossSq = gloss * gloss;
	vec3 ret = specularity + (max(vec3(glossSq), specularity) - specularity) * fresnel;
#if defined(LIT_IRIDESCENCE)
	return mix(ret, iridescenceFresnel, iridescenceIntensity);
#else
	return ret;
#endif	
}
float getFresnelCC(float cosTheta) {
	float fresnel = pow(1.0 - saturate(cosTheta), 5.0);
	return 0.04 + (1.0 - 0.04) * fresnel;
}
`,n3=`
attribute vec2 vertex_position;
varying vec2 vUv0;
void main(void)
{
	gl_Position = vec4(vertex_position, 0.5, 1.0);
	vUv0 = vertex_position.xy * 0.5 + 0.5;
}
`,o3=`
#include "decodePS"
#if (GAMMA == SRGB)
	float gammaCorrectInput(float color) {
		return decodeGamma(color);
	}
	vec3 gammaCorrectInput(vec3 color) {
		return decodeGamma(color);
	}
	vec4 gammaCorrectInput(vec4 color) {
		return vec4(decodeGamma(color.xyz), color.w);
	}
	vec3 gammaCorrectOutput(vec3 color) {
		return pow(color + 0.0000001, vec3(1.0 / 2.2));
	}
#else
	float gammaCorrectInput(float color) {
		return color;
	}
	vec3 gammaCorrectInput(vec3 color) {
		return color;
	}
	vec4 gammaCorrectInput(vec4 color) {
		return color;
	}
	vec3 gammaCorrectOutput(vec3 color) {
		return color;
	}
#endif
`,l3=`
#ifdef STD_GLOSS_CONSTANT
uniform float material_gloss;
#endif
void getGlossiness() {
	dGlossiness = 1.0;
	#ifdef STD_GLOSS_CONSTANT
	dGlossiness *= material_gloss;
	#endif
	#ifdef STD_GLOSS_TEXTURE
	dGlossiness *= texture2DBias({STD_GLOSS_TEXTURE_NAME}, {STD_GLOSS_TEXTURE_UV}, textureBias).{STD_GLOSS_TEXTURE_CHANNEL};
	#endif
	#ifdef STD_GLOSS_VERTEX
	dGlossiness *= saturate(vVertexColor.{STD_GLOSS_VERTEX_CHANNEL});
	#endif
	#ifdef STD_GLOSS_INVERT
	dGlossiness = 1.0 - dGlossiness;
	#endif
	dGlossiness += 0.0000001;
}
`,h3=`
uniform mat4 matrix_model;
uniform mat4 matrix_view;
uniform mat4 matrix_projection;
bool initCenter(vec3 modelCenter, out SplatCenter center) {
	mat4 modelView = matrix_view * matrix_model;
	vec4 centerView = modelView * vec4(modelCenter, 1.0);
	if (centerView.z > 0.0) {
		return false;
	}
	vec4 centerProj = matrix_projection * centerView;
	#if WEBGPU
		centerProj.z = clamp(centerProj.z, 0, abs(centerProj.w));
	#else
		centerProj.z = clamp(centerProj.z, -abs(centerProj.w), abs(centerProj.w));
	#endif
	center.view = centerView.xyz / centerView.w;
	center.proj = centerProj;
	center.projMat00 = matrix_projection[0][0];
	center.modelView = modelView;
	return true;
}
`,c3=`
uniform mediump sampler2D splatColor;
vec4 readColor(in SplatSource source) {
	return texelFetch(splatColor, source.uv, 0);
}
`,d3=`
struct SplatSource {
	uint order;
	uint id;
	ivec2 uv;
	vec2 cornerUV;
};
struct SplatCenter {
	vec3 view;
	vec4 proj;
	mat4 modelView;
	float projMat00;
};
struct SplatCorner {
	vec2 offset;
	vec2 uv;
	#if GSPLAT_AA
		float aaFactor;
	#endif
	vec2 v;
	float dlen;
};
#include "gsplatEvalSHVS"
#include "gsplatQuatToMat3VS"
#if GSPLAT_COMPRESSED_DATA == true
	#include "gsplatCompressedDataVS"
	#if SH_COEFFS > 0
		#include "gsplatCompressedSHVS"
	#endif
#elif GSPLAT_SOGS_DATA == true
	#include "gsplatSogsDataVS"
	#include "gsplatSogsColorVS"
	#if SH_COEFFS > 0
		#include "gsplatSogsSHVS"
	#endif
#else
	#include "gsplatDataVS"
	#include "gsplatColorVS"
	#if SH_COEFFS > 0
		#include "gsplatSHVS"
	#endif
#endif
#include "gsplatSourceVS"
#include "gsplatCenterVS"
#include "gsplatCornerVS"
#include "gsplatOutputVS"
void clipCorner(inout SplatCorner corner, float alpha) {
	float clip = min(1.0, sqrt(-log(1.0 / 255.0 / alpha)) / 2.0);
	corner.offset *= clip;
	corner.uv *= clip;
}
`,f3=`
uniform highp usampler2D packedTexture;
uniform highp sampler2D chunkTexture;
vec4 chunkDataA;
vec4 chunkDataB;
vec4 chunkDataC;
vec4 chunkDataD;
vec4 chunkDataE;
uvec4 packedData;
vec3 unpack111011(uint bits) {
	return vec3(
		float(bits >> 21u) / 2047.0,
		float((bits >> 11u) & 0x3ffu) / 1023.0,
		float(bits & 0x7ffu) / 2047.0
	);
}
vec4 unpack8888(uint bits) {
	return vec4(
		float(bits >> 24u) / 255.0,
		float((bits >> 16u) & 0xffu) / 255.0,
		float((bits >> 8u) & 0xffu) / 255.0,
		float(bits & 0xffu) / 255.0
	);
}
const float norm = 1.0 / (sqrt(2.0) * 0.5);
vec4 unpackRotation(uint bits) {
	float a = (float((bits >> 20u) & 0x3ffu) / 1023.0 - 0.5) * norm;
	float b = (float((bits >> 10u) & 0x3ffu) / 1023.0 - 0.5) * norm;
	float c = (float(bits & 0x3ffu) / 1023.0 - 0.5) * norm;
	float m = sqrt(1.0 - (a * a + b * b + c * c));
	uint mode = bits >> 30u;
	if (mode == 0u) return vec4(m, a, b, c);
	if (mode == 1u) return vec4(a, m, b, c);
	if (mode == 2u) return vec4(a, b, m, c);
	return vec4(a, b, c, m);
}
vec3 readCenter(SplatSource source) {
	uint w = uint(textureSize(chunkTexture, 0).x) / 5u;
	uint chunkId = source.id / 256u;
	ivec2 chunkUV = ivec2((chunkId % w) * 5u, chunkId / w);
	chunkDataA = texelFetch(chunkTexture, chunkUV, 0);
	chunkDataB = texelFetch(chunkTexture, chunkUV + ivec2(1, 0), 0);
	chunkDataC = texelFetch(chunkTexture, chunkUV + ivec2(2, 0), 0);
	chunkDataD = texelFetch(chunkTexture, chunkUV + ivec2(3, 0), 0);
	chunkDataE = texelFetch(chunkTexture, chunkUV + ivec2(4, 0), 0);
	packedData = texelFetch(packedTexture, source.uv, 0);
	return mix(chunkDataA.xyz, vec3(chunkDataA.w, chunkDataB.xy), unpack111011(packedData.x));
}
vec4 readColor(in SplatSource source) {
	vec4 r = unpack8888(packedData.w);
	return vec4(mix(chunkDataD.xyz, vec3(chunkDataD.w, chunkDataE.xy), r.rgb), r.w);
}
vec4 getRotation() {
	return unpackRotation(packedData.y);
}
vec3 getScale() {
	return exp(mix(vec3(chunkDataB.zw, chunkDataC.x), chunkDataC.yzw, unpack111011(packedData.z)));
}
void readCovariance(in SplatSource source, out vec3 covA, out vec3 covB) {
	mat3 rot = quatToMat3(getRotation());
	vec3 scale = getScale();
	mat3 M = transpose(mat3(
		scale.x * rot[0],
		scale.y * rot[1],
		scale.z * rot[2]
	));
	covA = vec3(dot(M[0], M[0]), dot(M[0], M[1]), dot(M[0], M[2]));
	covB = vec3(dot(M[1], M[1]), dot(M[1], M[2]), dot(M[2], M[2]));
}
`,u3=`
#if SH_BANDS > 0
uniform highp usampler2D shTexture0;
uniform highp usampler2D shTexture1;
uniform highp usampler2D shTexture2;
vec4 unpack8888s(in uint bits) {
	return vec4((uvec4(bits) >> uvec4(0u, 8u, 16u, 24u)) & 0xffu) * (8.0 / 255.0) - 4.0;
}
void readSHData(in SplatSource source, out vec3 sh[15], out float scale) {
	uvec4 shData0 = texelFetch(shTexture0, source.uv, 0);
	uvec4 shData1 = texelFetch(shTexture1, source.uv, 0);
	uvec4 shData2 = texelFetch(shTexture2, source.uv, 0);
	vec4 r0 = unpack8888s(shData0.x);
	vec4 r1 = unpack8888s(shData0.y);
	vec4 r2 = unpack8888s(shData0.z);
	vec4 r3 = unpack8888s(shData0.w);
	vec4 g0 = unpack8888s(shData1.x);
	vec4 g1 = unpack8888s(shData1.y);
	vec4 g2 = unpack8888s(shData1.z);
	vec4 g3 = unpack8888s(shData1.w);
	vec4 b0 = unpack8888s(shData2.x);
	vec4 b1 = unpack8888s(shData2.y);
	vec4 b2 = unpack8888s(shData2.z);
	vec4 b3 = unpack8888s(shData2.w);
	sh[0] =  vec3(r0.x, g0.x, b0.x);
	sh[1] =  vec3(r0.y, g0.y, b0.y);
	sh[2] =  vec3(r0.z, g0.z, b0.z);
	sh[3] =  vec3(r0.w, g0.w, b0.w);
	sh[4] =  vec3(r1.x, g1.x, b1.x);
	sh[5] =  vec3(r1.y, g1.y, b1.y);
	sh[6] =  vec3(r1.z, g1.z, b1.z);
	sh[7] =  vec3(r1.w, g1.w, b1.w);
	sh[8] =  vec3(r2.x, g2.x, b2.x);
	sh[9] =  vec3(r2.y, g2.y, b2.y);
	sh[10] = vec3(r2.z, g2.z, b2.z);
	sh[11] = vec3(r2.w, g2.w, b2.w);
	sh[12] = vec3(r3.x, g3.x, b3.x);
	sh[13] = vec3(r3.y, g3.y, b3.y);
	sh[14] = vec3(r3.z, g3.z, b3.z);
	scale = 1.0;
}
#endif
`,p3=`
	#if SH_BANDS == 1
		#define SH_COEFFS 3
	#elif SH_BANDS == 2
		#define SH_COEFFS 8
	#elif SH_BANDS == 3
		#define SH_COEFFS 15
	#else
		#define SH_COEFFS 0
	#endif
	#if SH_BANDS > 0
	const float SH_C1 = 0.4886025119029199f;
	#if SH_BANDS > 1
		const float SH_C2_0 = 1.0925484305920792f;
		const float SH_C2_1 = -1.0925484305920792f;
		const float SH_C2_2 = 0.31539156525252005f;
		const float SH_C2_3 = -1.0925484305920792f;
		const float SH_C2_4 = 0.5462742152960396f;
	#endif
	#if SH_BANDS > 2
		const float SH_C3_0 = -0.5900435899266435f;
		const float SH_C3_1 = 2.890611442640554f;
		const float SH_C3_2 = -0.4570457994644658f;
		const float SH_C3_3 = 0.3731763325901154f;
		const float SH_C3_4 = -0.4570457994644658f;
		const float SH_C3_5 = 1.445305721320277f;
		const float SH_C3_6 = -0.5900435899266435f;
	#endif
	vec3 evalSH(in vec3 sh[SH_COEFFS], in vec3 dir) {
		float x = dir.x;
		float y = dir.y;
		float z = dir.z;
		vec3 result = SH_C1 * (-sh[0] * y + sh[1] * z - sh[2] * x);
		#if SH_BANDS > 1
			float xx = x * x;
			float yy = y * y;
			float zz = z * z;
			float xy = x * y;
			float yz = y * z;
			float xz = x * z;
			result +=
				sh[3] * (SH_C2_0 * xy) +
				sh[4] * (SH_C2_1 * yz) +
				sh[5] * (SH_C2_2 * (2.0 * zz - xx - yy)) +
				sh[6] * (SH_C2_3 * xz) +
				sh[7] * (SH_C2_4 * (xx - yy));
		#endif
		#if SH_BANDS > 2
			result +=
				sh[8]  * (SH_C3_0 * y * (3.0 * xx - yy)) +
				sh[9]  * (SH_C3_1 * xy * z) +
				sh[10] * (SH_C3_2 * y * (4.0 * zz - xx - yy)) +
				sh[11] * (SH_C3_3 * z * (2.0 * zz - 3.0 * xx - 3.0 * yy)) +
				sh[12] * (SH_C3_4 * x * (4.0 * zz - xx - yy)) +
				sh[13] * (SH_C3_5 * z * (xx - yy)) +
				sh[14] * (SH_C3_6 * x * (xx - 3.0 * yy));
		#endif
		return result;
	}
	#endif
`,m3=`
mat3 quatToMat3(vec4 R) {
	vec4 R2 = R + R;
	float X = R2.x * R.w;
	vec4 Y  = R2.y * R;
	vec4 Z  = R2.z * R;
	float W = R2.w * R.w;
	return mat3(
		1.0 - Z.z - W,
			  Y.z + X,
			  Y.w - Z.x,
			  Y.z - X,
		1.0 - Y.y - W,
			  Z.w + Y.x,
			  Y.w + Z.x,
			  Z.w - Y.x,
		1.0 - Y.y - Z.z
	);
}
`,_3=`
uniform mediump sampler2D sh0;
uniform vec4 sh0_mins;
uniform vec4 sh0_maxs;
float SH_C0 = 0.28209479177387814;
vec4 readColor(in SplatSource source) {
	vec4 clr = mix(sh0_mins, sh0_maxs, texelFetch(sh0, source.uv, 0));
	return vec4(vec3(0.5) + clr.xyz * SH_C0, 1.0 / (1.0 + exp(-clr.w)));
}
`,g3=`
uniform highp usampler2D packedTexture;
uniform vec3 means_mins;
uniform vec3 means_maxs;
uniform vec3 scales_mins;
uniform vec3 scales_maxs;
vec4 unpackU32(uint v) {
	return vec4(
		float((v >> 24u) & 0xFFu) / 255.0,
		float((v >> 16u) & 0xFFu) / 255.0,
		float((v >> 8u) & 0xFFu) / 255.0,
		float(v & 0xFFu) / 255.0
	);
}
uvec4 packedSample;
vec3 readCenter(SplatSource source) {
	packedSample = texelFetch(packedTexture, source.uv, 0);
	vec3 l = unpackU32(packedSample.x).xyz;
	vec3 u = unpackU32(packedSample.y).xyz;
	vec3 n = (l * 255.0 + u * 255.0 * 256.0) / 65535.0;
	vec3 v = mix(means_mins, means_maxs, n);
	return sign(v) * (exp(abs(v)) - 1.0);
}
const float norm = 2.0 / sqrt(2.0);
void readCovariance(in SplatSource source, out vec3 covA, out vec3 covB) {
	vec4 qdata = unpackU32(packedSample.z);
	vec3 sdata = unpackU32(packedSample.w).xyz;
	vec3 abc = (qdata.xyz - 0.5) * norm;
	float d = sqrt(max(0.0, 1.0 - dot(abc, abc)));
	uint mode = uint(qdata.w * 255.0 + 0.5) - 252u;
	vec4 quat = (mode == 0u) ? vec4(d, abc) :
				((mode == 1u) ? vec4(abc.x, d, abc.yz) :
				((mode == 2u) ? vec4(abc.xy, d, abc.z) : vec4(abc, d)));
	mat3 rot = quatToMat3(quat);
	vec3 scale = exp(mix(scales_mins, scales_maxs, sdata));
	mat3 M = transpose(mat3(
		scale.x * rot[0],
		scale.y * rot[1],
		scale.z * rot[2]
	));
	covA = vec3(dot(M[0], M[0]), dot(M[0], M[1]), dot(M[0], M[2]));
	covB = vec3(dot(M[1], M[1]), dot(M[1], M[2]), dot(M[2], M[2]));
}
`,v3=`
uniform highp sampler2D sh_centroids;
uniform float shN_mins;
uniform float shN_maxs;
void readSHData(in SplatSource source, out vec3 sh[SH_COEFFS], out float scale) {
	ivec2 t = ivec2(packedSample.x & 255u, packedSample.y & 255u);
	int n = t.x + t.y * 256;
	int u = (n % 64) * SH_COEFFS;
	int v = n / 64;
	for (int i = 0; i < SH_COEFFS; i++) {
		sh[i] = mix(vec3(shN_mins), vec3(shN_maxs), texelFetch(sh_centroids, ivec2(u + i, v), 0).xyz);
	}
	scale = 1.0;
}
`,S3=`
uniform vec2 viewport;
uniform vec4 camera_params;
bool initCorner(SplatSource source, SplatCenter center, out SplatCorner corner) {
	vec3 covA, covB;
	readCovariance(source, covA, covB);
	mat3 Vrk = mat3(
		covA.x, covA.y, covA.z, 
		covA.y, covB.x, covB.y,
		covA.z, covB.y, covB.z
	);
	float focal = viewport.x * center.projMat00;
	vec3 v = camera_params.w == 1.0 ? vec3(0.0, 0.0, 1.0) : center.view.xyz;
	float J1 = focal / v.z;
	vec2 J2 = -J1 / v.z * v.xy;
	mat3 J = mat3(
		J1, 0.0, J2.x, 
		0.0, J1, J2.y, 
		0.0, 0.0, 0.0
	);
	mat3 W = transpose(mat3(center.modelView));
	mat3 T = W * J;
	mat3 cov = transpose(T) * Vrk * T;
	#if GSPLAT_AA
		float detOrig = cov[0][0] * cov[1][1] - cov[0][1] * cov[0][1];
		float detBlur = (cov[0][0] + 0.3) * (cov[1][1] + 0.3) - cov[0][1] * cov[0][1];
		corner.aaFactor = sqrt(max(detOrig / detBlur, 0.0));
	#endif
	float diagonal1 = cov[0][0] + 0.3;
	float offDiagonal = cov[0][1];
	float diagonal2 = cov[1][1] + 0.3;
	float mid = 0.5 * (diagonal1 + diagonal2);
	float radius = length(vec2((diagonal1 - diagonal2) / 2.0, offDiagonal));
	float lambda1 = mid + radius;
	float lambda2 = max(mid - radius, 0.1);
	float vmin = min(1024.0, min(viewport.x, viewport.y));
	float l1 = 2.0 * min(sqrt(2.0 * lambda1), vmin);
	float l2 = 2.0 * min(sqrt(2.0 * lambda2), vmin);
	if (l1 < 2.0 && l2 < 2.0) {
		return false;
	}
	vec2 c = center.proj.ww / viewport;
	if (any(greaterThan(abs(center.proj.xy) - vec2(max(l1, l2)) * c, center.proj.ww))) {
		return false;
	}
	vec2 diagonalVector = normalize(vec2(offDiagonal, lambda1 - diagonal1));
	vec2 v1 = l1 * diagonalVector;
	vec2 v2 = l2 * vec2(diagonalVector.y, -diagonalVector.x);
	corner.offset = (source.cornerUV.x * v1 + source.cornerUV.y * v2) * c;
	corner.uv = source.cornerUV;
	return true;
}
`,y3=`
uniform highp usampler2D transformA;
uniform highp sampler2D transformB;
uint tAw;
vec3 readCenter(SplatSource source) {
	uvec4 tA = texelFetch(transformA, source.uv, 0);
	tAw = tA.w;
	return uintBitsToFloat(tA.xyz);
}
vec4 unpackRotation(vec3 packed) {
	return vec4(packed.xyz, sqrt(max(0.0, 1.0 - dot(packed, packed))));
}
void readCovariance(in SplatSource source, out vec3 covA, out vec3 covB) {
	vec4 tB = texelFetch(transformB, source.uv, 0);
	mat3 rot = quatToMat3(unpackRotation(vec3(unpackHalf2x16(tAw), tB.w)).wxyz);
	vec3 scale = tB.xyz;
	
	mat3 M = transpose(mat3(
		scale.x * rot[0],
		scale.y * rot[1],
		scale.z * rot[2]
	));
	covA = vec3(dot(M[0], M[0]), dot(M[0], M[1]), dot(M[0], M[2]));
	covB = vec3(dot(M[1], M[1]), dot(M[1], M[2]), dot(M[2], M[2]));
}
`,T3=`
#include "tonemappingPS"
#include "decodePS"
#include "gammaPS"
vec3 prepareOutputFromGamma(vec3 gammaColor) {
	#if TONEMAP == NONE
		#if GAMMA == NONE
			return decodeGamma(gammaColor);
		#else
			return gammaColor;
		#endif
	#else
		return gammaCorrectOutput(toneMap(decodeGamma(gammaColor)));
	#endif
}
`,x3=`
#ifndef DITHER_NONE
	#include "bayerPS"
	#include "opacityDitherPS"
	varying float id;
#endif
#ifdef PICK_PASS
	#include "pickPS"
#endif
#if defined(SHADOW_PASS) || defined(PICK_PASS) || defined(PREPASS_PASS)
	uniform float alphaClip;
#endif
#ifdef PREPASS_PASS
	varying float vLinearDepth;
	#include "floatAsUintPS"
#endif
const float  EXP_A	  = 12102203.0;
const int	EXP_BC_RMS = 1064866808;
float fastExp(float x) {
	int i = int(EXP_A * x) + EXP_BC_RMS;
	return intBitsToFloat(i);
}
varying mediump vec2 gaussianUV;
varying mediump vec4 gaussianColor;
void main(void) {
	mediump float A = dot(gaussianUV, gaussianUV);
	if (A > 1.0) {
		discard;
	}
	mediump float alpha = fastExp(-A * 4.0) * gaussianColor.a;
	#if defined(SHADOW_PASS) || defined(PICK_PASS) || defined(PREPASS_PASS)
		if (alpha < alphaClip) {
			discard;
		}
	#endif
	#ifdef PICK_PASS
		gl_FragColor = getPickOutput();
	#elif SHADOW_PASS
		gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);
	#elif PREPASS_PASS
		gl_FragColor = float2vec4(vLinearDepth);
	#else
		if (alpha < 1.0 / 255.0) {
			discard;
		}
		#ifndef DITHER_NONE
			opacityDither(alpha, id * 0.013);
		#endif
		gl_FragColor = vec4(gaussianColor.xyz * alpha, alpha);
	#endif
}
`,E3=`
#if SH_BANDS > 0
vec3 unpack111011s(uint bits) {
	return vec3((uvec3(bits) >> uvec3(21u, 11u, 0u)) & uvec3(0x7ffu, 0x3ffu, 0x7ffu)) / vec3(2047.0, 1023.0, 2047.0) * 2.0 - 1.0;
}
void fetchScale(in uvec4 t, out float scale, out vec3 a, out vec3 b, out vec3 c) {
	scale = uintBitsToFloat(t.x);
	a = unpack111011s(t.y);
	b = unpack111011s(t.z);
	c = unpack111011s(t.w);
}
void fetch(in uvec4 t, out vec3 a, out vec3 b, out vec3 c, out vec3 d) {
	a = unpack111011s(t.x);
	b = unpack111011s(t.y);
	c = unpack111011s(t.z);
	d = unpack111011s(t.w);
}
void fetch(in uint t, out vec3 a) {
	a = unpack111011s(t);
}
#if SH_BANDS == 1
	uniform highp usampler2D splatSH_1to3;
	void readSHData(in SplatSource source, out vec3 sh[3], out float scale) {
		fetchScale(texelFetch(splatSH_1to3, source.uv, 0), scale, sh[0], sh[1], sh[2]);
	}
#elif SH_BANDS == 2
	uniform highp usampler2D splatSH_1to3;
	uniform highp usampler2D splatSH_4to7;
	uniform highp usampler2D splatSH_8to11;
	void readSHData(in SplatSource source, out vec3 sh[8], out float scale) {
		fetchScale(texelFetch(splatSH_1to3, source.uv, 0), scale, sh[0], sh[1], sh[2]);
		fetch(texelFetch(splatSH_4to7, source.uv, 0), sh[3], sh[4], sh[5], sh[6]);
		fetch(texelFetch(splatSH_8to11, source.uv, 0).x, sh[7]);
	}
#else
	uniform highp usampler2D splatSH_1to3;
	uniform highp usampler2D splatSH_4to7;
	uniform highp usampler2D splatSH_8to11;
	uniform highp usampler2D splatSH_12to15;
	void readSHData(in SplatSource source, out vec3 sh[15], out float scale) {
		fetchScale(texelFetch(splatSH_1to3, source.uv, 0), scale, sh[0], sh[1], sh[2]);
		fetch(texelFetch(splatSH_4to7, source.uv, 0), sh[3], sh[4], sh[5], sh[6]);
		fetch(texelFetch(splatSH_8to11, source.uv, 0), sh[7], sh[8], sh[9], sh[10]);
		fetch(texelFetch(splatSH_12to15, source.uv, 0), sh[11], sh[12], sh[13], sh[14]);
	}
#endif
#endif
`,A3=`
attribute vec3 vertex_position;
attribute uint vertex_id_attrib;
uniform uint numSplats;
uniform highp usampler2D splatOrder;
bool initSource(out SplatSource source) {
	uint w = uint(textureSize(splatOrder, 0).x);
	source.order = vertex_id_attrib + uint(vertex_position.z);
	if (source.order >= numSplats) {
		return false;
	}
	ivec2 orderUV = ivec2(source.order % w, source.order / w);
	source.id = texelFetch(splatOrder, orderUV, 0).r;
	source.uv = ivec2(source.id % w, source.id / w);
	source.cornerUV = vertex_position.xy;
	return true;
}
`,b3=`
#include "gsplatCommonVS"
varying mediump vec2 gaussianUV;
varying mediump vec4 gaussianColor;
#ifndef DITHER_NONE
	varying float id;
#endif
mediump vec4 discardVec = vec4(0.0, 0.0, 2.0, 1.0);
#ifdef PREPASS_PASS
	varying float vLinearDepth;
#endif
void main(void) {
	SplatSource source;
	if (!initSource(source)) {
		gl_Position = discardVec;
		return;
	}
	vec3 modelCenter = readCenter(source);
	SplatCenter center;
	if (!initCenter(modelCenter, center)) {
		gl_Position = discardVec;
		return;
	}
	SplatCorner corner;
	if (!initCorner(source, center, corner)) {
		gl_Position = discardVec;
		return;
	}
	vec4 clr = readColor(source);
	#if GSPLAT_AA
		clr.a *= corner.aaFactor;
	#endif
	#if SH_BANDS > 0
		vec3 dir = normalize(center.view * mat3(center.modelView));
		vec3 sh[SH_COEFFS];
		float scale;
		readSHData(source, sh, scale);
		clr.xyz += evalSH(sh, dir) * scale;
	#endif
	clipCorner(corner, clr.w);
	gl_Position = center.proj + vec4(corner.offset, 0, 0);
	gaussianUV = corner.uv;
	gaussianColor = vec4(prepareOutputFromGamma(max(clr.xyz, 0.0)), clr.w);
	#ifndef DITHER_NONE
		id = float(source.id);
	#endif
	#ifdef PREPASS_PASS
		vLinearDepth = -center.view.z;
	#endif
}
`,w3=`
	attribute vec2 aPosition;
	varying vec2 uv0;
	void main(void)
	{
		gl_Position = vec4(aPosition, 0.0, 1.0);
		uv0 = getImageEffectUV((aPosition.xy + 1.0) * 0.5);
	}
`,C3=`
		#include "gammaPS"
		varying vec4 color;
		void main(void) {
			gl_FragColor = vec4(gammaCorrectOutput(decodeGamma(color.rgb)), color.a);
		}
`,P3=`
	attribute vec4 vertex_position;
	attribute vec4 vertex_color;
	uniform mat4 matrix_model;
	uniform mat4 matrix_viewProjection;
	varying vec4 color;
	void main(void) {
		color = vertex_color;
		gl_Position = matrix_viewProjection * matrix_model * vertex_position;
	}
`,L3=`
uniform float material_iridescenceRefractionIndex;
float iridescence_iorToFresnel(float transmittedIor, float incidentIor) {
	return pow((transmittedIor - incidentIor) / (transmittedIor + incidentIor), 2.0);
}
vec3 iridescence_iorToFresnel(vec3 transmittedIor, float incidentIor) {
	return pow((transmittedIor - vec3(incidentIor)) / (transmittedIor + vec3(incidentIor)), vec3(2.0));
}
vec3 iridescence_fresnelToIor(vec3 f0) {
	vec3 sqrtF0 = sqrt(f0);
	return (vec3(1.0) + sqrtF0) / (vec3(1.0) - sqrtF0);
}
vec3 iridescence_sensitivity(float opd, vec3 shift) {
	float PI = 3.141592653589793;
	float phase = 2.0 * PI * opd * 1.0e-9;
	const vec3 val = vec3(5.4856e-13, 4.4201e-13, 5.2481e-13);
	const vec3 pos = vec3(1.6810e+06, 1.7953e+06, 2.2084e+06);
	const vec3 var = vec3(4.3278e+09, 9.3046e+09, 6.6121e+09);
	vec3 xyz = val * sqrt(2.0 * PI * var) * cos(pos * phase + shift) * exp(-pow(phase, 2.0) * var);
	xyz.x += 9.7470e-14 * sqrt(2.0 * PI * 4.5282e+09) * cos(2.2399e+06 * phase + shift[0]) * exp(-4.5282e+09 * pow(phase, 2.0));
	xyz /= vec3(1.0685e-07);
	const mat3 XYZ_TO_REC709 = mat3(
		3.2404542, -0.9692660,  0.0556434,
	   -1.5371385,  1.8760108, -0.2040259,
	   -0.4985314,  0.0415560,  1.0572252
	);
	return XYZ_TO_REC709 * xyz;
}
float iridescence_fresnel(float cosTheta, float f0) {
	float x = clamp(1.0 - cosTheta, 0.0, 1.0);
	float x2 = x * x;
	float x5 = x * x2 * x2;
	return f0 + (1.0 - f0) * x5;
} 
vec3 iridescence_fresnel(float cosTheta, vec3 f0) {
	float x = clamp(1.0 - cosTheta, 0.0, 1.0);
	float x2 = x * x;
	float x5 = x * x2 * x2; 
	return f0 + (vec3(1.0) - f0) * x5;
}
vec3 calcIridescence(float outsideIor, float cosTheta, vec3 base_f0, float iridescenceThickness) {
	float PI = 3.141592653589793;
	float iridescenceIor = mix(outsideIor, material_iridescenceRefractionIndex, smoothstep(0.0, 0.03, iridescenceThickness));
	float sinTheta2Sq = pow(outsideIor / iridescenceIor, 2.0) * (1.0 - pow(cosTheta, 2.0));
	float cosTheta2Sq = 1.0 - sinTheta2Sq;
	if (cosTheta2Sq < 0.0) {
		return vec3(1.0);
	}
	float cosTheta2 = sqrt(cosTheta2Sq);
	float r0 = iridescence_iorToFresnel(iridescenceIor, outsideIor);
	float r12 = iridescence_fresnel(cosTheta, r0);
	float r21 = r12;
	float t121 = 1.0 - r12;
	float phi12 = iridescenceIor < outsideIor ? PI : 0.0;
	float phi21 = PI - phi12;
	vec3 baseIor = iridescence_fresnelToIor(base_f0 + vec3(0.0001));
	vec3 r1 = iridescence_iorToFresnel(baseIor, iridescenceIor);
	vec3 r23 = iridescence_fresnel(cosTheta2, r1);
	vec3 phi23 = vec3(0.0);
	if (baseIor[0] < iridescenceIor) phi23[0] = PI;
	if (baseIor[1] < iridescenceIor) phi23[1] = PI;
	if (baseIor[2] < iridescenceIor) phi23[2] = PI;
	float opd = 2.0 * iridescenceIor * iridescenceThickness * cosTheta2;
	vec3 phi = vec3(phi21) + phi23; 
	vec3 r123Sq = clamp(r12 * r23, 1e-5, 0.9999);
	vec3 r123 = sqrt(r123Sq);
	vec3 rs = pow(t121, 2.0) * r23 / (1.0 - r123Sq);
	vec3 c0 = r12 + rs;
	vec3 i = c0;
	vec3 cm = rs - t121;
	for (int m = 1; m <= 2; m++) {
		cm *= r123;
		vec3 sm = 2.0 * iridescence_sensitivity(float(m) * opd, float(m) * phi);
		i += cm * sm;
	}
	return max(i, vec3(0.0));
}
vec3 getIridescence(float cosTheta, vec3 specularity, float iridescenceThickness) {
	return calcIridescence(1.0, cosTheta, specularity, iridescenceThickness);
}
`,I3=`
#ifdef STD_IRIDESCENCE_CONSTANT
uniform float material_iridescence;
#endif
void getIridescence() {
	float iridescence = 1.0;
	#ifdef STD_IRIDESCENCE_CONSTANT
	iridescence *= material_iridescence;
	#endif
	#ifdef STD_IRIDESCENCE_TEXTURE
	iridescence *= texture2DBias({STD_IRIDESCENCE_TEXTURE_NAME}, {STD_IRIDESCENCE_TEXTURE_UV}, textureBias).{STD_IRIDESCENCE_TEXTURE_CHANNEL};
	#endif
	dIridescence = iridescence; 
}
`,M3=`
uniform float material_iridescenceThicknessMax;
#ifdef STD_IRIDESCENCETHICKNESS_TEXTURE
uniform float material_iridescenceThicknessMin;
#endif
void getIridescenceThickness() {
	#ifdef STD_IRIDESCENCETHICKNESS_TEXTURE
		float blend = texture2DBias({STD_IRIDESCENCETHICKNESS_TEXTURE_NAME}, {STD_IRIDESCENCETHICKNESS_TEXTURE_UV}, textureBias).{STD_IRIDESCENCETHICKNESS_TEXTURE_CHANNEL};
		float iridescenceThickness = mix(material_iridescenceThicknessMin, material_iridescenceThicknessMax, blend);
	#else
		float iridescenceThickness = material_iridescenceThicknessMax;
	#endif
	dIridescenceThickness = iridescenceThickness; 
}
`,D3=`
#ifdef STD_IOR_CONSTANT
uniform float material_refractionIndex;
#endif
void getIor() {
#ifdef STD_IOR_CONSTANT
	dIor = material_refractionIndex;
#else
	dIor = 1.0 / 1.5;
#endif
}
`,R3=`
#if defined(LIGHT{i})
	uniform vec3 light{i}_color;
	#if LIGHT{i}TYPE == DIRECTIONAL
		uniform vec3 light{i}_direction;
	#else
		#define LIT_CODE_LIGHTS_POINT
		uniform vec3 light{i}_position;
		uniform float light{i}_radius;
		#if LIGHT{i}TYPE == SPOT
			#define LIT_CODE_LIGHTS_SPOT
			uniform vec3 light{i}_direction;
			uniform float light{i}_innerConeAngle;
			uniform float light{i}_outerConeAngle;
		#endif
	#endif
	#if LIGHT{i}SHAPE != PUNCTUAL
		#define LIT_CODE_FALLOFF_SQUARED
		#if LIGHT{i}TYPE == DIRECTIONAL
			uniform vec3 light{i}_position;
		#endif
		uniform vec3 light{i}_halfWidth;
		uniform vec3 light{i}_halfHeight;
	#else
		#if LIGHT{i}FALLOFF == LINEAR
			#define LIT_CODE_FALLOFF_LINEAR
		#endif
		#if LIGHT{i}FALLOFF == INVERSESQUARED
			#define LIT_CODE_FALLOFF_SQUARED
		#endif
	#endif
	#if defined(LIGHT{i}CASTSHADOW)
		uniform mat4 light{i}_shadowMatrix;
		uniform float light{i}_shadowIntensity;
		uniform vec4 light{i}_shadowParams;
		#if LIGHT{i}SHADOWTYPE == PCSS_32F
			uniform float light{i}_shadowSearchArea;
			uniform vec4 light{i}_cameraParams;
			#if LIGHT{i}TYPE == DIRECTIONAL
				uniform vec4 light{i}_softShadowParams;
			#endif
		#endif
		#if LIGHT{i}TYPE == DIRECTIONAL
			uniform mat4 light{i}_shadowMatrixPalette[4];
			uniform vec4 light{i}_shadowCascadeDistances;
			uniform int light{i}_shadowCascadeCount;
			uniform float light{i}_shadowCascadeBlend;
		#endif
		#if LIGHT{i}TYPE == OMNI
			#if defined(LIGHT{i}SHADOW_PCF)
				uniform samplerCubeShadow light{i}_shadowMap;
			#else
				uniform samplerCube light{i}_shadowMap;
			#endif
		#else
			#if defined(LIGHT{i}SHADOW_PCF)
				uniform sampler2DShadow light{i}_shadowMap;
			#else
				uniform sampler2D light{i}_shadowMap;
			#endif
		#endif
	#endif
	#if defined(LIGHT{i}COOKIE)
		#define LIT_CODE_COOKIE
		#if LIGHT{i}TYPE == OMNI
			uniform samplerCube light{i}_cookie;
			uniform float light{i}_cookieIntensity;
			#if !defined(LIGHT{i}CASTSHADOW)
				uniform mat4 light{i}_shadowMatrix;
			#endif
		#endif
		#if LIGHT{i}TYPE == SPOT
			uniform sampler2D light{i}_cookie;
			uniform float light{i}_cookieIntensity;
			#if !defined(LIGHT{i}CASTSHADOW)
				uniform mat4 light{i}_shadowMatrix;
			#endif
			#if defined(LIGHT{i}COOKIE_TRANSFORM)
				uniform vec4 light{i}_cookieMatrix;
				uniform vec2 light{i}_cookieOffset;
			#endif
		#endif
	#endif
#endif
`,O3=`
float getLightDiffuse(vec3 worldNormal, vec3 viewDir, vec3 lightDirNorm) {
	return max(dot(worldNormal, -lightDirNorm), 0.0);
}
`,N3=`
vec3 evalOmniLight(vec3 lightPosW) {
	return vPositionW - lightPosW;
}
`,F3=`
#if defined(LIGHT{i})
	evaluateLight{i}(
		#if defined(LIT_IRIDESCENCE)
			iridescenceFresnel
		#endif
	);
#endif
`,k3=`
#if defined(LIGHT{i})
void evaluateLight{i}(
	#if defined(LIT_IRIDESCENCE)
		vec3 iridescenceFresnel
	#endif
) {
	vec3 lightColor = light{i}_color;
	#if LIGHT{i}TYPE == DIRECTIONAL && !defined(LIT_SHADOW_CATCHER)
		if (all(equal(lightColor, vec3(0.0)))) {
			return;
		}
	#endif
	#if LIGHT{i}TYPE == DIRECTIONAL
		dLightDirNormW = light{i}_direction;
		dAtten = 1.0;
	#else
		
		vec3 lightDirW = evalOmniLight(light{i}_position);
		dLightDirNormW = normalize(lightDirW);
		#if defined(LIGHT{i}COOKIE)
			#if LIGHT{i}TYPE == SPOT
				#ifdef LIGHT{i}COOKIE_FALLOFF
					#ifdef LIGHT{i}COOKIE_TRANSFORM
						vec3 cookieAttenuation = getCookie2DXform(light{i}_cookie, light{i}_shadowMatrix, light{i}_cookieIntensity, light{i}_cookieMatrix, light{i}_cookieOffset).{LIGHT{i}COOKIE_CHANNEL};
					#else
						vec3 cookieAttenuation = getCookie2D(light{i}_cookie, light{i}_shadowMatrix, light{i}_cookieIntensity).{LIGHT{i}COOKIE_CHANNEL};
					#endif
				#else
					#ifdef LIGHT{i}COOKIE_TRANSFORM
						vec3 cookieAttenuation = getCookie2DClipXform(light{i}_cookie, light{i}_shadowMatrix, light{i}_cookieIntensity, light{i}_cookieMatrix, light{i}_cookieOffset).{LIGHT{i}COOKIE_CHANNEL};
					#else
						vec3 cookieAttenuation = getCookie2DClip(light{i}_cookie, light{i}_shadowMatrix, light{i}_cookieIntensity).{LIGHT{i}COOKIE_CHANNEL};
					#endif
				#endif
			#endif
			#if LIGHT{i}TYPE == OMNI
				vec3 cookieAttenuation = getCookieCube(light{i}_cookie, light{i}_shadowMatrix, light{i}_cookieIntensity).{LIGHT{i}COOKIE_CHANNEL};
			#endif
			lightColor *= cookieAttenuation;
		#endif
		#if LIGHT{i}SHAPE == PUNCTUAL
			#if LIGHT{i}FALLOFF == LINEAR
				dAtten = getFalloffLinear(light{i}_radius, lightDirW);
			#else
				dAtten = getFalloffInvSquared(light{i}_radius, lightDirW);
			#endif
		#else
			dAtten = getFalloffWindow(light{i}_radius, lightDirW);
		#endif
		#if LIGHT{i}TYPE == SPOT
			#if !defined(LIGHT{i}COOKIE) || defined(LIGHT{i}COOKIE_FALLOFF)
				dAtten *= getSpotEffect(light{i}_direction, light{i}_innerConeAngle, light{i}_outerConeAngle, dLightDirNormW);
			#endif
		#endif
	#endif
	if (dAtten < 0.00001) {
		return;
	}
	#if LIGHT{i}SHAPE != PUNCTUAL
		#if LIGHT{i}SHAPE == RECT
			calcRectLightValues(light{i}_position, light{i}_halfWidth, light{i}_halfHeight);
		#elif LIGHT{i}SHAPE == DISK
			calcDiskLightValues(light{i}_position, light{i}_halfWidth, light{i}_halfHeight);
		#elif LIGHT{i}SHAPE == SPHERE
			calcSphereLightValues(light{i}_position, light{i}_halfWidth, light{i}_halfHeight);
		#endif
	#endif
	#if LIGHT{i}SHAPE != PUNCTUAL
		#if LIGHT{i}TYPE == DIRECTIONAL
			float attenDiffuse = getLightDiffuse(litArgs_worldNormal, dViewDirW, dLightDirNormW);
		#else
			#if LIGHT{i}SHAPE == RECT
				float attenDiffuse = getRectLightDiffuse(litArgs_worldNormal, dViewDirW, lightDirW, dLightDirNormW) * 16.0;
			#elif LIGHT{i}SHAPE == DISK
				float attenDiffuse = getDiskLightDiffuse(litArgs_worldNormal, dViewDirW, lightDirW, dLightDirNormW) * 16.0;
			#elif LIGHT{i}SHAPE == SPHERE
				float attenDiffuse = getSphereLightDiffuse(litArgs_worldNormal, dViewDirW, lightDirW, dLightDirNormW) * 16.0;
			#endif
		#endif
	#else
		dAtten *= getLightDiffuse(litArgs_worldNormal, vec3(0.0), dLightDirNormW);
	#endif
	#ifdef LIGHT{i}CASTSHADOW
		#if LIGHT{i}TYPE == DIRECTIONAL
			float shadow = getShadow{i}(vec3(0.0));
		#else
			float shadow = getShadow{i}(lightDirW);
		#endif
		shadow = mix(1.0, shadow, light{i}_shadowIntensity);
		dAtten *= shadow;
		#if defined(LIT_SHADOW_CATCHER) && LIGHT{i}TYPE == DIRECTIONAL
			dShadowCatcher *= shadow;
		#endif			
	#endif
	#if LIGHT{i}SHAPE != PUNCTUAL
		#ifdef LIT_SPECULAR
			dDiffuseLight += ((attenDiffuse * dAtten) * lightColor) * (1.0 - dLTCSpecFres);
		#else
			dDiffuseLight += (attenDiffuse * dAtten) * lightColor;
		#endif						
	#else
		#if defined(AREA_LIGHTS) && defined(LIT_SPECULAR)
			dDiffuseLight += (dAtten * lightColor) * (1.0 - litArgs_specularity);
		#else
			dDiffuseLight += dAtten * lightColor;
		#endif
	#endif
	#ifdef LIGHT{i}AFFECT_SPECULARITY
		#if LIGHT{i}SHAPE != PUNCTUAL
			#ifdef LIT_CLEARCOAT
				#if LIGHT{i}SHAPE == RECT
					ccSpecularLight += ccLTCSpecFres * getRectLightSpecular(litArgs_clearcoat_worldNormal, dViewDirW) * dAtten * lightColor;
				#elif LIGHT{i}SHAPE == DISK
					ccSpecularLight += ccLTCSpecFres * getDiskLightSpecular(litArgs_clearcoat_worldNormal, dViewDirW) * dAtten * lightColor;
				#elif LIGHT{i}SHAPE == SPHERE
					ccSpecularLight += ccLTCSpecFres * getSphereLightSpecular(litArgs_clearcoat_worldNormal, dViewDirW) * dAtten * lightColor;
				#endif
			#endif
			#ifdef LIT_SPECULAR
				#if LIGHT{i}SHAPE == RECT
					dSpecularLight += dLTCSpecFres * getRectLightSpecular(litArgs_worldNormal, dViewDirW) * dAtten * lightColor;
				#elif LIGHT{i}SHAPE == DISK
					dSpecularLight += dLTCSpecFres * getDiskLightSpecular(litArgs_worldNormal, dViewDirW) * dAtten * lightColor;
				#elif LIGHT{i}SHAPE == SPHERE
					dSpecularLight += dLTCSpecFres * getSphereLightSpecular(litArgs_worldNormal, dViewDirW) * dAtten * lightColor;
				#endif
			#endif
		#else
			#if LIGHT{i}TYPE == DIRECTIONAL && LIT_FRESNEL_MODEL != NONE
				#define LIGHT{i}FRESNEL
			#endif
			#ifdef LIT_SPECULAR
				vec3 halfDirW = normalize(-dLightDirNormW + dViewDirW);
			#endif
			#ifdef LIT_CLEARCOAT
				vec3 lightspecularCC = getLightSpecular(halfDirW, ccReflDirW, litArgs_clearcoat_worldNormal, dViewDirW, dLightDirNormW, litArgs_clearcoat_gloss, dTBN) * dAtten * lightColor;
				#ifdef LIGHT{i}FRESNEL
					lightspecularCC *= getFresnelCC(dot(dViewDirW, halfDirW));
				#endif
				ccSpecularLight += lightspecularCC;
			#endif
			#ifdef LIT_SHEEN
				sSpecularLight += getLightSpecularSheen(halfDirW, litArgs_worldNormal, dViewDirW, dLightDirNormW, litArgs_sheen_gloss) * dAtten * lightColor;
			#endif
			#ifdef LIT_SPECULAR
				vec3 lightSpecular = getLightSpecular(halfDirW, dReflDirW, litArgs_worldNormal, dViewDirW, dLightDirNormW, litArgs_gloss, dTBN) * dAtten * lightColor;
				#ifdef LIGHT{i}FRESNEL
					#if defined(LIT_IRIDESCENCE)
						lightSpecular *= getFresnel(dot(dViewDirW, halfDirW), litArgs_gloss, litArgs_specularity, iridescenceFresnel, litArgs_iridescence_intensity);
					#else
						lightSpecular *= getFresnel(dot(dViewDirW, halfDirW), litArgs_gloss, litArgs_specularity);
					#endif
				#else
					lightSpecular *= litArgs_specularity;
				#endif
				
				dSpecularLight += lightSpecular;
			#endif
		#endif
	#endif
}
#endif
`,U3=`
#ifdef LIGHT{i}CASTSHADOW
	vec3 getShadowSampleCoord{i}(mat4 shadowTransform, vec4 shadowParams, vec3 worldPosition, vec3 lightPos, inout vec3 lightDir, vec3 lightDirNorm, vec3 normal) {
		vec3 surfacePosition = worldPosition;
		#ifdef LIGHT{i}_SHADOW_SAMPLE_POINT
			#ifdef LIGHT{i}_SHADOW_SAMPLE_NORMAL_OFFSET
				float distScale = length(lightDir);
				surfacePosition = surfacePosition + normal * shadowParams.y * clamp(1.0 - dot(normal, -lightDirNorm), 0.0, 1.0) * distScale;
				lightDir = surfacePosition - lightPos;
				return lightDir;
			#endif
		#else
			#ifdef LIGHT{i}_SHADOW_SAMPLE_SOURCE_ZBUFFER
				#ifdef LIGHT{i}_SHADOW_SAMPLE_NORMAL_OFFSET
					surfacePosition = surfacePosition + normal * shadowParams.y;
				#endif
			#else
				#ifdef LIGHT{i}_SHADOW_SAMPLE_NORMAL_OFFSET
					#ifdef LIGHT{i}_SHADOW_SAMPLE_ORTHO
						float distScale = 1.0;
					#else
						float distScale = abs(dot(vPositionW - lightPos, lightDirNorm));
					#endif
					surfacePosition = surfacePosition + normal * shadowParams.y * clamp(1.0 - dot(normal, -lightDirNorm), 0.0, 1.0) * distScale;
				#endif
			#endif
			vec4 positionInShadowSpace = shadowTransform * vec4(surfacePosition, 1.0);
			#ifdef LIGHT{i}_SHADOW_SAMPLE_ORTHO
				positionInShadowSpace.z = saturate(positionInShadowSpace.z) - 0.0001;
			#else
				#ifdef LIGHT{i}_SHADOW_SAMPLE_SOURCE_ZBUFFER
					positionInShadowSpace.xyz /= positionInShadowSpace.w;
				#else
					positionInShadowSpace.xy /= positionInShadowSpace.w;
					positionInShadowSpace.z = length(lightDir) * shadowParams.w;
				#endif
			#endif
			#ifdef SHADOW_SAMPLE_Z_BIAS
			#endif
			surfacePosition = positionInShadowSpace.xyz;
		#endif
		return surfacePosition;
	}
	float getShadow{i}(vec3 lightDirW) {
		#ifdef LIGHT{i}_SHADOW_CASCADES
			int cascadeIndex = getShadowCascadeIndex(light{i}_shadowCascadeDistances, light{i}_shadowCascadeCount);
			#ifdef LIGHT{i}_SHADOW_CASCADE_BLEND
				cascadeIndex = ditherShadowCascadeIndex(cascadeIndex, light{i}_shadowCascadeDistances, light{i}_shadowCascadeCount, light{i}_shadowCascadeBlend);
			#endif
			mat4 shadowMatrix = light{i}_shadowMatrixPalette[cascadeIndex];
		#else
			mat4 shadowMatrix = light{i}_shadowMatrix;
		#endif
		#if LIGHT{i}TYPE == DIRECTIONAL
			vec3 shadowCoord = getShadowSampleCoord{i}(shadowMatrix, light{i}_shadowParams, vPositionW, vec3(0.0), lightDirW, dLightDirNormW, dVertexNormalW);
		#else
			vec3 shadowCoord = getShadowSampleCoord{i}(shadowMatrix, light{i}_shadowParams, vPositionW, light{i}_position, lightDirW, dLightDirNormW, dVertexNormalW);
		#endif
		#if LIGHT{i}TYPE == DIRECTIONAL
			shadowCoord = fadeShadow(shadowCoord, light{i}_shadowCascadeDistances);
		#endif
		#if LIGHT{i}TYPE == DIRECTIONAL
			#if LIGHT{i}SHADOWTYPE == VSM_16F
				return getShadowVSM16(SHADOWMAP_PASS(light{i}_shadowMap), shadowCoord, light{i}_shadowParams, 5.54);
			#endif
			#if LIGHT{i}SHADOWTYPE == VSM_32F
				return getShadowVSM32(SHADOWMAP_PASS(light{i}_shadowMap), shadowCoord, light{i}_shadowParams, 15.0);
			#endif
			#if LIGHT{i}SHADOWTYPE == PCSS_32F
				#if LIGHT{i}SHAPE != PUNCTUAL
					vec2 shadowSearchArea = vec2(length(light{i}_halfWidth), length(light{i}_halfHeight)) * light{i}_shadowSearchArea;
					return getShadowPCSS(SHADOWMAP_PASS(light{i}_shadowMap), shadowCoord, light{i}_shadowParams, light{i}_cameraParams, shadowSearchArea, lightDirW);
				#else
					return getShadowPCSS(SHADOWMAP_PASS(light{i}_shadowMap), shadowCoord, light{i}_shadowParams, light{i}_cameraParams, light{i}_softShadowParams, lightDirW);
				#endif
			#endif
			#if LIGHT{i}SHADOWTYPE == PCF1_16F || LIGHT{i}SHADOWTYPE == PCF1_32F
				return getShadowPCF1x1(SHADOWMAP_PASS(light{i}_shadowMap), shadowCoord, light{i}_shadowParams);
			#endif
			#if LIGHT{i}SHADOWTYPE == PCF3_16F || LIGHT{i}SHADOWTYPE == PCF3_32F
				return getShadowPCF3x3(SHADOWMAP_PASS(light{i}_shadowMap), shadowCoord, light{i}_shadowParams);
			#endif
			#if LIGHT{i}SHADOWTYPE == PCF5_16F || LIGHT{i}SHADOWTYPE == PCF5_32F
				return getShadowPCF5x5(SHADOWMAP_PASS(light{i}_shadowMap), shadowCoord, light{i}_shadowParams);
			#endif
		#endif
		#if LIGHT{i}TYPE == SPOT
			#if LIGHT{i}SHADOWTYPE == VSM_16F
				return getShadowSpotVSM16(SHADOWMAP_PASS(light{i}_shadowMap), shadowCoord, light{i}_shadowParams, 5.54, lightDirW);
			#endif
			#if LIGHT{i}SHADOWTYPE == VSM_32F
				return getShadowSpotVSM32(SHADOWMAP_PASS(light{i}_shadowMap), shadowCoord, light{i}_shadowParams, 15.0, lightDirW);
			#endif
			#if LIGHT{i}SHADOWTYPE == PCSS_32F
				#if LIGHT{i}SHAPE != PUNCTUAL
					vec2 shadowSearchArea = vec2(length(light{i}_halfWidth), length(light{i}_halfHeight)) * light{i}_shadowSearchArea;
				#else
					vec2 shadowSearchArea = vec2(light{i}_shadowSearchArea);
				#endif
				return getShadowSpotPCSS(SHADOWMAP_PASS(light{i}_shadowMap), shadowCoord, light{i}_shadowParams, light{i}_cameraParams, shadowSearchArea, lightDirW);
			#endif
			#if LIGHT{i}SHADOWTYPE == PCF1_16F || LIGHT{i}SHADOWTYPE == PCF1_32F
				return getShadowSpotPCF1x1(SHADOWMAP_PASS(light{i}_shadowMap), shadowCoord, light{i}_shadowParams);
			#endif
			#if LIGHT{i}SHADOWTYPE == PCF3_16F || LIGHT{i}SHADOWTYPE == PCF3_32F
				return getShadowSpotPCF3x3(SHADOWMAP_PASS(light{i}_shadowMap), shadowCoord, light{i}_shadowParams);
			#endif
			#if LIGHT{i}SHADOWTYPE == PCF5_16F || LIGHT{i}SHADOWTYPE == PCF5_32F
				return getShadowSpotPCF5x5(SHADOWMAP_PASS(light{i}_shadowMap), shadowCoord, light{i}_shadowParams);
			#endif
		#endif
		#if LIGHT{i}TYPE == OMNI
			#if LIGHT{i}SHADOWTYPE == PCSS_32F
				#if LIGHT{i}SHAPE != PUNCTUAL
					vec2 shadowSearchArea = vec2(length(light{i}_halfWidth), length(light{i}_halfHeight)) * light{i}_shadowSearchArea;
				#else
					vec2 shadowSearchArea = vec2(light{i}_shadowSearchArea);
				#endif
				return getShadowOmniPCSS(SHADOWMAP_PASS(light{i}_shadowMap), shadowCoord, light{i}_shadowParams, light{i}_cameraParams, shadowSearchArea, lightDirW);
			#endif
			#if LIGHT{i}SHADOWTYPE == PCF1_16F || LIGHT{i}SHADOWTYPE == PCF1_32F
				return getShadowOmniPCF1x1(SHADOWMAP_PASS(light{i}_shadowMap), shadowCoord, light{i}_shadowParams, lightDirW);
			#endif
			#if LIGHT{i}SHADOWTYPE == PCF3_16F || LIGHT{i}SHADOWTYPE == PCF3_32F
				return getShadowOmniPCF3x3(SHADOWMAP_PASS(light{i}_shadowMap), shadowCoord, light{i}_shadowParams, lightDirW);
			#endif
		#endif
	}
#endif
`,B3=`
#ifdef LIT_CLUSTERED_LIGHTS
	#define LIT_CODE_FALLOFF_LINEAR
	#define LIT_CODE_FALLOFF_SQUARED
	#define LIT_CODE_LIGHTS_POINT
	#define LIT_CODE_LIGHTS_SPOT
#endif
#ifdef AREA_LIGHTS
	uniform highp sampler2D areaLightsLutTex1;
	uniform highp sampler2D areaLightsLutTex2;
#endif
#ifdef LIT_LIGHTING
	#include "lightDiffuseLambertPS"
	#if defined(AREA_LIGHTS) || defined(LIT_CLUSTERED_AREA_LIGHTS)
		#include "ltcPS"
	#endif
#endif
#ifdef SHADOW_DIRECTIONAL
	#include "shadowCascadesPS"
#endif
#if defined(SHADOW_KIND_PCF1)
	#include "shadowPCF1PS"
#endif
#if defined(SHADOW_KIND_PCF3)
	#include "shadowPCF3PS"
#endif
#if defined(SHADOW_KIND_PCF5)
	#include "shadowPCF5PS"
#endif
#if defined(SHADOW_KIND_PCSS)
	#include "linearizeDepthPS"
	#include "shadowPCSSPS"
	#include "shadowSoftPS"
#endif
#if defined(SHADOW_KIND_VSM)
	#include "shadowEVSMPS"
#endif
#ifdef LIT_CODE_FALLOFF_LINEAR
	#include "falloffLinearPS"
#endif
#ifdef LIT_CODE_FALLOFF_SQUARED
	#include "falloffInvSquaredPS"
#endif
#ifdef LIT_CODE_LIGHTS_POINT
	#include "lightDirPointPS"
#endif
#ifdef LIT_CODE_LIGHTS_SPOT
	#include "spotPS"
#endif
#ifdef LIT_CODE_COOKIE
	#include "cookiePS"
#endif
#ifdef LIT_CLUSTERED_LIGHTS
	#include "clusteredLightPS"
#endif
#ifdef LIGHT_COUNT > 0
	#include "lightFunctionShadowPS, LIGHT_COUNT"
	#include "lightFunctionLightPS, LIGHT_COUNT"
#endif
`,V3=`
void addLightMap(
	vec3 lightmap, 
	vec3 dir, 
	vec3 worldNormal, 
	vec3 viewDir, 
	vec3 reflectionDir, 
	float gloss, 
	vec3 specularity, 
	vec3 vertexNormal, 
	mat3 tbn
#if defined(LIT_IRIDESCENCE)
	vec3 iridescenceFresnel, 
	float iridescenceIntensity
#endif
) {
	#if defined(LIT_SPECULAR) && defined(LIT_DIR_LIGHTMAP)
		if (dot(dir, dir) < 0.0001) {
				dDiffuseLight += lightmap;
		} else {
			float vlight = saturate(dot(dir, -vertexNormal));
			float flight = saturate(dot(dir, -worldNormal));
			float nlight = (flight / max(vlight, 0.01)) * 0.5;
			dDiffuseLight += lightmap * nlight * 2.0;
			vec3 halfDir = normalize(-dir + viewDir);
			vec3 specularLight = lightmap * getLightSpecular(halfDir, reflectionDir, worldNormal, viewDir, dir, gloss, tbn);
			#ifdef LIT_SPECULAR_FRESNEL
				specularLight *= 
					getFresnel(dot(viewDir, halfDir), 
					gloss, 
					specularity
				#if defined(LIT_IRIDESCENCE)
					, iridescenceFresnel,
					iridescenceIntensity
				#endif
					);
			#endif
			dSpecularLight += specularLight;
		}
	#else
		dDiffuseLight += lightmap;
	#endif
}
`,z3=`
#ifdef STD_LIGHTMAP_DIR
	vec3 dLightmapDir;
	uniform sampler2D texture_dirLightMap;
#endif
void getLightMap() {
	dLightmap = vec3(1.0);
	#ifdef STD_LIGHT_TEXTURE
		dLightmap *= {STD_LIGHT_TEXTURE_DECODE}(texture2DBias({STD_LIGHT_TEXTURE_NAME}, {STD_LIGHT_TEXTURE_UV}, textureBias)).{STD_LIGHT_TEXTURE_CHANNEL};
		#ifdef STD_LIGHTMAP_DIR
			vec3 dir = texture2DBias(texture_dirLightMap, {STD_LIGHT_TEXTURE_UV}, textureBias).xyz * 2.0 - 1.0;
			float dirDot = dot(dir, dir);
			dLightmapDir = (dirDot > 0.001) ? dir / sqrt(dirDot) : vec3(0.0);
		#endif
	#endif
	#ifdef STD_LIGHT_VERTEX
		dLightmap *= saturate(vVertexColor.{STD_LIGHT_VERTEX_CHANNEL});
	#endif
}
`,H3=`
float calcLightSpecular(float gloss, vec3 worldNormal, vec3 viewDir, vec3 h, vec3 lightDirNorm, mat3 tbn) {
	float PI = 3.141592653589793;
	float roughness = max((1.0 - gloss) * (1.0 - gloss), 0.001);
	float alphaRoughness = roughness * roughness;
	float anisotropy = dAnisotropy;
	vec2 direction = dAnisotropyRotation;
	float at = mix(alphaRoughness, 1.0, anisotropy * anisotropy);
	float ab = clamp(alphaRoughness, 0.001, 1.0);
	vec3 anisotropicT = normalize(tbn * vec3(direction, 0.0));
	vec3 anisotropicB = normalize(cross(tbn[2], anisotropicT));
	float NoH = dot(worldNormal, h);
	float ToH = dot(anisotropicT, h);
	float BoH = dot(anisotropicB, h);
	float a2 = at * ab;
	vec3 v = vec3(ab * ToH, at * BoH, a2 * NoH);
	float v2 = dot(v, v);
	float w2 = a2 / v2;
	float D = a2 * w2 * w2 * (1.0 / PI);
	float ToV = dot(anisotropicT, viewDir);
	float BoV = dot(anisotropicB, viewDir);
	float ToL = dot(anisotropicT, -lightDirNorm);
	float BoL = dot(anisotropicB, -lightDirNorm);
	float NoV = dot(worldNormal, viewDir);
	float NoL = dot(worldNormal, -lightDirNorm);
	float lambdaV = NoL * length(vec3(at * ToV, ab * BoV, NoV));
	float lambdaL = NoV * length(vec3(at * ToL, ab * BoL, NoL));
	float G = 0.5 / (lambdaV + lambdaL);
	return D * G;
}
float getLightSpecular(vec3 h, vec3 reflDir, vec3 worldNormal, vec3 viewDir, vec3 lightDirNorm, float gloss, mat3 tbn) {
	return calcLightSpecular(gloss, worldNormal, viewDir, h, lightDirNorm, tbn);
}
`,G3=`
float calcLightSpecular(float gloss, vec3 worldNormal, vec3 h) {
	float nh = max( dot( h, worldNormal ), 0.0 );
	float specPow = exp2(gloss * 11.0);
	specPow = max(specPow, 0.0001);
	return pow(nh, specPow) * (specPow + 2.0) / 8.0;
}
float getLightSpecular(vec3 h, vec3 reflDir, vec3 worldNormal, vec3 viewDir, vec3 lightDirNorm, float gloss, mat3 tbn) {
	return calcLightSpecular(gloss, worldNormal, h);
}
`,W3=`
float sheenD(vec3 normal, vec3 h, float roughness) {
	const float PI = 3.141592653589793;
	float invR = 1.0 / (roughness * roughness);
	float cos2h = max(dot(normal, h), 0.0);
	cos2h *= cos2h;
	float sin2h = max(1.0 - cos2h, 0.0078125);
	return (2.0 + invR) * pow(sin2h, invR * 0.5) / (2.0 * PI);
}
float sheenV(vec3 normal, vec3 viewDir, vec3 light) {
	float NoV = max(dot(normal, viewDir), 0.000001);
	float NoL = max(dot(normal, light), 0.000001);
	return 1.0 / (4.0 * (NoL + NoV - NoL * NoV));
}
float getLightSpecularSheen(vec3 h, vec3 worldNormal, vec3 viewDir, vec3 lightDirNorm, float sheenGloss) {
	float D = sheenD(worldNormal, h, sheenGloss);
	float V = sheenV(worldNormal, viewDir, -lightDirNorm);
	return D * V;
}
`,$3=`
#ifndef LINEARIZE_DEPTH
#define LINEARIZE_DEPTH
float linearizeDepthWithParams(float z, vec4 cameraParams) {
	if (cameraParams.w == 0.0)
		return (cameraParams.z * cameraParams.y) / (cameraParams.y + z * (cameraParams.z - cameraParams.y));
	else
		return cameraParams.z + z * (cameraParams.y - cameraParams.z);
}
#ifndef CAMERAPLANES
	#define CAMERAPLANES
	uniform vec4 camera_params;
#endif
float linearizeDepth(float z) {
	return linearizeDepthWithParams(z, camera_params);
}
#endif
`,X3=`
void evaluateBackend() {
	#ifdef LIT_SSAO
		litArgs_ao *= texture2DLod(ssaoTexture, gl_FragCoord.xy * ssaoTextureSizeInv, 0.0).r;
	#endif
	#ifdef LIT_NEEDS_NORMAL
		#ifdef LIT_SPECULAR
			getReflDir(litArgs_worldNormal, dViewDirW, litArgs_gloss, dTBN);
		#endif
		#ifdef LIT_CLEARCOAT
			ccReflDirW = normalize(-reflect(dViewDirW, litArgs_clearcoat_worldNormal));
		#endif
	#endif
	#ifdef LIT_SPECULAR_OR_REFLECTION
		#ifdef LIT_METALNESS
			float f0 = 1.0 / litArgs_ior;
			f0 = (f0 - 1.0) / (f0 + 1.0);
			f0 *= f0;
			litArgs_specularity = getSpecularModulate(litArgs_specularity, litArgs_albedo, litArgs_metalness, f0);
			litArgs_albedo = getAlbedoModulate(litArgs_albedo, litArgs_metalness);
		#endif
		#ifdef LIT_IRIDESCENCE
			vec3 iridescenceFresnel = getIridescence(saturate(dot(dViewDirW, litArgs_worldNormal)), litArgs_specularity, litArgs_iridescence_thickness);
		#endif
	#endif
	#ifdef LIT_ADD_AMBIENT
		addAmbient(litArgs_worldNormal);
		#ifdef LIT_SPECULAR
			dDiffuseLight = dDiffuseLight * (1.0 - litArgs_specularity);
		#endif
		#ifdef LIT_SEPARATE_AMBIENT
			vec3 dAmbientLight = dDiffuseLight;
			dDiffuseLight = vec3(0);
		#endif
	#endif
	#ifndef LIT_OLD_AMBIENT
		dDiffuseLight *= material_ambient;
	#endif
	#ifdef LIT_AO
		#ifndef LIT_OCCLUDE_DIRECT
			occludeDiffuse(litArgs_ao);
		#endif
	#endif
	#ifdef LIT_LIGHTMAP
		addLightMap(
			litArgs_lightmap, 
			litArgs_lightmapDir, 
			litArgs_worldNormal, 
			dViewDirW, 
			dReflDirW, 
			litArgs_gloss, 
			litArgs_specularity, 
			dVertexNormalW,
			dTBN
		#if defined(LIT_IRIDESCENCE)
			, iridescenceFresnel,
			litArgs_iridescence_intensity
		#endif
		);
	#endif
	#ifdef LIT_LIGHTING || LIT_REFLECTIONS
		#ifdef LIT_REFLECTIONS
			#ifdef LIT_CLEARCOAT
				addReflectionCC(ccReflDirW, litArgs_clearcoat_gloss);
			
				#ifdef LIT_SPECULAR_FRESNEL
					ccFresnel = getFresnelCC(dot(dViewDirW, litArgs_clearcoat_worldNormal));
					ccReflection *= ccFresnel;
				#else
					ccFresnel = 0.0;
				#endif
			#endif
			#ifdef LIT_SPECULARITY_FACTOR
				ccReflection *= litArgs_specularityFactor;
			#endif
			#ifdef LIT_SHEEN
				addReflectionSheen(litArgs_worldNormal, dViewDirW, litArgs_sheen_gloss);
			#endif
			addReflection(dReflDirW, litArgs_gloss);
			#ifdef LIT_FRESNEL_MODEL
				dReflection.rgb *= getFresnel(
					dot(dViewDirW, litArgs_worldNormal), 
					litArgs_gloss, 
					litArgs_specularity
				#if defined(LIT_IRIDESCENCE)
					, iridescenceFresnel,
					litArgs_iridescence_intensity
				#endif
					);
			#else
				dReflection.rgb *= litArgs_specularity;
			#endif
			#ifdef LIT_SPECULARITY_FACTOR
				dReflection.rgb *= litArgs_specularityFactor;
			#endif
		#endif
		#ifdef AREA_LIGHTS
			dSpecularLight *= litArgs_specularity;
			#ifdef LIT_SPECULAR
				calcLTCLightValues(litArgs_gloss, litArgs_worldNormal, dViewDirW, litArgs_specularity, litArgs_clearcoat_gloss, litArgs_clearcoat_worldNormal, litArgs_clearcoat_specularity);
			#endif
		#endif
		
		#ifdef LIGHT_COUNT > 0
			#include "lightEvaluationPS, LIGHT_COUNT"
		#endif
		#ifdef LIT_CLUSTERED_LIGHTS
			addClusteredLights(litArgs_worldNormal, dViewDirW, dReflDirW,
				#if defined(LIT_CLEARCOAT)
						ccReflDirW,
				#endif
						litArgs_gloss, litArgs_specularity, dVertexNormalW, dTBN, 
				#if defined(LIT_IRIDESCENCE)
						iridescenceFresnel,
				#endif
						litArgs_clearcoat_worldNormal, litArgs_clearcoat_gloss, litArgs_sheen_gloss, litArgs_iridescence_intensity
			);
		#endif
		#ifdef AREA_LIGHTS
			#ifdef LIT_CLEARCOAT
				litArgs_clearcoat_specularity = 1.0;
			#endif
			#ifdef LIT_SPECULAR
				litArgs_specularity = vec3(1);
			#endif
		#endif
		#ifdef LIT_REFRACTION
			addRefraction(
				litArgs_worldNormal, 
				dViewDirW, 
				litArgs_thickness, 
				litArgs_gloss, 
				litArgs_specularity, 
				litArgs_albedo, 
				litArgs_transmission,
				litArgs_ior,
				litArgs_dispersion
				#if defined(LIT_IRIDESCENCE)
					, iridescenceFresnel, 
					litArgs_iridescence_intensity
				#endif
			);
		#endif
	#endif
	#ifdef LIT_AO
		#ifdef LIT_OCCLUDE_DIRECT
			occludeDiffuse(litArgs_ao);
		#endif
		#if LIT_OCCLUDE_SPECULAR != NONE
			occludeSpecular(litArgs_gloss, litArgs_ao, litArgs_worldNormal, dViewDirW);
		#endif
	#endif
	#ifdef LIT_SPECULARITY_FACTOR
		dSpecularLight *= litArgs_specularityFactor;
	#endif
	#if !defined(LIT_OPACITY_FADES_SPECULAR)
		#if LIT_BLEND_TYPE == NORMAL || LIT_BLEND_TYPE == PREMULTIPLIED
			float specLum = dot((dSpecularLight + dReflection.rgb * dReflection.a), vec3( 0.2126, 0.7152, 0.0722 ));
			#ifdef LIT_CLEARCOAT
				specLum += dot(ccSpecularLight * litArgs_clearcoat_specularity + ccReflection * litArgs_clearcoat_specularity, vec3( 0.2126, 0.7152, 0.0722 ));
			#endif
			litArgs_opacity = clamp(litArgs_opacity + gammaCorrectInput(specLum), 0.0, 1.0);
		#endif
		litArgs_opacity *= material_alphaFade;
	#endif
	#ifdef LIT_LIGHTMAP_BAKING
		#ifdef LIT_LIGHTMAP_BAKING_COLOR
			#include "bakeLmEndPS"
		#endif
		#ifdef LIT_LIGHTMAP_BAKING_DIR
			#include "bakeDirLmEndPS"
		#endif
	#else
		#include "endPS"
		#include "outputAlphaPS"
	#endif
	#ifdef LIT_MSDF
		gl_FragColor = applyMsdf(gl_FragColor);
	#endif
	#include "outputPS"
	#include "debugOutputPS"
	#ifdef LIT_SHADOW_CATCHER
		gl_FragColor.rgb = vec3(dShadowCatcher);
	#endif
}
`,q3=`
vec3 sReflection;
vec3 dVertexNormalW;
vec3 dTangentW;
vec3 dBinormalW;
vec3 dViewDirW;
vec3 dReflDirW;
vec3 ccReflDirW;
vec3 dLightDirNormW;
float dAtten;
mat3 dTBN;
vec4 dReflection;
vec3 dDiffuseLight;
vec3 dSpecularLight;
float ccFresnel;
vec3 ccReflection;
vec3 ccSpecularLight;
float ccSpecularityNoFres;
vec3 sSpecularLight;
#ifdef LIT_DISPERSION
	uniform float material_dispersion;
#endif
#ifndef LIT_OPACITY_FADES_SPECULAR
	uniform float material_alphaFade;
#endif
#ifdef LIT_SSAO
	uniform sampler2D ssaoTexture;
	uniform vec2 ssaoTextureSizeInv;
#endif
#ifdef LIT_SHADOW_CATCHER
	float dShadowCatcher = 1.0;
#endif
#if LIGHT_COUNT > 0
	#include "lightDeclarationPS, LIGHT_COUNT"
#endif
#ifdef LIT_SPECULAR
	#if LIT_FRESNEL_MODEL == NONE && !defined(LIT_REFLECTIONS) && !defined(LIT_DIFFUSE_MAP) 
		#define LIT_OLD_AMBIENT
	#endif
#endif
#ifdef STD_LIGHTMAP_DIR
	uniform float bakeDir;
#endif
#ifdef LIT_LIGHTMAP_BAKING_ADD_AMBIENT
	uniform float ambientBakeOcclusionContrast;
	uniform float ambientBakeOcclusionBrightness;
#endif
`,Y3=`
void main(void) {
	#include "litUserMainStartPS"
	dReflection = vec4(0);
	#ifdef LIT_CLEARCOAT
		ccSpecularLight = vec3(0);
		ccReflection = vec3(0);
	#endif
	#if LIT_NONE_SLICE_MODE == SLICED
		#include "startNineSlicedPS"
	#elif LIT_NONE_SLICE_MODE == TILED
		#include "startNineSlicedTiledPS"
	#endif
	#ifdef LIT_NEEDS_NORMAL
		dVertexNormalW = normalize(vNormalW);
		#ifdef LIT_TANGENTS
			#if defined(LIT_HEIGHTS) || defined(LIT_USE_NORMALS) || defined(LIT_USE_CLEARCOAT_NORMALS) || defined(LIT_GGX_SPECULAR)
				dTangentW = vTangentW;
				dBinormalW = vBinormalW;
			#endif
		#endif
		getViewDir();
		#ifdef LIT_TBN
			getTBN(dTangentW, dBinormalW, dVertexNormalW);
			#ifdef LIT_TWO_SIDED_LIGHTING
				handleTwoSidedLighting();
			#endif
		#endif
	#endif
	evaluateFrontend();
	#include "debugProcessFrontendPS"
	evaluateBackend();
	#include "litUserMainEndPS"
}
`,j3=`
#ifdef LIT_NEEDS_NORMAL
	#include "cubeMapRotatePS"
	#include "cubeMapProjectPS"
	#include "envProcPS"
#endif
#ifdef LIT_SPECULAR_OR_REFLECTION
	#ifdef LIT_METALNESS
		#include "metalnessModulatePS"
	#endif
	#if LIT_FRESNEL_MODEL == SCHLICK
		#include "fresnelSchlickPS"
	#endif
	#ifdef LIT_IRIDESCENCE
		#include "iridescenceDiffractionPS"
	#endif
#endif
#ifdef LIT_AO
	#include "aoDiffuseOccPS"
	#include "aoSpecOccPS"
#endif
#if LIT_REFLECTION_SOURCE == ENVATLASHQ
	#include "envAtlasPS"
	#include "reflectionEnvHQPS"
#elif LIT_REFLECTION_SOURCE == ENVATLAS
	#include "envAtlasPS"
	#include "reflectionEnvPS"
#elif LIT_REFLECTION_SOURCE == CUBEMAP
	#include "reflectionCubePS"
#elif LIT_REFLECTION_SOURCE == SPHEREMAP
	#include "reflectionSpherePS"
#endif
#ifdef LIT_REFLECTIONS
	#ifdef LIT_CLEARCOAT
		#include "reflectionCCPS"
	#endif
	#ifdef LIT_SHEEN
		#include "reflectionSheenPS"
	#endif
#endif
#ifdef LIT_REFRACTION
	#if defined(LIT_DYNAMIC_REFRACTION)
		#include "refractionDynamicPS"
	#elif defined(LIT_REFLECTIONS)
		#include "refractionCubePS"
	#endif
#endif
#ifdef LIT_SHEEN
	#include "lightSheenPS"
#endif
uniform vec3 material_ambient;
#ifdef LIT_SPECULAR
	#ifdef LIT_LIGHTING
		#ifdef LIT_GGX_SPECULAR
			#include "lightSpecularAnisoGGXPS"
		#else
			#include "lightSpecularBlinnPS"
		#endif
	#endif
#endif
#include "combinePS"
#ifdef LIT_LIGHTMAP
	#include "lightmapAddPS"
#endif
#ifdef LIT_ADD_AMBIENT
	#include "ambientPS"
#endif
#ifdef LIT_MSDF
	#include "msdfPS"
#endif
#ifdef LIT_NEEDS_NORMAL
	#include "viewDirPS"
	#ifdef LIT_SPECULAR
		#ifdef LIT_GGX_SPECULAR
			#include "reflDirAnisoPS"
		#else
			#include "reflDirPS"
		#endif
	#endif
#endif
#include "lightingPS"
`,K3=`
#include "basePS"
#include "sphericalPS"
#include "decodePS"
#include "gammaPS"
#include "tonemappingPS"
#include "fogPS"
#if LIT_NONE_SLICE_MODE == SLICED
	#include "baseNineSlicedPS"
#elif LIT_NONE_SLICE_MODE == TILED
	#include "baseNineSlicedTiledPS"
#endif
#ifdef LIT_TBN
	#include "TBNPS"
	#ifdef LIT_TWO_SIDED_LIGHTING
		#include "twoSidedLightingPS"
	#endif
#endif
`,Z3=`
#include "varyingsPS"
#include "litUserDeclarationPS"
#include "frontendDeclPS"
#if defined(PICK_PASS) || defined(PREPASS_PASS)
	#include "frontendCodePS"
	#include "litUserCodePS"
	#include "litOtherMainPS"
#elif defined(SHADOW_PASS)
	#include "frontendCodePS"
	#include "litUserCodePS"
	#include "litShadowMainPS"
#else
	#include "litForwardDeclarationPS"
	#include "litForwardPreCodePS"
	#include "frontendCodePS"
	#include "litForwardPostCodePS"
	#include "litForwardBackendPS"
	#include "litUserCodePS"
	#include "litForwardMainPS"
#endif
`,Q3=`
#include "varyingsVS"
#include  "litUserDeclarationVS"
#ifdef VERTEX_COLOR
	attribute vec4 vertex_color;
#endif
#ifdef NINESLICED
	varying vec2 vMask;
	varying vec2 vTiledUv;
	uniform mediump vec4 innerOffset;
	uniform mediump vec2 outerScale;
	uniform mediump vec4 atlasRect;
#endif
vec3 dPositionW;
mat4 dModelMatrix;
#include "transformCoreVS"
#ifdef UV0
	attribute vec2 vertex_texCoord0;
	#include "uv0VS"
#endif
#ifdef UV1
	attribute vec2 vertex_texCoord1;
	#include "uv1VS"
#endif
#ifdef LINEAR_DEPTH
	#ifndef VIEWMATRIX
	#define VIEWMATRIX
		uniform mat4 matrix_view;
	#endif
#endif
#include "transformVS"
#ifdef NORMALS
	#include "normalCoreVS"
	#include "normalVS"
#endif
#ifdef TANGENTS
	attribute vec4 vertex_tangent;
#endif
#include "uvTransformUniformsPS, UV_TRANSFORMS_COUNT"
#ifdef MSDF
	#include "msdfVS"
#endif
#include  "litUserCodeVS"
void main(void) {
	#include "litUserMainStartVS"
	gl_PointSize = 1.0;
	gl_Position = getPosition();
	vPositionW = getWorldPosition();
	#ifdef NORMALS
		vNormalW = getNormal();
	#endif
	#ifdef TANGENTS
		vTangentW = normalize(dNormalMatrix * vertex_tangent.xyz);
		vBinormalW = cross(vNormalW, vTangentW) * vertex_tangent.w;
	#elif defined(GGX_SPECULAR)
		vObjectSpaceUpW = normalize(dNormalMatrix * vec3(0, 1, 0));
	#endif
	#ifdef UV0
		vec2 uv0 = getUv0();
		#ifdef UV0_UNMODIFIED
			vUv0 = uv0;
		#endif
	#endif
	#ifdef UV1
		vec2 uv1 = getUv1();
		#ifdef UV1_UNMODIFIED
			vUv1 = uv1;
		#endif
	#endif
	#include "uvTransformVS, UV_TRANSFORMS_COUNT"
	#ifdef VERTEX_COLOR
		vVertexColor = vertex_color;
	#endif
	#ifdef LINEAR_DEPTH
		vLinearDepth = -(matrix_view * vec4(vPositionW, 1.0)).z;
	#endif
	#ifdef MSDF
		unpackMsdfParams();
	#endif
	#include "litUserMainEndVS"
}
`,J3=`
#ifdef PICK_PASS
	#include "pickPS"
#endif
#ifdef PREPASS_PASS
	#include "floatAsUintPS"
#endif
void main(void) {
	#include "litUserMainStartPS"
	evaluateFrontend();
	#ifdef PICK_PASS
		gl_FragColor = getPickOutput();
	#endif
	#ifdef PREPASS_PASS
		gl_FragColor = float2vec4(vLinearDepth);
	#endif
	#include "litUserMainEndPS"
}
`,eO=`
vec3 litArgs_albedo;
float litArgs_opacity;
vec3 litArgs_emission;
vec3 litArgs_worldNormal;
float litArgs_ao;
vec3 litArgs_lightmap;
vec3 litArgs_lightmapDir;
float litArgs_metalness;
vec3 litArgs_specularity;
float litArgs_specularityFactor;
float litArgs_gloss;
float litArgs_sheen_gloss;
vec3 litArgs_sheen_specularity;
float litArgs_transmission;
float litArgs_thickness;
float litArgs_ior;
float litArgs_dispersion;
float litArgs_iridescence_intensity;
float litArgs_iridescence_thickness;
vec3 litArgs_clearcoat_worldNormal;
float litArgs_clearcoat_specularity;
float litArgs_clearcoat_gloss;
`,tO=`
	#if LIT_NONE_SLICE_MODE == TILED
		const float textureBias = -1000.0;
	#else
		uniform float textureBias;
	#endif
	#include "litShaderArgsPS"
`,sO=`
#if LIGHT_TYPE != DIRECTIONAL
	uniform vec3 view_position;
	uniform float light_radius;
#endif
#if SHADOW_TYPE == PCSS_32F
	#include "linearizeDepthPS"
#endif
void main(void) {
	#include "litUserMainStartPS"
	evaluateFrontend();
	#ifdef PERSPECTIVE_DEPTH
		float depth = gl_FragCoord.z;
		#if SHADOW_TYPE == PCSS_32F
			#if LIGHT_TYPE != DIRECTIONAL
				depth = linearizeDepthWithParams(depth, camera_params);
			#endif
		#endif
	#else
		float depth = min(distance(view_position, vPositionW) / light_radius, 0.99999);
		#define MODIFIED_DEPTH
	#endif
	#if SHADOW_TYPE == VSM_16F || SHADOW_TYPE == VSM_32F
		#if SHADOW_TYPE == VSM_32F
			float exponent = 15.0;
		#else
			float exponent = 5.54;
		#endif
		depth = 2.0 * depth - 1.0;
		depth =  exp(exponent * depth);
		gl_FragColor = vec4(depth, depth*depth, 1.0, 1.0);
	#else
		#if SHADOW_TYPE == PCSS_32F
			gl_FragColor.r = depth;
		#else
			#ifdef MODIFIED_DEPTH
				gl_FragDepth = depth;
			#endif
			gl_FragColor = vec4(1.0);
		#endif
	#endif
	#include "litUserMainEndPS"
}
`,iO=`
mat3 transposeMat3( const in mat3 m ) {
	mat3 tmp;
	tmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );
	tmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );
	tmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );
	return tmp;
}
vec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {
	const float LUT_SIZE = 64.0;
	const float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;
	const float LUT_BIAS = 0.5 / LUT_SIZE;
	float dotNV = saturate( dot( N, V ) );
	vec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );
	uv = uv * LUT_SCALE + LUT_BIAS;
	return uv;
}
float LTC_ClippedSphereFormFactor( const in vec3 f ) {
	float l = length( f );
	return max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );
}
vec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {
	float x = dot( v1, v2 );
	float y = abs( x );
	float a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;
	float b = 3.4175940 + ( 4.1616724 + y ) * y;
	float v = a / b;
	float theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;
	return cross( v1, v2 ) * theta_sintheta;
}
struct Coords {
	vec3 coord0;
	vec3 coord1;
	vec3 coord2;
	vec3 coord3;
};
float LTC_EvaluateRect( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in Coords rectCoords) {
	vec3 v1 = rectCoords.coord1 - rectCoords.coord0;
	vec3 v2 = rectCoords.coord3 - rectCoords.coord0;
	
	vec3 lightNormal = cross( v1, v2 );
	float factor = sign(-dot( lightNormal, P - rectCoords.coord0 ));
	vec3 T1, T2;
	T1 = normalize( V - N * dot( V, N ) );
	T2 =  factor * cross( N, T1 );
	mat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );
	vec3 coords[ 4 ];
	coords[ 0 ] = mat * ( rectCoords.coord0 - P );
	coords[ 1 ] = mat * ( rectCoords.coord1 - P );
	coords[ 2 ] = mat * ( rectCoords.coord2 - P );
	coords[ 3 ] = mat * ( rectCoords.coord3 - P );
	coords[ 0 ] = normalize( coords[ 0 ] );
	coords[ 1 ] = normalize( coords[ 1 ] );
	coords[ 2 ] = normalize( coords[ 2 ] );
	coords[ 3 ] = normalize( coords[ 3 ] );
	vec3 vectorFormFactor = vec3( 0.0 );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );
	float result = LTC_ClippedSphereFormFactor( vectorFormFactor );
	return result;
}
Coords dLTCCoords;
Coords getLTCLightCoords(vec3 lightPos, vec3 halfWidth, vec3 halfHeight){
	Coords coords;
	coords.coord0 = lightPos + halfWidth - halfHeight;
	coords.coord1 = lightPos - halfWidth - halfHeight;
	coords.coord2 = lightPos - halfWidth + halfHeight;
	coords.coord3 = lightPos + halfWidth + halfHeight;
	return coords;
}
float dSphereRadius;
Coords getSphereLightCoords(vec3 lightPos, vec3 halfWidth, vec3 halfHeight){
	dSphereRadius = max(length(halfWidth), length(halfHeight));
	vec3 f = reflect(normalize(lightPos - view_position), vNormalW);
	vec3 w = normalize(cross(f, halfHeight));
	vec3 h = normalize(cross(f, w));
	return getLTCLightCoords(lightPos, w * dSphereRadius, h * dSphereRadius);
}
vec2 dLTCUV;
#ifdef LIT_CLEARCOAT
	vec2 ccLTCUV;
#endif
vec2 getLTCLightUV(float gloss, vec3 worldNormal, vec3 viewDir)
{
	float roughness = max((1.0 - gloss) * (1.0 - gloss), 0.001);
	return LTC_Uv( worldNormal, viewDir, roughness );
}
vec3 dLTCSpecFres;
#ifdef LIT_CLEARCOAT
	vec3 ccLTCSpecFres;
#endif
vec3 getLTCLightSpecFres(vec2 uv, vec3 specularity)
{
	vec4 t2 = texture2DLod(areaLightsLutTex2, uv, 0.0);
	return specularity * t2.x + ( vec3( 1.0 ) - specularity) * t2.y;
}
void calcLTCLightValues(float gloss, vec3 worldNormal, vec3 viewDir, vec3 specularity, float clearcoatGloss, vec3 clearcoatWorldNormal, float clearcoatSpecularity)
{
	dLTCUV = getLTCLightUV(gloss, worldNormal, viewDir);
	dLTCSpecFres = getLTCLightSpecFres(dLTCUV, specularity); 
#ifdef LIT_CLEARCOAT
	ccLTCUV = getLTCLightUV(clearcoatGloss, clearcoatWorldNormal, viewDir);
	ccLTCSpecFres = getLTCLightSpecFres(ccLTCUV, vec3(clearcoatSpecularity));
#endif
}
void calcRectLightValues(vec3 lightPos, vec3 halfWidth, vec3 halfHeight) {
	dLTCCoords = getLTCLightCoords(lightPos, halfWidth, halfHeight);
}
void calcDiskLightValues(vec3 lightPos, vec3 halfWidth, vec3 halfHeight) {
	calcRectLightValues(lightPos, halfWidth, halfHeight);
}
void calcSphereLightValues(vec3 lightPos, vec3 halfWidth, vec3 halfHeight) {
	dLTCCoords = getSphereLightCoords(lightPos, halfWidth, halfHeight);
}
vec3 SolveCubic(vec4 Coefficient)
{
	float pi = 3.14159;
	Coefficient.xyz /= Coefficient.w;
	Coefficient.yz /= 3.0;
	float A = Coefficient.w;
	float B = Coefficient.z;
	float C = Coefficient.y;
	float D = Coefficient.x;
	vec3 Delta = vec3(
		-Coefficient.z * Coefficient.z + Coefficient.y,
		-Coefficient.y * Coefficient.z + Coefficient.x,
		dot(vec2(Coefficient.z, -Coefficient.y), Coefficient.xy)
	);
	float Discriminant = dot(vec2(4.0 * Delta.x, -Delta.y), Delta.zy);
	vec2 xlc, xsc;
	{
		float A_a = 1.0;
		float C_a = Delta.x;
		float D_a = -2.0 * B * Delta.x + Delta.y;
		float Theta = atan(sqrt(Discriminant), -D_a) / 3.0;
		float x_1a = 2.0 * sqrt(-C_a) * cos(Theta);
		float x_3a = 2.0 * sqrt(-C_a) * cos(Theta + (2.0 / 3.0) * pi);
		float xl;
		if ((x_1a + x_3a) > 2.0 * B)
			xl = x_1a;
		else
			xl = x_3a;
		xlc = vec2(xl - B, A);
	}
	{
		float A_d = D;
		float C_d = Delta.z;
		float D_d = -D * Delta.y + 2.0 * C * Delta.z;
		float Theta = atan(D * sqrt(Discriminant), -D_d) / 3.0;
		float x_1d = 2.0 * sqrt(-C_d) * cos(Theta);
		float x_3d = 2.0 * sqrt(-C_d) * cos(Theta + (2.0 / 3.0) * pi);
		float xs;
		if (x_1d + x_3d < 2.0 * C)
			xs = x_1d;
		else
			xs = x_3d;
		xsc = vec2(-D, xs + C);
	}
	float E =  xlc.y * xsc.y;
	float F = -xlc.x * xsc.y - xlc.y * xsc.x;
	float G =  xlc.x * xsc.x;
	vec2 xmc = vec2(C * F - B * G, -B * F + C * E);
	vec3 Root = vec3(xsc.x / xsc.y, xmc.x / xmc.y, xlc.x / xlc.y);
	if (Root.x < Root.y && Root.x < Root.z)
		Root.xyz = Root.yxz;
	else if (Root.z < Root.x && Root.z < Root.y)
		Root.xyz = Root.xzy;
	return Root;
}
float LTC_EvaluateDisk(vec3 N, vec3 V, vec3 P, mat3 Minv, Coords points)
{
	vec3 T1 = normalize(V - N * dot(V, N));
	vec3 T2 = cross(N, T1);
	mat3 R = transposeMat3( mat3( T1, T2, N ) );
	vec3 L_[ 3 ];
	L_[ 0 ] = R * ( points.coord0 - P );
	L_[ 1 ] = R * ( points.coord1 - P );
	L_[ 2 ] = R * ( points.coord2 - P );
	vec3 C  = 0.5 * (L_[0] + L_[2]);
	vec3 V1 = 0.5 * (L_[1] - L_[2]);
	vec3 V2 = 0.5 * (L_[1] - L_[0]);
	C  = Minv * C;
	V1 = Minv * V1;
	V2 = Minv * V2;
	float a, b;
	float d11 = dot(V1, V1);
	float d22 = dot(V2, V2);
	float d12 = dot(V1, V2);
	if (abs(d12) / sqrt(d11 * d22) > 0.0001)
	{
		float tr = d11 + d22;
		float det = -d12 * d12 + d11 * d22;
		det = sqrt(det);
		float u = 0.5 * sqrt(tr - 2.0 * det);
		float v = 0.5 * sqrt(tr + 2.0 * det);
		float e_max = (u + v) * (u + v);
		float e_min = (u - v) * (u - v);
		vec3 V1_, V2_;
		if (d11 > d22)
		{
			V1_ = d12 * V1 + (e_max - d11) * V2;
			V2_ = d12 * V1 + (e_min - d11) * V2;
		}
		else
		{
			V1_ = d12*V2 + (e_max - d22)*V1;
			V2_ = d12*V2 + (e_min - d22)*V1;
		}
		a = 1.0 / e_max;
		b = 1.0 / e_min;
		V1 = normalize(V1_);
		V2 = normalize(V2_);
	}
	else
	{
		a = 1.0 / dot(V1, V1);
		b = 1.0 / dot(V2, V2);
		V1 *= sqrt(a);
		V2 *= sqrt(b);
	}
	vec3 V3 = normalize(cross(V1, V2));
	if (dot(C, V3) < 0.0)
		V3 *= -1.0;
	float L  = dot(V3, C);
	float x0 = dot(V1, C) / L;
	float y0 = dot(V2, C) / L;
	float E1 = inversesqrt(a);
	float E2 = inversesqrt(b);
	a *= L * L;
	b *= L * L;
	float c0 = a * b;
	float c1 = a * b * (1.0 + x0 * x0 + y0 * y0) - a - b;
	float c2 = 1.0 - a * (1.0 + x0 * x0) - b * (1.0 + y0 * y0);
	float c3 = 1.0;
	vec3 roots = SolveCubic(vec4(c0, c1, c2, c3));
	float e1 = roots.x;
	float e2 = roots.y;
	float e3 = roots.z;
	vec3 avgDir = vec3(a * x0 / (a - e2), b * y0 / (b - e2), 1.0);
	mat3 rotate = mat3(V1, V2, V3);
	avgDir = rotate * avgDir;
	avgDir = normalize(avgDir);
	float L1 = sqrt(-e2 / e3);
	float L2 = sqrt(-e2 / e1);
	float formFactor = max(0.0, L1 * L2 * inversesqrt((1.0 + L1 * L1) * (1.0 + L2 * L2)));
	
	const float LUT_SIZE = 64.0;
	const float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;
	const float LUT_BIAS = 0.5 / LUT_SIZE;
	vec2 uv = vec2(avgDir.z * 0.5 + 0.5, formFactor);
	uv = uv*LUT_SCALE + LUT_BIAS;
	float scale = texture2DLod(areaLightsLutTex2, uv, 0.0).w;
	return formFactor*scale;
}
float FixNan(float value) {
	#ifdef WEBGPU
		return value != value ? 0.0 : value;
	#else
		return isnan(value) ? 0.0 : value;
	#endif
}
float getRectLightDiffuse(vec3 worldNormal, vec3 viewDir, vec3 lightDir, vec3 lightDirNorm) {
	return LTC_EvaluateRect( worldNormal, viewDir, vPositionW, mat3( 1.0 ), dLTCCoords );
}
float getDiskLightDiffuse(vec3 worldNormal, vec3 viewDir, vec3 lightDir, vec3 lightDirNorm) {
	return FixNan(LTC_EvaluateDisk( worldNormal, viewDir, vPositionW, mat3( 1.0 ), dLTCCoords ));
}
float getSphereLightDiffuse(vec3 worldNormal, vec3 viewDir, vec3 lightDir, vec3 lightDirNorm) {
	float falloff = dSphereRadius / (dot(lightDir, lightDir) + dSphereRadius);
	return FixNan(getLightDiffuse(worldNormal, viewDir, lightDirNorm) * falloff);
}
mat3 getLTCLightInvMat(vec2 uv)
{
	vec4 t1 = texture2DLod(areaLightsLutTex1, uv, 0.0);
	return mat3(
		vec3( t1.x, 0, t1.y ),
		vec3(	0, 1,	0 ),
		vec3( t1.z, 0, t1.w )
	);
}
float calcRectLightSpecular(vec3 worldNormal, vec3 viewDir, vec2 uv) {
	mat3 mInv = getLTCLightInvMat(uv);
	return LTC_EvaluateRect( worldNormal, viewDir, vPositionW, mInv, dLTCCoords );
}
float getRectLightSpecular(vec3 worldNormal, vec3 viewDir) {
	return calcRectLightSpecular(worldNormal, viewDir, dLTCUV);
}
float calcDiskLightSpecular(vec3 worldNormal, vec3 viewDir, vec2 uv) {
	mat3 mInv = getLTCLightInvMat(uv);
	return LTC_EvaluateDisk( worldNormal, viewDir, vPositionW, mInv, dLTCCoords );
}
float getDiskLightSpecular(vec3 worldNormal, vec3 viewDir) {
	return calcDiskLightSpecular(worldNormal, viewDir, dLTCUV);
}
float getSphereLightSpecular(vec3 worldNormal, vec3 viewDir) {
	return calcDiskLightSpecular(worldNormal, viewDir, dLTCUV);
}
`,rO=`
#ifdef STD_METALNESS_CONSTANT
uniform float material_metalness;
#endif
void getMetalness() {
	float metalness = 1.0;
	#ifdef STD_METALNESS_CONSTANT
	metalness *= material_metalness;
	#endif
	#ifdef STD_METALNESS_TEXTURE
	metalness *= texture2DBias({STD_METALNESS_TEXTURE_NAME}, {STD_METALNESS_TEXTURE_UV}, textureBias).{STD_METALNESS_TEXTURE_CHANNEL};
	#endif
	#ifdef STD_METALNESS_VERTEX
	metalness *= saturate(vVertexColor.{STD_METALNESS_VERTEX_CHANNEL});
	#endif
	dMetalness = metalness;
}
`,aO=`
uniform sampler2D texture_msdfMap;
float median(float r, float g, float b) {
	return max(min(r, g), min(max(r, g), b));
}
float map (float min, float max, float v) {
	return (v - min) / (max - min);
}
uniform float font_sdfIntensity;
uniform float font_pxrange;
uniform float font_textureWidth;
#ifndef LIT_MSDF_TEXT_ATTRIBUTE
	uniform vec4 outline_color;
	uniform float outline_thickness;
	uniform vec4 shadow_color;
	uniform vec2 shadow_offset;
#else
	varying vec4 outline_color;
	varying float outline_thickness;
	varying vec4 shadow_color;
	varying vec2 shadow_offset;
#endif
vec4 applyMsdf(vec4 color) {
	color.rgb = gammaCorrectInput(color.rgb);
	vec3 tsample = texture2D(texture_msdfMap, vUv0).rgb;
	vec2 uvShdw = vUv0 - shadow_offset;
	vec3 ssample = texture2D(texture_msdfMap, uvShdw).rgb;
	float sigDist = median(tsample.r, tsample.g, tsample.b);
	float sigDistShdw = median(ssample.r, ssample.g, ssample.b);
	float smoothingMax = 0.2;
	vec2 w = fwidth(vUv0);
	float smoothing = clamp(w.x * font_textureWidth / font_pxrange, 0.0, smoothingMax);
	float mapMin = 0.05;
	float mapMax = clamp(1.0 - font_sdfIntensity, mapMin, 1.0);
	float sigDistInner = map(mapMin, mapMax, sigDist);
	float sigDistOutline = map(mapMin, mapMax, sigDist + outline_thickness);
	sigDistShdw = map(mapMin, mapMax, sigDistShdw + outline_thickness);
	float center = 0.5;
	float inside = smoothstep(center-smoothing, center+smoothing, sigDistInner);
	float outline = smoothstep(center-smoothing, center+smoothing, sigDistOutline);
	float shadow = smoothstep(center-smoothing, center+smoothing, sigDistShdw);
	vec4 tcolor = (outline > inside) ? outline * vec4(outline_color.a * outline_color.rgb, outline_color.a) : vec4(0.0);
	tcolor = mix(tcolor, color, inside);
	vec4 scolor = (shadow > outline) ? shadow * vec4(shadow_color.a * shadow_color.rgb, shadow_color.a) : tcolor;
	tcolor = mix(scolor, tcolor, outline);
	tcolor.rgb = gammaCorrectOutput(tcolor.rgb);
	
	return tcolor;
}
`,nO=`
vec3 getSpecularModulate(in vec3 specularity, in vec3 albedo, in float metalness, in float f0) {
	vec3 dielectricF0 = f0 * specularity;
	return mix(dielectricF0, albedo, metalness);
}
vec3 getAlbedoModulate(in vec3 albedo, in float metalness) {
	return albedo * (1.0 - metalness);
}
`,oO=`
	varying vec2 uv0;
	uniform sampler2DArray morphTexture;
	uniform highp float morphFactor[{MORPH_TEXTURE_MAX_COUNT}];
	uniform highp uint morphIndex[{MORPH_TEXTURE_MAX_COUNT}];
	uniform int count;
	#ifdef MORPH_INT
		uniform vec3 aabbSize;
		uniform vec3 aabbMin;
	#endif
	void main (void) {
		highp vec3 color = vec3(0, 0, 0);
		ivec2 pixelCoords = ivec2(uv0 * vec2(textureSize(morphTexture, 0).xy));
		
		for (int i = 0; i < count; i++) {
			uint textureIndex = morphIndex[i];
			vec3 delta = texelFetch(morphTexture, ivec3(pixelCoords, int(textureIndex)), 0).xyz;
			color += morphFactor[i] * delta;
		}
		#ifdef MORPH_INT
			color = (color - aabbMin) / aabbSize * 65535.0;
			gl_FragColor = uvec4(color, 1u);
		#else
			gl_FragColor = vec4(color, 1.0);
		#endif
	}
`,lO=`
	attribute vec2 vertex_position;
	varying vec2 uv0;
	void main(void) {
		gl_Position = vec4(vertex_position, 0.5, 1.0);
		uv0 = vertex_position.xy * 0.5 + 0.5;
	}
`,hO=`
attribute vec3 vertex_outlineParameters;
attribute vec3 vertex_shadowParameters;
varying vec4 outline_color;
varying float outline_thickness;
varying vec4 shadow_color;
varying vec2 shadow_offset;
void unpackMsdfParams() {
	vec3 little = mod(vertex_outlineParameters, 256.);
	vec3 big = (vertex_outlineParameters - little) / 256.;
	outline_color.rb = little.xy / 255.;
	outline_color.ga = big.xy / 255.;
	outline_thickness = little.z / 255. * 0.2;
	little = mod(vertex_shadowParameters, 256.);
	big = (vertex_shadowParameters - little) / 256.;
	shadow_color.rb = little.xy / 255.;
	shadow_color.ga = big.xy / 255.;
	shadow_offset = (vec2(little.z, big.z) / 127. - 1.) * 0.005;
}
`,cO=`
mat3 dNormalMatrix;
vec3 getNormal() {
	dNormalMatrix = getNormalMatrix(dModelMatrix);
	vec3 localNormal = getLocalNormal(vertex_normal);
	return normalize(dNormalMatrix * localNormal);
}
`,dO=`
attribute vec3 vertex_normal;
uniform mat3 matrix_normal;
#ifdef MORPHING_NORMAL
	#ifdef MORPHING_INT
		uniform highp usampler2D morphNormalTex;
	#else
		uniform highp sampler2D morphNormalTex;
	#endif
#endif
vec3 getLocalNormal(vec3 vertexNormal) {
	vec3 localNormal = vertex_normal;
	#ifdef MORPHING_NORMAL
		ivec2 morphUV = getTextureMorphCoords();
		#ifdef MORPHING_INT
			vec3 morphNormal = vec3(texelFetch(morphNormalTex, ivec2(morphUV), 0).xyz) / 65535.0 * 2.0 - 1.0;
		#else
			vec3 morphNormal = texelFetch(morphNormalTex, ivec2(morphUV), 0).xyz;
		#endif
		localNormal += morphNormal;
	#endif
	return localNormal;
}
#if defined(SKIN) || defined(BATCH)
	mat3 getNormalMatrix(mat4 modelMatrix) {
		return mat3(modelMatrix[0].xyz, modelMatrix[1].xyz, modelMatrix[2].xyz);
	}
#elif defined(INSTANCING)
	mat3 getNormalMatrix(mat4 modelMatrix) {
		return mat3(modelMatrix[0].xyz, modelMatrix[1].xyz, modelMatrix[2].xyz);
	}
#else
	mat3 getNormalMatrix(mat4 modelMatrix) {
		return matrix_normal;
	}
#endif
`,fO=`
#ifdef STD_NORMAL_TEXTURE
	uniform float material_bumpiness;
#endif
#ifdef STD_NORMALDETAIL_TEXTURE
	uniform float material_normalDetailMapBumpiness;
	vec3 blendNormals(vec3 n1, vec3 n2) {
		n1 += vec3(0, 0, 1);
		n2 *= vec3(-1, -1, 1);
		return n1 * dot(n1, n2) / n1.z - n2;
	}
#endif
void getNormal() {
#ifdef STD_NORMAL_TEXTURE
	vec3 normalMap = {STD_NORMAL_TEXTURE_DECODE}(texture2DBias({STD_NORMAL_TEXTURE_NAME}, {STD_NORMAL_TEXTURE_UV}, textureBias));
	normalMap = mix(vec3(0.0, 0.0, 1.0), normalMap, material_bumpiness);
	#ifdef STD_NORMALDETAIL_TEXTURE
		vec3 normalDetailMap = {STD_NORMALDETAIL_TEXTURE_DECODE}(texture2DBias({STD_NORMALDETAIL_TEXTURE_NAME}, {STD_NORMALDETAIL_TEXTURE_UV}, textureBias));
		normalDetailMap = mix(vec3(0.0, 0.0, 1.0), normalDetailMap, material_normalDetailMapBumpiness);
		normalMap = blendNormals(normalMap, normalDetailMap);
	#endif
	dNormalW = normalize(dTBN * normalMap);
#else
	dNormalW = dVertexNormalW;
#endif
}
`,uO=`
uniform float material_opacity;
void getOpacity() {
	dAlpha = material_opacity;
	#ifdef STD_OPACITY_TEXTURE
	dAlpha *= texture2DBias({STD_OPACITY_TEXTURE_NAME}, {STD_OPACITY_TEXTURE_UV}, textureBias).{STD_OPACITY_TEXTURE_CHANNEL};
	#endif
	#ifdef STD_OPACITY_VERTEX
	dAlpha *= clamp(vVertexColor.{STD_OPACITY_VERTEX_CHANNEL}, 0.0, 1.0);
	#endif
}
`,pO=`
#if STD_OPACITY_DITHER == BAYER8
	#include "bayerPS"
#endif
uniform vec4 blueNoiseJitter;
#if STD_OPACITY_DITHER == BLUENOISE
	uniform sampler2D blueNoiseTex32;
#endif
void opacityDither(float alpha, float id) {
	#if STD_OPACITY_DITHER == BAYER8
		float noise = bayer8(floor(mod(gl_FragCoord.xy + blueNoiseJitter.xy + id, 8.0))) / 64.0;
	#else
		#if STD_OPACITY_DITHER == BLUENOISE
			vec2 uv = fract(gl_FragCoord.xy / 32.0 + blueNoiseJitter.xy + id);
			float noise = texture2DLod(blueNoiseTex32, uv, 0.0).y;
		#endif
		#if STD_OPACITY_DITHER == IGNNOISE
			vec3 magic = vec3(0.06711056, 0.00583715, 52.9829189);
			float noise = fract(magic.z * fract(dot(gl_FragCoord.xy + blueNoiseJitter.xy + id, magic.xy)));
		#endif
	#endif
	noise = pow(noise, 2.2);
	if (alpha < noise)
		discard;
}
`,mO=`
`,_O=`
#if LIT_BLEND_TYPE == NORMAL || LIT_BLEND_TYPE == ADDITIVEALPHA || defined(LIT_ALPHA_TO_COVERAGE)
	gl_FragColor.a = litArgs_opacity;
#elif LIT_BLEND_TYPE == PREMULTIPLIED
	gl_FragColor.rgb *= litArgs_opacity;
	gl_FragColor.a = litArgs_opacity;
#else
	gl_FragColor.a = 1.0;
#endif
`,gO=`
varying vec2 vUv0;
uniform sampler2D source;
void main(void) {
	gl_FragColor = texture2D(source, vUv0);
}
`,vO=`
uniform vec3 material_sheen;
void getSheen() {
	vec3 sheenColor = material_sheen;
	#ifdef STD_SHEEN_TEXTURE
	sheenColor *= {STD_SHEEN_TEXTURE_DECODE}(texture2DBias({STD_SHEEN_TEXTURE_NAME}, {STD_SHEEN_TEXTURE_UV}, textureBias)).{STD_SHEEN_TEXTURE_CHANNEL};
	#endif
	#ifdef STD_SHEEN_VERTEX
	sheenColor *= saturate(vVertexColor.{STD_SHEEN_VERTEX_CHANNEL});
	#endif
	sSpecularity = sheenColor;
}
`,SO=`
uniform float material_sheenGloss;
void getSheenGlossiness() {
	float sheenGlossiness = material_sheenGloss;
	#ifdef STD_SHEENGLOSS_TEXTURE
	sheenGlossiness *= texture2DBias({STD_SHEENGLOSS_TEXTURE_NAME}, {STD_SHEENGLOSS_TEXTURE_UV}, textureBias).{STD_SHEENGLOSS_TEXTURE_CHANNEL};
	#endif
	#ifdef STD_SHEENGLOSS_VERTEX
	sheenGlossiness *= saturate(vVertexColor.{STD_SHEENGLOSS_VERTEX_CHANNEL});
	#endif
	#ifdef STD_SHEENGLOSS_INVERT
	sheenGlossiness = 1.0 - sheenGlossiness;
	#endif
	sGlossiness = sheenGlossiness + 0.0000001;
}
`,yO=`
uniform float material_heightMapFactor;
void getParallax() {
	float parallaxScale = material_heightMapFactor;
	float height = texture2DBias({STD_HEIGHT_TEXTURE_NAME}, {STD_HEIGHT_TEXTURE_UV}, textureBias).{STD_HEIGHT_TEXTURE_CHANNEL};
	height = height * parallaxScale - parallaxScale * 0.5;
	vec3 viewDirT = dViewDirW * dTBN;
	viewDirT.z += 0.42;
	dUvOffset = height * (viewDirT.xy / viewDirT.z);
}
`,TO=`
uniform uint meshInstanceId;
vec4 getPickOutput() {
	const vec4 inv = vec4(1.0 / 255.0);
	const uvec4 shifts = uvec4(16, 8, 0, 24);
	uvec4 col = (uvec4(meshInstanceId) >> shifts) & uvec4(0xff);
	return vec4(col) * inv;
}
`,xO=`
void getReflDir(vec3 worldNormal, vec3 viewDir, float gloss, mat3 tbn) {
	dReflDirW = normalize(-reflect(viewDir, worldNormal));
}
`,EO=`
void getReflDir(vec3 worldNormal, vec3 viewDir, float gloss, mat3 tbn) {
	float roughness = sqrt(1.0 - min(gloss, 1.0));
	vec2 direction = dAnisotropyRotation;
	vec3 anisotropicT = normalize(tbn * vec3(direction, 0.0));
	vec3 anisotropicB = normalize(cross(tbn[2], anisotropicT));
	float anisotropy = dAnisotropy;
	vec3 anisotropicDirection = anisotropicB;
	vec3 anisotropicTangent = cross(anisotropicDirection, viewDir);
	vec3 anisotropicNormal = cross(anisotropicTangent, anisotropicDirection);
	float bendFactor = 1.0 - anisotropy * (1.0 - roughness);
	float bendFactor4 = bendFactor * bendFactor * bendFactor * bendFactor;
	vec3 bentNormal = normalize(mix(normalize(anisotropicNormal), normalize(worldNormal), bendFactor4));
	dReflDirW = reflect(-viewDir, bentNormal);
}
`,AO=`
#ifdef LIT_CLEARCOAT
void addReflectionCC(vec3 reflDir, float gloss) {
	ccReflection += calcReflection(reflDir, gloss);
}
#endif
`,bO=`
uniform samplerCube texture_cubeMap;
uniform float material_reflectivity;
vec3 calcReflection(vec3 reflDir, float gloss) {
	vec3 lookupVec = cubeMapProject(reflDir);
	lookupVec.x *= -1.0;
	return {reflectionDecode}(textureCube(texture_cubeMap, lookupVec));
}
void addReflection(vec3 reflDir, float gloss) {   
	dReflection += vec4(calcReflection(reflDir, gloss), material_reflectivity);
}
`,wO=`
#ifndef ENV_ATLAS
	#define ENV_ATLAS
	uniform sampler2D texture_envAtlas;
#endif
uniform samplerCube texture_cubeMap;
uniform float material_reflectivity;
vec3 calcReflection(vec3 reflDir, float gloss) {
	vec3 dir = cubeMapProject(reflDir) * vec3(-1.0, 1.0, 1.0);
	vec2 uv = toSphericalUv(dir);
	float level = saturate(1.0 - gloss) * 5.0;
	float ilevel = floor(level);
	float flevel = level - ilevel;
	vec3 sharp = {reflectionCubemapDecode}(textureCube(texture_cubeMap, dir));
	vec3 roughA = {reflectionDecode}(texture2D(texture_envAtlas, mapRoughnessUv(uv, ilevel)));
	vec3 roughB = {reflectionDecode}(texture2D(texture_envAtlas, mapRoughnessUv(uv, ilevel + 1.0)));
	return processEnvironment(mix(sharp, mix(roughA, roughB, flevel), min(level, 1.0)));
}
void addReflection(vec3 reflDir, float gloss) {   
	dReflection += vec4(calcReflection(reflDir, gloss), material_reflectivity);
}
`,CO=`
#ifndef ENV_ATLAS
#define ENV_ATLAS
	uniform sampler2D texture_envAtlas;
#endif
uniform float material_reflectivity;
float shinyMipLevel(vec2 uv) {
	vec2 dx = dFdx(uv);
	vec2 dy = dFdy(uv);
	vec2 uv2 = vec2(fract(uv.x + 0.5), uv.y);
	vec2 dx2 = dFdx(uv2);
	vec2 dy2 = dFdy(uv2);
	float maxd = min(max(dot(dx, dx), dot(dy, dy)), max(dot(dx2, dx2), dot(dy2, dy2)));
	return clamp(0.5 * log2(maxd) - 1.0 + textureBias, 0.0, 5.0);
}
vec3 calcReflection(vec3 reflDir, float gloss) {
	vec3 dir = cubeMapProject(reflDir) * vec3(-1.0, 1.0, 1.0);
	vec2 uv = toSphericalUv(dir);
	float level = saturate(1.0 - gloss) * 5.0;
	float ilevel = floor(level);
	float level2 = shinyMipLevel(uv * atlasSize);
	float ilevel2 = floor(level2);
	vec2 uv0, uv1;
	float weight;
	if (ilevel == 0.0) {
		uv0 = mapShinyUv(uv, ilevel2);
		uv1 = mapShinyUv(uv, ilevel2 + 1.0);
		weight = level2 - ilevel2;
	} else {
		uv0 = uv1 = mapRoughnessUv(uv, ilevel);
		weight = 0.0;
	}
	vec3 linearA = {reflectionDecode}(texture2D(texture_envAtlas, uv0));
	vec3 linearB = {reflectionDecode}(texture2D(texture_envAtlas, uv1));
	vec3 linear0 = mix(linearA, linearB, weight);
	vec3 linear1 = {reflectionDecode}(texture2D(texture_envAtlas, mapRoughnessUv(uv, ilevel + 1.0)));
	return processEnvironment(mix(linear0, linear1, level - ilevel));
}
void addReflection(vec3 reflDir, float gloss) {   
	dReflection += vec4(calcReflection(reflDir, gloss), material_reflectivity);
}
`,PO=`
#ifndef VIEWMATRIX
	#define VIEWMATRIX
	uniform mat4 matrix_view;
#endif
uniform sampler2D texture_sphereMap;
uniform float material_reflectivity;
vec3 calcReflection(vec3 reflDir, float gloss) {
	vec3 reflDirV = (mat3(matrix_view) * reflDir);
	float m = 2.0 * sqrt(dot(reflDirV.xy, reflDirV.xy) + (reflDirV.z + 1.0) * (reflDirV.z + 1.0));
	vec2 sphereMapUv = reflDirV.xy / m + 0.5;
	return {reflectionDecode}(texture2D(texture_sphereMap, sphereMapUv));
}
void addReflection(vec3 reflDir, float gloss) {   
	dReflection += vec4(calcReflection(reflDir, gloss), material_reflectivity);
}
`,LO=`
void addReflectionSheen(vec3 worldNormal, vec3 viewDir, float gloss) {
	float NoV = dot(worldNormal, viewDir);
	float alphaG = gloss * gloss;
	float a = gloss < 0.25 ? -339.2 * alphaG + 161.4 * gloss - 25.9 : -8.48 * alphaG + 14.3 * gloss - 9.95;
	float b = gloss < 0.25 ? 44.0 * alphaG - 23.7 * gloss + 3.26 : 1.97 * alphaG - 3.27 * gloss + 0.72;
	float DG = exp( a * NoV + b ) + ( gloss < 0.25 ? 0.0 : 0.1 * ( gloss - 0.25 ) );
	sReflection += calcReflection(worldNormal, 0.0) * saturate(DG);
}
`,IO=`
vec3 refract2(vec3 viewVec, vec3 normal, float IOR) {
	float vn = dot(viewVec, normal);
	float k = 1.0 - IOR * IOR * (1.0 - vn * vn);
	vec3 refrVec = IOR * viewVec - (IOR * vn + sqrt(k)) * normal;
	return refrVec;
}
void addRefraction(
	vec3 worldNormal, 
	vec3 viewDir, 
	float thickness, 
	float gloss, 
	vec3 specularity, 
	vec3 albedo, 
	float transmission,
	float refractionIndex,
	float dispersion
#if defined(LIT_IRIDESCENCE)
	, vec3 iridescenceFresnel,
	float iridescenceIntensity
#endif 
) {
	vec4 tmpRefl = dReflection;
	vec3 reflectionDir = refract2(-viewDir, worldNormal, refractionIndex);
	dReflection = vec4(0);
	addReflection(reflectionDir, gloss);
	dDiffuseLight = mix(dDiffuseLight, dReflection.rgb * albedo, transmission);
	dReflection = tmpRefl;
}
`,MO=`
uniform float material_invAttenuationDistance;
uniform vec3 material_attenuation;
vec3 evalRefractionColor(vec3 refractionVector, float gloss, float refractionIndex) {
	vec4 pointOfRefraction = vec4(vPositionW + refractionVector, 1.0);
	vec4 projectionPoint = matrix_viewProjection * pointOfRefraction;
	vec2 uv = getGrabScreenPos(projectionPoint);
	float iorToRoughness = (1.0 - gloss) * clamp((1.0 / refractionIndex) * 2.0 - 2.0, 0.0, 1.0);
	float refractionLod = log2(uScreenSize.x) * iorToRoughness;
	vec3 refraction = texture2DLod(uSceneColorMap, uv, refractionLod).rgb;
	return refraction;
}
void addRefraction(
	vec3 worldNormal, 
	vec3 viewDir, 
	float thickness, 
	float gloss, 
	vec3 specularity, 
	vec3 albedo, 
	float transmission,
	float refractionIndex,
	float dispersion
#if defined(LIT_IRIDESCENCE)
	, vec3 iridescenceFresnel,
	float iridescenceIntensity
#endif
) {
	vec3 modelScale;
	modelScale.x = length(vec3(matrix_model[0].xyz));
	modelScale.y = length(vec3(matrix_model[1].xyz));
	modelScale.z = length(vec3(matrix_model[2].xyz));
	vec3 scale = thickness * modelScale;
	vec3 refractionVector = normalize(refract(-viewDir, worldNormal, refractionIndex)) * scale;
	vec3 refraction = evalRefractionColor(refractionVector, gloss, refractionIndex);
	#ifdef LIT_DISPERSION
		float halfSpread = (1.0 / refractionIndex - 1.0) * 0.025 * dispersion;
		float refractionIndexR = refractionIndex - halfSpread;
		refractionVector = normalize(refract(-viewDir, worldNormal, refractionIndexR)) * scale;
		refraction.r = evalRefractionColor(refractionVector, gloss, refractionIndexR).r;
		float refractionIndexB = refractionIndex + halfSpread;
		refractionVector = normalize(refract(-viewDir, worldNormal, refractionIndexB)) * scale;
		refraction.b = evalRefractionColor(refractionVector, gloss, refractionIndexB).b;
	#endif
	vec3 transmittance;
	if (material_invAttenuationDistance != 0.0)
	{
		vec3 attenuation = -log(material_attenuation) * material_invAttenuationDistance;
		transmittance = exp(-attenuation * length(refractionVector));
	}
	else
	{
		transmittance = refraction;
	}
	vec3 fresnel = vec3(1.0) - 
		getFresnel(
			dot(viewDir, worldNormal), 
			gloss, 
			specularity
		#if defined(LIT_IRIDESCENCE)
			, iridescenceFresnel,
			iridescenceIntensity
		#endif
		);
	dDiffuseLight = mix(dDiffuseLight, refraction * transmittance * fresnel, transmission);
}
`,DO=`
varying vec2 vUv0;
#ifdef CUBEMAP_SOURCE
	uniform samplerCube sourceCube;
#else
	uniform sampler2D sourceTex;
#endif
#ifdef USE_SAMPLES_TEX
	uniform sampler2D samplesTex;
	uniform vec2 samplesTexInverseSize;
#endif
uniform vec3 params;
float targetFace() { return params.x; }
float targetTotalPixels() { return params.y; }
float sourceTotalPixels() { return params.z; }
float PI = 3.141592653589793;
float saturate(float x) {
	return clamp(x, 0.0, 1.0);
}
#include "decodePS"
#include "encodePS"
vec3 modifySeams(vec3 dir, float scale) {
	vec3 adir = abs(dir);
	float M = max(max(adir.x, adir.y), adir.z);
	return dir / M * vec3(
		adir.x == M ? 1.0 : scale,
		adir.y == M ? 1.0 : scale,
		adir.z == M ? 1.0 : scale
	);
}
vec2 toSpherical(vec3 dir) {
	return vec2(dir.xz == vec2(0.0) ? 0.0 : atan(dir.x, dir.z), asin(dir.y));
}
vec3 fromSpherical(vec2 uv) {
	return vec3(cos(uv.y) * sin(uv.x),
				sin(uv.y),
				cos(uv.y) * cos(uv.x));
}
vec3 getDirectionEquirect() {
	return fromSpherical((vec2(vUv0.x, 1.0 - vUv0.y) * 2.0 - 1.0) * vec2(PI, PI * 0.5));
}
float signNotZero(float k){
	return(k >= 0.0) ? 1.0 : -1.0;
}
vec2 signNotZero(vec2 v) {
	return vec2(signNotZero(v.x), signNotZero(v.y));
}
vec3 octDecode(vec2 o) {
	vec3 v = vec3(o.x, 1.0 - abs(o.x) - abs(o.y), o.y);
	if (v.y < 0.0) {
		v.xz = (1.0 - abs(v.zx)) * signNotZero(v.xz);
	}
	return normalize(v);
}
vec3 getDirectionOctahedral() {
	return octDecode(vec2(vUv0.x, 1.0 - vUv0.y) * 2.0 - 1.0);
}
vec2 octEncode(in vec3 v) {
	float l1norm = abs(v.x) + abs(v.y) + abs(v.z);
	vec2 result = v.xz * (1.0 / l1norm);
	if (v.y < 0.0) {
		result = (1.0 - abs(result.yx)) * signNotZero(result.xy);
	}
	return result;
}
#ifdef CUBEMAP_SOURCE
	vec4 sampleCubemap(vec3 dir) {
		return textureCube(sourceCube, modifySeams(dir, 1.0));
	}
	vec4 sampleCubemap(vec2 sph) {
		return sampleCubemap(fromSpherical(sph));
	}
	vec4 sampleCubemap(vec3 dir, float mipLevel) {
		return textureCubeLod(sourceCube, modifySeams(dir, 1.0), mipLevel);
	}
	vec4 sampleCubemap(vec2 sph, float mipLevel) {
		return sampleCubemap(fromSpherical(sph), mipLevel);
	}
#else
	vec4 sampleEquirect(vec2 sph) {
		vec2 uv = sph / vec2(PI * 2.0, PI) + 0.5;
		return texture2D(sourceTex, vec2(uv.x, 1.0 - uv.y));
	}
	vec4 sampleEquirect(vec3 dir) {
		return sampleEquirect(toSpherical(dir));
	}
	vec4 sampleEquirect(vec2 sph, float mipLevel) {
		vec2 uv = sph / vec2(PI * 2.0, PI) + 0.5;
		return texture2DLod(sourceTex, vec2(uv.x, 1.0 - uv.y), mipLevel);
	}
	vec4 sampleEquirect(vec3 dir, float mipLevel) {
		return sampleEquirect(toSpherical(dir), mipLevel);
	}
	vec4 sampleOctahedral(vec3 dir) {
		vec2 uv = octEncode(dir) * 0.5 + 0.5;
		return texture2D(sourceTex, vec2(uv.x, 1.0 - uv.y));
	}
	vec4 sampleOctahedral(vec2 sph) {
		return sampleOctahedral(fromSpherical(sph));
	}
	vec4 sampleOctahedral(vec3 dir, float mipLevel) {
		vec2 uv = octEncode(dir) * 0.5 + 0.5;
		return texture2DLod(sourceTex, vec2(uv.x, 1.0 - uv.y), mipLevel);
	}
	vec4 sampleOctahedral(vec2 sph, float mipLevel) {
		return sampleOctahedral(fromSpherical(sph), mipLevel);
	}
#endif
vec3 getDirectionCubemap() {
	vec2 st = vUv0 * 2.0 - 1.0;
	float face = targetFace();
	vec3 vec;
	if (face == 0.0) {
		vec = vec3(1, -st.y, -st.x);
	} else if (face == 1.0) {
		vec = vec3(-1, -st.y, st.x);
	} else if (face == 2.0) {
		vec = vec3(st.x, 1, st.y);
	} else if (face == 3.0) {
		vec = vec3(st.x, -1, -st.y);
	} else if (face == 4.0) {
		vec = vec3(st.x, -st.y, 1);
	} else {
		vec = vec3(-st.x, -st.y, -1);
	}
	return normalize(modifySeams(vec, 1.0));
}
mat3 matrixFromVector(vec3 n) {
	float a = 1.0 / (1.0 + n.z);
	float b = -n.x * n.y * a;
	vec3 b1 = vec3(1.0 - n.x * n.x * a, b, -n.x);
	vec3 b2 = vec3(b, 1.0 - n.y * n.y * a, -n.y);
	return mat3(b1, b2, n);
}
mat3 matrixFromVectorSlow(vec3 n) {
	vec3 up = (1.0 - abs(n.y) <= 0.0000001) ? vec3(0.0, 0.0, n.y > 0.0 ? 1.0 : -1.0) : vec3(0.0, 1.0, 0.0);
	vec3 x = normalize(cross(up, n));
	vec3 y = cross(n, x);
	return mat3(x, y, n);
}
vec4 reproject() {
	if ({NUM_SAMPLES} <= 1) {
		return {ENCODE_FUNC}({DECODE_FUNC}({SOURCE_FUNC}({TARGET_FUNC}())));
	} else {
		vec3 t = {TARGET_FUNC}();
		vec3 tu = dFdx(t);
		vec3 tv = dFdy(t);
		vec3 result = vec3(0.0);
		for (float u = 0.0; u < {NUM_SAMPLES_SQRT}; ++u) {
			for (float v = 0.0; v < {NUM_SAMPLES_SQRT}; ++v) {
				result += {DECODE_FUNC}({SOURCE_FUNC}(normalize(t +
															tu * (u / {NUM_SAMPLES_SQRT} - 0.5) +
															tv * (v / {NUM_SAMPLES_SQRT} - 0.5))));
			}
		}
		return {ENCODE_FUNC}(result / ({NUM_SAMPLES_SQRT} * {NUM_SAMPLES_SQRT}));
	}
}
vec4 unpackFloat = vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0);
#ifdef USE_SAMPLES_TEX
	void unpackSample(int i, out vec3 L, out float mipLevel) {
		float u = (float(i * 4) + 0.5) * samplesTexInverseSize.x;
		float v = (floor(u) + 0.5) * samplesTexInverseSize.y;
		vec4 raw;
		raw.x = dot(texture2D(samplesTex, vec2(u, v)), unpackFloat); u += samplesTexInverseSize.x;
		raw.y = dot(texture2D(samplesTex, vec2(u, v)), unpackFloat); u += samplesTexInverseSize.x;
		raw.z = dot(texture2D(samplesTex, vec2(u, v)), unpackFloat); u += samplesTexInverseSize.x;
		raw.w = dot(texture2D(samplesTex, vec2(u, v)), unpackFloat);
		L.xyz = raw.xyz * 2.0 - 1.0;
		mipLevel = raw.w * 8.0;
	}
	vec4 prefilterSamples() {
		mat3 vecSpace = matrixFromVectorSlow({TARGET_FUNC}());
		vec3 L;
		float mipLevel;
		vec3 result = vec3(0.0);
		float totalWeight = 0.0;
		for (int i = 0; i < {NUM_SAMPLES}; ++i) {
			unpackSample(i, L, mipLevel);
			result += {DECODE_FUNC}({SOURCE_FUNC}(vecSpace * L, mipLevel)) * L.z;
			totalWeight += L.z;
		}
		return {ENCODE_FUNC}(result / totalWeight);
	}
	vec4 prefilterSamplesUnweighted() {
		mat3 vecSpace = matrixFromVectorSlow({TARGET_FUNC}());
		vec3 L;
		float mipLevel;
		vec3 result = vec3(0.0);
		float totalWeight = 0.0;
		for (int i = 0; i < {NUM_SAMPLES}; ++i) {
			unpackSample(i, L, mipLevel);
			result += {DECODE_FUNC}({SOURCE_FUNC}(vecSpace * L, mipLevel));
		}
		return {ENCODE_FUNC}(result / float({NUM_SAMPLES}));
	}
#endif
void main(void) {
	gl_FragColor = {PROCESS_FUNC}();
}
`,RO=`
attribute vec2 vertex_position;
uniform vec4 uvMod;
varying vec2 vUv0;
void main(void) {
	gl_Position = vec4(vertex_position, 0.5, 1.0);
	vUv0 = getImageEffectUV((vertex_position.xy * 0.5 + 0.5) * uvMod.xy + uvMod.zw);
}
`,OO=`
uniform highp sampler2D uSceneDepthMap;
#ifndef SCREENSIZE
	#define SCREENSIZE
	uniform vec4 uScreenSize;
#endif
#ifndef VIEWMATRIX
	#define VIEWMATRIX
	uniform mat4 matrix_view;
#endif
#ifndef LINEARIZE_DEPTH
	#define LINEARIZE_DEPTH
	
	#ifndef CAMERAPLANES
		#define CAMERAPLANES
		uniform vec4 camera_params;
	#endif
	float linearizeDepth(float z) {
		if (camera_params.w == 0.0)
			return (camera_params.z * camera_params.y) / (camera_params.y + z * (camera_params.z - camera_params.y));
		else
			return camera_params.z + z * (camera_params.y - camera_params.z);
	}
#endif
float delinearizeDepth(float linearDepth) {
	if (camera_params.w == 0.0) {
		return (camera_params.y * (camera_params.z - linearDepth)) / (linearDepth * (camera_params.z - camera_params.y));
	} else {
		return (linearDepth - camera_params.z) / (camera_params.y - camera_params.z);
	}
}
float getLinearScreenDepth(vec2 uv) {
	#ifdef SCENE_DEPTHMAP_LINEAR
		#ifdef SCENE_DEPTHMAP_FLOAT
			return texture2D(uSceneDepthMap, uv).r;
		#else
			ivec2 textureSize = textureSize(uSceneDepthMap, 0);
			ivec2 texel = ivec2(uv * vec2(textureSize));
			vec4 data = texelFetch(uSceneDepthMap, texel, 0);
			uint intBits = 
				(uint(data.r * 255.0) << 24u) |
				(uint(data.g * 255.0) << 16u) |
				(uint(data.b * 255.0) << 8u) |
				uint(data.a * 255.0);
			return uintBitsToFloat(intBits);
		#endif
	#else
		return linearizeDepth(texture2D(uSceneDepthMap, uv).r);
	#endif
}
#ifndef VERTEXSHADER
	float getLinearScreenDepth() {
		vec2 uv = gl_FragCoord.xy * uScreenSize.zw;
		return getLinearScreenDepth(uv);
	}
#endif
float getLinearDepth(vec3 pos) {
	return -(matrix_view * vec4(pos, 1.0)).z;
}
`,NO=`
int getShadowCascadeIndex(vec4 shadowCascadeDistances, int shadowCascadeCount) {
	float depth = 1.0 / gl_FragCoord.w;
	vec4 comparisons = step(shadowCascadeDistances, vec4(depth));
	int cascadeIndex = int(dot(comparisons, vec4(1.0)));
	return min(cascadeIndex, shadowCascadeCount - 1);
}
int ditherShadowCascadeIndex(int cascadeIndex, vec4 shadowCascadeDistances, int shadowCascadeCount, float blendFactor) {
 
	if (cascadeIndex < shadowCascadeCount - 1) {
		float currentRangeEnd = shadowCascadeDistances[cascadeIndex];
		float transitionStart = blendFactor * currentRangeEnd;
		float depth = 1.0 / gl_FragCoord.w;
		if (depth > transitionStart) {
			float transitionFactor = smoothstep(transitionStart, currentRangeEnd, depth);
			float dither = fract(sin(dot(gl_FragCoord.xy, vec2(12.9898, 78.233))) * 43758.5453);
			if (dither < transitionFactor) {
				cascadeIndex += 1;
			}
		}
	}
	return cascadeIndex;
}
vec3 fadeShadow(vec3 shadowCoord, vec4 shadowCascadeDistances) {				  
	float depth = 1.0 / gl_FragCoord.w;
	if (depth > shadowCascadeDistances.w) {
		shadowCoord.z = -9999999.0;
	}
	return shadowCoord;
}
`,FO=`
float linstep(float a, float b, float v) {
	return saturate((v - a) / (b - a));
}
float reduceLightBleeding(float pMax, float amount) {
	 return linstep(amount, 1.0, pMax);
}
float chebyshevUpperBound(vec2 moments, float mean, float minVariance, float lightBleedingReduction) {
	float variance = moments.y - (moments.x * moments.x);
	variance = max(variance, minVariance);
	float d = mean - moments.x;
	float pMax = variance / (variance + (d * d));
	pMax = reduceLightBleeding(pMax, lightBleedingReduction);
	return (mean <= moments.x ? 1.0 : pMax);
}
float calculateEVSM(vec3 moments, float Z, float vsmBias, float exponent) {
	Z = 2.0 * Z - 1.0;
	float warpedDepth = exp(exponent * Z);
	moments.xy += vec2(warpedDepth, warpedDepth*warpedDepth) * (1.0 - moments.z);
	float VSMBias = vsmBias;
	float depthScale = VSMBias * exponent * warpedDepth;
	float minVariance1 = depthScale * depthScale;
	return chebyshevUpperBound(moments.xy, warpedDepth, minVariance1, 0.1);
}
float VSM16(TEXTURE_ACCEPT(tex), vec2 texCoords, float resolution, float Z, float vsmBias, float exponent) {
	vec3 moments = texture2DLod(tex, texCoords, 0.0).xyz;
	return calculateEVSM(moments, Z, vsmBias, exponent);
}
float getShadowVSM16(TEXTURE_ACCEPT(shadowMap), vec3 shadowCoord, vec4 shadowParams, float exponent) {
	return VSM16(TEXTURE_PASS(shadowMap), shadowCoord.xy, shadowParams.x, shadowCoord.z, shadowParams.y, exponent);
}
float getShadowSpotVSM16(TEXTURE_ACCEPT(shadowMap), vec3 shadowCoord, vec4 shadowParams, float exponent, vec3 lightDir) {
	return VSM16(TEXTURE_PASS(shadowMap), shadowCoord.xy, shadowParams.x, length(lightDir) * shadowParams.w + shadowParams.z, shadowParams.y, exponent);
}
float VSM32(TEXTURE_ACCEPT(tex), vec2 texCoords, float resolution, float Z, float vsmBias, float exponent) {
	#ifdef CAPS_TEXTURE_FLOAT_FILTERABLE
		vec3 moments = texture2DLod(tex, texCoords, 0.0).xyz;
	#else
		float pixelSize = 1.0 / resolution;
		texCoords -= vec2(pixelSize);
		vec3 s00 = texture2DLod(tex, texCoords, 0.0).xyz;
		vec3 s10 = texture2DLod(tex, texCoords + vec2(pixelSize, 0), 0.0).xyz;
		vec3 s01 = texture2DLod(tex, texCoords + vec2(0, pixelSize), 0.0).xyz;
		vec3 s11 = texture2DLod(tex, texCoords + vec2(pixelSize), 0.0).xyz;
		vec2 fr = fract(texCoords * resolution);
		vec3 h0 = mix(s00, s10, fr.x);
		vec3 h1 = mix(s01, s11, fr.x);
		vec3 moments = mix(h0, h1, fr.y);
	#endif
	return calculateEVSM(moments, Z, vsmBias, exponent);
}
float getShadowVSM32(TEXTURE_ACCEPT(shadowMap), vec3 shadowCoord, vec4 shadowParams, float exponent) {
	return VSM32(TEXTURE_PASS(shadowMap), shadowCoord.xy, shadowParams.x, shadowCoord.z, shadowParams.y, exponent);
}
float getShadowSpotVSM32(TEXTURE_ACCEPT(shadowMap), vec3 shadowCoord, vec4 shadowParams, float exponent, vec3 lightDir) {
	float Z = length(lightDir) * shadowParams.w + shadowParams.z;
	return VSM32(TEXTURE_PASS(shadowMap), shadowCoord.xy, shadowParams.x, Z, shadowParams.y, exponent);
}
`,kO=`
float getShadowPCF1x1(SHADOWMAP_ACCEPT(shadowMap), vec3 shadowCoord, vec4 shadowParams) {
	return textureShadow(shadowMap, shadowCoord);
}
float getShadowSpotPCF1x1(SHADOWMAP_ACCEPT(shadowMap), vec3 shadowCoord, vec4 shadowParams) {
	return textureShadow(shadowMap, shadowCoord);
}
#ifndef WEBGPU
float getShadowOmniPCF1x1(samplerCubeShadow shadowMap, vec3 shadowCoord, vec4 shadowParams, vec3 lightDir) {
	float shadowZ = length(lightDir) * shadowParams.w + shadowParams.z;
	return texture(shadowMap, vec4(lightDir, shadowZ));
}
#endif
`,UO=`
float _getShadowPCF3x3(SHADOWMAP_ACCEPT(shadowMap), vec3 shadowCoord, vec3 shadowParams) {
	float z = shadowCoord.z;
	vec2 uv = shadowCoord.xy * shadowParams.x;
	float shadowMapSizeInv = 1.0 / shadowParams.x;
	vec2 base_uv = floor(uv + 0.5);
	float s = (uv.x + 0.5 - base_uv.x);
	float t = (uv.y + 0.5 - base_uv.y); 
	base_uv -= vec2(0.5);
	base_uv *= shadowMapSizeInv;
	float sum = 0.0;
	float uw0 = (3.0 - 2.0 * s);
	float uw1 = (1.0 + 2.0 * s);
	float u0 = (2.0 - s) / uw0 - 1.0;
	float u1 = s / uw1 + 1.0;
	float vw0 = (3.0 - 2.0 * t);
	float vw1 = (1.0 + 2.0 * t);
	float v0 = (2.0 - t) / vw0 - 1.0;
	float v1 = t / vw1 + 1.0;
	u0 = u0 * shadowMapSizeInv + base_uv.x;
	v0 = v0 * shadowMapSizeInv + base_uv.y;
	u1 = u1 * shadowMapSizeInv + base_uv.x;
	v1 = v1 * shadowMapSizeInv + base_uv.y;
	sum += uw0 * vw0 * textureShadow(shadowMap, vec3(u0, v0, z));
	sum += uw1 * vw0 * textureShadow(shadowMap, vec3(u1, v0, z));
	sum += uw0 * vw1 * textureShadow(shadowMap, vec3(u0, v1, z));
	sum += uw1 * vw1 * textureShadow(shadowMap, vec3(u1, v1, z));
	sum *= 1.0f / 16.0;
	return sum;
}
float getShadowPCF3x3(SHADOWMAP_ACCEPT(shadowMap), vec3 shadowCoord, vec4 shadowParams) {
	return _getShadowPCF3x3(SHADOWMAP_PASS(shadowMap), shadowCoord, shadowParams.xyz);
}
float getShadowSpotPCF3x3(SHADOWMAP_ACCEPT(shadowMap), vec3 shadowCoord, vec4 shadowParams) {
	return _getShadowPCF3x3(SHADOWMAP_PASS(shadowMap), shadowCoord, shadowParams.xyz);
}
#ifndef WEBGPU
float getShadowOmniPCF3x3(samplerCubeShadow shadowMap, vec4 shadowParams, vec3 dir) {
	
	float shadowZ = length(dir) * shadowParams.w + shadowParams.z;
	float z = 1.0 / float(textureSize(shadowMap, 0));
	vec3 tc = normalize(dir);
	mediump vec4 shadows;
	shadows.x = texture(shadowMap, vec4(tc + vec3( z, z, z), shadowZ));
	shadows.y = texture(shadowMap, vec4(tc + vec3(-z,-z, z), shadowZ));
	shadows.z = texture(shadowMap, vec4(tc + vec3(-z, z,-z), shadowZ));
	shadows.w = texture(shadowMap, vec4(tc + vec3( z,-z,-z), shadowZ));
	return dot(shadows, vec4(0.25));
}
float getShadowOmniPCF3x3(samplerCubeShadow shadowMap, vec3 shadowCoord, vec4 shadowParams, vec3 lightDir) {
	return getShadowOmniPCF3x3(shadowMap, shadowParams, lightDir);
}
#endif
`,BO=`
float _getShadowPCF5x5(SHADOWMAP_ACCEPT(shadowMap), vec3 shadowCoord, vec3 shadowParams) {
	float z = shadowCoord.z;
	vec2 uv = shadowCoord.xy * shadowParams.x;
	float shadowMapSizeInv = 1.0 / shadowParams.x;
	vec2 base_uv = floor(uv + 0.5);
	float s = (uv.x + 0.5 - base_uv.x);
	float t = (uv.y + 0.5 - base_uv.y);
	base_uv -= vec2(0.5);
	base_uv *= shadowMapSizeInv;
	float uw0 = (4.0 - 3.0 * s);
	float uw1 = 7.0;
	float uw2 = (1.0 + 3.0 * s);
	float u0 = (3.0 - 2.0 * s) / uw0 - 2.0;
	float u1 = (3.0 + s) / uw1;
	float u2 = s / uw2 + 2.0;
	float vw0 = (4.0 - 3.0 * t);
	float vw1 = 7.0;
	float vw2 = (1.0 + 3.0 * t);
	float v0 = (3.0 - 2.0 * t) / vw0 - 2.0;
	float v1 = (3.0 + t) / vw1;
	float v2 = t / vw2 + 2.0;
	float sum = 0.0;
	u0 = u0 * shadowMapSizeInv + base_uv.x;
	v0 = v0 * shadowMapSizeInv + base_uv.y;
	u1 = u1 * shadowMapSizeInv + base_uv.x;
	v1 = v1 * shadowMapSizeInv + base_uv.y;
	u2 = u2 * shadowMapSizeInv + base_uv.x;
	v2 = v2 * shadowMapSizeInv + base_uv.y;
	sum += uw0 * vw0 * textureShadow(shadowMap, vec3(u0, v0, z));
	sum += uw1 * vw0 * textureShadow(shadowMap, vec3(u1, v0, z));
	sum += uw2 * vw0 * textureShadow(shadowMap, vec3(u2, v0, z));
	sum += uw0 * vw1 * textureShadow(shadowMap, vec3(u0, v1, z));
	sum += uw1 * vw1 * textureShadow(shadowMap, vec3(u1, v1, z));
	sum += uw2 * vw1 * textureShadow(shadowMap, vec3(u2, v1, z));
	sum += uw0 * vw2 * textureShadow(shadowMap, vec3(u0, v2, z));
	sum += uw1 * vw2 * textureShadow(shadowMap, vec3(u1, v2, z));
	sum += uw2 * vw2 * textureShadow(shadowMap, vec3(u2, v2, z));
	sum *= 1.0f / 144.0;
	sum = saturate(sum);
	return sum;
}
float getShadowPCF5x5(SHADOWMAP_ACCEPT(shadowMap), vec3 shadowCoord, vec4 shadowParams) {
	return _getShadowPCF5x5(SHADOWMAP_PASS(shadowMap), shadowCoord, shadowParams.xyz);
}
float getShadowSpotPCF5x5(SHADOWMAP_ACCEPT(shadowMap), vec3 shadowCoord, vec4 shadowParams) {
	return _getShadowPCF5x5(SHADOWMAP_PASS(shadowMap), shadowCoord, shadowParams.xyz);
}
`,VO=`
#define PCSS_SAMPLE_COUNT 16
uniform float pcssDiskSamples[PCSS_SAMPLE_COUNT];
uniform float pcssSphereSamples[PCSS_SAMPLE_COUNT];
vec2 vogelDisk(int sampleIndex, float count, float phi, float r) {
	const float GoldenAngle = 2.4;
	float theta = float(sampleIndex) * GoldenAngle + phi;
	float sine = sin(theta);
	float cosine = cos(theta);
	return vec2(r * cosine, r * sine);
}
vec3 vogelSphere(int sampleIndex, float count, float phi, float r) {
	const float GoldenAngle = 2.4;
	float theta = float(sampleIndex) * GoldenAngle + phi;
	float weight = float(sampleIndex) / count;
	return vec3(cos(theta) * r, weight, sin(theta) * r);
}
float noise(vec2 screenPos) {
	const float PHI = 1.61803398874989484820459;
	return fract(sin(dot(screenPos * PHI, screenPos)) * screenPos.x);
}
float viewSpaceDepth(float depth, mat4 invProjection) {
	float z = depth * 2.0 - 1.0;
	vec4 clipSpace = vec4(0.0, 0.0, z, 1.0);
	vec4 viewSpace = invProjection * clipSpace;
	return viewSpace.z;
}
float PCSSBlockerDistance(TEXTURE_ACCEPT(shadowMap), vec2 sampleCoords[PCSS_SAMPLE_COUNT], vec2 shadowCoords, vec2 searchSize, float z, vec4 cameraParams) {
	float blockers = 0.0;
	float averageBlocker = 0.0;
	for (int i = 0; i < PCSS_SAMPLE_COUNT; i++) {
		vec2 offset = sampleCoords[i] * searchSize;
		vec2 sampleUV = shadowCoords + offset;
		float blocker = texture2DLod(shadowMap, sampleUV, 0.0).r;
		float isBlocking = step(blocker, z);
		blockers += isBlocking;
		averageBlocker += blocker * isBlocking;
	}
	if (blockers > 0.0)
		return averageBlocker / blockers;
	return -1.0;
}
float PCSS(TEXTURE_ACCEPT(shadowMap), vec3 shadowCoords, vec4 cameraParams, vec2 shadowSearchArea) {
	float receiverDepth = linearizeDepthWithParams(shadowCoords.z, cameraParams);
	vec2 samplePoints[PCSS_SAMPLE_COUNT];
	const float PI = 3.141592653589793;
	float noise = noise( gl_FragCoord.xy ) * 2.0 * PI;
	for (int i = 0; i < PCSS_SAMPLE_COUNT; i++) {
		float pcssPresample = pcssDiskSamples[i];
		samplePoints[i] = vogelDisk(i, float(PCSS_SAMPLE_COUNT), noise, pcssPresample);
	}
	float averageBlocker = PCSSBlockerDistance(TEXTURE_PASS(shadowMap), samplePoints, shadowCoords.xy, shadowSearchArea, receiverDepth, cameraParams);
	if (averageBlocker == -1.0) {
		return 1.0;
	} else {
		float depthDifference = (receiverDepth - averageBlocker) / 3.0;
		vec2 filterRadius = depthDifference * shadowSearchArea;
		float shadow = 0.0;
		for (int i = 0; i < PCSS_SAMPLE_COUNT; i ++)
		{
			vec2 sampleUV = samplePoints[i] * filterRadius;
			sampleUV = shadowCoords.xy + sampleUV;
			float depth = texture2DLod(shadowMap, sampleUV, 0.0).r;
			shadow += step(receiverDepth, depth);
		}
		return shadow / float(PCSS_SAMPLE_COUNT);
	} 
}
#ifndef WEBGPU
float PCSSCubeBlockerDistance(samplerCube shadowMap, vec3 lightDirNorm, vec3 samplePoints[PCSS_SAMPLE_COUNT], float z, float shadowSearchArea) {
	float blockers = 0.0;
	float averageBlocker = 0.0;
	for (int i = 0; i < PCSS_SAMPLE_COUNT; i++) {
		vec3 sampleDir = lightDirNorm + samplePoints[i] * shadowSearchArea;
		sampleDir = normalize(sampleDir);
		float blocker = textureCubeLod(shadowMap, sampleDir, 0.0).r;
		float isBlocking = step(blocker, z);
		blockers += isBlocking;
		averageBlocker += blocker * isBlocking;
	}
	if (blockers > 0.0)
		return averageBlocker / blockers;
	return -1.0;
}
float PCSSCube(samplerCube shadowMap, vec4 shadowParams, vec3 shadowCoords, vec4 cameraParams, float shadowSearchArea, vec3 lightDir) {
	
	vec3 samplePoints[PCSS_SAMPLE_COUNT];
	const float PI = 3.141592653589793;
	float noise = noise( gl_FragCoord.xy ) * 2.0 * PI;
	for (int i = 0; i < PCSS_SAMPLE_COUNT; i++) {
		float r = pcssSphereSamples[i];
		samplePoints[i] = vogelSphere(i, float(PCSS_SAMPLE_COUNT), noise, r);
	}
	float receiverDepth = length(lightDir) * shadowParams.w + shadowParams.z;
	vec3 lightDirNorm = normalize(lightDir);
	
	float averageBlocker = PCSSCubeBlockerDistance(shadowMap, lightDirNorm, samplePoints, receiverDepth, shadowSearchArea);
	if (averageBlocker == -1.0) {
		return 1.0;
	} else {
		float filterRadius = ((receiverDepth - averageBlocker) / averageBlocker) * shadowSearchArea;
		float shadow = 0.0;
		for (int i = 0; i < PCSS_SAMPLE_COUNT; i++)
		{
			vec3 offset = samplePoints[i] * filterRadius;
			vec3 sampleDir = lightDirNorm + offset;
			sampleDir = normalize(sampleDir);
			float depth = textureCubeLod(shadowMap, sampleDir, 0.0).r;
			shadow += step(receiverDepth, depth);
		}
		return shadow / float(PCSS_SAMPLE_COUNT);
	}
}
float getShadowOmniPCSS(samplerCube shadowMap, vec3 shadowCoord, vec4 shadowParams, vec4 cameraParams, vec2 shadowSearchArea, vec3 lightDir) {
	return PCSSCube(shadowMap, shadowParams, shadowCoord, cameraParams, shadowSearchArea.x, lightDir);
}
#endif
float getShadowSpotPCSS(TEXTURE_ACCEPT(shadowMap), vec3 shadowCoord, vec4 shadowParams, vec4 cameraParams, vec2 shadowSearchArea, vec3 lightDir) {
	return PCSS(TEXTURE_PASS(shadowMap), shadowCoord, cameraParams, shadowSearchArea);
}
`,zO=`
highp float fractSinRand(const in vec2 uv) {
	const float PI = 3.141592653589793;
	const highp float a = 12.9898, b = 78.233, c = 43758.5453;
	highp float dt = dot(uv.xy, vec2(a, b)), sn = mod(dt, PI);
	return fract(sin(sn) * c);
}
struct VogelDiskData {
	float invNumSamples;
	float initialAngle;
	float currentPointId;
};
void prepareDiskConstants(out VogelDiskData data, int sampleCount, float randomSeed) {
	const float pi2 = 6.28318530718;
	data.invNumSamples = 1.0 / float(sampleCount);
	data.initialAngle = randomSeed * pi2;
	data.currentPointId = 0.0;
}
vec2 generateDiskSample(inout VogelDiskData data) {
	const float GOLDEN_ANGLE = 2.399963;
	float r = sqrt((data.currentPointId + 0.5) * data.invNumSamples);
	float theta = data.currentPointId * GOLDEN_ANGLE + data.initialAngle;
	vec2 offset = vec2(cos(theta), sin(theta)) * pow(r, 1.33);
	data.currentPointId += 1.0;
	return offset;
}
void PCSSFindBlocker(TEXTURE_ACCEPT(shadowMap), out float avgBlockerDepth, out int numBlockers,
	vec2 shadowCoords, float z, int shadowBlockerSamples, float penumbraSize, float invShadowMapSize, float randomSeed) {
	VogelDiskData diskData;
	prepareDiskConstants(diskData, shadowBlockerSamples, randomSeed);
	float searchWidth = penumbraSize * invShadowMapSize;
	float blockerSum = 0.0;
	numBlockers = 0;
	for( int i = 0; i < shadowBlockerSamples; ++i ) {
		vec2 diskUV = generateDiskSample(diskData);
		vec2 sampleUV = shadowCoords + diskUV * searchWidth;
		float shadowMapDepth = texture2DLod(shadowMap, sampleUV, 0.0).r;
		if ( shadowMapDepth < z ) {
			blockerSum += shadowMapDepth;
			numBlockers++;
		}
	}
	avgBlockerDepth = blockerSum / float(numBlockers);
}
float PCSSFilter(TEXTURE_ACCEPT(shadowMap), vec2 uv, float receiverDepth, int shadowSamples, float filterRadius, float randomSeed) {
	VogelDiskData diskData;
	prepareDiskConstants(diskData, shadowSamples, randomSeed);
	float sum = 0.0;
	for (int i = 0; i < shadowSamples; i++) {
		vec2 offsetUV = generateDiskSample(diskData) * filterRadius;
		float depth = texture2DLod(shadowMap, uv + offsetUV, 0.0).r;
		sum += step(receiverDepth, depth);
	}
	return sum / float(shadowSamples);
}
float getPenumbra(float dblocker, float dreceiver, float penumbraSize, float penumbraFalloff) {
	float dist = dreceiver - dblocker;
	float penumbra = 1.0 - pow(1.0 - dist, penumbraFalloff);
	return penumbra * penumbraSize;
}
float PCSSDirectional(TEXTURE_ACCEPT(shadowMap), vec3 shadowCoords, vec4 cameraParams, vec4 softShadowParams) {
	float receiverDepth = shadowCoords.z;
	float randomSeed = fractSinRand(gl_FragCoord.xy);
	int shadowSamples = int(softShadowParams.x);
	int shadowBlockerSamples = int(softShadowParams.y);
	float penumbraSize = softShadowParams.z;
	float penumbraFalloff = softShadowParams.w;
	int shadowMapSize = textureSize(shadowMap, 0).x;
	float invShadowMapSize = 1.0 / float(shadowMapSize);
	invShadowMapSize *= float(shadowMapSize) / 2048.0;
	float penumbra;
	if (shadowBlockerSamples > 0) {
		float avgBlockerDepth = 0.0;
		int numBlockers = 0;
		PCSSFindBlocker(TEXTURE_PASS(shadowMap), avgBlockerDepth, numBlockers, shadowCoords.xy, receiverDepth, shadowBlockerSamples, penumbraSize, invShadowMapSize, randomSeed);
		if (numBlockers < 1)
			return 1.0f;
		penumbra = getPenumbra(avgBlockerDepth, shadowCoords.z, penumbraSize, penumbraFalloff);
	} else {
		penumbra = penumbraSize;
	}
	float filterRadius = penumbra * invShadowMapSize;
	return PCSSFilter(TEXTURE_PASS(shadowMap), shadowCoords.xy, receiverDepth, shadowSamples, filterRadius, randomSeed);
}
float getShadowPCSS(TEXTURE_ACCEPT(shadowMap), vec3 shadowCoord, vec4 shadowParams, vec4 cameraParams, vec4 softShadowParams, vec3 lightDir) {
	return PCSSDirectional(TEXTURE_PASS(shadowMap), shadowCoord, cameraParams, softShadowParams);
}
`,HO=`
attribute float vertex_boneIndices;
uniform highp sampler2D texture_poseMap;
mat4 getBoneMatrix(const in float indexFloat) {
	int width = textureSize(texture_poseMap, 0).x;
	int index = int(indexFloat + 0.5) * 3;
	int iy = index / width;
	int ix = index % width;
	vec4 v1 = texelFetch(texture_poseMap, ivec2(ix + 0, iy), 0);
	vec4 v2 = texelFetch(texture_poseMap, ivec2(ix + 1, iy), 0);
	vec4 v3 = texelFetch(texture_poseMap, ivec2(ix + 2, iy), 0);
	return mat4(
		v1.x, v2.x, v3.x, 0,
		v1.y, v2.y, v3.y, 0,
		v1.z, v2.z, v3.z, 0,
		v1.w, v2.w, v3.w, 1
	);
}
`,GO=`
attribute vec4 vertex_boneWeights;
attribute vec4 vertex_boneIndices;
uniform highp sampler2D texture_poseMap;
void getBoneMatrix(const in int width, const in int index, out vec4 v1, out vec4 v2, out vec4 v3) {
	int v = index / width;
	int u = index % width;
	v1 = texelFetch(texture_poseMap, ivec2(u + 0, v), 0);
	v2 = texelFetch(texture_poseMap, ivec2(u + 1, v), 0);
	v3 = texelFetch(texture_poseMap, ivec2(u + 2, v), 0);
}
mat4 getSkinMatrix(const in vec4 indicesFloat, const in vec4 weights) {
	int width = textureSize(texture_poseMap, 0).x;
	ivec4 indices = ivec4(indicesFloat + 0.5) * 3;
	vec4 a1, a2, a3;
	getBoneMatrix(width, indices.x, a1, a2, a3);
	vec4 b1, b2, b3;
	getBoneMatrix(width, indices.y, b1, b2, b3);
	vec4 c1, c2, c3;
	getBoneMatrix(width, indices.z, c1, c2, c3);
	vec4 d1, d2, d3;
	getBoneMatrix(width, indices.w, d1, d2, d3);
	vec4 v1 = a1 * weights.x + b1 * weights.y + c1 * weights.z + d1 * weights.w;
	vec4 v2 = a2 * weights.x + b2 * weights.y + c2 * weights.z + d2 * weights.w;
	vec4 v3 = a3 * weights.x + b3 * weights.y + c3 * weights.z + d3 * weights.w;
	float one = dot(weights, vec4(1.0));
	return mat4(
		v1.x, v2.x, v3.x, 0,
		v1.y, v2.y, v3.y, 0,
		v1.z, v2.z, v3.z, 0,
		v1.w, v2.w, v3.w, one
	);
}
`,WO=`
	#define LIT_SKYBOX_INTENSITY
	#include "envProcPS"
	#include "gammaPS"
	#include "tonemappingPS"
	#ifdef PREPASS_PASS
		varying float vLinearDepth;
		#include "floatAsUintPS"
	#endif
	varying vec3 vViewDir;
	uniform float skyboxHighlightMultiplier;
	#ifdef SKY_CUBEMAP
		uniform samplerCube texture_cubeMap;
		#ifdef SKYMESH
			varying vec3 vWorldPos;
			uniform mat3 cubeMapRotationMatrix;
			uniform vec3 projectedSkydomeCenter;
		#endif
	#else
		#include "sphericalPS"
		#include "envAtlasPS"
		uniform sampler2D texture_envAtlas;
		uniform float mipLevel;
	#endif
	void main(void) {
		#ifdef PREPASS_PASS
			gl_FragColor = float2vec4(vLinearDepth);
		#else
			#ifdef SKY_CUBEMAP
				#ifdef SKYMESH
					vec3 envDir = normalize(vWorldPos - projectedSkydomeCenter);
					vec3 dir = envDir * cubeMapRotationMatrix;
				#else
					vec3 dir = vViewDir;
				#endif
				dir.x *= -1.0;
				vec3 linear = {SKYBOX_DECODE_FNC}(textureCube(texture_cubeMap, dir));
			#else
				vec3 dir = vViewDir * vec3(-1.0, 1.0, 1.0);
				vec2 uv = toSphericalUv(normalize(dir));
				vec3 linear = {SKYBOX_DECODE_FNC}(texture2D(texture_envAtlas, mapRoughnessUv(uv, mipLevel)));
			#endif
			if (any(greaterThanEqual(linear, vec3(64.0)))) {
				linear *= skyboxHighlightMultiplier;
			}
			gl_FragColor = vec4(gammaCorrectOutput(toneMap(processEnvironment(linear))), 1.0);
		#endif
	}
`,$O=`
attribute vec4 aPosition;
uniform mat4 matrix_view;
uniform mat4 matrix_projectionSkybox;
uniform mat3 cubeMapRotationMatrix;
varying vec3 vViewDir;
#ifdef PREPASS_PASS
	varying float vLinearDepth;
#endif
#ifdef SKYMESH
	uniform mat4 matrix_model;
	varying vec3 vWorldPos;
#endif
void main(void) {
	mat4 view = matrix_view;
	#ifdef SKYMESH
		vec4 worldPos = matrix_model * aPosition;
		vWorldPos = worldPos.xyz;
		gl_Position = matrix_projectionSkybox * (view * worldPos);
		#ifdef PREPASS_PASS
			vLinearDepth = -(matrix_view * vec4(vWorldPos, 1.0)).z;
		#endif
	#else
		view[3][0] = view[3][1] = view[3][2] = 0.0;
		gl_Position = matrix_projectionSkybox * (view * aPosition);
		vViewDir = aPosition.xyz * cubeMapRotationMatrix;
		#ifdef PREPASS_PASS
			vLinearDepth = -gl_Position.w;
		#endif
	#endif
	gl_Position.z = gl_Position.w - 1.0e-7;
}
`,XO=`
#ifdef STD_SPECULAR_CONSTANT
uniform vec3 material_specular;
#endif
void getSpecularity() {
	vec3 specularColor = vec3(1,1,1);
	#ifdef STD_SPECULAR_CONSTANT
	specularColor *= material_specular;
	#endif
	#ifdef STD_SPECULAR_TEXTURE
	specularColor *= {STD_SPECULAR_TEXTURE_DECODE}(texture2DBias({STD_SPECULAR_TEXTURE_NAME}, {STD_SPECULAR_TEXTURE_UV}, textureBias)).{STD_SPECULAR_TEXTURE_CHANNEL};
	#endif
	#ifdef STD_SPECULAR_VERTEX
	specularColor *= saturate(vVertexColor.{STD_SPECULAR_VERTEX_CHANNEL});
	#endif
	dSpecularity = specularColor;
}
`,qO=`
vec2 toSpherical(vec3 dir) {
	return vec2(dir.xz == vec2(0.0) ? 0.0 : atan(dir.x, dir.z), asin(dir.y));
}
vec2 toSphericalUv(vec3 dir) {
	const float PI = 3.141592653589793;
	vec2 uv = toSpherical(dir) / vec2(PI * 2.0, PI) + 0.5;
	return vec2(uv.x, 1.0 - uv.y);
}
`,YO=`
#ifdef STD_SPECULARITYFACTOR_CONSTANT
uniform float material_specularityFactor;
#endif
void getSpecularityFactor() {
	float specularityFactor = 1.0;
	#ifdef STD_SPECULARITYFACTOR_CONSTANT
	specularityFactor *= material_specularityFactor;
	#endif
	#ifdef STD_SPECULARITYFACTOR_TEXTURE
	specularityFactor *= texture2DBias({STD_SPECULARITYFACTOR_TEXTURE_NAME}, {STD_SPECULARITYFACTOR_TEXTURE_UV}, textureBias).{STD_SPECULARITYFACTOR_TEXTURE_CHANNEL};
	#endif
	#ifdef STD_SPECULARITYFACTOR_VERTEX
	specularityFactor *= saturate(vVertexColor.{STD_SPECULARITYFACTOR_VERTEX_CHANNEL});
	#endif
	dSpecularityFactor = specularityFactor;
}
`,jO=`
float getSpotEffect(vec3 lightSpotDir, float lightInnerConeAngle, float lightOuterConeAngle, vec3 lightDirNorm) {
	float cosAngle = dot(lightDirNorm, lightSpotDir);
	return smoothstep(lightOuterConeAngle, lightInnerConeAngle, cosAngle);
}
`,KO=`
	nineSlicedUv = vec2(vUv0.x, 1.0 - vUv0.y);
`,ZO=`
	vec2 tileMask = step(vMask, vec2(0.99999));
	vec2 tileSize = 0.5 * (innerOffset.xy + innerOffset.zw);
	vec2 tileScale = vec2(1.0) / (vec2(1.0) - tileSize);
	vec2 clampedUv = mix(innerOffset.xy * 0.5, vec2(1.0) - innerOffset.zw * 0.5, fract((vTiledUv - tileSize) * tileScale));
	clampedUv = clampedUv * atlasRect.zw + atlasRect.xy;
	nineSlicedUv = vUv0 * tileMask + clampedUv * (vec2(1.0) - tileMask);
	nineSlicedUv.y = 1.0 - nineSlicedUv.y;
	
`,QO=`
	float dAlpha = 1.0;
	#if LIT_BLEND_TYPE != NONE || defined(LIT_ALPHA_TEST) || defined(LIT_ALPHA_TO_COVERAGE) || STD_OPACITY_DITHER != NONE
		#ifdef STD_OPACITY_TEXTURE_ALLOCATE
			uniform sampler2D texture_opacityMap;
		#endif
	#endif
	#ifdef FORWARD_PASS
		vec3 dAlbedo;
		vec3 dNormalW;
		vec3 dSpecularity = vec3(0.0);
		float dGlossiness = 0.0;
		#ifdef LIT_REFRACTION
			float dTransmission;
			float dThickness;
		#endif
		#ifdef LIT_SCENE_COLOR
			uniform sampler2D uSceneColorMap;
		#endif
		#ifdef LIT_SCREEN_SIZE
			uniform vec4 uScreenSize;
		#endif
		#ifdef LIT_TRANSFORMS
			uniform mat4 matrix_viewProjection;
			uniform mat4 matrix_model;
		#endif
		#ifdef STD_HEIGHT_MAP
			vec2 dUvOffset;
			#ifdef STD_HEIGHT_TEXTURE_ALLOCATE
				uniform sampler2D texture_heightMap;
			#endif
		#endif
		#ifdef STD_DIFFUSE_TEXTURE_ALLOCATE
			uniform sampler2D texture_diffuseMap;
		#endif
		#ifdef STD_DIFFUSEDETAIL_TEXTURE_ALLOCATE
			uniform sampler2D texture_diffuseDetailMap;
		#endif
		#ifdef STD_NORMAL_TEXTURE_ALLOCATE
			uniform sampler2D texture_normalMap;
		#endif
		#ifdef STD_NORMALDETAIL_TEXTURE_ALLOCATE
			uniform sampler2D texture_normalDetailMap;
		#endif
		#ifdef STD_THICKNESS_TEXTURE_ALLOCATE
			uniform sampler2D texture_thicknessMap;
		#endif
		#ifdef STD_REFRACTION_TEXTURE_ALLOCATE
			uniform sampler2D texture_refractionMap;
		#endif
		#ifdef LIT_IRIDESCENCE
			float dIridescence;
			float dIridescenceThickness;
			#ifdef STD_IRIDESCENCE_THICKNESS_TEXTURE_ALLOCATE
				uniform sampler2D texture_iridescenceThicknessMap;
			#endif
			#ifdef STD_IRIDESCENCE_TEXTURE_ALLOCATE
				uniform sampler2D texture_iridescenceMap;
			#endif
		#endif
		#ifdef LIT_CLEARCOAT
			float ccSpecularity;
			float ccGlossiness;
			vec3 ccNormalW;
		#endif
		#ifdef LIT_GGX_SPECULAR
			float dAnisotropy;
			vec2 dAnisotropyRotation;
		#endif
		#ifdef LIT_SPECULAR_OR_REFLECTION
			#ifdef LIT_SHEEN
				vec3 sSpecularity;
				float sGlossiness;
				#ifdef STD_SHEEN_TEXTURE_ALLOCATE
					uniform sampler2D texture_sheenMap;
				#endif
				#ifdef STD_SHEENGLOSS_TEXTURE_ALLOCATE
					uniform sampler2D texture_sheenGlossMap;
				#endif
			#endif
			#ifdef LIT_METALNESS
				float dMetalness;
				float dIor;
				#ifdef STD_METALNESS_TEXTURE_ALLOCATE
					uniform sampler2D texture_metalnessMap;
				#endif
			#endif
			#ifdef LIT_SPECULARITY_FACTOR
				float dSpecularityFactor;
				#ifdef STD_SPECULARITYFACTOR_TEXTURE_ALLOCATE
					uniform sampler2D texture_specularityFactorMap;
				#endif
			#endif
			#ifdef STD_SPECULAR_COLOR
				#ifdef STD_SPECULAR_TEXTURE_ALLOCATE
					uniform sampler2D texture_specularMap;
				#endif
			#endif
			#ifdef STD_GLOSS_TEXTURE_ALLOCATE
				uniform sampler2D texture_glossMap;
			#endif
		#endif
		#ifdef STD_AO
			float dAo;
			#ifdef STD_AO_TEXTURE_ALLOCATE
				uniform sampler2D texture_aoMap;
			#endif
			#ifdef STD_AODETAIL_TEXTURE_ALLOCATE
				uniform sampler2D texture_aoDetailMap;
			#endif
		#endif
		vec3 dEmission;
		#ifdef STD_EMISSIVE_TEXTURE_ALLOCATE
			uniform sampler2D texture_emissiveMap;
		#endif
		#ifdef LIT_CLEARCOAT
			#ifdef STD_CLEARCOAT_TEXTURE_ALLOCATE
				uniform sampler2D texture_clearCoatMap;
			#endif
			#ifdef STD_CLEARCOATGLOSS_TEXTURE_ALLOCATE
				uniform sampler2D texture_clearCoatGlossMap;
			#endif
			#ifdef STD_CLEARCOATNORMAL_TEXTURE_ALLOCATE
				uniform sampler2D texture_clearCoatNormalMap;
			#endif
		#endif
		
		#ifdef LIT_GGX_SPECULAR
			#ifdef STD_ANISOTROPY_TEXTURE_ALLOCATE
				uniform sampler2D texture_anisotropyMap;
			#endif
		#endif
		#if defined(STD_LIGHTMAP) || defined(STD_LIGHT_VERTEX_COLOR)
			vec3 dLightmap;
			#ifdef STD_LIGHT_TEXTURE_ALLOCATE
				uniform sampler2D texture_lightMap;
			#endif
		#endif
	#endif
	#include "litShaderCorePS"
`,JO=`
	#if LIT_BLEND_TYPE != NONE || defined(LIT_ALPHA_TEST) || defined(LIT_ALPHA_TO_COVERAGE) || STD_OPACITY_DITHER != NONE
		#include "opacityPS"
		#if defined(LIT_ALPHA_TEST)
			#include "alphaTestPS"
		#endif
		#if STD_OPACITY_DITHER != NONE
			#include "opacityDitherPS"
		#endif
	#endif
	#ifdef FORWARD_PASS
		#ifdef STD_HEIGHT_MAP
			#include "parallaxPS"
		#endif
		#include  "diffusePS"
		#ifdef LIT_NEEDS_NORMAL
			#include "normalMapPS"
		#endif
		#ifdef LIT_REFRACTION
			#include "transmissionPS"
			#include "thicknessPS"
		#endif
		#ifdef LIT_IRIDESCENCE
			#include "iridescencePS"
			#include "iridescenceThicknessPS"
		#endif
		#ifdef LIT_SPECULAR_OR_REFLECTION
			#ifdef LIT_SHEEN
				#include "sheenPS"
				#include "sheenGlossPS"
			#endif
			#ifdef LIT_METALNESS
				#include "metalnessPS"
				#include "iorPS"
			#endif
			#ifdef LIT_SPECULARITY_FACTOR
				#include "specularityFactorPS"
			#endif
			#ifdef STD_SPECULAR_COLOR
				#include "specularPS"
			#else
				void getSpecularity() { 
					dSpecularity = vec3(1);
				}
			#endif
			#include "glossPS"
		#endif
		#ifdef STD_AO
			#include "aoPS"
		#endif
		#include "emissivePS"
		#ifdef LIT_CLEARCOAT
			#include "clearCoatPS"
			#include "clearCoatGlossPS"
			#include "clearCoatNormalPS"
		#endif
		#if defined(LIT_SPECULAR) && defined(LIT_LIGHTING) && defined(LIT_GGX_SPECULAR)
			#include "anisotropyPS"
		#endif
		#if defined(STD_LIGHTMAP) || defined(STD_LIGHT_VERTEX_COLOR)
			#include "lightmapPS"
		#endif
	#endif
	void evaluateFrontend() {
		#if LIT_BLEND_TYPE != NONE || defined(LIT_ALPHA_TEST) || defined(LIT_ALPHA_TO_COVERAGE) || STD_OPACITY_DITHER != NONE
			getOpacity();
			#if defined(LIT_ALPHA_TEST)
				alphaTest(dAlpha);
			#endif
			#if STD_OPACITY_DITHER != NONE
				opacityDither(dAlpha, 0.0);
			#endif
			litArgs_opacity = dAlpha;
		#endif
		#ifdef FORWARD_PASS
			#ifdef STD_HEIGHT_MAP
				getParallax();
			#endif
			getAlbedo();
			litArgs_albedo = dAlbedo;
			#ifdef LIT_NEEDS_NORMAL
				getNormal();
				litArgs_worldNormal = dNormalW;
			#endif
			#ifdef LIT_REFRACTION
				getRefraction();
				litArgs_transmission = dTransmission;
				getThickness();
				litArgs_thickness = dThickness;
				#ifdef LIT_DISPERSION
					litArgs_dispersion = material_dispersion;
				#endif
			#endif
			#ifdef LIT_IRIDESCENCE
				getIridescence();
				getIridescenceThickness();
				litArgs_iridescence_intensity = dIridescence;
				litArgs_iridescence_thickness = dIridescenceThickness;
			#endif
			#ifdef LIT_SPECULAR_OR_REFLECTION
				#ifdef LIT_SHEEN
					getSheen();
					litArgs_sheen_specularity = sSpecularity;
					getSheenGlossiness();
					litArgs_sheen_gloss = sGlossiness;
				#endif
				#ifdef LIT_METALNESS
					getMetalness();
					litArgs_metalness = dMetalness;
					getIor();
					litArgs_ior = dIor;
				#endif
				#ifdef LIT_SPECULARITY_FACTOR
					getSpecularityFactor();
					litArgs_specularityFactor = dSpecularityFactor;
				#endif
				getGlossiness();
				getSpecularity();
				litArgs_specularity = dSpecularity;
				litArgs_gloss = dGlossiness;
			#endif
			#ifdef STD_AO
				getAO();
				litArgs_ao = dAo;
			#endif
			getEmission();
			litArgs_emission = dEmission;
			#ifdef LIT_CLEARCOAT
				getClearCoat();
				getClearCoatGlossiness();
				getClearCoatNormal();
				litArgs_clearcoat_specularity = ccSpecularity;
				litArgs_clearcoat_gloss = ccGlossiness;
				litArgs_clearcoat_worldNormal = ccNormalW;
			#endif
			#if defined(LIT_SPECULAR) && defined(LIT_LIGHTING) && defined(LIT_GGX_SPECULAR)
				getAnisotropy();
			#endif
			#if defined(STD_LIGHTMAP) || defined(STD_LIGHT_VERTEX_COLOR)
				getLightMap();
				litArgs_lightmap = dLightmap;
				#ifdef STD_LIGHTMAP_DIR
					litArgs_lightmapDir = dLightmapDir;
				#endif
			#endif
		#endif
	}
`,eN=`
#ifdef LIT_TANGENTS
	#define TBN_TANGENTS
#else
	#if defined(LIT_USE_NORMALS) || defined(LIT_USE_CLEARCOAT_NORMALS)
		#define TBN_DERIVATIVES
	#endif
#endif
#if defined(TBN_DERIVATIVES)
	uniform float tbnBasis;
#endif
void getTBN(vec3 tangent, vec3 binormal, vec3 normal) {
	#ifdef TBN_TANGENTS
		dTBN = mat3(normalize(tangent), normalize(binormal), normalize(normal));
	#elif defined(TBN_DERIVATIVES)
		vec2 uv = {lightingUv};
		vec3 dp1 = dFdx( vPositionW );
		vec3 dp2 = dFdy( vPositionW );
		vec2 duv1 = dFdx( uv );
		vec2 duv2 = dFdy( uv );
		vec3 dp2perp = cross( dp2, normal );
		vec3 dp1perp = cross( normal, dp1 );
		vec3 T = dp2perp * duv1.x + dp1perp * duv2.x;
		vec3 B = dp2perp * duv1.y + dp1perp * duv2.y;
		float denom = max( dot(T,T), dot(B,B) );
		float invmax = (denom == 0.0) ? 0.0 : tbnBasis / sqrt( denom );
		dTBN = mat3(T * invmax, -B * invmax, normal );
	#else
		vec3 B = cross(normal, vObjectSpaceUpW);
		vec3 T = cross(normal, B);
		if (dot(B,B)==0.0)
		{
			float major=max(max(normal.x, normal.y), normal.z);
			if (normal.x == major)
			{
				B = cross(normal, vec3(0,1,0));
				T = cross(normal, B);
			}
			else if (normal.y == major)
			{
				B = cross(normal, vec3(0,0,1));
				T = cross(normal, B);
			}
			else if (normal.z == major)
			{
				B = cross(normal, vec3(1,0,0));
				T = cross(normal, B);
			}
		}
		dTBN = mat3(normalize(T), normalize(B), normalize(normal));
	#endif
}
`,tN=`
#ifdef STD_THICKNESS_CONSTANT
uniform float material_thickness;
#endif
void getThickness() {
	dThickness = 1.0;
	#ifdef STD_THICKNESS_CONSTANT
	dThickness *= material_thickness;
	#endif
	#ifdef STD_THICKNESS_TEXTURE
	dThickness *= texture2DBias({STD_THICKNESS_TEXTURE_NAME}, {STD_THICKNESS_TEXTURE_UV}, textureBias).{STD_THICKNESS_TEXTURE_CHANNEL};
	#endif
	#ifdef STD_THICKNESS_VERTEX
	dThickness *= saturate(vVertexColor.{STD_THICKNESS_VERTEX_CHANNEL});
	#endif
}
`,sN=`
#if (TONEMAP == NONE)
	#include "tonemappingNonePS"
#elif TONEMAP == FILMIC
	#include "tonemappingFilmicPS"
#elif TONEMAP == LINEAR
	#include "tonemappingLinearPS"
#elif TONEMAP == HEJL
	#include "tonemappingHejlPS"
#elif TONEMAP == ACES
	#include "tonemappingAcesPS"
#elif TONEMAP == ACES2
	#include "tonemappingAces2PS"
#elif TONEMAP == NEUTRAL
	#include "tonemappingNeutralPS"
#endif
`,iN=`
uniform float exposure;
vec3 toneMap(vec3 color) {
	float tA = 2.51;
	float tB = 0.03;
	float tC = 2.43;
	float tD = 0.59;
	float tE = 0.14;
	vec3 x = color * exposure;
	return (x*(tA*x+tB))/(x*(tC*x+tD)+tE);
}
`,rN=`
uniform float exposure;
const mat3 ACESInputMat = mat3(
	0.59719, 0.35458, 0.04823,
	0.07600, 0.90834, 0.01566,
	0.02840, 0.13383, 0.83777
);
const mat3 ACESOutputMat = mat3(
	 1.60475, -0.53108, -0.07367,
	-0.10208,  1.10813, -0.00605,
	-0.00327, -0.07276,  1.07602
);
vec3 RRTAndODTFit(vec3 v) {
	vec3 a = v * (v + 0.0245786) - 0.000090537;
	vec3 b = v * (0.983729 * v + 0.4329510) + 0.238081;
	return a / b;
}
vec3 toneMap(vec3 color) {
	color *= exposure / 0.6;
	color = color * ACESInputMat;
	color = RRTAndODTFit(color);
	color = color * ACESOutputMat;
	color = clamp(color, 0.0, 1.0);
	return color;
}
`,aN=`
const float A =  0.15;
const float B =  0.50;
const float C =  0.10;
const float D =  0.20;
const float E =  0.02;
const float F =  0.30;
const float W =  11.2;
uniform float exposure;
vec3 uncharted2Tonemap(vec3 x) {
	 return ((x*(A*x+C*B)+D*E)/(x*(A*x+B)+D*F))-E/F;
}
vec3 toneMap(vec3 color) {
	color = uncharted2Tonemap(color * exposure);
	vec3 whiteScale = 1.0 / uncharted2Tonemap(vec3(W,W,W));
	color = color * whiteScale;
	return color;
}
`,nN=`
uniform float exposure;
vec3 toneMap(vec3 color) {
	color *= exposure;
	const float  A = 0.22, B = 0.3, C = .1, D = 0.2, E = .01, F = 0.3;
	const float Scl = 1.25;
	vec3 h = max( vec3(0.0), color - vec3(0.004) );
	return (h*((Scl*A)*h+Scl*vec3(C*B,C*B,C*B))+Scl*vec3(D*E,D*E,D*E)) / (h*(A*h+vec3(B,B,B))+vec3(D*F,D*F,D*F)) - Scl*vec3(E/F,E/F,E/F);
}
`,oN=`
uniform float exposure;
vec3 toneMap(vec3 color) {
	return color * exposure;
}
`,lN=`
uniform float exposure;
vec3 toneMap(vec3 color) {
	color *= exposure;
	float startCompression = 0.8 - 0.04;
	float desaturation = 0.15;
	float x = min(color.r, min(color.g, color.b));
	float offset = x < 0.08 ? x - 6.25 * x * x : 0.04;
	color -= offset;
	float peak = max(color.r, max(color.g, color.b));
	if (peak < startCompression) return color;
	float d = 1. - startCompression;
	float newPeak = 1. - d * d / (peak + d - startCompression);
	color *= newPeak / peak;
	float g = 1. - 1. / (desaturation * (peak - newPeak) + 1.);
	return mix(color, newPeak * vec3(1, 1, 1), g);
}
`,hN=`
vec3 toneMap(vec3 color) {
	return color;
}
`,cN=`
#ifdef PIXELSNAP
uniform vec4 uScreenSize;
#endif
#ifdef SCREENSPACE
uniform float projectionFlipY;
#endif
vec4 evalWorldPosition(vec3 vertexPosition, mat4 modelMatrix) {
	vec3 localPos = getLocalPosition(vertexPosition);
	#ifdef NINESLICED
		localPos.xz *= outerScale;
		vec2 positiveUnitOffset = clamp(vertexPosition.xz, vec2(0.0), vec2(1.0));
		vec2 negativeUnitOffset = clamp(-vertexPosition.xz, vec2(0.0), vec2(1.0));
		localPos.xz += (-positiveUnitOffset * innerOffset.xy + negativeUnitOffset * innerOffset.zw) * vertex_texCoord0.xy;
		vTiledUv = (localPos.xz - outerScale + innerOffset.xy) * -0.5 + 1.0;
		localPos.xz *= -0.5;
		localPos = localPos.xzy;
	#endif
	vec4 posW = modelMatrix * vec4(localPos, 1.0);
	#ifdef SCREENSPACE
		posW.zw = vec2(0.0, 1.0);
	#endif
	return posW;
}
vec4 getPosition() {
	dModelMatrix = getModelMatrix();
	vec4 posW = evalWorldPosition(vertex_position.xyz, dModelMatrix);
	dPositionW = posW.xyz;
	vec4 screenPos;
	#ifdef UV1LAYOUT
		screenPos = vec4(vertex_texCoord1.xy * 2.0 - 1.0, 0.5, 1);
		#ifdef WEBGPU
			screenPos.y *= -1.0;
		#endif
	#else
		#ifdef SCREENSPACE
			screenPos = posW;
			screenPos.y *= projectionFlipY;
		#else
			screenPos = matrix_viewProjection * posW;
		#endif
		#ifdef PIXELSNAP
			screenPos.xy = (screenPos.xy * 0.5) + 0.5;
			screenPos.xy *= uScreenSize.xy;
			screenPos.xy = floor(screenPos.xy);
			screenPos.xy *= uScreenSize.zw;
			screenPos.xy = (screenPos.xy * 2.0) - 1.0;
		#endif
	#endif
	return screenPos;
}
vec3 getWorldPosition() {
	return dPositionW;
}
`,dN=`
attribute vec4 vertex_position;
uniform mat4 matrix_viewProjection;
uniform mat4 matrix_model;
#ifdef MORPHING
	uniform vec2 morph_tex_params;
	attribute uint morph_vertex_id;
	ivec2 getTextureMorphCoords() {
		ivec2 textureSize = ivec2(morph_tex_params);
		int morphGridV = int(morph_vertex_id) / textureSize.x;
		int morphGridU = int(morph_vertex_id) - (morphGridV * textureSize.x);
		#ifdef WEBGPU
			morphGridV = textureSize.y - morphGridV - 1;
		#endif
		return ivec2(morphGridU, morphGridV);
	}
	#ifdef MORPHING_POSITION
		#ifdef MORPHING_INT
			uniform vec3 aabbSize;
			uniform vec3 aabbMin;
			uniform usampler2D morphPositionTex;
		#else
			uniform highp sampler2D morphPositionTex;
		#endif
	#endif
#endif
#ifdef defined(BATCH)
	#include "skinBatchVS"
	mat4 getModelMatrix() {
		return getBoneMatrix(vertex_boneIndices);
	}
#elif defined(SKIN)
	#include "skinVS"
	mat4 getModelMatrix() {
		return matrix_model * getSkinMatrix(vertex_boneIndices, vertex_boneWeights);
	}
#elif defined(INSTANCING)
	#include "transformInstancingVS"
#else
	mat4 getModelMatrix() {
		return matrix_model;
	}
#endif
vec3 getLocalPosition(vec3 vertexPosition) {
	vec3 localPos = vertexPosition;
	#ifdef MORPHING_POSITION
		ivec2 morphUV = getTextureMorphCoords();
		#ifdef MORPHING_INT
			vec3 morphPos = vec3(texelFetch(morphPositionTex, ivec2(morphUV), 0).xyz) / 65535.0 * aabbSize + aabbMin;
		#else
			vec3 morphPos = texelFetch(morphPositionTex, ivec2(morphUV), 0).xyz;
		#endif
		localPos += morphPos;
	#endif
	return localPos;
}
`,fN=`
attribute vec4 instance_line1;
attribute vec4 instance_line2;
attribute vec4 instance_line3;
attribute vec4 instance_line4;
mat4 getModelMatrix() {
	return matrix_model * mat4(instance_line1, instance_line2, instance_line3, instance_line4);
}
`,uN=`
#ifdef STD_REFRACTION_CONSTANT
uniform float material_refraction;
#endif
void getRefraction() {
	float refraction = 1.0;
	#ifdef STD_REFRACTION_CONSTANT
	refraction = material_refraction;
	#endif
	#ifdef STD_REFRACTION_TEXTURE
	refraction *= texture2DBias({STD_REFRACTION_TEXTURE_NAME}, {STD_REFRACTION_TEXTURE_UV}, textureBias).{STD_REFRACTION_TEXTURE_CHANNEL};
	#endif
	#ifdef STD_REFRACTION_VERTEX
	refraction *= saturate(vVertexColor.{STD_REFRACTION_VERTEX_CHANNEL});
	#endif
	dTransmission = refraction;
}
`,pN=`
uniform float twoSidedLightingNegScaleFactor;
void handleTwoSidedLighting() {
	dTBN[2] *= gl_FrontFacing ? twoSidedLightingNegScaleFactor : -twoSidedLightingNegScaleFactor;
}
`,mN=`
#ifdef NINESLICED
	vec2 getUv0() {
		vec2 uv = vertex_position.xz;
		vec2 positiveUnitOffset = clamp(vertex_position.xz, vec2(0.0), vec2(1.0));
		vec2 negativeUnitOffset = clamp(-vertex_position.xz, vec2(0.0), vec2(1.0));
		uv += (-positiveUnitOffset * innerOffset.xy + negativeUnitOffset * innerOffset.zw) * vertex_texCoord0.xy;
		uv = uv * -0.5 + 0.5;
		uv = uv * atlasRect.zw + atlasRect.xy;
		vMask = vertex_texCoord0.xy;
		return uv;
	}
#else
	vec2 getUv0() {
		return vertex_texCoord0;
	}
#endif
`,_N=`
vec2 getUv1() {
	return vertex_texCoord1;
}
`,gN=`
vUV{TRANSFORM_UV_{i}}_{TRANSFORM_ID_{i}} = vec2(
	dot(vec3(uv{TRANSFORM_UV_{i}}, 1), {TRANSFORM_NAME_{i}}0),
	dot(vec3(uv{TRANSFORM_UV_{i}}, 1), {TRANSFORM_NAME_{i}}1)
);
`,vN=`
	uniform vec3 {TRANSFORM_NAME_{i}}0;
	uniform vec3 {TRANSFORM_NAME_{i}}1;
`,SN=`
void getViewDir() {
	dViewDirW = normalize(view_position - vPositionW);
}
`;const yN={alphaTestPS:v2,ambientPS:S2,anisotropyPS:y2,aoPS:T2,aoDiffuseOccPS:x2,aoSpecOccPS:E2,bakeDirLmEndPS:A2,bakeLmEndPS:b2,basePS:w2,baseNineSlicedPS:C2,baseNineSlicedTiledPS:P2,bayerPS:L2,blurVSMPS:I2,clearCoatPS:M2,clearCoatGlossPS:D2,clearCoatNormalPS:R2,clusteredLightCookiesPS:N2,clusteredLightShadowsPS:F2,clusteredLightUtilsPS:O2,clusteredLightPS:k2,combinePS:U2,cookieBlit2DPS:B2,cookieBlitCubePS:V2,cookieBlitVS:z2,cookiePS:H2,cubeMapProjectPS:G2,cubeMapRotatePS:W2,debugOutputPS:$2,debugProcessFrontendPS:X2,detailModesPS:Y2,diffusePS:j2,decodePS:q2,emissivePS:K2,encodePS:Z2,endPS:Q2,envAtlasPS:J2,envProcPS:e3,falloffInvSquaredPS:t3,falloffLinearPS:s3,floatAsUintPS:i3,fogPS:r3,fresnelSchlickPS:a3,frontendCodePS:"",frontendDeclPS:"",fullscreenQuadVS:n3,gammaPS:o3,gles3PS:HT,gles3VS:GT,glossPS:l3,gsplatCenterVS:h3,gsplatCornerVS:S3,gsplatColorVS:c3,gsplatCommonVS:d3,gsplatCompressedDataVS:f3,gsplatCompressedSHVS:u3,gsplatEvalSHVS:p3,gsplatQuatToMat3VS:m3,gsplatSogsColorVS:_3,gsplatSogsDataVS:g3,gsplatSogsSHVS:v3,gsplatDataVS:y3,gsplatOutputVS:T3,gsplatPS:x3,gsplatSHVS:E3,gsplatSourceVS:A3,gsplatVS:b3,quadVS:w3,immediateLinePS:C3,immediateLineVS:P3,iridescenceDiffractionPS:L3,iridescencePS:I3,iridescenceThicknessPS:M3,iorPS:D3,lightDeclarationPS:R3,lightDiffuseLambertPS:O3,lightDirPointPS:N3,lightEvaluationPS:F3,lightFunctionLightPS:k3,lightFunctionShadowPS:U3,lightingPS:B3,lightmapAddPS:V3,lightmapPS:z3,lightSpecularAnisoGGXPS:H3,lightSpecularBlinnPS:G3,lightSheenPS:W3,linearizeDepthPS:$3,litForwardBackendPS:X3,litForwardDeclarationPS:q3,litForwardMainPS:Y3,litForwardPostCodePS:j3,litForwardPreCodePS:K3,litMainPS:Z3,litMainVS:Q3,litOtherMainPS:J3,litShaderArgsPS:eO,litShaderCorePS:tO,litShadowMainPS:sO,litUserDeclarationPS:"",litUserDeclarationVS:"",litUserCodePS:"",litUserCodeVS:"",litUserMainStartPS:"",litUserMainStartVS:"",litUserMainEndPS:"",litUserMainEndVS:"",ltcPS:iO,metalnessPS:rO,metalnessModulatePS:nO,morphPS:oO,morphVS:lO,msdfPS:aO,msdfVS:hO,normalVS:cO,normalCoreVS:dO,normalMapPS:fO,opacityPS:uO,opacityDitherPS:pO,outputPS:mO,outputAlphaPS:_O,outputTex2DPS:gO,sheenPS:vO,sheenGlossPS:SO,parallaxPS:yO,pickPS:TO,reflDirPS:xO,reflDirAnisoPS:EO,reflectionCCPS:AO,reflectionCubePS:bO,reflectionEnvHQPS:wO,reflectionEnvPS:CO,reflectionSpherePS:PO,reflectionSheenPS:LO,refractionCubePS:IO,refractionDynamicPS:MO,reprojectPS:DO,reprojectVS:RO,screenDepthPS:OO,shadowCascadesPS:NO,shadowEVSMPS:FO,shadowPCF1PS:kO,shadowPCF3PS:UO,shadowPCF5PS:BO,shadowPCSSPS:VO,shadowSoftPS:zO,skinBatchVS:HO,skinVS:GO,skyboxPS:WO,skyboxVS:$O,specularPS:XO,sphericalPS:qO,specularityFactorPS:YO,spotPS:jO,startNineSlicedPS:KO,startNineSlicedTiledPS:ZO,stdDeclarationPS:QO,stdFrontEndPS:JO,TBNPS:eN,thicknessPS:tN,tonemappingPS:sN,tonemappingAcesPS:iN,tonemappingAces2PS:rN,tonemappingFilmicPS:aN,tonemappingHejlPS:nN,tonemappingLinearPS:oN,tonemappingNeutralPS:lN,tonemappingNonePS:hN,transformVS:cN,transformCoreVS:dN,transformInstancingVS:fN,transmissionPS:uN,twoSidedLightingPS:pN,uv0VS:mN,uv1VS:_N,uvTransformVS:gN,uvTransformUniformsPS:vN,viewDirPS:SN,webgpuPS:WT,webgpuVS:$T};var TN=`
uniform alpha_ref: f32;
fn alphaTest(a: f32) {
	if (a < uniform.alpha_ref) {
		discard;
	}
}
`,xN=`
#if LIT_AMBIENT_SOURCE == AMBIENTSH
	uniform ambientSH: array<vec3f, 9>;
#endif
#if LIT_AMBIENT_SOURCE == ENVALATLAS
	#include "envAtlasPS"
	#ifndef ENV_ATLAS
		#define ENV_ATLAS
		var texture_envAtlas: texture_2d<f32>;
		var texture_envAtlasSampler: sampler;
	#endif
#endif
fn addAmbient(worldNormal: vec3f) {
	#ifdef LIT_AMBIENT_SOURCE == AMBIENTSH
		let n: vec3f = cubeMapRotate(worldNormal);
		let color: vec3f =
			uniform.ambientSH[0] +
			uniform.ambientSH[1] * n.x +
			uniform.ambientSH[2] * n.y +
			uniform.ambientSH[3] * n.z +
			uniform.ambientSH[4] * n.x * n.z +
			uniform.ambientSH[5] * n.z * n.y +
			uniform.ambientSH[6] * n.y * n.x +
			uniform.ambientSH[7] * (3.0 * n.z * n.z - 1.0) +
			uniform.ambientSH[8] * (n.x * n.x - n.y * n.y);
		dDiffuseLight += processEnvironment(max(color, vec3f(0.0)));
	#endif
	#if LIT_AMBIENT_SOURCE == ENVALATLAS
		let dir: vec3f = normalize(cubeMapRotate(worldNormal) * vec3f(-1.0, 1.0, 1.0));
		let uv: vec2f = mapUv(toSphericalUv(dir), vec4f(128.0, 256.0 + 128.0, 64.0, 32.0) / atlasSize);
		let raw: vec4f = textureSample(texture_envAtlas, texture_envAtlasSampler, uv);
		let linear: vec3f = {ambientDecode}(raw);
		dDiffuseLight += processEnvironment(linear);
	#endif
	#if LIT_AMBIENT_SOURCE == CONSTANT
		dDiffuseLight += uniform.light_globalAmbient;
	#endif
}
`,EN=`
#ifdef LIT_GGX_SPECULAR
	uniform material_anisotropyIntensity: f32;
	uniform material_anisotropyRotation: vec2f;
#endif
fn getAnisotropy() {
	dAnisotropy = 0.0;
	dAnisotropyRotation = vec2f(1.0, 0.0);
#ifdef LIT_GGX_SPECULAR
	dAnisotropy = uniform.material_anisotropyIntensity;
	dAnisotropyRotation = uniform.material_anisotropyRotation;
#endif
#ifdef STD_ANISOTROPY_TEXTURE
	let anisotropyTex: vec3f = textureSampleBias({STD_ANISOTROPY_TEXTURE_NAME}, {STD_ANISOTROPY_TEXTURE_NAME}Sampler, {STD_ANISOTROPY_TEXTURE_UV}, uniform.textureBias).rgb;
	dAnisotropy *= anisotropyTex.b;
	let anisotropyRotationFromTex: vec2f = anisotropyTex.rg * 2.0 - vec2f(1.0);
	let rotationMatrix: mat2x2f = mat2x2f(dAnisotropyRotation.x, dAnisotropyRotation.y, -dAnisotropyRotation.y, dAnisotropyRotation.x);
	dAnisotropyRotation = rotationMatrix * anisotropyRotationFromTex;
#endif
	dAnisotropy = clamp(dAnisotropy, 0.0, 1.0);
}
`,AN=`
#if defined(STD_AO_TEXTURE) || defined(STD_AO_VERTEX)
	uniform material_aoIntensity: f32;
#endif
#ifdef STD_AODETAIL_TEXTURE
	#include "detailModesPS"
#endif
fn getAO() {
	dAo = 1.0;
	#ifdef STD_AO_TEXTURE
		var aoBase: f32 = textureSampleBias({STD_AO_TEXTURE_NAME}, {STD_AO_TEXTURE_NAME}Sampler, {STD_AO_TEXTURE_UV}, uniform.textureBias).{STD_AO_TEXTURE_CHANNEL};
		#ifdef STD_AODETAIL_TEXTURE
			var aoDetail: f32 = textureSampleBias({STD_AODETAIL_TEXTURE_NAME}, {STD_AODETAIL_TEXTURE_NAME}Sampler, {STD_AODETAIL_TEXTURE_UV}, uniform.textureBias).{STD_AODETAIL_TEXTURE_CHANNEL};
			aoBase = detailMode_{STD_AODETAIL_DETAILMODE}(vec3f(aoBase), vec3f(aoDetail)).r;
		#endif
		dAo = dAo * aoBase;
	#endif
	#ifdef STD_AO_VERTEX
		dAo = dAo * saturate(vVertexColor.{STD_AO_VERTEX_CHANNEL});
	#endif
	#if defined(STD_AO_TEXTURE) || defined(STD_AO_VERTEX)
		dAo = mix(1.0, dAo, uniform.material_aoIntensity);
	#endif
}
`,bN=`
fn occludeDiffuse(ao: f32) {
	dDiffuseLight = dDiffuseLight * ao;
}
`,wN=`
#if LIT_OCCLUDE_SPECULAR != NONE
	#ifdef LIT_OCCLUDE_SPECULAR_FLOAT
		uniform material_occludeSpecularIntensity: f32;
	#endif
#endif
fn occludeSpecular(gloss: f32, ao: f32, worldNormal: vec3f, viewDir: vec3f) {
	#if LIT_OCCLUDE_SPECULAR == AO
		#ifdef LIT_OCCLUDE_SPECULAR_FLOAT
			var specOcc: f32 = mix(1.0, ao, uniform.material_occludeSpecularIntensity);
		#else
			var specOcc: f32 = ao;
		#endif
	#endif
	#if LIT_OCCLUDE_SPECULAR == GLOSSDEPENDENT
		var specPow: f32 = exp2(gloss * 11.0);
		var specOcc: f32 = saturate(pow(dot(worldNormal, viewDir) + ao, 0.01 * specPow) - 1.0 + ao);
		#ifdef LIT_OCCLUDE_SPECULAR_FLOAT
			specOcc = mix(1.0, specOcc, uniform.material_occludeSpecularIntensity);
		#endif
	#endif
	#if LIT_OCCLUDE_SPECULAR != NONE
		dSpecularLight = dSpecularLight * specOcc;
		dReflection = dReflection * specOcc;
		#ifdef LIT_SHEEN
			sSpecularLight = sSpecularLight * specOcc;
			sReflection = sReflection * specOcc;
		#endif
	#endif
}
`,CN=`
	let dirLm = textureSample(texture_dirLightMap, texture_dirLightMapSampler, vUv1);
	if (uniform.bakeDir > 0.5) {
		if (dAtten > 0.00001) {
			let unpacked_dir = dirLm.xyz * 2.0 - vec3f(1.0);
			dAtten = clamp(dAtten, 0.0, 1.0);
			let combined_dir = dLightDirNormW.xyz * dAtten + unpacked_dir * dirLm.w;
			let finalRgb = normalize(combined_dir) * 0.5 + vec3f(0.5);
			let finalA = max(dirLm.w + dAtten, 1.0 / 255.0);
			output.color = vec4f(finalRgb, finalA);
		} else {
			output.color = dirLm;
		}
	} else {
		let alpha_min = select(0.0, 1.0 / 255.0, dAtten > 0.00001);
		let finalA = max(dirLm.w, alpha_min);
		output.color = vec4f(dirLm.rgb, finalA);
	}
`,PN=`
#ifdef LIT_LIGHTMAP_BAKING_ADD_AMBIENT
	dDiffuseLight = ((dDiffuseLight - 0.5) * max(uniform.ambientBakeOcclusionContrast + 1.0, 0.0)) + 0.5;
	dDiffuseLight = dDiffuseLight + vec3f(uniform.ambientBakeOcclusionBrightness);
	dDiffuseLight = saturate3(dDiffuseLight);
	dDiffuseLight = dDiffuseLight * dAmbientLight;
#endif
#ifdef LIGHTMAP_RGBM
	var temp_color_rgbm = vec4f(dDiffuseLight, 1.0);
	temp_color_rgbm = vec4f(pow(temp_color_rgbm.rgb, vec3f(0.5)), temp_color_rgbm.a);
	temp_color_rgbm = vec4f(temp_color_rgbm.rgb / 8.0, temp_color_rgbm.a);
	let max_g_b = max(temp_color_rgbm.g, max(temp_color_rgbm.b, 1.0 / 255.0));
	let max_rgb = max(temp_color_rgbm.r, max_g_b);
	temp_color_rgbm.a = clamp(max_rgb, 0.0, 1.0);
	temp_color_rgbm.a = ceil(temp_color_rgbm.a * 255.0) / 255.0;
	temp_color_rgbm = vec4f(temp_color_rgbm.rgb / temp_color_rgbm.a, temp_color_rgbm.a);
	output.color = temp_color_rgbm;
#else
	output.color = vec4f(dDiffuseLight, 1.0);
#endif
`,LN=`
uniform view_position: vec3f;
uniform light_globalAmbient: vec3f;
fn square(x: f32) -> f32 {
	return x*x;
}
fn saturate(x: f32) -> f32 {
	return clamp(x, 0.0, 1.0);
}
fn saturate3(x: vec3f) -> vec3f {
	return clamp(x, vec3f(0.0), vec3f(1.0));
}
`,IN=`
#define NINESLICED
varying vMask: vec2f;
varying vTiledUv: vec2f;
uniform innerOffset: vec4f;
uniform outerScale: vec2f;
uniform atlasRect: vec4f;
var<private> nineSlicedUv: vec2f;
`,MN=`
#define NINESLICED
#define NINESLICETILED
varying vMask: vec2f;
varying vTiledUv: vec2f;
uniform innerOffset: vec4f;
uniform outerScale: vec2f;
uniform atlasRect: vec4f;
var<private> nineSlicedUv: vec2f;
`,DN=`
fn bayer2(p: vec2f) -> f32 {
	return (2.0 * p.y + p.x + 1.0) % 4.0;
}
fn bayer4(p: vec2f) -> f32 {
	let p1: vec2f = p % vec2f(2.0);
	let p2: vec2f = floor(0.5 * (p % vec2f(4.0)));
	return 4.0 * bayer2(p1) + bayer2(p2);
}
fn bayer8(p: vec2f) -> f32 {
	let p1: vec2f = p % vec2f(2.0);
	let p2: vec2f = floor(0.5 * (p % vec2f(4.0)));
	let p4: vec2f = floor(0.25 * (p % vec2f(8.0)));
	return 4.0 * (4.0 * bayer2(p1) + bayer2(p2)) + bayer2(p4);
}
`,RN=`
varying vUv0: vec2f;
var source: texture_2d<f32>;
var sourceSampler: sampler;
#ifdef GAUSS
	uniform weight: array<f32, {SAMPLES}>;
#endif
uniform pixelOffset: vec2f;
@fragment
fn fragmentMain(input: FragmentInput) -> FragmentOutput {
	var output: FragmentOutput;
	var moments: vec3f = vec3f(0.0);
	let uv: vec2f = input.vUv0 - uniform.pixelOffset * (f32({SAMPLES}) * 0.5);
	for (var i: i32 = 0; i < {SAMPLES}; i = i + 1) {
		let c: vec4f = textureSample(source, sourceSampler, uv + uniform.pixelOffset * f32(i));
		#ifdef GAUSS
			moments = moments + c.xyz * uniform.weight[i].element;
		#else
			moments = moments + c.xyz;
		#endif
	}
	#ifndef GAUSS
		moments = moments * (1.0 / f32({SAMPLES}));
	#endif
	output.color = vec4f(moments, 1.0);
	return output;
}
`,ON=`
uniform material_clearCoat: f32;
fn getClearCoat() {
	ccSpecularity = uniform.material_clearCoat;
	#ifdef STD_CLEARCOAT_TEXTURE
	ccSpecularity = ccSpecularity * textureSampleBias({STD_CLEARCOAT_TEXTURE_NAME}, {STD_CLEARCOAT_TEXTURE_NAME}Sampler, {STD_CLEARCOAT_TEXTURE_UV}, uniform.textureBias).{STD_CLEARCOAT_TEXTURE_CHANNEL};
	#endif
	#ifdef STD_CLEARCOAT_VERTEX
	ccSpecularity = ccSpecularity * saturate(vVertexColor.{STD_CLEARCOAT_VERTEX_CHANNEL});
	#endif
}
`,NN=`
	uniform material_clearCoatGloss: f32;
fn getClearCoatGlossiness() {
	ccGlossiness = uniform.material_clearCoatGloss;
	#ifdef STD_CLEARCOATGLOSS_TEXTURE
	ccGlossiness = ccGlossiness * textureSampleBias({STD_CLEARCOATGLOSS_TEXTURE_NAME}, {STD_CLEARCOATGLOSS_TEXTURE_NAME}Sampler, {STD_CLEARCOATGLOSS_TEXTURE_UV}, uniform.textureBias).{STD_CLEARCOATGLOSS_TEXTURE_CHANNEL};
	#endif
	#ifdef STD_CLEARCOATGLOSS_VERTEX
	ccGlossiness = ccGlossiness * saturate(vVertexColor.{STD_CLEARCOATGLOSS_VERTEX_CHANNEL});
	#endif
	#ifdef STD_CLEARCOATGLOSS_INVERT
	ccGlossiness = 1.0 - ccGlossiness;
	#endif
	ccGlossiness += 0.0000001;
}
`,FN=`
#ifdef STD_CLEARCOATNORMAL_TEXTURE
	uniform material_clearCoatBumpiness: f32;
#endif
fn getClearCoatNormal() {
#ifdef STD_CLEARCOATNORMAL_TEXTURE
	var normalMap: vec3f = {STD_CLEARCOATNORMAL_TEXTURE_DECODE}(textureSampleBias({STD_CLEARCOATNORMAL_TEXTURE_NAME}, {STD_CLEARCOATNORMAL_TEXTURE_NAME}Sampler, {STD_CLEARCOATNORMAL_TEXTURE_UV}, uniform.textureBias));
	normalMap = mix(vec3f(0.0, 0.0, 1.0), normalMap, uniform.material_clearCoatBumpiness);
	ccNormalW = normalize(dTBN * normalMap);
#else
	ccNormalW = dVertexNormalW;
#endif
}
`,kN=`
struct FaceCoords {
	uv: vec2f,
	faceIndex: f32,
	tileOffset: vec2f,
}
fn getCubemapFaceCoordinates(dir: vec3f) -> FaceCoords {
	var faceIndex: f32;
	var tileOffset: vec2f;
	var uv: vec2f;
	let vAbs: vec3f = abs(dir);
	var ma: f32;
	if (vAbs.z >= vAbs.x && vAbs.z >= vAbs.y) {
		let is_neg_z = dir.z < 0.0;
		faceIndex = select(4.0, 5.0, is_neg_z);
		ma = 0.5 / vAbs.z;
		uv = vec2f(select(dir.x, -dir.x, is_neg_z), -dir.y);
		tileOffset = vec2f(2.0, select(0.0, 1.0, is_neg_z));
	} else if (vAbs.y >= vAbs.x) {
		let is_neg_y = dir.y < 0.0;
		faceIndex = select(2.0, 3.0, is_neg_y);
		ma = 0.5 / vAbs.y;
		uv = vec2f(dir.x, select(dir.z, -dir.z, is_neg_y));
		tileOffset = vec2f(1.0, select(0.0, 1.0, is_neg_y));
	} else {
		let is_neg_x = dir.x < 0.0;
		faceIndex = select(0.0, 1.0, is_neg_x);
		ma = 0.5 / vAbs.x;
		uv = vec2f(select(-dir.z, dir.z, is_neg_x), -dir.y);
		tileOffset = vec2f(0.0, select(0.0, 1.0, is_neg_x));
	}
	uv = uv * ma + 0.5;
	return FaceCoords(uv, faceIndex, tileOffset);
}
fn getCubemapAtlasCoordinates(omniAtlasViewport: vec3f, shadowEdgePixels: f32, shadowTextureResolution: f32, dir: vec3f) -> vec2f {
	let faceData: FaceCoords = getCubemapFaceCoordinates(dir);
	var uv: vec2f = faceData.uv;
	let tileOffset: vec2f = faceData.tileOffset;
	let atlasFaceSize: f32 = omniAtlasViewport.z;
	let tileSize: f32 = shadowTextureResolution * atlasFaceSize;
	var offset: f32 = shadowEdgePixels / tileSize;
	uv = uv * (1.0 - offset * 2.0) + offset;
	uv = uv * atlasFaceSize;
	uv = uv + tileOffset * atlasFaceSize;
	uv = uv + omniAtlasViewport.xy;
	return uv;
}
`,UN=`
fn _getCookieClustered(tex: texture_2d<f32>, texSampler: sampler, uv: vec2f, intensity: f32, cookieChannel: vec4f) -> vec3f {
	let pixel: vec4f = mix(vec4f(1.0), textureSampleLevel(tex, texSampler, uv, 0.0), intensity);
	let isRgb: bool = dot(cookieChannel.rgb, vec3f(1.0)) == 3.0;
	return select(vec3f(dot(pixel, cookieChannel)), pixel.rgb, isRgb);
}
fn getCookie2DClustered(tex: texture_2d<f32>, texSampler: sampler, transform: mat4x4f, worldPosition: vec3f, intensity: f32, cookieChannel: vec4f) -> vec3f {
	let projPos: vec4f = transform * vec4f(worldPosition, 1.0);
	return _getCookieClustered(tex, texSampler, projPos.xy / projPos.w, intensity, cookieChannel);
}
fn getCookieCubeClustered(tex: texture_2d<f32>, texSampler: sampler, dir: vec3f, intensity: f32, cookieChannel: vec4f, shadowTextureResolution: f32, shadowEdgePixels: f32, omniAtlasViewport: vec3f) -> vec3f {
	let uv: vec2f = getCubemapAtlasCoordinates(omniAtlasViewport, shadowEdgePixels, shadowTextureResolution, dir);
	return _getCookieClustered(tex, texSampler, uv, intensity, cookieChannel);
}
`,BN=`
fn _getShadowCoordPerspZbuffer(shadowMatrix: mat4x4f, shadowParams: vec4f, wPos: vec3f) -> vec3f {
	var projPos = shadowMatrix * vec4f(wPos, 1.0);
	return projPos.xyz / projPos.w;
}
fn getShadowCoordPerspZbufferNormalOffset(shadowMatrix: mat4x4f, shadowParams: vec4f, normal: vec3f) -> vec3f {
	let wPos: vec3f = vPositionW + normal * shadowParams.y;
	return _getShadowCoordPerspZbuffer(shadowMatrix, shadowParams, wPos);
}
fn normalOffsetPointShadow(shadowParams: vec4f, lightPos: vec3f, lightDir: vec3f, lightDirNorm: vec3f, normal: vec3f) -> vec3f {
	let distScale: f32 = length(lightDir);
	let wPos: vec3f = vPositionW + normal * shadowParams.y * clamp(1.0 - dot(normal, -lightDirNorm), 0.0, 1.0) * distScale;
	let dir: vec3f = wPos - lightPos;
	return dir;
}
#if defined(CLUSTER_SHADOW_TYPE_PCF1)
	fn getShadowOmniClusteredPCF1(shadowMap: texture_depth_2d, shadowMapSampler: sampler_comparison, shadowParams: vec4f, omniAtlasViewport: vec3f, shadowEdgePixels: f32, lightDir: vec3f) -> f32 {
		let shadowTextureResolution: f32 = shadowParams.x;
		let uv: vec2f = getCubemapAtlasCoordinates(omniAtlasViewport, shadowEdgePixels, shadowTextureResolution, lightDir);
		let shadowZ: f32 = length(lightDir) * shadowParams.w + shadowParams.z;
		return textureSampleCompareLevel(shadowMap, shadowMapSampler, uv, shadowZ);
	}
#endif
#if defined(CLUSTER_SHADOW_TYPE_PCF3)
	fn getShadowOmniClusteredPCF3(shadowMap: texture_depth_2d, shadowMapSampler: sampler_comparison, shadowParams: vec4f, omniAtlasViewport: vec3f, shadowEdgePixels: f32, lightDir: vec3f) -> f32 {
		let shadowTextureResolution: f32 = shadowParams.x;
		let uv: vec2f = getCubemapAtlasCoordinates(omniAtlasViewport, shadowEdgePixels, shadowTextureResolution, lightDir);
		let shadowZ: f32 = length(lightDir) * shadowParams.w + shadowParams.z;
		let shadowCoord: vec3f = vec3f(uv, shadowZ);
		return getShadowPCF3x3(shadowMap, shadowMapSampler, shadowCoord, shadowParams);
	}
#endif
#if defined(CLUSTER_SHADOW_TYPE_PCF5)
	fn getShadowOmniClusteredPCF5(shadowMap: texture_depth_2d, shadowMapSampler: sampler_comparison, shadowParams: vec4f, omniAtlasViewport: vec3f, shadowEdgePixels: f32, lightDir: vec3f) -> f32 {
		let shadowTextureResolution: f32 = shadowParams.x;
		let uv: vec2f = getCubemapAtlasCoordinates(omniAtlasViewport, shadowEdgePixels, shadowTextureResolution, lightDir);
		let shadowZ: f32 = length(lightDir) * shadowParams.w + shadowParams.z;
		let shadowCoord: vec3f = vec3f(uv, shadowZ);
		return getShadowPCF5x5(shadowMap, shadowMapSampler, shadowCoord, shadowParams);
	}
#endif
#if defined(CLUSTER_SHADOW_TYPE_PCF1)
	fn getShadowSpotClusteredPCF1(shadowMap: texture_depth_2d, shadowMapSampler: sampler_comparison, shadowCoord: vec3f, shadowParams: vec4f) -> f32 {
		return textureSampleCompareLevel(shadowMap, shadowMapSampler, shadowCoord.xy, shadowCoord.z);
	}
#endif
	#if defined(CLUSTER_SHADOW_TYPE_PCF3)
	fn getShadowSpotClusteredPCF3(shadowMap: texture_depth_2d, shadowMapSampler: sampler_comparison, shadowCoord: vec3f, shadowParams: vec4f) -> f32 {
		return getShadowSpotPCF3x3(shadowMap, shadowMapSampler, shadowCoord, shadowParams);
	}
#endif
	#if defined(CLUSTER_SHADOW_TYPE_PCF5)
	fn getShadowSpotClusteredPCF5(shadowMap: texture_depth_2d, shadowMapSampler: sampler_comparison, shadowCoord: vec3f, shadowParams: vec4f) -> f32 {
		return getShadowPCF5x5(shadowMap, shadowMapSampler, shadowCoord, shadowParams);
	}
#endif
`,VN=`
#include "lightBufferDefinesPS"
#include "clusteredLightUtilsPS"
#ifdef CLUSTER_COOKIES
	#include "clusteredLightCookiesPS"
#endif
#ifdef CLUSTER_SHADOWS
	#include "clusteredLightShadowsPS"
#endif
var clusterWorldTexture: texture_2d<f32>;
var lightsTexture: texture_2d<f32>;
#ifdef CLUSTER_SHADOWS
	var shadowAtlasTexture: texture_depth_2d;
	var shadowAtlasTextureSampler: sampler_comparison;
#endif
#ifdef CLUSTER_COOKIES
	var cookieAtlasTexture: texture_2d<f32>;
	var cookieAtlasTextureSampler: sampler;
#endif
uniform clusterMaxCells: i32;
uniform clusterSkip: f32;
uniform clusterCellsCountByBoundsSize: vec3f;
uniform clusterTextureSize: vec3f;
uniform clusterBoundsMin: vec3f;
uniform clusterBoundsDelta: vec3f;
uniform clusterCellsDot: vec3f;
uniform clusterCellsMax: vec3f;
uniform shadowAtlasParams: vec2f;
struct ClusterLightData {
	flags: u32,
	halfWidth: vec3f,
	isSpot: bool,
	halfHeight: vec3f,
	lightIndex: i32,
	position: vec3f,
	shape: u32,
	direction: vec3f,
	falloffModeLinear: bool,
	color: vec3f,
	shadowIntensity: f32,
	omniAtlasViewport: vec3f,
	range: f32,
	cookieChannelMask: vec4f,
	biasesData: f32,
	shadowBias: f32,
	shadowNormalBias: f32,
	anglesData: f32,
	innerConeAngleCos: f32,
	outerConeAngleCos: f32,
	cookieIntensity: f32,
	isDynamic: bool,
	isLightmapped: bool
}
var<private> lightProjectionMatrix: mat4x4f;
fn sampleLightTextureF(lightIndex: i32, index: i32) -> vec4f {
	return textureLoad(lightsTexture, vec2<i32>(index, lightIndex), 0);
}
fn decodeClusterLightCore(clusterLightData: ptr<function, ClusterLightData>, lightIndex: f32) {
	clusterLightData.lightIndex = i32(lightIndex);
	let halfData: vec4f = sampleLightTextureF(clusterLightData.lightIndex, {CLUSTER_TEXTURE_COLOR_ANGLES_BIAS});
	clusterLightData.anglesData = halfData.z;
	clusterLightData.biasesData = halfData.w;
	let colorRG: vec2f = unpack2x16float(bitcast<u32>(halfData.x));
	let colorB_: vec2f = unpack2x16float(bitcast<u32>(halfData.y));
	clusterLightData.color = vec3f(colorRG, colorB_.x) * {LIGHT_COLOR_DIVIDER};
	let lightPosRange: vec4f = sampleLightTextureF(clusterLightData.lightIndex, {CLUSTER_TEXTURE_POSITION_RANGE});
	clusterLightData.position = lightPosRange.xyz;
	clusterLightData.range = lightPosRange.w;
	let lightDir_Flags: vec4f = sampleLightTextureF(clusterLightData.lightIndex, {CLUSTER_TEXTURE_DIRECTION_FLAGS});
	clusterLightData.direction = lightDir_Flags.xyz;
	let flags_uint: u32 = bitcast<u32>(lightDir_Flags.w);
	clusterLightData.flags = flags_uint;
	clusterLightData.isSpot = (flags_uint & (1u << 30u)) != 0u;
	clusterLightData.shape = (flags_uint >> 28u) & 0x3u;
	clusterLightData.falloffModeLinear = (flags_uint & (1u << 27u)) == 0u;
	clusterLightData.shadowIntensity = f32((flags_uint >> 0u) & 0xFFu) / 255.0;
	clusterLightData.cookieIntensity = f32((flags_uint >> 8u) & 0xFFu) / 255.0;
	clusterLightData.isDynamic = (flags_uint & (1u << 22u)) != 0u;
	clusterLightData.isLightmapped = (flags_uint & (1u << 21u)) != 0u;
}
fn decodeClusterLightSpot(clusterLightData: ptr<function, ClusterLightData>) {
	let angles: vec2f = unpack2x16float(bitcast<u32>(clusterLightData.anglesData));
	clusterLightData.innerConeAngleCos = angles.x;
	clusterLightData.outerConeAngleCos = angles.y;
}
fn decodeClusterLightOmniAtlasViewport(clusterLightData: ptr<function, ClusterLightData>) {
	clusterLightData.omniAtlasViewport = sampleLightTextureF(clusterLightData.lightIndex, {CLUSTER_TEXTURE_PROJ_MAT_0}).xyz;
}
fn decodeClusterLightAreaData(clusterLightData: ptr<function, ClusterLightData>) {
	clusterLightData.halfWidth = sampleLightTextureF(clusterLightData.lightIndex, {CLUSTER_TEXTURE_AREA_DATA_WIDTH}).xyz;
	clusterLightData.halfHeight = sampleLightTextureF(clusterLightData.lightIndex, {CLUSTER_TEXTURE_AREA_DATA_HEIGHT}).xyz;
}
fn decodeClusterLightProjectionMatrixData(clusterLightData: ptr<function, ClusterLightData>) {
	let m0: vec4f = sampleLightTextureF(clusterLightData.lightIndex, {CLUSTER_TEXTURE_PROJ_MAT_0});
	let m1: vec4f = sampleLightTextureF(clusterLightData.lightIndex, {CLUSTER_TEXTURE_PROJ_MAT_1});
	let m2: vec4f = sampleLightTextureF(clusterLightData.lightIndex, {CLUSTER_TEXTURE_PROJ_MAT_2});
	let m3: vec4f = sampleLightTextureF(clusterLightData.lightIndex, {CLUSTER_TEXTURE_PROJ_MAT_3});
	lightProjectionMatrix = mat4x4f(m0, m1, m2, m3);
}
fn decodeClusterLightShadowData(clusterLightData: ptr<function, ClusterLightData>) {
	let biases: vec2f = unpack2x16float(bitcast<u32>(clusterLightData.biasesData));
	clusterLightData.shadowBias = biases.x;
	clusterLightData.shadowNormalBias = biases.y;
}
fn decodeClusterLightCookieData(clusterLightData: ptr<function, ClusterLightData>) {
	let cookieFlags: u32 = (clusterLightData.flags >> 23u) & 0x0Fu;
	let mask_uvec: vec4<u32> = vec4<u32>(cookieFlags) & vec4<u32>(1u, 2u, 4u, 8u);
	clusterLightData.cookieChannelMask = step(vec4f(1.0), vec4f(mask_uvec));
}
fn evaluateLight(
	light: ptr<function, ClusterLightData>,
	worldNormal: vec3f,
	viewDir: vec3f,
	reflectionDir: vec3f,
#if defined(LIT_CLEARCOAT)
	clearcoatReflectionDir: vec3f,
#endif
	gloss: f32,
	specularity: vec3f,
	geometricNormal: vec3f,
	tbn: mat3x3f,
#if defined(LIT_IRIDESCENCE)
	iridescenceFresnel: vec3f,
#endif
	clearcoat_worldNormal: vec3f,
	clearcoat_gloss: f32,
	sheen_gloss: f32,
	iridescence_intensity: f32
) {
	var cookieAttenuation: vec3f = vec3f(1.0);
	var diffuseAttenuation: f32 = 1.0;
	var falloffAttenuation: f32 = 1.0;
	let lightDirW: vec3f = evalOmniLight(light.position);
	let lightDirNormW: vec3f = normalize(lightDirW);
	#ifdef CLUSTER_AREALIGHTS
	if (light.shape != {LIGHTSHAPE_PUNCTUAL}) {
		decodeClusterLightAreaData(light);
		if (light.shape == {LIGHTSHAPE_RECT}) {
			calcRectLightValues(light.position, light.halfWidth, light.halfHeight);
		} else if (light.shape == {LIGHTSHAPE_DISK}) {
			calcDiskLightValues(light.position, light.halfWidth, light.halfHeight);
		} else {
			calcSphereLightValues(light.position, light.halfWidth, light.halfHeight);
		}
		falloffAttenuation = getFalloffWindow(light.range, lightDirW);
	} else
	#endif
	{
		if (light.falloffModeLinear) {
			falloffAttenuation = getFalloffLinear(light.range, lightDirW);
		} else {
			falloffAttenuation = getFalloffInvSquared(light.range, lightDirW);
		}
	}
	if (falloffAttenuation > 0.00001) {
		#ifdef CLUSTER_AREALIGHTS
		if (light.shape != {LIGHTSHAPE_PUNCTUAL}) {
			if (light.shape == {LIGHTSHAPE_RECT}) {
				diffuseAttenuation = getRectLightDiffuse(worldNormal, viewDir, lightDirW, lightDirNormW) * 16.0;
			} else if (light.shape == {LIGHTSHAPE_DISK}) {
				diffuseAttenuation = getDiskLightDiffuse(worldNormal, viewDir, lightDirW, lightDirNormW) * 16.0;
			} else {
				diffuseAttenuation = getSphereLightDiffuse(worldNormal, viewDir, lightDirW, lightDirNormW) * 16.0;
			}
		} else
		#endif
		{
			falloffAttenuation = falloffAttenuation * getLightDiffuse(worldNormal, viewDir, lightDirNormW);
		}
		if (light.isSpot) {
			decodeClusterLightSpot(light);
			falloffAttenuation = falloffAttenuation * getSpotEffect(light.direction, light.innerConeAngleCos, light.outerConeAngleCos, lightDirNormW);
		}
		#if defined(CLUSTER_COOKIES) || defined(CLUSTER_SHADOWS)
		if (falloffAttenuation > 0.00001) {
			if (light.shadowIntensity > 0.0 || light.cookieIntensity > 0.0) {
				if (light.isSpot) {
					decodeClusterLightProjectionMatrixData(light);
				} else {
					decodeClusterLightOmniAtlasViewport(light);
				}
				let shadowTextureResolution: f32 = uniform.shadowAtlasParams.x;
				let shadowEdgePixels: f32 = uniform.shadowAtlasParams.y;
				#ifdef CLUSTER_COOKIES
				if (light.cookieIntensity > 0.0) {
					decodeClusterLightCookieData(light);
					if (light.isSpot) {
						cookieAttenuation = getCookie2DClustered(cookieAtlasTexture, cookieAtlasTextureSampler, lightProjectionMatrix, vPositionW, light.cookieIntensity, light.cookieChannelMask);
					} else {
						cookieAttenuation = getCookieCubeClustered(cookieAtlasTexture, cookieAtlasTextureSampler, lightDirW, light.cookieIntensity, light.cookieChannelMask, shadowTextureResolution, shadowEdgePixels, light.omniAtlasViewport);
					}
				}
				#endif
				#ifdef CLUSTER_SHADOWS
				if (light.shadowIntensity > 0.0) {
					decodeClusterLightShadowData(light);
					let shadowParams: vec4f = vec4f(shadowTextureResolution, light.shadowNormalBias, light.shadowBias, 1.0 / light.range);
					if (light.isSpot) {
						let shadowCoord: vec3f = getShadowCoordPerspZbufferNormalOffset(lightProjectionMatrix, shadowParams, geometricNormal);
						#if defined(CLUSTER_SHADOW_TYPE_PCF1)
							let shadow: f32 = getShadowSpotClusteredPCF1(shadowAtlasTexture, shadowAtlasTextureSampler, shadowCoord, shadowParams);
						#elif defined(CLUSTER_SHADOW_TYPE_PCF3)
							let shadow: f32 = getShadowSpotClusteredPCF3(shadowAtlasTexture, shadowAtlasTextureSampler, shadowCoord, shadowParams);
						#elif defined(CLUSTER_SHADOW_TYPE_PCF5)
							let shadow: f32 = getShadowSpotClusteredPCF5(shadowAtlasTexture, shadowAtlasTextureSampler, shadowCoord, shadowParams);
						#elif defined(CLUSTER_SHADOW_TYPE_PCSS)
							let shadow: f32 = getShadowSpotClusteredPCSS(shadowAtlasTexture, shadowAtlasTextureSampler, shadowCoord, shadowParams);
						#endif
						falloffAttenuation = falloffAttenuation * mix(1.0, shadow, light.shadowIntensity);
					} else {
						let dir: vec3f = normalOffsetPointShadow(shadowParams, light.position, lightDirW, lightDirNormW, geometricNormal);
						#if defined(CLUSTER_SHADOW_TYPE_PCF1)
							let shadow: f32 = getShadowOmniClusteredPCF1(shadowAtlasTexture, shadowAtlasTextureSampler, shadowParams, light.omniAtlasViewport, shadowEdgePixels, dir);
						#elif defined(CLUSTER_SHADOW_TYPE_PCF3)
							let shadow: f32 = getShadowOmniClusteredPCF3(shadowAtlasTexture, shadowAtlasTextureSampler, shadowParams, light.omniAtlasViewport, shadowEdgePixels, dir);
						#elif defined(CLUSTER_SHADOW_TYPE_PCF5)
							let shadow: f32 = getShadowOmniClusteredPCF5(shadowAtlasTexture, shadowAtlasTextureSampler, shadowParams, light.omniAtlasViewport, shadowEdgePixels, dir);
						#endif
						falloffAttenuation = falloffAttenuation * mix(1.0, shadow, light.shadowIntensity);
					}
				}
				#endif
			}
		}
		#endif
		#ifdef CLUSTER_AREALIGHTS
		if (light.shape != {LIGHTSHAPE_PUNCTUAL}) {
			{
				var areaDiffuse: vec3f = (diffuseAttenuation * falloffAttenuation) * light.color * cookieAttenuation;
				#if defined(LIT_SPECULAR)
					areaDiffuse = mix(areaDiffuse, vec3f(0.0), dLTCSpecFres);
				#endif
				dDiffuseLight = dDiffuseLight + areaDiffuse;
			}
			#ifdef LIT_SPECULAR
				var areaLightSpecular: f32;
				if (light.shape == {LIGHTSHAPE_RECT}) {
					areaLightSpecular = getRectLightSpecular(worldNormal, viewDir);
				} else if (light.shape == {LIGHTSHAPE_DISK}) {
					areaLightSpecular = getDiskLightSpecular(worldNormal, viewDir);
				} else {
					areaLightSpecular = getSphereLightSpecular(worldNormal, viewDir);
				}
				dSpecularLight = dSpecularLight + dLTCSpecFres * areaLightSpecular * falloffAttenuation * light.color * cookieAttenuation;
				#ifdef LIT_CLEARCOAT
					var areaLightSpecularCC: f32;
					if (light.shape == {LIGHTSHAPE_RECT}) {
						areaLightSpecularCC = getRectLightSpecular(clearcoat_worldNormal, viewDir);
					} else if (light.shape == {LIGHTSHAPE_DISK}) {
						areaLightSpecularCC = getDiskLightSpecular(clearcoat_worldNormal, viewDir);
					} else {
						areaLightSpecularCC = getSphereLightSpecular(clearcoat_worldNormal, viewDir);
					}
					ccSpecularLight = ccSpecularLight + ccLTCSpecFres * areaLightSpecularCC * falloffAttenuation * light.color  * cookieAttenuation;
				#endif
			#endif
		} else
		#endif
		{
			{
				var punctualDiffuse: vec3f = falloffAttenuation * light.color * cookieAttenuation;
				#if defined(CLUSTER_AREALIGHTS)
				#if defined(LIT_SPECULAR)
					punctualDiffuse = mix(punctualDiffuse, vec3f(0.0), specularity);
				#endif
				#endif
				dDiffuseLight = dDiffuseLight + punctualDiffuse;
			}
			#ifdef LIT_SPECULAR
				let halfDir: vec3f = normalize(-lightDirNormW + viewDir);
				#ifdef LIT_SPECULAR_FRESNEL
					dSpecularLight = dSpecularLight +
						getLightSpecular(halfDir, reflectionDir, worldNormal, viewDir, lightDirNormW, gloss, tbn) * falloffAttenuation * light.color * cookieAttenuation *
						getFresnel(
							dot(viewDir, halfDir),
							gloss,
							specularity
						#if defined(LIT_IRIDESCENCE)
							, iridescenceFresnel,
							iridescence_intensity
						#endif
							);
				#else
					dSpecularLight = dSpecularLight + getLightSpecular(halfDir, reflectionDir, worldNormal, viewDir, lightDirNormW, gloss, tbn) * falloffAttenuation * light.color * cookieAttenuation * specularity;
				#endif
				#ifdef LIT_CLEARCOAT
					#ifdef LIT_SPECULAR_FRESNEL
						ccSpecularLight = ccSpecularLight + getLightSpecular(halfDir, clearcoatReflectionDir, clearcoat_worldNormal, viewDir, lightDirNormW, clearcoat_gloss, tbn) * falloffAttenuation * light.color * cookieAttenuation * getFresnelCC(dot(viewDir, halfDir));
					#else
						ccSpecularLight = ccSpecularLight + getLightSpecular(halfDir, clearcoatReflectionDir, clearcoat_worldNormal, viewDir, lightDirNormW, clearcoat_gloss, tbn) * falloffAttenuation * light.color * cookieAttenuation;
					#endif
				#endif
				#ifdef LIT_SHEEN
					sSpecularLight = sSpecularLight + getLightSpecularSheen(halfDir, worldNormal, viewDir, lightDirNormW, sheen_gloss) * falloffAttenuation * light.color * cookieAttenuation;
				#endif
			#endif
		}
	}
	dAtten = falloffAttenuation;
	dLightDirNormW = lightDirNormW;
}
fn evaluateClusterLight(
	lightIndex: f32,
	worldNormal: vec3f,
	viewDir: vec3f,
	reflectionDir: vec3f,
#if defined(LIT_CLEARCOAT)
	clearcoatReflectionDir: vec3f,
#endif
	gloss: f32,
	specularity: vec3f,
	geometricNormal: vec3f,
	tbn: mat3x3f,
#if defined(LIT_IRIDESCENCE)
	iridescenceFresnel: vec3f,
#endif
	clearcoat_worldNormal: vec3f,
	clearcoat_gloss: f32,
	sheen_gloss: f32,
	iridescence_intensity: f32
) {
	var clusterLightData: ClusterLightData;
	decodeClusterLightCore(&clusterLightData, lightIndex);
	#ifdef CLUSTER_MESH_DYNAMIC_LIGHTS
		let acceptLightMask: bool = clusterLightData.isDynamic;
	#else
		let acceptLightMask: bool = clusterLightData.isLightmapped;
	#endif
	if (acceptLightMask) {
		evaluateLight(
			&clusterLightData,
			worldNormal,
			viewDir,
			reflectionDir,
#if defined(LIT_CLEARCOAT)
			clearcoatReflectionDir,
#endif
			gloss,
			specularity,
			geometricNormal,
			tbn,
#if defined(LIT_IRIDESCENCE)
			iridescenceFresnel,
#endif
			clearcoat_worldNormal,
			clearcoat_gloss,
			sheen_gloss,
			iridescence_intensity
		);
	}
}
fn addClusteredLights(
	worldNormal: vec3f,
	viewDir: vec3f,
	reflectionDir: vec3f,
#if defined(LIT_CLEARCOAT)
	clearcoatReflectionDir: vec3f,
#endif
	gloss: f32,
	specularity: vec3f,
	geometricNormal: vec3f,
	tbn: mat3x3f,
#if defined(LIT_IRIDESCENCE)
	iridescenceFresnel: vec3f,
#endif
	clearcoat_worldNormal: vec3f,
	clearcoat_gloss: f32,
	sheen_gloss: f32,
	iridescence_intensity: f32
) {
	if (uniform.clusterSkip > 0.5) {
		return;
	}
	let cellCoords: vec3f = floor((vPositionW - uniform.clusterBoundsMin) * uniform.clusterCellsCountByBoundsSize);
	if (!(any(cellCoords < vec3f(0.0)) || any(cellCoords >= uniform.clusterCellsMax))) {
		let cellIndex: f32 = dot(uniform.clusterCellsDot, cellCoords);
		let clusterV: f32 = floor(cellIndex * uniform.clusterTextureSize.y);
		let clusterU: f32 = cellIndex - (clusterV * uniform.clusterTextureSize.x);
		for (var lightCellIndex: i32 = 0; lightCellIndex < uniform.clusterMaxCells; lightCellIndex = lightCellIndex + 1) {
			let lightIndexPacked: f32 = textureLoad(clusterWorldTexture, vec2<i32>(i32(clusterU) + lightCellIndex, i32(clusterV)), 0).r;
			if (lightIndexPacked <= 0.0) {
				break;
			}
			evaluateClusterLight(
				lightIndexPacked * 255.0,
				worldNormal,
				viewDir,
				reflectionDir,
#if defined(LIT_CLEARCOAT)
				clearcoatReflectionDir,
#endif
				gloss,
				specularity,
				geometricNormal,
				tbn,
#if defined(LIT_IRIDESCENCE)
				iridescenceFresnel,
#endif
				clearcoat_worldNormal,
				clearcoat_gloss,
				sheen_gloss,
				iridescence_intensity
			);
		}
	}
}`,zN=`
fn combineColor(albedo: vec3f, sheenSpecularity: vec3f, clearcoatSpecularity: f32) -> vec3f {
	var ret: vec3f = vec3f(0.0);
	#ifdef LIT_OLD_AMBIENT
		ret = ret + ((dDiffuseLight - uniform.light_globalAmbient) * albedo + uniform.material_ambient * uniform.light_globalAmbient);
	#else
		ret = ret + (albedo * dDiffuseLight);
	#endif
	#ifdef LIT_SPECULAR
		ret = ret + dSpecularLight;
	#endif
	#ifdef LIT_REFLECTIONS
		ret = ret + (dReflection.rgb * dReflection.a);
	#endif
	#ifdef LIT_SHEEN
		let sheenScaling: f32 = 1.0 - max(max(sheenSpecularity.r, sheenSpecularity.g), sheenSpecularity.b) * 0.157;
		ret = ret * sheenScaling + (sSpecularLight + sReflection.rgb) * sheenSpecularity;
	#endif
	#ifdef LIT_CLEARCOAT
		let clearCoatScaling: f32 = 1.0 - ccFresnel * clearcoatSpecularity;
		ret = ret * clearCoatScaling + (ccSpecularLight + ccReflection) * clearcoatSpecularity;
	#endif
	return ret;
}
`,HN=`
	varying uv0: vec2f;
	var blitTexture: texture_2d<f32>;
	var blitTextureSampler : sampler;
	@fragment
	fn fragmentMain(input : FragmentInput) -> FragmentOutput {
		var output: FragmentOutput;
		output.color = textureSample(blitTexture, blitTextureSampler, input.uv0);
		return output;
	}
`,GN=`
	varying uv0: vec2f;
	uniform invViewProj: mat4x4<f32>;
	var blitTexture: texture_cube<f32>;
	var blitTextureSampler : sampler;
	@fragment
	fn fragmentMain(input : FragmentInput) -> FragmentOutput {
		var output: FragmentOutput;
		var projPos = vec4f(input.uv0 * 2.0 - 1.0, 0.5, 1.0);
		var worldPos = uniform.invViewProj * projPos;
		output.color = textureSample(blitTexture, blitTextureSampler, worldPos.xyz);
		return output;
	}
`,WN=`
	attribute vertex_position: vec2f;
	varying uv0: vec2f;
	@vertex
	fn vertexMain(input: VertexInput) -> VertexOutput {
		var output: VertexOutput;
		output.position = vec4f(input.vertex_position, 0.5, 1.0);
		output.uv0 = input.vertex_position * 0.5 + vec2f(0.5, 0.5);
		output.uv0.y = 1.0 - output.uv0.y;
		return output;
	}
`,$N=`
#if LIT_CUBEMAP_PROJECTION == BOX
	uniform envBoxMin: vec3f;
	uniform envBoxMax: vec3f;
#endif
fn cubeMapProject(nrdir: vec3f) -> vec3f {
	#if LIT_CUBEMAP_PROJECTION == NONE
		return cubeMapRotate(nrdir);
	#endif
	#if LIT_CUBEMAP_PROJECTION == BOX
		let nrdir_rotated: vec3f = cubeMapRotate(nrdir);
		let rbmax: vec3f = (uniform.envBoxMax - vPositionW) / nrdir_rotated;
		let rbmin: vec3f = (uniform.envBoxMin - vPositionW) / nrdir_rotated;
		let rbminmax: vec3f = select(rbmin, rbmax, nrdir_rotated > vec3f(0.0));
		let fa: f32 = min(min(rbminmax.x, rbminmax.y), rbminmax.z);
		let posonbox: vec3f = vPositionW + nrdir_rotated * fa;
		let envBoxPos: vec3f = (uniform.envBoxMin + uniform.envBoxMax) * 0.5;
		return normalize(posonbox - envBoxPos);
	#endif
}
`,XN=`
#ifdef CUBEMAP_ROTATION
uniform cubeMapRotationMatrix: mat3x3f;
#endif
fn cubeMapRotate(refDir: vec3f) -> vec3f {
#ifdef CUBEMAP_ROTATION
	return refDir * uniform.cubeMapRotationMatrix;
#else
	return refDir;
#endif
}
`,qN=`
#ifdef DEBUG_ALBEDO_PASS
output.color = vec4(gammaCorrectOutput(dAlbedo), 1.0);
#endif
#ifdef DEBUG_UV0_PASS
output.color = vec4f(litArgs_albedo , 1.0);
#endif
#ifdef DEBUG_WORLD_NORMAL_PASS
output.color = vec4f(litArgs_worldNormal * 0.5 + 0.5, 1.0);
#endif
#ifdef DEBUG_OPACITY_PASS
output.color = vec4f(vec3f(litArgs_opacity) , 1.0);
#endif
#ifdef DEBUG_SPECULARITY_PASS
output.color = vec4f(litArgs_specularity, 1.0);
#endif
#ifdef DEBUG_GLOSS_PASS
output.color = vec4f(vec3f(litArgs_gloss) , 1.0);
#endif
#ifdef DEBUG_METALNESS_PASS
output.color = vec4f(vec3f(litArgs_metalness) , 1.0);
#endif
#ifdef DEBUG_AO_PASS
output.color = vec4f(vec3f(litArgs_ao) , 1.0);
#endif
#ifdef DEBUG_EMISSION_PASS
output.color = vec4f(gammaCorrectOutput(litArgs_emission), 1.0);
#endif
`,YN=`
#ifdef DEBUG_LIGHTING_PASS
	litArgs_albedo = vec3f(0.5);
#endif
#ifdef DEBUG_UV0_PASS
#ifdef VARYING_VUV0
	litArgs_albedo = vec3f(vUv0, 0.0);
#else
	litArgs_albedo = vec3f(0.0);
#endif
#endif
`,jN=`
#ifndef _DECODE_INCLUDED_
#define _DECODE_INCLUDED_
fn decodeLinear(raw: vec4f) -> vec3f {
	return raw.rgb;
}
fn decodeGammaFloat(raw: f32) -> f32 {
	return pow(raw, 2.2);
}
fn decodeGamma3(raw: vec3f) -> vec3f {
	return pow(raw, vec3f(2.2));
}
fn decodeGamma(raw: vec4f) -> vec3f {
	return pow(raw.xyz, vec3f(2.2));
}
fn decodeRGBM(raw: vec4f) -> vec3f {
	let color = (8.0 * raw.a) * raw.rgb;
	return color * color;
}
fn decodeRGBP(raw: vec4f) -> vec3f {
	let color = raw.rgb * (-raw.a * 7.0 + 8.0);
	return color * color;
}
fn decodeRGBE(raw: vec4f) -> vec3f {
	return select(vec3f(0.0), raw.xyz * pow(2.0, raw.w * 255.0 - 128.0), raw.a != 0.0);
}
fn passThrough(raw: vec4f) -> vec4f {
	return raw;
}
fn unpackNormalXYZ(nmap: vec4f) -> vec3f {
	return nmap.xyz * 2.0 - 1.0;
}
fn unpackNormalXY(nmap: vec4f) -> vec3f {
	var xy = nmap.wy * 2.0 - 1.0;
	return vec3f(xy, sqrt(1.0 - clamp(dot(xy, xy), 0.0, 1.0)));
}
#endif
`,KN=`
#ifndef _DETAILMODES_INCLUDED_
#define _DETAILMODES_INCLUDED_
fn detailMode_mul(c1: vec3f, c2: vec3f) -> vec3f {
	return c1 * c2;
}
fn detailMode_add(c1: vec3f, c2: vec3f) -> vec3f {
	return c1 + c2;
}
fn detailMode_screen(c1: vec3f, c2: vec3f) -> vec3f {
	return 1.0 - (1.0 - c1)*(1.0 - c2);
}
fn detailMode_overlay(c1: vec3f, c2: vec3f) -> vec3f {
	return mix(1.0 - 2.0 * (1.0 - c1)*(1.0 - c2), 2.0 * c1 * c2, step(c1, vec3f(0.5)));
}
fn detailMode_min(c1: vec3f, c2: vec3f) -> vec3f {
	return min(c1, c2);
}
fn detailMode_max(c1: vec3f, c2: vec3f) -> vec3f {
	return max(c1, c2);
}
#endif
`,ZN=`
uniform material_diffuse: vec3f;
#ifdef STD_DIFFUSEDETAIL_TEXTURE
	#include "detailModesPS"
#endif
fn getAlbedo() {
	dAlbedo = uniform.material_diffuse.rgb;
	#ifdef STD_DIFFUSE_TEXTURE
		var albedoTexture: vec3f = {STD_DIFFUSE_TEXTURE_DECODE}(textureSampleBias({STD_DIFFUSE_TEXTURE_NAME}, {STD_DIFFUSE_TEXTURE_NAME}Sampler, {STD_DIFFUSE_TEXTURE_UV}, uniform.textureBias)).{STD_DIFFUSE_TEXTURE_CHANNEL};
		#ifdef STD_DIFFUSEDETAIL_TEXTURE
			var albedoDetail: vec3f = {STD_DIFFUSEDETAIL_TEXTURE_DECODE}(textureSampleBias({STD_DIFFUSEDETAIL_TEXTURE_NAME}, {STD_DIFFUSEDETAIL_TEXTURE_NAME}Sampler, {STD_DIFFUSEDETAIL_TEXTURE_UV}, uniform.textureBias)).{STD_DIFFUSEDETAIL_TEXTURE_CHANNEL};
			albedoTexture = detailMode_{STD_DIFFUSEDETAIL_DETAILMODE}(albedoTexture, albedoDetail);
		#endif
		dAlbedo = dAlbedo * albedoTexture;
	#endif
	#ifdef STD_DIFFUSE_VERTEX
		dAlbedo = dAlbedo * gammaCorrectInputVec3(saturate3(vVertexColor.{STD_DIFFUSE_VERTEX_CHANNEL}));
	#endif
}
`,QN=`
uniform material_emissive: vec3f;
uniform material_emissiveIntensity: f32;
fn getEmission() {
	dEmission = uniform.material_emissive * uniform.material_emissiveIntensity;
	#ifdef STD_EMISSIVE_TEXTURE
	dEmission *= {STD_EMISSIVE_TEXTURE_DECODE}(textureSampleBias({STD_EMISSIVE_TEXTURE_NAME}, {STD_EMISSIVE_TEXTURE_NAME}Sampler, {STD_EMISSIVE_TEXTURE_UV}, uniform.textureBias)).{STD_EMISSIVE_TEXTURE_CHANNEL};
	#endif
	#ifdef STD_EMISSIVE_VERTEX
	dEmission = dEmission * gammaCorrectInputVec3(saturate3(vVertexColor.{STD_EMISSIVE_VERTEX_CHANNEL}));
	#endif
}
`,JN=`
fn encodeLinear(source: vec3f) -> vec4f {
	return vec4f(source, 1.0);
}
fn encodeGamma(source: vec3f) -> vec4f {
	return vec4f(pow(source + vec3f(0.0000001), vec3f(1.0 / 2.2)), 1.0);
}
fn encodeRGBM(source: vec3f) -> vec4f {
	var color: vec3f = pow(source, vec3f(0.5));
	color *= 1.0 / 8.0;
	var a: f32 = saturate(max(max(color.r, color.g), max(color.b, 1.0 / 255.0)));
	a = ceil(a * 255.0) / 255.0;
	color /= a;
	return vec4f(color, a);
}
fn encodeRGBP(source: vec3f) -> vec4f {
	var gamma: vec3f = pow(source, vec3f(0.5));
	var maxVal: f32 = min(8.0, max(1.0, max(gamma.x, max(gamma.y, gamma.z))));
	var v: f32 = 1.0 - ((maxVal - 1.0) / 7.0);
	v = ceil(v * 255.0) / 255.0;
	return vec4f(gamma / (-v * 7.0 + 8.0), v);
}
fn encodeRGBE(source: vec3f) -> vec4f {
	var maxVal: f32 = max(source.x, max(source.y, source.z));
	if (maxVal < 1e-32) {
		return vec4f(0.0, 0.0, 0.0, 0.0);
	} else {
		var e: f32 = ceil(log2(maxVal));
		return vec4f(source / pow(2.0, e), (e + 128.0) / 255.0);
	}
}
`,eF=`
	var finalRgb: vec3f = combineColor(litArgs_albedo, litArgs_sheen_specularity, litArgs_clearcoat_specularity);
	finalRgb = finalRgb + litArgs_emission;
	finalRgb = addFog(finalRgb);
	finalRgb = toneMap(finalRgb);
	finalRgb = gammaCorrectOutput(finalRgb);
	output.color = vec4f(finalRgb, output.color.a);
`,tF=`
#ifndef _ENVATLAS_INCLUDED_
#define _ENVATLAS_INCLUDED_
const atlasSize : f32 = 512.0;
const seamSize : f32 = 1.0 / atlasSize;
fn mapUv(uv : vec2f, rect : vec4f) -> vec2f {
	return vec2f(mix(rect.x + seamSize, rect.x + rect.z - seamSize, uv.x),
				 mix(rect.y + seamSize, rect.y + rect.w - seamSize, uv.y));
}
fn mapRoughnessUv(uv : vec2f, level : f32) -> vec2f {
	let t : f32 = 1.0 / exp2(level);
	return mapUv(uv, vec4f(0.0, 1.0 - t, t, t * 0.5));
}
fn mapShinyUv(uv : vec2f, level : f32) -> vec2f {
	let t : f32 = 1.0 / exp2(level);
	return mapUv(uv, vec4f(1.0 - t, 1.0 - t, t, t * 0.5));
}
#endif
`,sF=`
#ifdef LIT_SKYBOX_INTENSITY
	uniform skyboxIntensity : f32;
#endif
fn processEnvironment(color : vec3f) -> vec3f {
	#ifdef LIT_SKYBOX_INTENSITY
		return color * uniform.skyboxIntensity;
	#else
		return color;
	#endif
}
`,iF=`
fn getFalloffWindow(lightRadius: f32, lightDir: vec3f) -> f32 {
	let sqrDist: f32 = dot(lightDir, lightDir);
	let invRadius: f32 = 1.0 / lightRadius;
	return square(saturate(1.0 - square(sqrDist * square(invRadius))));
}
fn getFalloffInvSquared(lightRadius: f32, lightDir: vec3f) -> f32 {
	let sqrDist: f32 = dot(lightDir, lightDir);
	var falloff: f32 = 1.0 / (sqrDist + 1.0);
	let invRadius: f32 = 1.0 / lightRadius;
	falloff = falloff * 16.0;
	falloff = falloff * square(saturate(1.0 - square(sqrDist * square(invRadius))));
	return falloff;
}
`,rF=`
fn getFalloffLinear(lightRadius: f32, lightDir: vec3f) -> f32 {
	let d: f32 = length(lightDir);
	return max(((lightRadius - d) / lightRadius), 0.0);
}
`,aF=`
#ifndef FLOAT_AS_UINT
#define FLOAT_AS_UINT
fn float2uint(value: f32) -> vec4f {
	let intBits = bitcast<u32>(value);
	return vec4f(
		f32((intBits >> 24u) & 0xffu),
		f32((intBits >> 16u) & 0xffu),
		f32((intBits >> 8u) & 0xffu),
		f32(intBits & 0xffu)
	) / 255.0;
}
fn uint2float(value: vec4f) -> f32 {
	let rgba_u32 = vec4<u32>(value * 255.0);
	let intBits: u32 =
		(rgba_u32.r << 24u) |
		(rgba_u32.g << 16u) |
		(rgba_u32.b << 8u)  |
		 rgba_u32.a;
	return bitcast<f32>(intBits);
}
fn float2vec4(value: f32) -> vec4f {
	#if defined(CAPS_TEXTURE_FLOAT_RENDERABLE)
		return vec4f(value, 1.0, 1.0, 1.0);
	#else
		return float2uint(value);
	#endif
}
#endif
`,nF=`
var<private> dBlendModeFogFactor : f32 = 1.0;
#if (FOG != NONE)
	uniform fog_color : vec3f;
	
	#if (FOG == LINEAR)
		uniform fog_start : f32;
		uniform fog_end : f32;
	#else
		uniform fog_density : f32;
	#endif
#endif
fn getFogFactor() -> f32 {
	let depth = pcPosition.z / pcPosition.w;
	var fogFactor : f32 = 0.0;
	#if (FOG == LINEAR)
		fogFactor = (uniform.fog_end - depth) / (uniform.fog_end - uniform.fog_start);
	#elif (FOG == EXP)
		fogFactor = exp(-depth * uniform.fog_density);
	#elif (FOG == EXP2)
		fogFactor = exp(-depth * depth * uniform.fog_density * uniform.fog_density);
	#endif
	return clamp(fogFactor, 0.0, 1.0);
}
fn addFog(color : vec3f) -> vec3f {
	#if (FOG != NONE)
		return mix(uniform.fog_color * dBlendModeFogFactor, color, getFogFactor());
	#else
		return color;
	#endif
}
`,oF=`
fn getFresnel(
		cosTheta: f32,
		gloss: f32,
		specularity: vec3f
	#if defined(LIT_IRIDESCENCE)
		, iridescenceFresnel: vec3f,
		iridescenceIntensity: f32
	#endif
) -> vec3f {
	let fresnel: f32 = pow(1.0 - saturate(cosTheta), 5.0);
	let glossSq: f32 = gloss * gloss;
	let ret: vec3f = specularity + (max(vec3f(glossSq), specularity) - specularity) * fresnel;
	#if defined(LIT_IRIDESCENCE)
		return mix(ret, iridescenceFresnel, iridescenceIntensity);
	#else
		return ret;
	#endif
}
fn getFresnelCC(cosTheta: f32) -> f32 {
	let fresnel: f32 = pow(1.0 - saturate(cosTheta), 5.0);
	return 0.04 + (1.0 - 0.04) * fresnel;
}`,lF=`
attribute vertex_position: vec2f;
varying vUv0: vec2f;
@vertex
fn vertexMain(input: VertexInput) -> VertexOutput {
	var output: VertexOutput;
	output.position = vec4f(input.vertex_position, 0.5, 1.0);
	output.vUv0 = input.vertex_position.xy * 0.5 + vec2f(0.5);
	return output;
}
`,hF=`
#include "decodePS"
#if (GAMMA == SRGB)
	fn gammaCorrectInput(color: f32) -> f32 {
		return decodeGammaFloat(color);
	}
	fn gammaCorrectInputVec3(color: vec3f) -> vec3f {
		return decodeGamma3(color);
	}
	fn gammaCorrectInputVec4(color: vec4f) -> vec4f {
		return vec4f(decodeGamma3(color.xyz), color.w);
	}
	fn gammaCorrectOutput(color: vec3f) -> vec3f {
		return pow(color + 0.0000001, vec3f(1.0 / 2.2));
	}
#else
	fn gammaCorrectInput(color: f32) -> f32 {
		return color;
	}
	fn gammaCorrectInputVec3(color: vec3f) -> vec3f {
		return color;
	}
	fn gammaCorrectInputVec4(color: vec4f) -> vec4f {
		return color;
	}
	fn gammaCorrectOutput(color: vec3f) -> vec3f {
		return color;
	}
#endif
`,cF=`
#ifdef STD_GLOSS_CONSTANT
	uniform material_gloss: f32;
#endif
fn getGlossiness() {
	dGlossiness = 1.0;
	#ifdef STD_GLOSS_CONSTANT
	dGlossiness = dGlossiness * uniform.material_gloss;
	#endif
	#ifdef STD_GLOSS_TEXTURE
	dGlossiness = dGlossiness * textureSampleBias({STD_GLOSS_TEXTURE_NAME}, {STD_GLOSS_TEXTURE_NAME}Sampler, {STD_GLOSS_TEXTURE_UV}, uniform.textureBias).{STD_GLOSS_TEXTURE_CHANNEL};
	#endif
	#ifdef STD_GLOSS_VERTEX
	dGlossiness = dGlossiness * saturate(vVertexColor.{STD_GLOSS_VERTEX_CHANNEL});
	#endif
	#ifdef STD_GLOSS_INVERT
	dGlossiness = 1.0 - dGlossiness;
	#endif
	dGlossiness = dGlossiness + 0.0000001;
}
`,dF=`
uniform matrix_model: mat4x4f;
uniform matrix_view: mat4x4f;
uniform matrix_projection: mat4x4f;
fn initCenter(modelCenter: vec3f, center: ptr<function, SplatCenter>) -> bool {
	let modelView: mat4x4f = uniform.matrix_view * uniform.matrix_model;
	let centerView: vec4f = modelView * vec4f(modelCenter, 1.0);
	if (centerView.z > 0.0) {
		return false;
	}
	var centerProj: vec4f = uniform.matrix_projection * centerView;
	centerProj.z = clamp(centerProj.z, 0.0, abs(centerProj.w));
	center.view = centerView.xyz / centerView.w;
	center.proj = centerProj;
	center.projMat00 = uniform.matrix_projection[0][0];
	center.modelView = modelView;
	return true;
}
`,fF=`
var splatColor: texture_2d<f32>;
fn readColor(source: ptr<function, SplatSource>) -> vec4f {
	return textureLoad(splatColor, source.uv, 0);
}
`,uF=`
struct SplatSource {
	order: u32,
	id: u32,
	uv: vec2<i32>,
	cornerUV: vec2f,
}
struct SplatCenter {
	view: vec3f,
	proj: vec4f,
	modelView: mat4x4f,
	projMat00: f32,
}
struct SplatCorner {
	offset: vec2f,
	uv: vec2f,
	#if GSPLAT_AA
		aaFactor: f32,
	#endif
}
#include "gsplatEvalSHVS"
#include "gsplatQuatToMat3VS"
#if GSPLAT_COMPRESSED_DATA
	#include "gsplatCompressedDataVS"
	#if SH_BANDS > 0
		#include "gsplatCompressedSHVS"
	#endif
#elif GSPLAT_SOGS_DATA
	#include "gsplatSogsDataVS"
	#include "gsplatSogsColorVS"
	#if SH_BANDS > 0
		#include "gsplatSogsSHVS"
	#endif
#else
	#include "gsplatDataVS"
	#include "gsplatColorVS"
	#if SH_BANDS > 0
		#include "gsplatSHVS"
	#endif
#endif
#include "gsplatSourceVS"
#include "gsplatCenterVS"
#include "gsplatCornerVS"
#include "gsplatOutputVS"
fn clipCorner(corner: ptr<function, SplatCorner>, alpha: f32) {
	let clip: f32 = min(1.0, sqrt(-log(1.0 / (255.0 * alpha))) / 2.0);
	corner.offset = corner.offset * clip;
	corner.uv = corner.uv * clip;
}
`,pF=`
var packedTexture: texture_2d<u32>;
var chunkTexture: texture_2d<f32>;
var<private> chunkDataA: vec4f;
var<private> chunkDataB: vec4f;
var<private> chunkDataC: vec4f;
var<private> chunkDataD: vec4f;
var<private> chunkDataE: vec4f;
var<private> packedData: vec4u;
fn unpack111011(bits: u32) -> vec3f {
	return (vec3f((vec3<u32>(bits) >> vec3<u32>(21u, 11u, 0u)) & vec3<u32>(0x7ffu, 0x3ffu, 0x7ffu))) / vec3f(2047.0, 1023.0, 2047.0);
}
fn unpack8888(bits: u32) -> vec4f {
	return vec4f(
		f32((bits >> 24u) & 0xffu),
		f32((bits >> 16u) & 0xffu),
		f32((bits >> 8u)  & 0xffu),
		f32(bits		 & 0xffu)
	) / 255.0;
}
const norm_const: f32 = 1.0 / (sqrt(2.0) * 0.5);
fn unpackRotation(bits: u32) -> vec4f {
	let a = (f32((bits >> 20u) & 0x3ffu) / 1023.0 - 0.5) * norm_const;
	let b = (f32((bits >> 10u) & 0x3ffu) / 1023.0 - 0.5) * norm_const;
	let c = (f32(bits & 0x3ffu) / 1023.0 - 0.5) * norm_const;
	let m = sqrt(1.0 - (a * a + b * b + c * c));
	let mode = bits >> 30u;
	if (mode == 0u) { return vec4f(m, a, b, c); }
	if (mode == 1u) { return vec4f(a, m, b, c); }
	if (mode == 2u) { return vec4f(a, b, m, c); }
	return vec4f(a, b, c, m);
}
fn readCenter(source: ptr<function, SplatSource>) -> vec3f {
	let tex_size_u = textureDimensions(chunkTexture, 0);
	let w: u32 = tex_size_u.x / 5u;
	let chunkId: u32 = source.id / 256u;
	let chunkUV: vec2<i32> = vec2<i32>(i32((chunkId % w) * 5u), i32(chunkId / w));
	chunkDataA = textureLoad(chunkTexture, chunkUV + vec2<i32>(0, 0), 0);
	chunkDataB = textureLoad(chunkTexture, chunkUV + vec2<i32>(1, 0), 0);
	chunkDataC = textureLoad(chunkTexture, chunkUV + vec2<i32>(2, 0), 0);
	chunkDataD = textureLoad(chunkTexture, chunkUV + vec2<i32>(3, 0), 0);
	chunkDataE = textureLoad(chunkTexture, chunkUV + vec2<i32>(4, 0), 0);
	packedData = textureLoad(packedTexture, source.uv, 0);
	return mix(chunkDataA.xyz, vec3f(chunkDataA.w, chunkDataB.xy), unpack111011(packedData.x));
}
fn readColor(source: ptr<function, SplatSource>) -> vec4f {
	let r = unpack8888(packedData.w);
	return vec4f(mix(chunkDataD.xyz, vec3f(chunkDataD.w, chunkDataE.xy), r.rgb), r.w);
}
fn getRotation() -> vec4f {
	return unpackRotation(packedData.y);
}
fn getScale() -> vec3f {
	return exp(mix(vec3f(chunkDataB.zw, chunkDataC.x), chunkDataC.yzw, unpack111011(packedData.z)));
}
fn readCovariance(source: ptr<function, SplatSource>, covA_ptr: ptr<function, vec3f>, covB_ptr: ptr<function, vec3f>) {
	let rot = quatToMat3(getRotation());
	let scale = getScale();
	let M = transpose(mat3x3f(
		scale.x * rot[0],
		scale.y * rot[1],
		scale.z * rot[2]
	));
	*covA_ptr = vec3f(dot(M[0], M[0]), dot(M[0], M[1]), dot(M[0], M[2]));
	*covB_ptr = vec3f(dot(M[1], M[1]), dot(M[1], M[2]), dot(M[2], M[2]));
}
`,mF=`
#if SH_BANDS > 0
var shTexture0: texture_2d<u32>;
var shTexture1: texture_2d<u32>;
var shTexture2: texture_2d<u32>;
fn unpack8888s(bits: u32) -> vec4f {
	let unpacked_u = (vec4<u32>(bits) >> vec4<u32>(0u, 8u, 16u, 24u)) & vec4<u32>(0xffu);
	return vec4f(unpacked_u) * (8.0 / 255.0) - 4.0;
}
fn readSHData(source: ptr<function, SplatSource>, sh: ptr<function, array<vec3f, 15>>, scale: ptr<function, f32>) {
	let shData0: vec4<u32> = textureLoad(shTexture0, source.uv, 0);
	let shData1: vec4<u32> = textureLoad(shTexture1, source.uv, 0);
	let shData2: vec4<u32> = textureLoad(shTexture2, source.uv, 0);
	let r0 = unpack8888s(shData0.x);
	let r1 = unpack8888s(shData0.y);
	let r2 = unpack8888s(shData0.z);
	let r3 = unpack8888s(shData0.w);
	let g0 = unpack8888s(shData1.x);
	let g1 = unpack8888s(shData1.y);
	let g2 = unpack8888s(shData1.z);
	let g3 = unpack8888s(shData1.w);
	let b0 = unpack8888s(shData2.x);
	let b1 = unpack8888s(shData2.y);
	let b2 = unpack8888s(shData2.z);
	let b3 = unpack8888s(shData2.w);
	sh[0] =  vec3f(r0.x, g0.x, b0.x);
	sh[1] =  vec3f(r0.y, g0.y, b0.y);
	sh[2] =  vec3f(r0.z, g0.z, b0.z);
	sh[3] =  vec3f(r0.w, g0.w, b0.w);
	sh[4] =  vec3f(r1.x, g1.x, b1.x);
	sh[5] =  vec3f(r1.y, g1.y, b1.y);
	sh[6] =  vec3f(r1.z, g1.z, b1.z);
	sh[7] =  vec3f(r1.w, g1.w, b1.w);
	sh[8] =  vec3f(r2.x, g2.x, b2.x);
	sh[9] =  vec3f(r2.y, g2.y, b2.y);
	sh[10] = vec3f(r2.z, g2.z, b2.z);
	sh[11] = vec3f(r2.w, g2.w, b2.w);
	sh[12] = vec3f(r3.x, g3.x, b3.x);
	sh[13] = vec3f(r3.y, g3.y, b3.y);
	sh[14] = vec3f(r3.z, g3.z, b3.z);
	*scale = 1.0;
}
#endif
`,_F=`
	#if SH_BANDS == 1
		const SH_COEFFS: i32 = 3;
	#elif SH_BANDS == 2
		const SH_COEFFS: i32 = 8;
	#elif SH_BANDS == 3
		const SH_COEFFS: i32 = 15;
	#else
		const SH_COEFFS: i32 = 0;
	#endif
	#if SH_BANDS > 0
	const SH_C1: f32 = 0.4886025119029199;
	#if SH_BANDS > 1
		const SH_C2_0: f32 = 1.0925484305920792;
		const SH_C2_1: f32 = -1.0925484305920792;
		const SH_C2_2: f32 = 0.31539156525252005;
		const SH_C2_3: f32 = -1.0925484305920792;
		const SH_C2_4: f32 = 0.5462742152960396;
	#endif
	#if SH_BANDS > 2
		const SH_C3_0: f32 = -0.5900435899266435;
		const SH_C3_1: f32 = 2.890611442640554;
		const SH_C3_2: f32 = -0.4570457994644658;
		const SH_C3_3: f32 = 0.3731763325901154;
		const SH_C3_4: f32 = -0.4570457994644658;
		const SH_C3_5: f32 = 1.445305721320277;
		const SH_C3_6: f32 = -0.5900435899266435;
	#endif
	fn evalSH(sh: ptr<function, array<vec3f, SH_COEFFS>>, dir: vec3f) -> vec3f {
		let x = dir.x;
		let y = dir.y;
		let z = dir.z;
		var result = SH_C1 * (-sh[0] * y + sh[1] * z - sh[2] * x);
		#if SH_BANDS > 1
			let xx = x * x;
			let yy = y * y;
			let zz = z * z;
			let xy = x * y;
			let yz = y * z;
			let xz = x * z;
			result = result + (
				sh[3] * (SH_C2_0 * xy) +
				sh[4] * (SH_C2_1 * yz) +
				sh[5] * (SH_C2_2 * (2.0 * zz - xx - yy)) +
				sh[6] * (SH_C2_3 * xz) +
				sh[7] * (SH_C2_4 * (xx - yy))
			);
		#endif
		#if SH_BANDS > 2
			result = result + (
				sh[8]  * (SH_C3_0 * y * (3.0 * xx - yy)) +
				sh[9]  * (SH_C3_1 * xy * z) +
				sh[10] * (SH_C3_2 * y * (4.0 * zz - xx - yy)) +
				sh[11] * (SH_C3_3 * z * (2.0 * zz - 3.0 * xx - 3.0 * yy)) +
				sh[12] * (SH_C3_4 * x * (4.0 * zz - xx - yy)) +
				sh[13] * (SH_C3_5 * z * (xx - yy)) +
				sh[14] * (SH_C3_6 * x * (xx - 3.0 * yy))
			);
		#endif
		return result;
	}
	#endif
`,gF=`
fn quatToMat3(R: vec4<f32>) -> mat3x3<f32> {
	let R2: vec4<f32> = R + R;
	let X: f32	   = R2.x * R.w;
	let Y: vec4<f32> = R2.y * R;
	let Z: vec4<f32> = R2.z * R;
	let W: f32	   = R2.w * R.w;
	return mat3x3<f32>(
		1.0 - Z.z - W,  Y.z + X,	  Y.w - Z.x,
		Y.z - X,		1.0 - Y.y - W, Z.w + Y.x,
		Y.w + Z.x,	  Z.w - Y.x,	 1.0 - Y.y - Z.z
	);
}
`,vF=`
var sh0: texture_2d<f32>;
uniform sh0_mins: vec4f;
uniform sh0_maxs: vec4f;
const SH_C0: f32 = 0.28209479177387814;
fn readColor(source: ptr<function, SplatSource>) -> vec4f {
	let clr: vec4f = mix(uniform.sh0_mins, uniform.sh0_maxs, textureLoad(sh0, source.uv, 0));
	return vec4f(vec3f(0.5) + clr.xyz * SH_C0, 1.0 / (1.0 + exp(-clr.w)));
}
`,SF=`
var packedTexture: texture_2d<u32>;
uniform means_mins: vec3f;
uniform means_maxs: vec3f;
uniform scales_mins: vec3f;
uniform scales_maxs: vec3f;
fn unpackU32(u: u32) -> vec4f {
	return vec4f(
		f32((u >> 24u) & 0xFFu) / 255.0,
		f32((u >> 16u) & 0xFFu) / 255.0,
		f32((u >> 8u) & 0xFFu) / 255.0,
		f32(u & 0xFFu) / 255.0
	);
}
var<private> packedSample: vec4<u32>;
fn readCenter(source: ptr<function, SplatSource>) -> vec3f {
	packedSample = textureLoad(packedTexture, source.uv, 0);
	let l: vec3f = unpackU32(packedSample.x).xyz;
	let u: vec3f = unpackU32(packedSample.y).xyz;
	let n: vec3f = (l * 255.0 + u * 255.0 * 256.0) / 65535.0;
	let v: vec3f = mix(uniform.means_mins, uniform.means_maxs, n);
	return sign(v) * (exp(abs(v)) - 1.0);
}
const norm: f32 = 2.0 / sqrt(2.0);
fn readCovariance(source: ptr<function, SplatSource>, covA_ptr: ptr<function, vec3f>, covB_ptr: ptr<function, vec3f>) {
	let qdata: vec4f = unpackU32(packedSample.z);
	let sdata: vec3f = unpackU32(packedSample.w).xyz;
	let abc: vec3f = (qdata.xyz - 0.5) * norm;
	let d: f32 = sqrt(max(0.0, 1.0 - dot(abc, abc)));
	let mode: u32 = u32(qdata.w * 255.0 + 0.5) - 252u;
	var quat: vec4f;
	if (mode == 0u) {
		quat = vec4f(d, abc);
	} else if (mode == 1u) {
		quat = vec4f(abc.x, d, abc.y, abc.z);
	} else if (mode == 2u) {
		quat = vec4f(abc.x, abc.y, d, abc.z);
	} else {
		quat = vec4f(abc.x, abc.y, abc.z, d);
	}
	let rot: mat3x3f = quatToMat3(quat);
	let scale: vec3f = exp(mix(uniform.scales_mins, uniform.scales_maxs, sdata));
	let M: mat3x3f = transpose(mat3x3f(
		scale.x * rot[0],
		scale.y * rot[1],
		scale.z * rot[2]
	));
	*covA_ptr = vec3f(dot(M[0], M[0]), dot(M[0], M[1]), dot(M[0], M[2]));
	*covB_ptr = vec3f(dot(M[1], M[1]), dot(M[1], M[2]), dot(M[2], M[2]));
}
`,yF=`
var sh_centroids: texture_2d<f32>;
uniform shN_mins: f32;
uniform shN_maxs: f32;
fn readSHData(source: ptr<function, SplatSource>, sh: ptr<function, array<vec3f, SH_COEFFS>>, scale: ptr<function, f32>) {
	let t: vec2<i32> = vec2<i32>(i32(packedSample.x & 255u), i32(packedSample.y & 255u));
	let n: i32 = t.x + t.y * 256;
	let u: i32 = (n % 64) * SH_COEFFS;
	let v: i32 = n / 64;
	for (var i: i32 = 0; i < SH_COEFFS; i = i + 1) {
		sh[i] = mix(vec3f(uniform.shN_mins), vec3f(uniform.shN_maxs), textureLoad(sh_centroids, vec2<i32>(u + i, v), 0).xyz);
	}
	*scale = 1.0;
}
`,TF=`
uniform viewport: vec2f;
uniform camera_params: vec4f;
fn initCorner(source: ptr<function, SplatSource>, center: ptr<function, SplatCenter>, corner: ptr<function, SplatCorner>) -> bool {
	var covA: vec3f;
	var covB: vec3f;
	readCovariance(source, &covA, &covB);
	let Vrk = mat3x3f(
		vec3f(covA.x, covA.y, covA.z),
		vec3f(covA.y, covB.x, covB.y),
		vec3f(covA.z, covB.y, covB.z)
	);
	let focal = uniform.viewport.x * center.projMat00;
	let v = select(center.view.xyz, vec3f(0.0, 0.0, 1.0), uniform.camera_params.w == 1.0);
	let J1 = focal / v.z;
	let J2 = -J1 / v.z * v.xy;
	let J = mat3x3f(
		vec3f(J1, 0.0, J2.x),
		vec3f(0.0, J1, J2.y),
		vec3f(0.0, 0.0, 0.0)
	);
	let W = transpose(mat3x3f(center.modelView[0].xyz, center.modelView[1].xyz, center.modelView[2].xyz));
	let T = W * J;
	let cov = transpose(T) * Vrk * T;
	#if GSPLAT_AA
		let detOrig = cov[0][0] * cov[1][1] - cov[0][1] * cov[1][0];
		let detBlur = (cov[0][0] + 0.3) * (cov[1][1] + 0.3) - cov[0][1] * cov[1][0];
		corner.aaFactor = sqrt(detOrig / detBlur);
	#endif
	let diagonal1 = cov[0][0] + 0.3;
	let offDiagonal = cov[0][1];
	let diagonal2 = cov[1][1] + 0.3;
	let mid = 0.5 * (diagonal1 + diagonal2);
	let radius = length(vec2f((diagonal1 - diagonal2) / 2.0, offDiagonal));
	let lambda1 = mid + radius;
	let lambda2 = max(mid - radius, 0.1);
	let vmin = min(1024.0, min(uniform.viewport.x, uniform.viewport.y));
	let l1 = 2.0 * min(sqrt(2.0 * lambda1), vmin);
	let l2 = 2.0 * min(sqrt(2.0 * lambda2), vmin);
	if (l1 < 2.0 && l2 < 2.0) {
		return false;
	}
	let c = center.proj.ww / uniform.viewport;
	if (any((abs(center.proj.xy) - vec2f(max(l1, l2)) * c) > center.proj.ww)) {
		return false;
	}
	let diagonalVector = normalize(vec2f(offDiagonal, lambda1 - diagonal1));
	let v1 = l1 * diagonalVector;
	let v2 = l2 * vec2f(diagonalVector.y, -diagonalVector.x);
	corner.offset = (source.cornerUV.x * v1 + source.cornerUV.y * v2) * c;
	corner.uv = source.cornerUV;
	return true;
}
`,xF=`
var transformA: texture_2d<u32>;
var transformB: texture_2d<f32>;
var<private> tAw: u32;
fn readCenter(source: ptr<function, SplatSource>) -> vec3f {
	let tA: vec4<u32> = textureLoad(transformA, source.uv, 0);
	tAw = tA.w;
	return bitcast<vec3f>(tA.xyz);
}
fn unpackRotation(packed: vec3f) -> vec4f {
	return vec4f(packed.xyz, sqrt(max(0.0, 1.0 - dot(packed, packed))));
}
fn readCovariance(source: ptr<function, SplatSource>, covA_ptr: ptr<function, vec3f>, covB_ptr: ptr<function, vec3f>) {
	let tB: vec4f = textureLoad(transformB, source.uv, 0);
	let rot: mat3x3f = quatToMat3(unpackRotation(vec3f(unpack2x16float(bitcast<u32>(tAw)), tB.w)).wxyz);
	let scale: vec3f = tB.xyz;
	let M = transpose(mat3x3f(
		scale.x * rot[0],
		scale.y * rot[1],
		scale.z * rot[2]
	));
	*covA_ptr = vec3f(dot(M[0], M[0]), dot(M[0], M[1]), dot(M[0], M[2]));
	*covB_ptr = vec3f(dot(M[1], M[1]), dot(M[1], M[2]), dot(M[2], M[2]));
}
`,EF=`
#include "tonemappingPS"
#include "decodePS"
#include "gammaPS"
fn prepareOutputFromGamma(gammaColor: vec3f) -> vec3f {
	#if TONEMAP == NONE
		#if GAMMA == NONE
			return decodeGamma3(gammaColor);
		#else 
			return gammaColor;
		#endif
	#else
		return gammaCorrectOutput(toneMap(decodeGamma3(gammaColor)));
	#endif
}
`,AF=`
#ifndef DITHER_NONE
	#include "bayerPS"
	#include "opacityDitherPS"
	varying id: f32;
#endif
#ifdef PICK_PASS
	#include "pickPS"
#endif
#if defined(SHADOW_PASS) || defined(PICK_PASS) || defined(PREPASS_PASS)
	uniform alphaClip: f32;
#endif
#ifdef PREPASS_PASS
	varying vLinearDepth: f32;
	#include "floatAsUintPS"
#endif
const EXP_A: f32	  = 12102203.0;
const EXP_BC_RMS: i32 = 1064866808;
fn fastExp(x: f32) -> f32 {
	var i: i32 = i32(EXP_A * x) + EXP_BC_RMS;
	return bitcast<f32>(i);
}
varying gaussianUV: vec2f;
varying gaussianColor: vec4f;
@fragment
fn fragmentMain(input: FragmentInput) -> FragmentOutput {
	var output: FragmentOutput;
	let A: f32 = dot(gaussianUV, gaussianUV);
	if (A > 1.0) {
		discard;
		return output;
	}
	var alpha: f32 = fastExp(-A * 4.0) * gaussianColor.a;
	#if defined(SHADOW_PASS) || defined(PICK_PASS) || defined(PREPASS_PASS)
		if (alpha < uniform.alphaClip) {
			discard;
			return output;
		}
	#endif
	#ifdef PICK_PASS
		output.color = getPickOutput();
	#elif SHADOW_PASS
		output.color = vec4f(0.0, 0.0, 0.0, 1.0);
	#elif PREPASS_PASS
		output.color = float2vec4(vLinearDepth);
	#else
		if (alpha < (1.0 / 255.0)) {
			discard;
			return output;
		}
		#ifndef DITHER_NONE
			opacityDither(&alpha, id * 0.013);
		#endif
		output.color = vec4f(input.gaussianColor.xyz * alpha, alpha);
	#endif
	return output;
}`,bF=`
#if SH_BANDS > 0
fn unpack111011s(bits: u32) -> vec3f {
	return (vec3f((vec3<u32>(bits) >> vec3<u32>(21u, 11u, 0u)) & vec3<u32>(0x7ffu, 0x3ffu, 0x7ffu)) / vec3f(2047.0, 1023.0, 2047.0)) * 2.0 - 1.0;
}
struct ScaleAndSH {
	scale: f32,
	a: vec3f,
	b: vec3f,
	c: vec3f
};
fn fetchScale(t_in: vec4<u32>) -> ScaleAndSH {
	var result: ScaleAndSH;
	result.scale = bitcast<f32>(t_in.x);
	result.a = unpack111011s(t_in.y);
	result.b = unpack111011s(t_in.z);
	result.c = unpack111011s(t_in.w);
	return result;
}
struct SH {
	a: vec3f,
	b: vec3f,
	c: vec3f,
	d: vec3f
};
fn fetch4(t_in: vec4<u32>) -> SH {
	var result: SH;
	result.a = unpack111011s(t_in.x);
	result.b = unpack111011s(t_in.y);
	result.c = unpack111011s(t_in.z);
	result.d = unpack111011s(t_in.w);
	return result;
}
fn fetch1(t_in: u32) -> vec3f {
	return unpack111011s(t_in);
}
#if SH_BANDS == 1
	var splatSH_1to3: texture_2d<u32>;
	fn readSHData(source: ptr<function, SplatSource>, sh: ptr<function, array<vec3f, 3>>, scale: ptr<function, f32>) {
		let result = fetchScale(textureLoad(splatSH_1to3, source.uv, 0));
		*scale = result.scale;
		sh[0] = result.a;
		sh[1] = result.b;
		sh[2] = result.c;
	}
#elif SH_BANDS == 2
	var splatSH_1to3: texture_2d<u32>;
	var splatSH_4to7: texture_2d<u32>;
	var splatSH_8to11: texture_2d<u32>;
	fn readSHData(source: ptr<function, SplatSource>, sh: ptr<function, array<vec3f, 8>>, scale: ptr<function, f32>) {
		let first: ScaleAndSH = fetchScale(textureLoad(splatSH_1to3, source.uv, 0));
		*scale = first.scale;
		sh[0] = first.a;
		sh[1] = first.b;
		sh[2] = first.c;
		let second: SH = fetch4(textureLoad(splatSH_4to7, source.uv, 0));
		sh[3] = second.a;
		sh[4] = second.b;
		sh[5] = second.c;
		sh[6] = second.d;
		sh[7] = fetch1(textureLoad(splatSH_8to11, source.uv, 0).x);
	}
#else
	var splatSH_1to3: texture_2d<u32>;
	var splatSH_4to7: texture_2d<u32>;
	var splatSH_8to11: texture_2d<u32>;
	var splatSH_12to15: texture_2d<u32>;
	fn readSHData(source: ptr<function, SplatSource>, sh: ptr<function, array<vec3f, 15>>, scale: ptr<function, f32>) {
		let first: ScaleAndSH = fetchScale(textureLoad(splatSH_1to3, source.uv, 0));
		*scale = first.scale;
		sh[0] = first.a;
		sh[1] = first.b;
		sh[2] = first.c;
		let second: SH = fetch4(textureLoad(splatSH_4to7, source.uv, 0));
		sh[3] = second.a;
		sh[4] = second.b;
		sh[5] = second.c;
		sh[6] = second.d;
		let third: SH = fetch4(textureLoad(splatSH_8to11, source.uv, 0));
		sh[7] = third.a;
		sh[8] = third.b;
		sh[9] = third.c;
		sh[10] = third.d;
		let fourth: SH = fetch4(textureLoad(splatSH_12to15, source.uv, 0));
		sh[11] = fourth.a;
		sh[12] = fourth.b;
		sh[13] = fourth.c;
		sh[14] = fourth.d;
	}
#endif
#endif
`,wF=`
attribute vertex_position: vec3f;
attribute vertex_id_attrib: u32;
uniform numSplats: u32;
var splatOrder: texture_2d<u32>;
fn initSource(source: ptr<function, SplatSource>) -> bool {
	let w: u32 = textureDimensions(splatOrder, 0).x;
	source.order = vertex_id_attrib + u32(vertex_position.z);
	if (source.order >= uniform.numSplats) {
		return false;
	}
	let orderUV = vec2i(vec2u(source.order % w, source.order / w));
	source.id = textureLoad(splatOrder, orderUV, 0).r;
	source.uv = vec2i(vec2u(source.id % w, source.id / w));
	source.cornerUV = vertex_position.xy;
	return true;
}
`,CF=`
#include "gsplatCommonVS"
varying gaussianUV: vec2f;
varying gaussianColor: vec4f;
#ifndef DITHER_NONE
	varying id: f32;
#endif
const discardVec: vec4f = vec4f(0.0, 0.0, 2.0, 1.0);
#ifdef PREPASS_PASS
	varying vLinearDepth: f32;
#endif
@vertex
fn vertexMain(input: VertexInput) -> VertexOutput {
	var output: VertexOutput;
	var source: SplatSource;
	if (!initSource(&source)) {
		output.position = discardVec;
		return output;
	}
	let modelCenter: vec3f = readCenter(&source);
	var center: SplatCenter;
	if (!initCenter(modelCenter, &center)) {
		output.position = discardVec;
		return output;
	}
	var corner: SplatCorner;
	if (!initCorner(&source, &center, &corner)) {
		output.position = discardVec;
		return output;
	}
	var clr: vec4f = readColor(&source);
	#if GSPLAT_AA
		clr.a = clr.a * corner.aaFactor;
	#endif
	#if SH_BANDS > 0
		let modelView3x3 = mat3x3f(center.modelView[0].xyz, center.modelView[1].xyz, center.modelView[2].xyz);
		let dir = normalize(modelView3x3 * center.view);
		var sh: array<vec3f, SH_COEFFS>;
		var scale: f32;
		readSHData(&source, &sh, &scale);
		clr = vec4f(clr.xyz + evalSH(&sh, dir) * scale, clr.a);
	#endif
	clipCorner(&corner, clr.w);
	output.position = center.proj + vec4f(corner.offset, 0.0, 0.0);
	output.gaussianUV = corner.uv;
	output.gaussianColor = vec4f(prepareOutputFromGamma(max(clr.xyz, vec3f(0.0))), clr.w);
	#ifndef DITHER_NONE
		output.id = f32(source.id);
	#endif
	#ifdef PREPASS_PASS
		output.vLinearDepth = -center.view.z;
	#endif
	return output;
}
`,PF=`
	attribute aPosition: vec2f;
	varying uv0: vec2f;
	@vertex fn vertexMain(input: VertexInput) -> VertexOutput {
		var output: VertexOutput;
		output.position = vec4f(input.aPosition, 0.0, 1.0);
		output.uv0 = getImageEffectUV((input.aPosition + 1.0) * 0.5);
		return output;
	}
`,LF=`
struct DrawIndexedIndirectArgs {
	indexCount: u32,
	instanceCount: u32,
	firstIndex: u32,
	baseVertex: i32,
	firstInstance: u32
};
struct DrawIndirectArgs {
	vertexCount: u32,
	instanceCount: u32,
	firstVertex: u32,
	firstInstance: u32,
	_pad: u32
};
`,IF=`
	#include "gammaPS"
	varying color: vec4f;
	@fragment
	fn fragmentMain(input : FragmentInput) -> FragmentOutput {
		var output: FragmentOutput;
		output.color = vec4f(gammaCorrectOutput(decodeGamma3(input.color.rgb)), input.color.a);
		return output;
	}
`,MF=`
	attribute vertex_position: vec4f;
	attribute vertex_color: vec4f;
	uniform matrix_model: mat4x4f;
	uniform matrix_viewProjection: mat4x4f;
	varying color: vec4f;
	@vertex
	fn vertexMain(input : VertexInput) -> VertexOutput {
		var output : VertexOutput;
		output.color = input.vertex_color;
		output.position = uniform.matrix_viewProjection * uniform.matrix_model * input.vertex_position;
		return output;
	}
`,DF=`
uniform material_iridescenceRefractionIndex: f32;
fn iridescence_iorToFresnelScalar(transmittedIor: f32, incidentIor: f32) -> f32 {
	return pow((transmittedIor - incidentIor) / (transmittedIor + incidentIor), 2.0);
}
fn iridescence_iorToFresnelVec3(transmittedIor: vec3f, incidentIor: f32) -> vec3f {
	return pow((transmittedIor - vec3f(incidentIor)) / (transmittedIor + vec3f(incidentIor)), vec3f(2.0));
}
fn iridescence_fresnelToIor(f0: vec3f) -> vec3f {
	let sqrtF0: vec3f = sqrt(f0);
	return (vec3f(1.0) + sqrtF0) / (vec3f(1.0) - sqrtF0);
}
const XYZ_TO_REC709: mat3x3f = mat3x3f(
	vec3f(3.2404542, -1.5371385, -0.4985314),
	vec3f(-0.9692660,  1.8760108,  0.0415560),
	vec3f(0.0556434, -0.2040259,  1.0572252)
);
fn iridescence_sensitivity(opd: f32, shift: vec3f) -> vec3f {
	let PI: f32 = 3.141592653589793;
	let phase: f32 = 2.0 * PI * opd * 1.0e-9;
	const val: vec3f = vec3f(5.4856e-13, 4.4201e-13, 5.2481e-13);
	const pos: vec3f = vec3f(1.6810e+06, 1.7953e+06, 2.2084e+06);
	const var_: vec3f = vec3f(4.3278e+09, 9.3046e+09, 6.6121e+09);
	var xyz: vec3f = val * sqrt(2.0 * PI * var_) * cos(pos * phase + shift) * exp(-pow(phase, 2.0) * var_);
	xyz.x = xyz.x + 9.7470e-14 * sqrt(2.0 * PI * 4.5282e+09) * cos(2.2399e+06 * phase + shift[0]) * exp(-4.5282e+09 * pow(phase, 2.0));
	xyz = xyz / vec3f(1.0685e-07);
	return XYZ_TO_REC709 * xyz;
}
fn iridescence_fresnelScalar(cosTheta: f32, f0: f32) -> f32 {
	let x: f32 = clamp(1.0 - cosTheta, 0.0, 1.0);
	let x2: f32 = x * x;
	let x5: f32 = x * x2 * x2;
	return f0 + (1.0 - f0) * x5;
}
fn iridescence_fresnelVec3(cosTheta: f32, f0: vec3f) -> vec3f {
	let x: f32 = clamp(1.0 - cosTheta, 0.0, 1.0);
	let x2: f32 = x * x;
	let x5: f32 = x * x2 * x2;
	return f0 + (vec3f(1.0) - f0) * x5;
}
fn calcIridescence(outsideIor: f32, cosTheta: f32, base_f0: vec3f, iridescenceThickness: f32) -> vec3f {
	let PI: f32 = 3.141592653589793;
	let iridescenceIor: f32 = mix(outsideIor, uniform.material_iridescenceRefractionIndex, smoothstep(0.0, 0.03, iridescenceThickness));
	let sinTheta2Sq: f32 = pow(outsideIor / iridescenceIor, 2.0) * (1.0 - pow(cosTheta, 2.0));
	let cosTheta2Sq: f32 = 1.0 - sinTheta2Sq;
	if (cosTheta2Sq < 0.0) {
		return vec3f(1.0);
	}
	let cosTheta2: f32 = sqrt(cosTheta2Sq);
	let r0: f32 = iridescence_iorToFresnelScalar(iridescenceIor, outsideIor);
	let r12: f32 = iridescence_fresnelScalar(cosTheta, r0);
	let r21: f32 = r12;
	let t121: f32 = 1.0 - r12;
	let phi12: f32 = select(0.0, PI, iridescenceIor < outsideIor);
	let phi21: f32 = PI - phi12;
	let baseIor: vec3f = iridescence_fresnelToIor(base_f0 + vec3f(0.0001));
	let r1: vec3f = iridescence_iorToFresnelVec3(baseIor, iridescenceIor);
	let r23: vec3f = iridescence_fresnelVec3(cosTheta2, r1);
	let phi23: vec3f = select(vec3f(0.0), vec3f(PI), baseIor < vec3f(iridescenceIor));
	let opd: f32 = 2.0 * iridescenceIor * iridescenceThickness * cosTheta2;
	let phi: vec3f = vec3f(phi21) + phi23;
	let r123Sq: vec3f = clamp(vec3f(r12) * r23, vec3f(1e-5), vec3f(0.9999));
	let r123: vec3f = sqrt(r123Sq);
	let rs: vec3f = pow(vec3f(t121), vec3f(2.0)) * r23 / (vec3f(1.0) - r123Sq);
	let c0: vec3f = vec3f(r12) + rs;
	var i_irid: vec3f = c0;
	var cm: vec3f = rs - vec3f(t121);
	cm = cm * r123;
	let sm1: vec3f = 2.0 * iridescence_sensitivity(1.0 * opd, 1.0 * phi);
	i_irid = i_irid + cm * sm1;
	cm = cm * r123;
	let sm2: vec3f = 2.0 * iridescence_sensitivity(2.0 * opd, 2.0 * phi);
	i_irid = i_irid + cm * sm2;
	return max(i_irid, vec3f(0.0));
}
fn getIridescenceDiffraction(cosTheta: f32, specularity: vec3f, iridescenceThickness: f32) -> vec3f {
	return calcIridescence(1.0, cosTheta, specularity, iridescenceThickness);
}
`,RF=`
#ifdef STD_IRIDESCENCE_CONSTANT
	uniform material_iridescence: f32;
#endif
fn getIridescence() {
	var iridescence = 1.0;
	#ifdef STD_IRIDESCENCE_CONSTANT
	iridescence = iridescence * uniform.material_iridescence;
	#endif
	#ifdef STD_IRIDESCENCE_TEXTURE
	iridescence = iridescence * textureSampleBias({STD_IRIDESCENCE_TEXTURE_NAME}, {STD_IRIDESCENCE_TEXTURE_NAME}Sampler, {STD_IRIDESCENCE_TEXTURE_UV}, uniform.textureBias).{STD_IRIDESCENCE_TEXTURE_CHANNEL};
	#endif
	dIridescence = iridescence; 
}
`,OF=`
uniform material_iridescenceThicknessMax: f32;
#ifdef STD_IRIDESCENCETHICKNESS_TEXTURE
	uniform material_iridescenceThicknessMin: f32;
#endif
fn getIridescenceThickness() {
	#ifdef STD_IRIDESCENCETHICKNESS_TEXTURE
		var blend: f32 = textureSampleBias({STD_IRIDESCENCETHICKNESS_TEXTURE_NAME}, {STD_IRIDESCENCETHICKNESS_TEXTURE_NAME}Sampler, {STD_IRIDESCENCETHICKNESS_TEXTURE_UV}, uniform.textureBias).{STD_IRIDESCENCETHICKNESS_TEXTURE_CHANNEL};
		var iridescenceThickness: f32 = mix(uniform.material_iridescenceThicknessMin, uniform.material_iridescenceThicknessMax, blend);
	#else
		var iridescenceThickness: f32 = uniform.material_iridescenceThicknessMax;
	#endif
	dIridescenceThickness = iridescenceThickness; 
}
`,NF=`
#ifdef STD_IOR_CONSTANT
	uniform material_refractionIndex: f32;
#endif
fn getIor() {
#ifdef STD_IOR_CONSTANT
	dIor = uniform.material_refractionIndex;
#else
	dIor = 1.0 / 1.5;
#endif
}
`,FF=`
#if defined(LIGHT{i})
	uniform light{i}_color: vec3f;
	#if LIGHT{i}TYPE == DIRECTIONAL
		uniform light{i}_direction: vec3f;
	#else
		#define LIT_CODE_LIGHTS_POINT
		uniform light{i}_position: vec3f;
		uniform light{i}_radius: f32;
		#if LIGHT{i}TYPE == SPOT
			#define LIT_CODE_LIGHTS_SPOT
			uniform light{i}_direction: vec3f;
			uniform light{i}_innerConeAngle: f32;
			uniform light{i}_outerConeAngle: f32;
		#endif
	#endif
	#if LIGHT{i}SHAPE != PUNCTUAL
		#define LIT_CODE_FALLOFF_SQUARED
		#if LIGHT{i}TYPE == DIRECTIONAL
			uniform light{i}_position: vec3f;
		#endif
		uniform light{i}_halfWidth: vec3f;
		uniform light{i}_halfHeight: vec3f;
	#else
		#if LIGHT{i}FALLOFF == LINEAR
			#define LIT_CODE_FALLOFF_LINEAR
		#endif
		#if LIGHT{i}FALLOFF == INVERSESQUARED
			#define LIT_CODE_FALLOFF_SQUARED
		#endif
	#endif
	#if defined(LIGHT{i}CASTSHADOW)
		uniform light{i}_shadowMatrix: mat4x4f;
		uniform light{i}_shadowIntensity: f32;
		uniform light{i}_shadowParams: vec4f;
		#if LIGHT{i}SHADOWTYPE == PCSS_32F
			uniform light{i}_shadowSearchArea: f32;
			uniform light{i}_cameraParams: vec4f;
			#if LIGHT{i}TYPE == DIRECTIONAL
				uniform light{i}_softShadowParams: vec4f;
			#endif
		#endif
		#if LIGHT{i}TYPE == DIRECTIONAL
			uniform light{i}_shadowMatrixPalette: array<mat4x4f, 4>;
			uniform light{i}_shadowCascadeDistances: vec4f;
			uniform light{i}_shadowCascadeCount: i32;
			uniform light{i}_shadowCascadeBlend: f32;
		#endif
		#if LIGHT{i}TYPE == OMNI
			NOT SUPPORTED
			
		#else
			#if defined(LIGHT{i}SHADOW_PCF)
				var light{i}_shadowMap: texture_depth_2d;
				var light{i}_shadowMapSampler: sampler_comparison;
			#else
				var light{i}_shadowMap: texture_2d<f32>;
				var light{i}_shadowMapSampler: sampler;
			#endif
		#endif
	#endif
	#if defined(LIGHT{i}COOKIE)
		#define LIT_CODE_COOKIE
		#if LIGHT{i}TYPE == OMNI
			NOT SUPPORTED
		#endif
		#if LIGHT{i}TYPE == SPOT
			NOT SUPPORTED
		#endif
	#endif
#endif
`,kF=`
fn getLightDiffuse(worldNormal: vec3f, viewDir: vec3f, lightDirNorm: vec3f) -> f32 {
	return max(dot(worldNormal, -lightDirNorm), 0.0);
}
`,UF=`
fn evalOmniLight(lightPosW: vec3f) -> vec3f {
	return vPositionW - lightPosW;
}
`,BF=`
#if defined(LIGHT{i})
	evaluateLight{i}(
		#if defined(LIT_IRIDESCENCE)
			iridescenceFresnel
		#endif
	);
#endif
`,VF=`
#if defined(LIGHT{i})
fn evaluateLight{i}(
	#if defined(LIT_IRIDESCENCE)
		iridescenceFresnel: vec3f
	#endif
) {
	var lightColor: vec3f = uniform.light{i}_color;
	#if LIGHT{i}TYPE == DIRECTIONAL && !defined(LIT_SHADOW_CATCHER)
		if (all(lightColor == vec3f(0.0, 0.0, 0.0))) {
			return;
		}
	#endif
	#if LIGHT{i}TYPE == DIRECTIONAL
		dLightDirNormW = uniform.light{i}_direction;
		dAtten = 1.0;
	#else
		var lightDirW: vec3f = evalOmniLight(uniform.light{i}_position);
		dLightDirNormW = normalize(lightDirW);
		#if defined(LIGHT{i}COOKIE)
			#if LIGHT{i}TYPE == SPOT
				#ifdef LIGHT{i}COOKIE_FALLOFF
					#ifdef LIGHT{i}COOKIE_TRANSFORM
						var cookieAttenuation: vec3f = getCookie2DXform(uniform.light{i}_cookie, uniform.light{i}_shadowMatrix, uniform.light{i}_cookieIntensity, uniform.light{i}_cookieMatrix, uniform.light{i}_cookieOffset).{LIGHT{i}COOKIE_CHANNEL};
					#else
						var cookieAttenuation: vec3f = getCookie2D(uniform.light{i}_cookie, uniform.light{i}_shadowMatrix, uniform.light{i}_cookieIntensity).{LIGHT{i}COOKIE_CHANNEL};
					#endif
				#else
					#ifdef LIGHT{i}COOKIE_TRANSFORM
						var cookieAttenuation: vec3f = getCookie2DClipXform(uniform.light{i}_cookie, uniform.light{i}_shadowMatrix, uniform.light{i}_cookieIntensity, uniform.light{i}_cookieMatrix, uniform.light{i}_cookieOffset).{LIGHT{i}COOKIE_CHANNEL};
					#else
						var cookieAttenuation: vec3f = getCookie2DClip(uniform.light{i}_cookie, uniform.light{i}_shadowMatrix, uniform.light{i}_cookieIntensity).{LIGHT{i}COOKIE_CHANNEL};
					#endif
				#endif
			#endif
			#if LIGHT{i}TYPE == OMNI
				var cookieAttenuation: vec3f = getCookieCube(uniform.light{i}_cookie, uniform.light{i}_shadowMatrix, uniform.light{i}_cookieIntensity).{LIGHT{i}COOKIE_CHANNEL};
			#endif
			lightColor = lightColor * cookieAttenuation;
		#endif
		#if LIGHT{i}SHAPE == PUNCTUAL
			#if LIGHT{i}FALLOFF == LINEAR
				dAtten = getFalloffLinear(uniform.light{i}_radius, lightDirW);
			#else
				dAtten = getFalloffInvSquared(uniform.light{i}_radius, lightDirW);
			#endif
		#else
			dAtten = getFalloffWindow(uniform.light{i}_radius, lightDirW);
		#endif
		#if LIGHT{i}TYPE == SPOT
			#if !defined(LIGHT{i}COOKIE) || defined(LIGHT{i}COOKIE_FALLOFF)
				dAtten = dAtten * getSpotEffect(uniform.light{i}_direction, uniform.light{i}_innerConeAngle, uniform.light{i}_outerConeAngle, dLightDirNormW);
			#endif
		#endif
	#endif
	if (dAtten < 0.00001) {
		return;
	}
	#if LIGHT{i}SHAPE != PUNCTUAL
		#if LIGHT{i}SHAPE == RECT
			calcRectLightValues(uniform.light{i}_position, uniform.light{i}_halfWidth, uniform.light{i}_halfHeight);
		#elif LIGHT{i}SHAPE == DISK
			calcDiskLightValues(uniform.light{i}_position, uniform.light{i}_halfWidth, uniform.light{i}_halfHeight);
		#elif LIGHT{i}SHAPE == SPHERE
			calcSphereLightValues(uniform.light{i}_position, uniform.light{i}_halfWidth, uniform.light{i}_halfHeight);
		#endif
	#endif
	#if LIGHT{i}SHAPE != PUNCTUAL
		#if LIGHT{i}TYPE == DIRECTIONAL
			var attenDiffuse: f32 = getLightDiffuse(litArgs_worldNormal, dViewDirW, dLightDirNormW);
		#else
			#if LIGHT{i}SHAPE == RECT
				var attenDiffuse: f32 = getRectLightDiffuse(litArgs_worldNormal, dViewDirW, lightDirW, dLightDirNormW) * 16.0;
			#elif LIGHT{i}SHAPE == DISK
				var attenDiffuse: f32 = getDiskLightDiffuse(litArgs_worldNormal, dViewDirW, lightDirW, dLightDirNormW) * 16.0;
			#elif LIGHT{i}SHAPE == SPHERE
				var attenDiffuse: f32 = getSphereLightDiffuse(litArgs_worldNormal, dViewDirW, lightDirW, dLightDirNormW) * 16.0;
			#endif
		#endif
	#else
		dAtten = dAtten * getLightDiffuse(litArgs_worldNormal, vec3(0.0), dLightDirNormW);
	#endif
	#ifdef LIGHT{i}CASTSHADOW
		#if LIGHT{i}TYPE == DIRECTIONAL
			var shadow: f32 = getShadow{i}(vec3(0.0));
		#else
			var shadow: f32 = getShadow{i}(lightDirW);
		#endif
		shadow = mix(1.0, shadow, uniform.light{i}_shadowIntensity);
		dAtten = dAtten * shadow;
		#if defined(LIT_SHADOW_CATCHER) && LIGHT{i}TYPE == DIRECTIONAL
			dShadowCatcher = dShadowCatcher * shadow;
		#endif			
	#endif
	#if LIGHT{i}SHAPE != PUNCTUAL
		#ifdef LIT_SPECULAR
			dDiffuseLight = dDiffuseLight + (((attenDiffuse * dAtten) * lightColor) * (1.0 - dLTCSpecFres));
		#else
			dDiffuseLight = dDiffuseLight + ((attenDiffuse * dAtten) * lightColor);
		#endif						
	#else
		#if defined(AREA_LIGHTS) && defined(LIT_SPECULAR)
			dDiffuseLight = dDiffuseLight + ((dAtten * lightColor) * (1.0 - litArgs_specularity));
		#else
			dDiffuseLight = dDiffuseLight + (dAtten * lightColor);
		#endif
	#endif
	#ifdef LIGHT{i}AFFECT_SPECULARITY
		#if LIGHT{i}SHAPE != PUNCTUAL
			#ifdef LIT_CLEARCOAT
				#if LIGHT{i}SHAPE == RECT
					ccSpecularLight = ccSpecularLight + (ccLTCSpecFres * getRectLightSpecular(litArgs_clearcoat_worldNormal, dViewDirW) * dAtten * lightColor);
				#elif LIGHT{i}SHAPE == DISK
					ccSpecularLight = ccSpecularLight + (ccLTCSpecFres * getDiskLightSpecular(litArgs_clearcoat_worldNormal, dViewDirW) * dAtten * lightColor);
				#elif LIGHT{i}SHAPE == SPHERE
					ccSpecularLight = ccSpecularLight + (ccLTCSpecFres * getSphereLightSpecular(litArgs_clearcoat_worldNormal, dViewDirW) * dAtten * lightColor);
				#endif
			#endif
			#ifdef LIT_SPECULAR
				#if LIGHT{i}SHAPE == RECT
					dSpecularLight = dSpecularLight + (dLTCSpecFres * getRectLightSpecular(litArgs_worldNormal, dViewDirW) * dAtten * lightColor);
				#elif LIGHT{i}SHAPE == DISK
					dSpecularLight = dSpecularLight + (dLTCSpecFres * getDiskLightSpecular(litArgs_worldNormal, dViewDirW) * dAtten * lightColor);
				#elif LIGHT{i}SHAPE == SPHERE
					dSpecularLight = dSpecularLight + (dLTCSpecFres * getSphereLightSpecular(litArgs_worldNormal, dViewDirW) * dAtten * lightColor);
				#endif
			#endif
		#else
			#if LIGHT{i}TYPE == DIRECTIONAL && LIT_FRESNEL_MODEL != NONE
				#define LIGHT{i}FRESNEL
			#endif
			#ifdef LIT_SPECULAR
				var halfDirW: vec3f = normalize(-dLightDirNormW + dViewDirW);
			#endif
			#ifdef LIT_CLEARCOAT
				var lightspecularCC: vec3f = getLightSpecular(halfDirW, ccReflDirW, litArgs_clearcoat_worldNormal, dViewDirW, dLightDirNormW, litArgs_clearcoat_gloss, dTBN) * dAtten * lightColor;
				#ifdef LIGHT{i}FRESNEL
					lightspecularCC = lightspecularCC * getFresnelCC(dot(dViewDirW, halfDirW));
				#endif
				ccSpecularLight = ccSpecularLight + lightspecularCC;
			#endif
			#ifdef LIT_SHEEN
				sSpecularLight = sSpecularLight + (getLightSpecularSheen(halfDirW, litArgs_worldNormal, dViewDirW, dLightDirNormW, litArgs_sheen_gloss) * dAtten * lightColor);
			#endif
			#ifdef LIT_SPECULAR
				var lightSpecular: vec3f = getLightSpecular(halfDirW, dReflDirW, litArgs_worldNormal, dViewDirW, dLightDirNormW, litArgs_gloss, dTBN) * dAtten * lightColor;
				#ifdef LIGHT{i}FRESNEL
					#if defined(LIT_IRIDESCENCE)
						lightSpecular = lightSpecular * getFresnel(dot(dViewDirW, halfDirW), litArgs_gloss, litArgs_specularity, iridescenceFresnel, litArgs_iridescence_intensity);
					#else
						lightSpecular = lightSpecular * getFresnel(dot(dViewDirW, halfDirW), litArgs_gloss, litArgs_specularity);
					#endif
				#else
					lightSpecular = lightSpecular * litArgs_specularity;
				#endif
				
				dSpecularLight = dSpecularLight + lightSpecular;
			#endif
		#endif
	#endif
}
#endif
`,zF=`
#ifdef LIGHT{i}CASTSHADOW
	fn getShadowSampleCoord{i}(shadowTransform: mat4x4f, shadowParams: vec4f, worldPosition: vec3f, lightPos: vec3f, lightDir: ptr<function, vec3f>, lightDirNorm: vec3f, normal: vec3f) -> vec3f {
		var surfacePosition = worldPosition;
		#ifdef LIGHT{i}_SHADOW_SAMPLE_POINT
			#ifdef LIGHT{i}_SHADOW_SAMPLE_NORMAL_OFFSET
				let distScale: f32 = length(*lightDir);
				surfacePosition = surfacePosition + normal * shadowParams.y * clamp(1.0 - dot(normal, -lightDirNorm), 0.0, 1.0) * distScale;
				*lightDir = surfacePosition - lightPos;
				return *lightDir;
			#endif
		#else
			#ifdef LIGHT{i}_SHADOW_SAMPLE_SOURCE_ZBUFFER
				#ifdef LIGHT{i}_SHADOW_SAMPLE_NORMAL_OFFSET
					surfacePosition = surfacePosition + normal * shadowParams.y;
				#endif
			#else
				#ifdef LIGHT{i}_SHADOW_SAMPLE_NORMAL_OFFSET
					#ifdef LIGHT{i}_SHADOW_SAMPLE_ORTHO
						var distScale: f32 = 1.0;
					#else
						var distScale: f32 = abs(dot(vPositionW - lightPos, lightDirNorm));
					#endif
					surfacePosition = surfacePosition + normal * shadowParams.y * clamp(1.0 - dot(normal, -lightDirNorm), 0.0, 1.0) * distScale;
				#endif
			#endif
			var positionInShadowSpace: vec4f = shadowTransform * vec4f(surfacePosition, 1.0);
			#ifdef LIGHT{i}_SHADOW_SAMPLE_ORTHO
				positionInShadowSpace.z = saturate(positionInShadowSpace.z) - 0.0001;
			#else
				#ifdef LIGHT{i}_SHADOW_SAMPLE_SOURCE_ZBUFFER
					positionInShadowSpace.xyz = positionInShadowSpace.xyz / positionInShadowSpace.w;
				#else
					positionInShadowSpace.xy = positionInShadowSpace.xy / positionInShadowSpace.w;
					positionInShadowSpace.z = length(*lightDir) * shadowParams.w;
				#endif
			#endif
			#ifdef SHADOW_SAMPLE_Z_BIAS
			#endif
			surfacePosition = positionInShadowSpace.xyz;
		#endif
		return surfacePosition;
	}
	fn getShadow{i}(lightDirW_in: vec3f) -> f32 {
		#ifdef LIGHT{i}_SHADOW_CASCADES
			var cascadeIndex: i32 = getShadowCascadeIndex(uniform.light{i}_shadowCascadeDistances, uniform.light{i}_shadowCascadeCount);
			#ifdef LIGHT{i}_SHADOW_CASCADE_BLEND
				cascadeIndex = ditherShadowCascadeIndex(cascadeIndex, uniform.light{i}_shadowCascadeDistances, uniform.light{i}_shadowCascadeCount, uniform.light{i}_shadowCascadeBlend);
			#endif
			var shadowMatrix: mat4x4f = uniform.light{i}_shadowMatrixPalette[cascadeIndex];
		#else
			var shadowMatrix: mat4x4f = uniform.light{i}_shadowMatrix;
		#endif
		var lightDirArg = lightDirW_in;
		#if LIGHT{i}TYPE == DIRECTIONAL
			var shadowCoord: vec3f = getShadowSampleCoord{i}(shadowMatrix, uniform.light{i}_shadowParams, vPositionW, vec3f(0.0), &lightDirArg, dLightDirNormW, dVertexNormalW);
		#else
			 var shadowCoord: vec3f = getShadowSampleCoord{i}(shadowMatrix, uniform.light{i}_shadowParams, vPositionW, uniform.light{i}_position, &lightDirArg, dLightDirNormW, dVertexNormalW);
		#endif
		#if LIGHT{i}TYPE == DIRECTIONAL
			shadowCoord = fadeShadow(shadowCoord, uniform.light{i}_shadowCascadeDistances);
		#endif
		#if LIGHT{i}TYPE == DIRECTIONAL
			#if LIGHT{i}SHADOWTYPE == VSM_16F
				return getShadowVSM16(light{i}_shadowMap, light{i}_shadowMapSampler, shadowCoord, uniform.light{i}_shadowParams, 5.54);
			#endif
			#if LIGHT{i}SHADOWTYPE == VSM_32F
				return getShadowVSM32(light{i}_shadowMap, light{i}_shadowMapSampler, shadowCoord, uniform.light{i}_shadowParams, 15.0);
			#endif
			#if LIGHT{i}SHADOWTYPE == PCSS_32F
				#if LIGHT{i}SHAPE != PUNCTUAL
					let shadowSearchArea = vec2f(length(uniform.light{i}_halfWidth), length(uniform.light{i}_halfHeight)) * uniform.light{i}_shadowSearchArea;
					return getShadowPCSS(light{i}_shadowMap, light{i}_shadowMapSampler, shadowCoord, uniform.light{i}_shadowParams, uniform.light{i}_cameraParams, shadowSearchArea, lightDirW_in);
				#else
					return getShadowPCSS(light{i}_shadowMap, light{i}_shadowMapSampler, shadowCoord, uniform.light{i}_shadowParams, uniform.light{i}_cameraParams, uniform.light{i}_softShadowParams, lightDirW_in);
				#endif
			#endif
			#if LIGHT{i}SHADOWTYPE == PCF1_16F || LIGHT{i}SHADOWTYPE == PCF1_32F
				return getShadowPCF1x1(light{i}_shadowMap, light{i}_shadowMapSampler, shadowCoord, uniform.light{i}_shadowParams);
			#endif
			#if LIGHT{i}SHADOWTYPE == PCF3_16F || LIGHT{i}SHADOWTYPE == PCF3_32F
				return getShadowPCF3x3(light{i}_shadowMap, light{i}_shadowMapSampler, shadowCoord, uniform.light{i}_shadowParams);
			#endif
			#if LIGHT{i}SHADOWTYPE == PCF5_16F || LIGHT{i}SHADOWTYPE == PCF5_32F
				return getShadowPCF5x5(light{i}_shadowMap, light{i}_shadowMapSampler, shadowCoord, uniform.light{i}_shadowParams);
			#endif
		#endif
		#if LIGHT{i}TYPE == SPOT
			#if LIGHT{i}SHADOWTYPE == VSM_16F
				return getShadowSpotVSM16(light{i}_shadowMap, light{i}_shadowMapSampler, shadowCoord, uniform.light{i}_shadowParams, 5.54, lightDirW_in);
			#endif
			#if LIGHT{i}SHADOWTYPE == VSM_32F
				return getShadowSpotVSM32(light{i}_shadowMap, light{i}_shadowMapSampler, shadowCoord, uniform.light{i}_shadowParams, 15.0, lightDirW_in);
			#endif
			#if LIGHT{i}SHADOWTYPE == PCSS_32F
				#if LIGHT{i}SHAPE != PUNCTUAL
					var shadowSearchArea: vec2f = vec2f(length(uniform.light{i}_halfWidth), length(uniform.light{i}_halfHeight)) * uniform.light{i}_shadowSearchArea;
				#else
					var shadowSearchArea: vec2f = vec2f(uniform.light{i}_shadowSearchArea);
				#endif
				return getShadowSpotPCSS(light{i}_shadowMap, light{i}_shadowMapSampler, shadowCoord, uniform.light{i}_shadowParams, uniform.light{i}_cameraParams, shadowSearchArea, lightDirW_in);
			#endif
			#if LIGHT{i}SHADOWTYPE == PCF1_16F || LIGHT{i}SHADOWTYPE == PCF1_32F
				return getShadowSpotPCF1x1(light{i}_shadowMap, light{i}_shadowMapSampler, shadowCoord, uniform.light{i}_shadowParams);
			#endif
			#if LIGHT{i}SHADOWTYPE == PCF3_16F || LIGHT{i}SHADOWTYPE == PCF3_32F
				return getShadowSpotPCF3x3(light{i}_shadowMap, light{i}_shadowMapSampler, shadowCoord, uniform.light{i}_shadowParams);
			#endif
			#if LIGHT{i}SHADOWTYPE == PCF5_16F || LIGHT{i}SHADOWTYPE == PCF5_32F
				return getShadowSpotPCF5x5(light{i}_shadowMap, light{i}_shadowMapSampler, shadowCoord, uniform.light{i}_shadowParams);
			#endif
		#endif
		#if LIGHT{i}TYPE == OMNI
			#if LIGHT{i}SHADOWTYPE == PCSS_32F
				 var shadowSearchArea: vec2f;
				 #if LIGHT{i}SHAPE != PUNCTUAL
					var shadowSearchArea: vec2f = vec2f(length(uniform.light{i}_halfWidth), length(uniform.light{i}_halfHeight)) * uniform.light{i}_shadowSearchArea;
				#else
					var shadowSearchArea: vec2f = vec2f(uniform.light{i}_shadowSearchArea);
				#endif
				return getShadowOmniPCSS(light{i}_shadowMap, light{i}_shadowMapSampler, shadowCoord, uniform.light{i}_shadowParams, uniform.light{i}_cameraParams, shadowSearchArea, lightDirW_in);
			#endif
			#if LIGHT{i}SHADOWTYPE == PCF1_16F || LIGHT{i}SHADOWTYPE == PCF1_32F
				return getShadowOmniPCF1x1(light{i}_shadowMap, light{i}_shadowMapSampler, shadowCoord, uniform.light{i}_shadowParams, lightDirW_in);
			#endif
			#if LIGHT{i}SHADOWTYPE == PCF3_16F || LIGHT{i}SHADOWTYPE == PCF3_32F
				return getShadowOmniPCF3x3(light{i}_shadowMap, light{i}_shadowMapSampler, shadowCoord, uniform.light{i}_shadowParams, lightDirW_in);
			#endif
		#endif
	}
#endif
`,HF=`
#ifdef LIT_CLUSTERED_LIGHTS
	#define LIT_CODE_FALLOFF_LINEAR
	#define LIT_CODE_FALLOFF_SQUARED
	#define LIT_CODE_LIGHTS_POINT
	#define LIT_CODE_LIGHTS_SPOT
#endif
#ifdef AREA_LIGHTS
	var areaLightsLutTex1: texture_2d<f32>;
	var areaLightsLutTex1Sampler: sampler;
	var areaLightsLutTex2: texture_2d<f32>;
	var areaLightsLutTex2Sampler: sampler;
#endif
#ifdef LIT_LIGHTING
	#include "lightDiffuseLambertPS"
	#if defined(AREA_LIGHTS) || defined(LIT_CLUSTERED_AREA_LIGHTS)
		#include "ltcPS"
	#endif
#endif
#ifdef SHADOW_DIRECTIONAL
	#include "shadowCascadesPS"
#endif
#if defined(SHADOW_KIND_PCF1)
	#include "shadowPCF1PS"
#endif
#if defined(SHADOW_KIND_PCF3)
	#include "shadowPCF3PS"
#endif
#if defined(SHADOW_KIND_PCF5)
	#include "shadowPCF5PS"
#endif
#if defined(SHADOW_KIND_PCSS)
	#include "linearizeDepthPS"
	#include "shadowSoftPS"
#endif
#if defined(SHADOW_KIND_VSM)
	#include "shadowEVSMPS"
#endif
#ifdef LIT_CODE_FALLOFF_LINEAR
	#include "falloffLinearPS"
#endif
#ifdef LIT_CODE_FALLOFF_SQUARED
	#include "falloffInvSquaredPS"
#endif
#ifdef LIT_CODE_LIGHTS_POINT
	#include "lightDirPointPS"
#endif
#ifdef LIT_CODE_LIGHTS_SPOT
	#include "spotPS"
#endif
#ifdef LIT_CODE_COOKIE
	#include "cookiePS"
#endif
#ifdef LIT_CLUSTERED_LIGHTS
	#include "clusteredLightPS"
#endif
#ifdef LIGHT_COUNT > 0
	#include "lightFunctionShadowPS, LIGHT_COUNT"
	#include "lightFunctionLightPS, LIGHT_COUNT"
#endif
`,GF=`
fn addLightMap(
	lightmap: vec3f,
	dir: vec3f,
	worldNormal: vec3f,
	viewDir: vec3f,
	reflectionDir: vec3f,
	gloss: f32,
	specularity: vec3f,
	vertexNormal: vec3f,
	tbn: mat3x3f
#if defined(LIT_IRIDESCENCE)
	, iridescenceFresnel: vec3f,
	iridescenceIntensity: f32
#endif
) {
	#if defined(LIT_SPECULAR) && defined(LIT_DIR_LIGHTMAP)
		if (dot(dir, dir) < 0.0001) {
				dDiffuseLight = dDiffuseLight + lightmap;
		} else {
			let vlight: f32 = saturate(dot(dir, -vertexNormal));
			let flight: f32 = saturate(dot(dir, -worldNormal));
			let nlight: f32 = (flight / max(vlight, 0.01)) * 0.5;
			dDiffuseLight = dDiffuseLight + lightmap * nlight * 2.0;
			let halfDir: vec3f = normalize(-dir + viewDir);
			var specularLight: vec3f = lightmap * getLightSpecular(halfDir, reflectionDir, worldNormal, viewDir, dir, gloss, tbn);
			#ifdef LIT_SPECULAR_FRESNEL
				specularLight = specularLight *
					getFresnel(dot(viewDir, halfDir),
					gloss,
					specularity
				#if defined(LIT_IRIDESCENCE)
					, iridescenceFresnel,
					iridescenceIntensity
				#endif
					);
			#endif
			dSpecularLight = dSpecularLight + specularLight;
		}
	#else
		dDiffuseLight = dDiffuseLight + lightmap;
	#endif
}
`,WF=`
#ifdef STD_LIGHTMAP_DIR
	var<private> dLightmapDir: vec3f;
	var texture_dirLightMap: texture_2d<f32>;
	var texture_dirLightMapSampler: sampler;
#endif
fn getLightMap() {
	dLightmap = vec3f(1.0);
	#ifdef STD_LIGHT_TEXTURE
		dLightmap = dLightmap * {STD_LIGHT_TEXTURE_DECODE}(textureSampleBias({STD_LIGHT_TEXTURE_NAME}, {STD_LIGHT_TEXTURE_NAME}Sampler, {STD_LIGHT_TEXTURE_UV}, uniform.textureBias)).{STD_LIGHT_TEXTURE_CHANNEL};
		#ifdef STD_LIGHTMAP_DIR
			var dir: vec3f = textureSampleBias(texture_dirLightMap, texture_dirLightMapSampler, {STD_LIGHT_TEXTURE_UV}, uniform.textureBias).xyz * 2.0 - 1.0;
			var dirDot = dot(dir, dir);
			dLightmapDir = select(vec3(0.0), dir / sqrt(dirDot), dirDot > 0.001);
		#endif
	#endif
	#ifdef STD_LIGHT_VERTEX
		dLightmap = dLightmap * saturate(vVertexColor.{STD_LIGHT_VERTEX_CHANNEL});
	#endif
}
`,$F=`
fn calcLightSpecular(gloss: f32, worldNormal: vec3f, viewDir: vec3f, h: vec3f, lightDirNorm: vec3f, tbn: mat3x3f) -> f32 {
	let PI: f32 = 3.141592653589793;
	let roughness: f32 = max((1.0 - gloss) * (1.0 - gloss), 0.001);
	let alphaRoughness: f32 = roughness * roughness;
	let anisotropy: f32 = dAnisotropy;
	let direction: vec2f = dAnisotropyRotation;
	let at: f32 = mix(alphaRoughness, 1.0, anisotropy * anisotropy);
	let ab: f32 = clamp(alphaRoughness, 0.001, 1.0);
	let anisotropicT: vec3f = normalize(tbn * vec3f(direction, 0.0));
	let anisotropicB: vec3f = normalize(cross(tbn[2], anisotropicT));
	let NoH: f32 = dot(worldNormal, h);
	let ToH: f32 = dot(anisotropicT, h);
	let BoH: f32 = dot(anisotropicB, h);
	let a2: f32 = at * ab;
	let v: vec3f = vec3f(ab * ToH, at * BoH, a2 * NoH);
	let v2: f32 = dot(v, v);
	let w2: f32 = a2 / v2;
	let D: f32 = a2 * w2 * w2 * (1.0 / PI);
	let ToV: f32 = dot(anisotropicT, viewDir);
	let BoV: f32 = dot(anisotropicB, viewDir);
	let ToL: f32 = dot(anisotropicT, -lightDirNorm);
	let BoL: f32 = dot(anisotropicB, -lightDirNorm);
	let NoV: f32 = dot(worldNormal, viewDir);
	let NoL: f32 = dot(worldNormal, -lightDirNorm);
	let lambdaV: f32 = NoL * length(vec3f(at * ToV, ab * BoV, NoV));
	let lambdaL: f32 = NoV * length(vec3f(at * ToL, ab * BoL, NoL));
	let G: f32 = 0.5 / (lambdaV + lambdaL);
	return D * G;
}
fn getLightSpecular(h: vec3f, reflDir: vec3f, worldNormal: vec3f, viewDir: vec3f, lightDirNorm: vec3f, gloss: f32, tbn: mat3x3f) -> f32 {
	return calcLightSpecular(gloss, worldNormal, viewDir, h, lightDirNorm, tbn);
}
`,XF=`
fn calcLightSpecular(gloss: f32, worldNormal: vec3f, h: vec3f) -> f32 {
	let nh: f32 = max( dot( h, worldNormal ), 0.0 );
	var specPow: f32 = exp2(gloss * 11.0);
	specPow = max(specPow, 0.0001);
	return pow(nh, specPow) * (specPow + 2.0) / 8.0;
}
fn getLightSpecular(h: vec3f, reflDir: vec3f, worldNormal: vec3f, viewDir: vec3f, lightDirNorm: vec3f, gloss: f32, tbn: mat3x3f) -> f32 {
	return calcLightSpecular(gloss, worldNormal, h);
}
`,qF=`
fn sheenD(normal: vec3f, h: vec3f, roughness: f32) -> f32 {
	let PI: f32 = 3.141592653589793;
	let invR: f32 = 1.0 / (roughness * roughness);
	var cos2h: f32 = max(dot(normal, h), 0.0);
	cos2h = cos2h * cos2h;
	let sin2h: f32 = max(1.0 - cos2h, 0.0078125);
	return (2.0 + invR) * pow(sin2h, invR * 0.5) / (2.0 * PI);
}
fn sheenV(normal: vec3f, viewDir: vec3f, light: vec3f) -> f32 {
	let NoV: f32 = max(dot(normal, viewDir), 0.000001);
	let NoL: f32 = max(dot(normal, light), 0.000001);
	return 1.0 / (4.0 * (NoL + NoV - NoL * NoV));
}
fn getLightSpecularSheen(h: vec3f, worldNormal: vec3f, viewDir: vec3f, lightDirNorm: vec3f, sheenGloss: f32) -> f32 {
	let D: f32 = sheenD(worldNormal, h, sheenGloss);
	let V: f32 = sheenV(worldNormal, viewDir, -lightDirNorm);
	return D * V;
}`,YF=`
#ifndef LINEARIZE_DEPTH
#define LINEARIZE_DEPTH
fn linearizeDepthWithParams(z: f32, cameraParams: vec4f) -> f32 {
	if (cameraParams.w == 0.0) {
		return (cameraParams.z * cameraParams.y) / (cameraParams.y + z * (cameraParams.z - cameraParams.y));
	} else {
		return cameraParams.z + z * (cameraParams.y - cameraParams.z);
	}
}
#ifndef CAMERAPLANES
	#define CAMERAPLANES
	uniform camera_params: vec4f;
#endif
fn linearizeDepth(z: f32) -> f32 {
	return linearizeDepthWithParams(z, uniform.camera_params);
}
#endif
`,jF=`
fn evaluateBackend() -> FragmentOutput {
	var output: FragmentOutput;
	#ifdef LIT_SSAO
		litArgs_ao = litArgs_ao * textureSampleLevel(ssaoTexture, ssaoTextureSampler, pcPosition.xy * uniform.ssaoTextureSizeInv, 0.0).r;
	#endif
	#ifdef LIT_NEEDS_NORMAL
		#ifdef LIT_SPECULAR
			getReflDir(litArgs_worldNormal, dViewDirW, litArgs_gloss, dTBN);
		#endif
		#ifdef LIT_CLEARCOAT
			ccReflDirW = normalize(-reflect(dViewDirW, litArgs_clearcoat_worldNormal));
		#endif
	#endif
	#ifdef LIT_SPECULAR_OR_REFLECTION
		#ifdef LIT_METALNESS
			var f0: f32 = 1.0 / litArgs_ior;
			f0 = (f0 - 1.0) / (f0 + 1.0);
			f0 = f0 * f0;
			litArgs_specularity = getSpecularModulate(litArgs_specularity, litArgs_albedo, litArgs_metalness, f0);
			litArgs_albedo = getAlbedoModulate(litArgs_albedo, litArgs_metalness);
		#endif
		#ifdef LIT_IRIDESCENCE
			var iridescenceFresnel: vec3f = getIridescenceDiffraction(saturate(dot(dViewDirW, litArgs_worldNormal)), litArgs_specularity, litArgs_iridescence_thickness);
		#endif
	#endif
	#ifdef LIT_ADD_AMBIENT
		addAmbient(litArgs_worldNormal);
		#ifdef LIT_SPECULAR
			dDiffuseLight = dDiffuseLight * (1.0 - litArgs_specularity);
		#endif
		#ifdef LIT_SEPARATE_AMBIENT
			var dAmbientLight: vec3f = dDiffuseLight;
			dDiffuseLight = vec3(0.0);
		#endif
	#endif
	#ifndef LIT_OLD_AMBIENT
		dDiffuseLight = dDiffuseLight * uniform.material_ambient;
	#endif
	#ifdef LIT_AO
		#ifndef LIT_OCCLUDE_DIRECT
			occludeDiffuse(litArgs_ao);
		#endif
	#endif
	#ifdef LIT_LIGHTMAP
		addLightMap(
			litArgs_lightmap, 
			litArgs_lightmapDir, 
			litArgs_worldNormal, 
			dViewDirW, 
			dReflDirW, 
			litArgs_gloss, 
			litArgs_specularity, 
			dVertexNormalW,
			dTBN
		#if defined(LIT_IRIDESCENCE)
			, iridescenceFresnel,
			litArgs_iridescence_intensity
		#endif
		);
	#endif
	#ifdef LIT_LIGHTING || LIT_REFLECTIONS
		#ifdef LIT_REFLECTIONS
			#ifdef LIT_CLEARCOAT
				addReflectionCC(ccReflDirW, litArgs_clearcoat_gloss);
			
				#ifdef LIT_SPECULAR_FRESNEL
					ccFresnel = getFresnelCC(dot(dViewDirW, litArgs_clearcoat_worldNormal));
					ccReflection = ccReflection * ccFresnel;
				#else
					ccFresnel = 0.0;
				#endif
			#endif
			#ifdef LIT_SPECULARITY_FACTOR
				ccReflection = ccReflection * litArgs_specularityFactor;
			#endif
			#ifdef LIT_SHEEN
				addReflectionSheen(litArgs_worldNormal, dViewDirW, litArgs_sheen_gloss);
			#endif
			addReflection(dReflDirW, litArgs_gloss);
			#ifdef LIT_FRESNEL_MODEL
				dReflection = vec4f(
					dReflection.rgb * getFresnel(
						dot(dViewDirW, litArgs_worldNormal),
						litArgs_gloss,
						litArgs_specularity
					#if defined(LIT_IRIDESCENCE)
						, iridescenceFresnel,
						litArgs_iridescence_intensity
					#endif
						),
					dReflection.a
				);
			#else
				dReflection = vec4f(dReflection.rgb * litArgs_specularity, dReflection.a);
			#endif
			#ifdef LIT_SPECULARITY_FACTOR
				dReflection = vec4f(dReflection.rgb * litArgs_specularityFactor, dReflection.a);
			#endif
		#endif
		#ifdef AREA_LIGHTS
			dSpecularLight = dSpecularLight * litArgs_specularity;
			#ifdef LIT_SPECULAR
				calcLTCLightValues(litArgs_gloss, litArgs_worldNormal, dViewDirW, litArgs_specularity, litArgs_clearcoat_gloss, litArgs_clearcoat_worldNormal, litArgs_clearcoat_specularity);
			#endif
		#endif
		
		#ifdef LIGHT_COUNT > 0
			#include "lightEvaluationPS, LIGHT_COUNT"
		#endif
		#ifdef LIT_CLUSTERED_LIGHTS
			addClusteredLights(litArgs_worldNormal, dViewDirW, dReflDirW,
				#if defined(LIT_CLEARCOAT)
						ccReflDirW,
				#endif
						litArgs_gloss, litArgs_specularity, dVertexNormalW, dTBN, 
				#if defined(LIT_IRIDESCENCE)
						iridescenceFresnel,
				#endif
						litArgs_clearcoat_worldNormal, litArgs_clearcoat_gloss, litArgs_sheen_gloss, litArgs_iridescence_intensity
			);
		#endif
		#ifdef AREA_LIGHTS
			#ifdef LIT_CLEARCOAT
				litArgs_clearcoat_specularity = 1.0;
			#endif
			#ifdef LIT_SPECULAR
				litArgs_specularity = vec3(1.0);
			#endif
		#endif
		#ifdef LIT_REFRACTION
			addRefraction(
				litArgs_worldNormal, 
				dViewDirW, 
				litArgs_thickness, 
				litArgs_gloss, 
				litArgs_specularity, 
				litArgs_albedo, 
				litArgs_transmission,
				litArgs_ior,
				litArgs_dispersion
				#if defined(LIT_IRIDESCENCE)
					, iridescenceFresnel, 
					litArgs_iridescence_intensity
				#endif
			);
		#endif
	#endif
	#ifdef LIT_AO
		#ifdef LIT_OCCLUDE_DIRECT
			occludeDiffuse(litArgs_ao);
		#endif
		#if LIT_OCCLUDE_SPECULAR != NONE
			occludeSpecular(litArgs_gloss, litArgs_ao, litArgs_worldNormal, dViewDirW);
		#endif
	#endif
	#ifdef LIT_SPECULARITY_FACTOR
		dSpecularLight = dSpecularLight * litArgs_specularityFactor;
	#endif
	#if !defined(LIT_OPACITY_FADES_SPECULAR)
		#if LIT_BLEND_TYPE == NORMAL || LIT_BLEND_TYPE == PREMULTIPLIED
			var specLum: f32 = dot((dSpecularLight + dReflection.rgb * dReflection.a), vec3f( 0.2126, 0.7152, 0.0722 ));
			#ifdef LIT_CLEARCOAT
				specLum = specLum + dot(ccSpecularLight * litArgs_clearcoat_specularity + ccReflection * litArgs_clearcoat_specularity, vec3f( 0.2126, 0.7152, 0.0722 ));
			#endif
			litArgs_opacity = clamp(litArgs_opacity + gammaCorrectInput(specLum), 0.0, 1.0);
		#endif
		litArgs_opacity = litArgs_opacity * uniform.material_alphaFade;
	#endif
	#ifdef LIT_LIGHTMAP_BAKING
		#ifdef LIT_LIGHTMAP_BAKING_COLOR
			#include "bakeLmEndPS"
		#endif
		#ifdef LIT_LIGHTMAP_BAKING_DIR
			#include "bakeDirLmEndPS"
		#endif
	#else
		#include "endPS"
		#include "outputAlphaPS"
	#endif
	#ifdef LIT_MSDF
		output.color = applyMsdf(output.color);
	#endif
	#include "outputPS"
	#include "debugOutputPS"
	#ifdef LIT_SHADOW_CATCHER
		output.color = vec4f(vec3f(dShadowCatcher), output.color.a);
	#endif
	return output;
}
`,KF=`
var<private> sReflection: vec3f;
var<private> dVertexNormalW: vec3f;
var<private> dTangentW: vec3f;
var<private> dBinormalW: vec3f;
var<private> dViewDirW: vec3f;
var<private> dReflDirW: vec3f;
var<private> ccReflDirW: vec3f;
var<private> dLightDirNormW: vec3f;
var<private> dAtten: f32;
var<private> dTBN: mat3x3f;
var<private> dReflection: vec4f;
var<private> dDiffuseLight: vec3f;
var<private> dSpecularLight: vec3f;
var<private> ccFresnel: f32;
var<private> ccReflection: vec3f;
var<private> ccSpecularLight: vec3f;
var<private> ccSpecularityNoFres: f32;
var<private> sSpecularLight: vec3f;
#ifdef LIT_DISPERSION
	uniform material_dispersion: f32;
#endif
#ifndef LIT_OPACITY_FADES_SPECULAR
	uniform material_alphaFade: f32;
#endif
#ifdef LIT_SSAO
	var ssaoTexture : texture_2d<f32>;
	var ssaoTextureSampler : sampler;
	uniform ssaoTextureSizeInv: vec2f;
#endif
#ifdef LIT_SHADOW_CATCHER
	var<private> dShadowCatcher: f32 = 1.0;
#endif
#if LIGHT_COUNT > 0
	#include "lightDeclarationPS, LIGHT_COUNT"
#endif
#ifdef LIT_SPECULAR
	#if LIT_FRESNEL_MODEL == NONE && !defined(LIT_REFLECTIONS) && !defined(LIT_DIFFUSE_MAP) 
		#define LIT_OLD_AMBIENT
	#endif
#endif
#ifdef STD_LIGHTMAP_DIR
	uniform bakeDir: f32;
#endif
#ifdef LIT_LIGHTMAP_BAKING_ADD_AMBIENT
	uniform ambientBakeOcclusionContrast: f32;
	uniform ambientBakeOcclusionBrightness: f32;
#endif
`,ZF=`
@fragment
fn fragmentMain(input: FragmentInput) -> FragmentOutput {
	#include "litUserMainStartPS"
	dReflection = vec4f(0.0);
	#ifdef LIT_CLEARCOAT
		ccSpecularLight = vec3f(0.0);
		ccReflection = vec3f(0.0);
	#endif
	#if LIT_NONE_SLICE_MODE == SLICED
		#include "startNineSlicedPS"
	#elif LIT_NONE_SLICE_MODE == TILED
		#include "startNineSlicedTiledPS"
	#endif
	#ifdef LIT_NEEDS_NORMAL
		dVertexNormalW = normalize(vNormalW);
		#ifdef LIT_TANGENTS
			#if defined(LIT_HEIGHTS) || defined(LIT_USE_NORMALS) || defined(LIT_USE_CLEARCOAT_NORMALS) || defined(LIT_GGX_SPECULAR)
				dTangentW = vTangentW;
				dBinormalW = vBinormalW;
			#endif
		#endif
		getViewDir();
		#ifdef LIT_TBN
			getTBN(dTangentW, dBinormalW, dVertexNormalW);
			#ifdef LIT_TWO_SIDED_LIGHTING
				handleTwoSidedLighting();
			#endif
		#endif
	#endif
	evaluateFrontend();
	#include "debugProcessFrontendPS"
	var output: FragmentOutput = evaluateBackend();
	#include "litUserMainEndPS"
	return output;
}
`,QF=`
#ifdef LIT_NEEDS_NORMAL
	#include "cubeMapRotatePS"
	#include "cubeMapProjectPS"
	#include "envProcPS"
#endif
#ifdef LIT_SPECULAR_OR_REFLECTION
	#ifdef LIT_METALNESS
		#include "metalnessModulatePS"
	#endif
	#if LIT_FRESNEL_MODEL == SCHLICK
		#include "fresnelSchlickPS"
	#endif
	#ifdef LIT_IRIDESCENCE
		#include "iridescenceDiffractionPS"
	#endif
#endif
#ifdef LIT_AO
	#include "aoDiffuseOccPS"
	#include "aoSpecOccPS"
#endif
#if LIT_REFLECTION_SOURCE == ENVATLASHQ
	#include "envAtlasPS"
	#include "reflectionEnvHQPS"
#elif LIT_REFLECTION_SOURCE == ENVATLAS
	#include "envAtlasPS"
	#include "reflectionEnvPS"
#elif LIT_REFLECTION_SOURCE == CUBEMAP
	#include "reflectionCubePS"
#elif LIT_REFLECTION_SOURCE == SPHEREMAP
	#include "reflectionSpherePS"
#endif
#ifdef LIT_REFLECTIONS
	#ifdef LIT_CLEARCOAT
		#include "reflectionCCPS"
	#endif
	#ifdef LIT_SHEEN
		#include "reflectionSheenPS"
	#endif
#endif
#ifdef LIT_REFRACTION
	#if defined(LIT_DYNAMIC_REFRACTION)
		#include "refractionDynamicPS"
	#elif defined(LIT_REFLECTIONS)
		#include "refractionCubePS"
	#endif
#endif
#ifdef LIT_SHEEN
	#include "lightSheenPS"
#endif
uniform material_ambient: vec3f;
#ifdef LIT_SPECULAR
	#ifdef LIT_LIGHTING
		#ifdef LIT_GGX_SPECULAR
			#include "lightSpecularAnisoGGXPS"
		#else
			#include "lightSpecularBlinnPS"
		#endif
	#endif
#endif
#include "combinePS"
#ifdef LIT_LIGHTMAP
	#include "lightmapAddPS"
#endif
#ifdef LIT_ADD_AMBIENT
	#include "ambientPS"
#endif
#ifdef LIT_MSDF
	#include "msdfPS"
#endif
#ifdef LIT_NEEDS_NORMAL
	#include "viewDirPS"
	#ifdef LIT_SPECULAR
		#ifdef LIT_GGX_SPECULAR
			#include "reflDirAnisoPS"
		#else
			#include "reflDirPS"
		#endif
	#endif
#endif
#include "lightingPS"
`,JF=`
#include "basePS"
#include "sphericalPS"
#include "decodePS"
#include "gammaPS"
#include "tonemappingPS"
#include "fogPS"
#if LIT_NONE_SLICE_MODE == SLICED
	#include "baseNineSlicedPS"
#elif LIT_NONE_SLICE_MODE == TILED
	#include "baseNineSlicedTiledPS"
#endif
#ifdef LIT_TBN
	#include "TBNPS"
	#ifdef LIT_TWO_SIDED_LIGHTING
		#include "twoSidedLightingPS"
	#endif
#endif
`,ek=`
#include "varyingsPS"
#include "litUserDeclarationPS"
#include "frontendDeclPS"
#if defined(PICK_PASS) || defined(PREPASS_PASS)
	#include "frontendCodePS"
	#include "litUserCodePS"
	#include "litOtherMainPS"
#elif defined(SHADOW_PASS)
	#include "frontendCodePS"
	#include "litUserCodePS"
	#include "litShadowMainPS"
#else
	#include "litForwardDeclarationPS"
	#include "litForwardPreCodePS"
	#include "frontendCodePS"
	#include "litForwardPostCodePS"
	#include "litForwardBackendPS"
	#include "litUserCodePS"
	#include "litForwardMainPS"
#endif
`,tk=`
#include "varyingsVS"
#include  "litUserDeclarationVS"
#ifdef VERTEX_COLOR
	attribute vertex_color: vec4f;
#endif
#ifdef NINESLICED
	varying vMask: vec2f;
	varying vTiledUv: vec2f;
	var<private> dMaskGlobal: vec2f;
	var<private> dTiledUvGlobal: vec2f;
	uniform innerOffset: vec4f;
	uniform outerScale: vec2f;
	uniform atlasRect: vec4f;
#endif
var<private> dPositionW: vec3f;
var<private> dModelMatrix: mat4x4f;
#include "transformCoreVS"
#ifdef UV0
	attribute vertex_texCoord0: vec2f;
	#include "uv0VS"
#endif
#ifdef UV1
	attribute vertex_texCoord1: vec2f;
	#include "uv1VS"
#endif
#ifdef LINEAR_DEPTH
	#ifndef VIEWMATRIX
	#define VIEWMATRIX
		uniform matrix_view: mat4x4f;
	#endif
#endif
#include "transformVS"
#ifdef NORMALS
	#include "normalCoreVS"
	#include "normalVS"
#endif
#ifdef TANGENTS
	attribute vertex_tangent: vec4f;
#endif
#include "uvTransformUniformsPS, UV_TRANSFORMS_COUNT"
#ifdef MSDF
	#include "msdfVS"
#endif
#include  "litUserCodeVS"
@vertex
fn vertexMain(input : VertexInput) -> VertexOutput {
	#include "litUserMainStartVS"
	var output : VertexOutput;
	output.position = getPosition();
	output.vPositionW = getWorldPosition();
	#ifdef NORMALS
		output.vNormalW = getNormal();
	#endif
	#ifdef TANGENTS
		output.vTangentW = normalize(dNormalMatrix * vertex_tangent.xyz);
		output.vBinormalW = cross(output.vNormalW, output.vTangentW) * vertex_tangent.w;
	#elif defined(GGX_SPECULAR)
		output.vObjectSpaceUpW = normalize(dNormalMatrix * vec3f(0.0, 1.0, 0.0));
	#endif
	#ifdef UV0
		var uv0: vec2f = getUv0();
		#ifdef UV0_UNMODIFIED
			output.vUv0 = uv0;
		#endif
	#endif
	#ifdef UV1
		var uv1: vec2f = getUv1();
		#ifdef UV1_UNMODIFIED
			output.vUv1 = uv1;
		#endif
	#endif
	#include "uvTransformVS, UV_TRANSFORMS_COUNT"
	#ifdef VERTEX_COLOR
		output.vVertexColor = vertex_color;
	#endif
	#ifdef LINEAR_DEPTH
		output.vLinearDepth = -(uniform.matrix_view * vec4f(output.vPositionW, 1.0)).z;
	#endif
	#ifdef MSDF
		unpackMsdfParams();
		output.outline_color = dOutlineColor;
		output.outline_thickness = dOutlineThickness;
		output.shadow_color = dShadowColor;
		output.shadow_offset = dShadowOffset;
	#endif
	#ifdef NINESLICED
		output.vMask = dMaskGlobal;
		output.vTiledUv = dTiledUvGlobal;
	#endif
	#include "litUserMainEndVS"
	return output;
}
`,sk=`
#ifdef PICK_PASS
	#include "pickPS"
#endif
#ifdef PREPASS_PASS
	#include "floatAsUintPS"
#endif
@fragment
fn fragmentMain(input: FragmentInput) -> FragmentOutput {
	#include "litUserMainStartPS"
	var output: FragmentOutput;
	
	evaluateFrontend();
	#ifdef PICK_PASS
		output.color = getPickOutput();
	#endif
	#ifdef PREPASS_PASS
		output.color = float2vec4(vLinearDepth);
	#endif
	#include "litUserMainEndPS"
	return output;
}
`,ik=`
var<private> litArgs_albedo: vec3f;
var<private> litArgs_opacity: f32;
var<private> litArgs_emission: vec3f;
var<private> litArgs_worldNormal: vec3f;
var<private> litArgs_ao: f32;
var<private> litArgs_lightmap: vec3f;
var<private> litArgs_lightmapDir: vec3f;
var<private> litArgs_metalness: f32;
var<private> litArgs_specularity: vec3f;
var<private> litArgs_specularityFactor: f32;
var<private> litArgs_gloss: f32;
var<private> litArgs_sheen_gloss: f32;
var<private> litArgs_sheen_specularity: vec3f;
var<private> litArgs_transmission: f32;
var<private> litArgs_thickness: f32;
var<private> litArgs_ior: f32;
var<private> litArgs_dispersion: f32;
var<private> litArgs_iridescence_intensity: f32;
var<private> litArgs_iridescence_thickness: f32;
var<private> litArgs_clearcoat_worldNormal: vec3f;
var<private> litArgs_clearcoat_specularity: f32;
var<private> litArgs_clearcoat_gloss: f32;
`,rk=`
	#if LIT_NONE_SLICE_MODE == TILED
		var<private> textureBias: f32 = -1000.0;
	#else
		uniform textureBias: f32;
	#endif
	#include "litShaderArgsPS"
`,ak=`
#if LIGHT_TYPE != DIRECTIONAL
	uniform view_position: vec3f;
	uniform light_radius: f32;
#endif
#if SHADOW_TYPE == PCSS_32F
	#include "linearizeDepthPS"
#endif
@fragment
fn fragmentMain(input: FragmentInput) -> FragmentOutput {
	#include "litUserMainStartPS"
	var output: FragmentOutput;
	evaluateFrontend();
	#ifdef PERSPECTIVE_DEPTH
		var depth: f32 = input.position.z;
		#if SHADOW_TYPE == PCSS_32F
			#if LIGHT_TYPE != DIRECTIONAL
				depth = linearizeDepthWithParams(depth, camera_params);
			#endif
		#endif
	#else
		var depth: f32 = min(distance(uniform.view_position, input.vPositionW) / uniform.light_radius, 0.99999);
		#define MODIFIED_DEPTH
	#endif
	#if SHADOW_TYPE == VSM_16F || SHADOW_TYPE == VSM_32F
		#if SHADOW_TYPE == VSM_32F
			var exponent: f32 = 15.0;
		#else
			var exponent: f32 = 5.54;
		#endif
		var depth_vsm = 2.0 * depth - 1.0;
		depth_vsm = exp(exponent * depth_vsm);
		output.color = vec4f(depth_vsm, depth_vsm * depth_vsm, 1.0, 1.0);
	#else
		#if SHADOW_TYPE == PCSS_32F
			output.color = vec4f(depth, 0.0, 0.0, 1.0);
		#else
			#ifdef MODIFIED_DEPTH
				output.fragDepth = depth;
			#endif
			output.color = vec4f(1.0);
		#endif
	#endif
	#include "litUserMainEndPS"
	
	return output;
}
`,nk=`
fn LTC_Uv(N: vec3f, V: vec3f, roughness: f32) -> vec2f {
	const LUT_SIZE: f32 = 64.0;
	const LUT_SCALE: f32 = (LUT_SIZE - 1.0) / LUT_SIZE;
	const LUT_BIAS: f32 = 0.5 / LUT_SIZE;
	let dotNV: f32 = saturate(dot( N, V ));
	let uv: vec2f = vec2f( roughness, sqrt( 1.0 - dotNV ) );
	return uv * LUT_SCALE + LUT_BIAS;
}
fn LTC_ClippedSphereFormFactor( f: vec3f ) -> f32 {
	let l: f32 = length( f );
	return max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );
}
fn LTC_EdgeVectorFormFactor( v1: vec3f, v2: vec3f ) -> vec3f {
	let x: f32 = dot( v1, v2 );
	let y: f32 = abs( x );
	let a: f32 = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;
	let b: f32 = 3.4175940 + ( 4.1616724 + y ) * y;
	let v: f32 = a / b;
	let inv_sqrt_term = inverseSqrt( max( 1.0 - x * x, 1e-7f ) );
	let theta_sintheta: f32 = select( (0.5 * inv_sqrt_term - v), v, x > 0.0 );
	return cross( v1, v2 ) * theta_sintheta;
}
struct Coords {
	coord0: vec3f,
	coord1: vec3f,
	coord2: vec3f,
	coord3: vec3f,
}
fn LTC_EvaluateRect( N: vec3f, V: vec3f, P: vec3f, mInv: mat3x3f, rectCoords: Coords) -> f32 {
	let v1: vec3f = rectCoords.coord1 - rectCoords.coord0;
	let v2: vec3f = rectCoords.coord3 - rectCoords.coord0;
	let lightNormal: vec3f = cross( v1, v2 );
	let factor: f32 = sign(-dot( lightNormal, P - rectCoords.coord0 ));
	let T1: vec3f = normalize( V - N * dot( V, N ) );
	let T2: vec3f = factor * cross( N, T1 );
	let mat: mat3x3f = mInv * transpose( mat3x3f( T1, T2, N ) );
	var coords: array<vec3f, 4>;
	coords[0] = mat * ( rectCoords.coord0 - P );
	coords[1] = mat * ( rectCoords.coord1 - P );
	coords[2] = mat * ( rectCoords.coord2 - P );
	coords[3] = mat * ( rectCoords.coord3 - P );
	coords[0] = normalize( coords[0] );
	coords[1] = normalize( coords[1] );
	coords[2] = normalize( coords[2] );
	coords[3] = normalize( coords[3] );
	var vectorFormFactor: vec3f = vec3f( 0.0 );
	vectorFormFactor = vectorFormFactor + LTC_EdgeVectorFormFactor( coords[0], coords[1] );
	vectorFormFactor = vectorFormFactor + LTC_EdgeVectorFormFactor( coords[1], coords[2] );
	vectorFormFactor = vectorFormFactor + LTC_EdgeVectorFormFactor( coords[2], coords[3] );
	vectorFormFactor = vectorFormFactor + LTC_EdgeVectorFormFactor( coords[3], coords[0] );
	let result: f32 = LTC_ClippedSphereFormFactor( vectorFormFactor );
	return result;
}
var<private> dLTCCoords: Coords;
fn getLTCLightCoords(lightPos: vec3f, halfWidth: vec3f, halfHeight: vec3f) -> Coords {
	var coords: Coords;
	coords.coord0 = lightPos + halfWidth - halfHeight;
	coords.coord1 = lightPos - halfWidth - halfHeight;
	coords.coord2 = lightPos - halfWidth + halfHeight;
	coords.coord3 = lightPos + halfWidth + halfHeight;
	return coords;
}
var<private> dSphereRadius: f32;
fn getSphereLightCoords(lightPos: vec3f, halfWidth: vec3f, halfHeight: vec3f) -> Coords {
	dSphereRadius = max(length(halfWidth), length(halfHeight));
	let f: vec3f = reflect(normalize(lightPos - uniform.view_position), vNormalW);
	let w: vec3f = normalize(cross(f, halfHeight));
	let h: vec3f = normalize(cross(f, w));
	return getLTCLightCoords(lightPos, w * dSphereRadius, h * dSphereRadius);
}
var<private> dLTCUV: vec2f;
#ifdef LIT_CLEARCOAT
	var<private> ccLTCUV: vec2f;
#endif
fn getLTCLightUV(gloss: f32, worldNormal: vec3f, viewDir: vec3f) -> vec2f {
	let roughness: f32 = max((1.0 - gloss) * (1.0 - gloss), 0.001);
	return LTC_Uv( worldNormal, viewDir, roughness );
}
var<private> dLTCSpecFres: vec3f;
#ifdef LIT_CLEARCOAT
	var<private> ccLTCSpecFres: vec3f;
#endif
fn getLTCLightSpecFres(uv: vec2f, specularity: vec3f) -> vec3f {
	let t2: vec4f = textureSampleLevel(areaLightsLutTex2, areaLightsLutTex2Sampler, uv, 0.0);
	return specularity * t2.x + ( vec3f( 1.0 ) - specularity) * t2.y;
}
fn calcLTCLightValues(gloss: f32, worldNormal: vec3f, viewDir: vec3f, specularity: vec3f, clearcoatGloss: f32, clearcoatWorldNormal: vec3f, clearcoatSpecularity: f32) {
	dLTCUV = getLTCLightUV(gloss, worldNormal, viewDir);
	dLTCSpecFres = getLTCLightSpecFres(dLTCUV, specularity);
	#ifdef LIT_CLEARCOAT
		ccLTCUV = getLTCLightUV(clearcoatGloss, clearcoatWorldNormal, viewDir);
		ccLTCSpecFres = getLTCLightSpecFres(ccLTCUV, vec3f(clearcoatSpecularity));
	#endif
}
fn calcRectLightValues(lightPos: vec3f, halfWidth: vec3f, halfHeight: vec3f) {
	dLTCCoords = getLTCLightCoords(lightPos, halfWidth, halfHeight);
}
fn calcDiskLightValues(lightPos: vec3f, halfWidth: vec3f, halfHeight: vec3f) {
	calcRectLightValues(lightPos, halfWidth, halfHeight);
}
fn calcSphereLightValues(lightPos: vec3f, halfWidth: vec3f, halfHeight: vec3f) {
	dLTCCoords = getSphereLightCoords(lightPos, halfWidth, halfHeight);
}
fn SolveCubic(Coefficient_in: vec4f) -> vec3f {
	let pi: f32 = 3.14159;
	var Coefficient = Coefficient_in;
	Coefficient = vec4f(Coefficient.xyz / Coefficient.w, Coefficient.w);
	let new_yz: vec2f = Coefficient.yz / 3.0;
	Coefficient = vec4f(Coefficient.x, new_yz.x, new_yz.y, Coefficient.w);
	
	let A: f32 = Coefficient.w;
	let B: f32 = Coefficient.z;
	let C: f32 = Coefficient.y;
	let D: f32 = Coefficient.x;
	let Delta: vec3f = vec3f(
		-Coefficient.z * Coefficient.z + Coefficient.y,
		-Coefficient.y * Coefficient.z + Coefficient.x,
		dot(vec2f(Coefficient.z, -Coefficient.y), Coefficient.xy)
	);
	let Discriminant: f32 = dot(vec2f(4.0 * Delta.x, -Delta.y), Delta.zy);
	var xlc: vec2f;
	var xsc: vec2f;
	{
		let A_a: f32 = 1.0;
		let C_a: f32 = Delta.x;
		let D_a: f32 = -2.0 * B * Delta.x + Delta.y;
		let Theta: f32 = atan2(sqrt(Discriminant), -D_a) / 3.0;
		let sqrt_neg_Ca = sqrt(-C_a);
		let x_1a: f32 = 2.0 * sqrt_neg_Ca * cos(Theta);
		let x_3a: f32 = 2.0 * sqrt_neg_Ca * cos(Theta + (2.0 / 3.0) * pi);
		let xl: f32 = select(x_3a, x_1a, (x_1a + x_3a) > 2.0 * B);
		xlc = vec2f(xl - B, A);
	}
	{
		let A_d: f32 = D;
		let C_d: f32 = Delta.z;
		let D_d: f32 = -D * Delta.y + 2.0 * C * Delta.z;
		let Theta: f32 = atan2(D * sqrt(Discriminant), -D_d) / 3.0;
		let sqrt_neg_Cd = sqrt(-C_d);
		let x_1d: f32 = 2.0 * sqrt_neg_Cd * cos(Theta);
		let x_3d: f32 = 2.0 * sqrt_neg_Cd * cos(Theta + (2.0 / 3.0) * pi);
		let xs: f32 = select(x_3d, x_1d, x_1d + x_3d < 2.0 * C);
		xsc = vec2f(-D, xs + C);
	}
	let E: f32 =  xlc.y * xsc.y;
	let F: f32 = -xlc.x * xsc.y - xlc.y * xsc.x;
	let G: f32 =  xlc.x * xsc.x;
	let xmc: vec2f = vec2f(C * F - B * G, -B * F + C * E);
	var Root: vec3f = vec3f(xsc.x / xsc.y, xmc.x / xmc.y, xlc.x / xlc.y);
	if (Root.x < Root.y && Root.x < Root.z) {
		Root = Root.yxz;
	} else if (Root.z < Root.x && Root.z < Root.y) {
		Root = Root.xzy;
	}
	return Root;
}
fn LTC_EvaluateDisk(N: vec3f, V: vec3f, P: vec3f, Minv: mat3x3f, points: Coords) -> f32 {
	let T1: vec3f = normalize(V - N * dot(V, N));
	let T2: vec3f = cross(N, T1);
	let R: mat3x3f = transpose( mat3x3f( T1, T2, N ) );
	var L_: array<vec3f, 3>;
	L_[0] = R * ( points.coord0 - P );
	L_[1] = R * ( points.coord1 - P );
	L_[2] = R * ( points.coord2 - P );
	let C: vec3f  = 0.5 * (L_[0] + L_[2]);
	var V1: vec3f = 0.5 * (L_[1] - L_[2]);
	var V2: vec3f = 0.5 * (L_[1] - L_[0]);
	let C_Minv: vec3f  = Minv * C;
	let V1_Minv: vec3f = Minv * V1;
	let V2_Minv: vec3f = Minv * V2;
	var a: f32;
	var b: f32;
	let d11: f32 = dot(V1_Minv, V1_Minv);
	let d22: f32 = dot(V2_Minv, V2_Minv);
	let d12: f32 = dot(V1_Minv, V2_Minv);
	if (abs(d12) / sqrt(d11 * d22) > 0.0001) {
		let tr: f32 = d11 + d22;
		let det_inner: f32 = -d12 * d12 + d11 * d22;
		let det: f32 = sqrt(det_inner);
		let u: f32 = 0.5 * sqrt(tr - 2.0 * det);
		let v: f32 = 0.5 * sqrt(tr + 2.0 * det);
		let e_max: f32 = (u + v) * (u + v);
		let e_min: f32 = (u - v) * (u - v);
		var V1_: vec3f;
		var V2_: vec3f;
		if (d11 > d22) {
			V1_ = d12 * V1_Minv + (e_max - d11) * V2_Minv;
			V2_ = d12 * V1_Minv + (e_min - d11) * V2_Minv;
		} else {
			V1_ = d12*V2_Minv + (e_max - d22)*V1_Minv;
			V2_ = d12*V2_Minv + (e_min - d22)*V1_Minv;
		}
		a = 1.0 / e_max;
		b = 1.0 / e_min;
		V1 = normalize(V1_);
		V2 = normalize(V2_);
	} else {
		a = 1.0 / dot(V1_Minv, V1_Minv);
		b = 1.0 / dot(V2_Minv, V2_Minv);
		V1 = V1_Minv * sqrt(a);
		V2 = V2_Minv * sqrt(b);
	}
	var V3: vec3f = normalize(cross(V1, V2));
	if (dot(C_Minv, V3) < 0.0) {
		V3 = V3 * -1.0;
	}
	let L: f32  = dot(V3, C_Minv);
	let x0: f32 = dot(V1, C_Minv) / L;
	let y0: f32 = dot(V2, C_Minv) / L;
	let E1: f32 = inverseSqrt(a);
	let E2: f32 = inverseSqrt(b);
	let a_scaled = a * L * L;
	let b_scaled = b * L * L;
	let c0: f32 = a_scaled * b_scaled;
	let c1: f32 = a_scaled * b_scaled * (1.0 + x0 * x0 + y0 * y0) - a_scaled - b_scaled;
	let c2: f32 = 1.0 - a_scaled * (1.0 + x0 * x0) - b_scaled * (1.0 + y0 * y0);
	let c3: f32 = 1.0;
	let roots: vec3f = SolveCubic(vec4f(c0, c1, c2, c3));
	let e1: f32 = roots.x;
	let e2: f32 = roots.y;
	let e3: f32 = roots.z;
	var avgDir: vec3f = vec3f(a_scaled * x0 / (a_scaled - e2), b_scaled * y0 / (b_scaled - e2), 1.0);
	let rotate: mat3x3f = mat3x3f(V1, V2, V3);
	avgDir = rotate * avgDir;
	avgDir = normalize(avgDir);
	let L1: f32 = sqrt(-e2 / e3);
	let L2: f32 = sqrt(-e2 / e1);
	let formFactor: f32 = max(0.0, L1 * L2 * inverseSqrt((1.0 + L1 * L1) * (1.0 + L2 * L2)));
	const LUT_SIZE_disk: f32 = 64.0;
	const LUT_SCALE_disk: f32 = ( LUT_SIZE_disk - 1.0 ) / LUT_SIZE_disk;
	const LUT_BIAS_disk: f32 = 0.5 / LUT_SIZE_disk;
	var uv: vec2f = vec2f(avgDir.z * 0.5 + 0.5, formFactor);
	uv = uv * LUT_SCALE_disk + LUT_BIAS_disk;
	let scale: f32 = textureSampleLevel(areaLightsLutTex2, areaLightsLutTex2Sampler, uv, 0.0).w;
	return formFactor * scale;
}
fn FixNan(value: f32) -> f32 {
	return select(value, 0.0, value != value);
}
fn getRectLightDiffuse(worldNormal: vec3f, viewDir: vec3f, lightDir: vec3f, lightDirNorm: vec3f) -> f32 {
	let identityMat = mat3x3f(vec3f(1.0, 0.0, 0.0), vec3f(0.0, 1.0, 0.0), vec3f(0.0, 0.0, 1.0));
	return LTC_EvaluateRect( worldNormal, viewDir, vPositionW, identityMat, dLTCCoords );
}
fn getDiskLightDiffuse(worldNormal: vec3f, viewDir: vec3f, lightDir: vec3f, lightDirNorm: vec3f) -> f32 {
	let identityMat = mat3x3f(vec3f(1.0, 0.0, 0.0), vec3f(0.0, 1.0, 0.0), vec3f(0.0, 0.0, 1.0));
	return FixNan(LTC_EvaluateDisk( worldNormal, viewDir, vPositionW, identityMat, dLTCCoords ));
}
fn getSphereLightDiffuse(worldNormal: vec3f, viewDir: vec3f, lightDir: vec3f, lightDirNorm: vec3f) -> f32 {
	let falloff: f32 = dSphereRadius / (dot(lightDir, lightDir) + dSphereRadius);
	return FixNan(getLightDiffuse(worldNormal, viewDir, lightDirNorm) * falloff);
}
fn getLTCLightInvMat(uv: vec2f) -> mat3x3f {
	let t1: vec4f = textureSampleLevel(areaLightsLutTex1, areaLightsLutTex1Sampler, uv, 0.0);
	return mat3x3f(
		vec3f( t1.x, 0.0, t1.y ),
		vec3f( 0.0, 1.0, 0.0 ),
		vec3f( t1.z, 0.0, t1.w )
	);
}
fn calcRectLightSpecular(worldNormal: vec3f, viewDir: vec3f, uv: vec2f) -> f32 {
	let mInv: mat3x3f = getLTCLightInvMat(uv);
	return LTC_EvaluateRect( worldNormal, viewDir, vPositionW, mInv, dLTCCoords );
}
fn getRectLightSpecular(worldNormal: vec3f, viewDir: vec3f) -> f32 {
	return calcRectLightSpecular(worldNormal, viewDir, dLTCUV);
}
fn calcDiskLightSpecular(worldNormal: vec3f, viewDir: vec3f, uv: vec2f) -> f32 {
	let mInv: mat3x3f = getLTCLightInvMat(uv);
	return LTC_EvaluateDisk( worldNormal, viewDir, vPositionW, mInv, dLTCCoords );
}
fn getDiskLightSpecular(worldNormal: vec3f, viewDir: vec3f) -> f32 {
	return calcDiskLightSpecular(worldNormal, viewDir, dLTCUV);
}
fn getSphereLightSpecular(worldNormal: vec3f, viewDir: vec3f) -> f32 {
	return calcDiskLightSpecular(worldNormal, viewDir, dLTCUV);
}
`,ok=`
#ifdef STD_METALNESS_CONSTANT
uniform material_metalness: f32;
#endif
fn getMetalness() {
	var metalness: f32 = 1.0;
	#ifdef STD_METALNESS_CONSTANT
		metalness = metalness * uniform.material_metalness;
	#endif
	#ifdef STD_METALNESS_TEXTURE
		metalness = metalness * textureSampleBias({STD_METALNESS_TEXTURE_NAME}, {STD_METALNESS_TEXTURE_NAME}Sampler, {STD_METALNESS_TEXTURE_UV}, uniform.textureBias).{STD_METALNESS_TEXTURE_CHANNEL};
	#endif
	#ifdef STD_METALNESS_VERTEX
	metalness = metalness * saturate(vVertexColor.{STD_METALNESS_VERTEX_CHANNEL});
	#endif
	dMetalness = metalness;
}
`,lk=`
var texture_msdfMap: texture_2d<f32>;
var texture_msdfMapSampler: sampler;
fn median(r: f32, g: f32, b: f32) -> f32 {
	return max(min(r, g), min(max(r, g), b));
}
fn map(min: f32, max: f32, v: f32) -> f32 {
	return (v - min) / (max - min);
}
uniform font_sdfIntensity: f32;
uniform font_pxrange: f32;
uniform font_textureWidth: f32;
#ifndef LIT_MSDF_TEXT_ATTRIBUTE
	uniform outline_color: vec4f;
	uniform outline_thickness: f32;
	uniform shadow_color: vec4f;
	uniform shadow_offset: vec2f;
#else
	varying outline_color: vec4f;
	varying outline_thickness: f32;
	varying shadow_color: vec4f;
	varying shadow_offset: vec2f;
#endif
fn applyMsdf(color_in: vec4f) -> vec4f {
	#ifndef LIT_MSDF_TEXT_ATTRIBUTE
		var outline_colorValue = uniform.outline_color;
		var outline_thicknessValue = uniform.outline_thickness;
		var shadow_colorValue = uniform.shadow_color;
		var shadow_offsetValue = uniform.shadow_offset;
	#else
		var outline_colorValue = outline_color;
		var outline_thicknessValue = outline_thickness;
		var shadow_colorValue = shadow_color;
		var shadow_offsetValue = shadow_offset;
	#endif
	var color = vec4f(gammaCorrectInputVec3(color_in.rgb), color_in.a);
	let tsample: vec3f = textureSample(texture_msdfMap, texture_msdfMapSampler, vUv0).rgb;
	let uvShdw: vec2f = vUv0 - shadow_offsetValue;
	let ssample: vec3f = textureSample(texture_msdfMap, texture_msdfMapSampler, uvShdw).rgb;
	let sigDist: f32 = median(tsample.r, tsample.g, tsample.b);
	var sigDistShdw: f32 = median(ssample.r, ssample.g, ssample.b);
	let smoothingMax: f32 = 0.2;
	let w: vec2f = abs(dpdx(vUv0)) + abs(dpdy(vUv0));
	let smoothing: f32 = clamp(w.x * uniform.font_textureWidth / uniform.font_pxrange, 0.0, smoothingMax);
	let mapMin: f32 = 0.05;
	let mapMax: f32 = clamp(1.0 - uniform.font_sdfIntensity, mapMin, 1.0);
	let sigDistInner: f32 = map(mapMin, mapMax, sigDist);
	let sigDistOutline: f32 = map(mapMin, mapMax, sigDist + outline_thicknessValue);
	sigDistShdw = map(mapMin, mapMax, sigDistShdw + outline_thicknessValue);
	let center: f32 = 0.5;
	let inside: f32 = smoothstep(center - smoothing, center + smoothing, sigDistInner);
	let outline: f32 = smoothstep(center - smoothing, center + smoothing, sigDistOutline);
	let shadow: f32 = smoothstep(center - smoothing, center + smoothing, sigDistShdw);
	let tcolor_outline: vec4f = outline * vec4f(outline_colorValue.a * outline_colorValue.rgb, outline_colorValue.a);
	var tcolor: vec4f = select(vec4f(0.0), tcolor_outline, outline > inside);
	tcolor = mix(tcolor, color, inside);
	let scolor_shadow: vec4f = shadow * vec4f(shadow_colorValue.a * shadow_colorValue.rgb, shadow_colorValue.a);
	let scolor: vec4f = select(tcolor, scolor_shadow, shadow > outline);
	tcolor = mix(scolor, tcolor, outline);
	tcolor = vec4f(gammaCorrectOutput(tcolor.rgb), tcolor.a);
	return tcolor;
}
`,hk=`
fn getSpecularModulate(specularity: vec3f, albedo: vec3f, metalness: f32, f0: f32) -> vec3f {
	let dielectricF0: vec3f = f0 * specularity;
	return mix(dielectricF0, albedo, metalness);
}
fn getAlbedoModulate(albedo: vec3f, metalness: f32) -> vec3f {
	return albedo * (1.0 - metalness);
}
`,ck=`
	varying uv0: vec2f;
	var morphTexture: texture_2d_array<f32>;
	uniform morphFactor: array<f32, {MORPH_TEXTURE_MAX_COUNT}>;
	uniform morphIndex: array<u32, {MORPH_TEXTURE_MAX_COUNT}>;
	uniform count: u32;
	@fragment
	fn fragmentMain(input : FragmentInput) -> FragmentOutput {
		var color = vec3f(0, 0, 0);
		let textureDims = textureDimensions(morphTexture);
		let pixelCoords = vec2i(input.uv0 * vec2f(textureDims));
		
		for (var i: u32 = 0; i < uniform.count; i = i + 1) {
			var textureIndex: u32 = uniform.morphIndex[i].element;
			var delta = textureLoad(morphTexture, pixelCoords, textureIndex, 0).xyz;
			color += uniform.morphFactor[i].element * delta;
		}
		var output: FragmentOutput;
		output.color = vec4f(color, 1.0);
		return output;
	}
`,dk=`
	attribute vertex_position: vec2f;
	varying uv0: vec2f;
	@vertex
	fn vertexMain(input: VertexInput) -> VertexOutput {
		var output: VertexOutput;
		output.position = vec4f(input.vertex_position, 0.5, 1.0);
		output.uv0 = input.vertex_position * 0.5 + vec2f(0.5, 0.5);
		return output;
	}
`,fk=`
attribute vertex_outlineParameters: vec3f;
attribute vertex_shadowParameters: vec3f;
varying outline_color: vec4f;
varying outline_thickness: f32;
varying shadow_color: vec4f;
varying shadow_offset: vec2f;
var<private> dOutlineColor: vec4f;
var<private> dOutlineThickness: f32;
var<private> dShadowColor: vec4f;
var<private> dShadowOffset: vec2f;
fn unpackMsdfParams() {
	let little: vec3f = vertex_outlineParameters % vec3f(256.0);
	let big: vec3f = (vertex_outlineParameters - little) / 256.0;
	dOutlineColor = vec4f(little.x, big.x, little.y, big.y) / 255.0;
	dOutlineThickness = little.z / 255.0 * 0.2;
	let little_shadow = vertex_shadowParameters % vec3f(256.0);
	let big_shadow = (vertex_shadowParameters - little_shadow) / 256.0;
	dShadowColor = vec4f(little_shadow.x, big_shadow.x, little_shadow.y, big_shadow.y) / 255.0;
	dShadowOffset = (vec2f(little_shadow.z, big_shadow.z) / 127.0 - 1.0) * 0.005;
}
`,uk=`
var<private> dNormalMatrix: mat3x3f;
fn getNormal() -> vec3f {
	dNormalMatrix = getNormalMatrix(dModelMatrix);
	let localNormal: vec3f = getLocalNormal(vertex_normal);
	return normalize(dNormalMatrix * localNormal);
}`,pk=`
attribute vertex_normal: vec3f;
uniform matrix_normal: mat3x3f;
#ifdef MORPHING_NORMAL
	#ifdef MORPHING_INT
		var morphNormalTex: texture_2d<u32>;
		var morphNormalTexSampler: sampler;
	#else
		var morphNormalTex: texture_2d<f32>;
		var morphNormalTexSampler: sampler;
	#endif
#endif
fn getLocalNormal(vertexNormal: vec3f) -> vec3f {
	var localNormal: vec3f = vertexNormal;
	#ifdef MORPHING_NORMAL
		let morphUV: vec2i = getTextureMorphCoords();
		#ifdef MORPHING_INT
			let morphNormalInt: vec4u = textureLoad(morphNormalTex, morphUV, 0);
			let morphNormalF: vec3f = vec3f(morphNormalInt.xyz) / 65535.0 * 2.0 - 1.0;
			localNormal = localNormal + morphNormalF;
		#else
			let morphNormal: vec3f = textureLoad(morphNormalTex, morphUV, 0).xyz;
			localNormal = localNormal + morphNormal;
		#endif
	#endif
	return localNormal;
}
#if defined(SKIN) || defined(BATCH)
	fn getNormalMatrix(modelMatrix: mat4x4f) -> mat3x3f {
		return mat3x3f(modelMatrix[0].xyz, modelMatrix[1].xyz, modelMatrix[2].xyz);
	}
#elif defined(INSTANCING)
	fn getNormalMatrix(modelMatrix: mat4x4f) -> mat3x3f {
		return mat3x3f(modelMatrix[0].xyz, modelMatrix[1].xyz, modelMatrix[2].xyz);
	}
#else
	fn getNormalMatrix(modelMatrix: mat4x4f) -> mat3x3f {
		return uniform.matrix_normal;
	}
#endif
`,mk=`
#ifdef STD_NORMAL_TEXTURE
	uniform material_bumpiness: f32;
#endif
#ifdef STD_NORMALDETAIL_TEXTURE
	uniform material_normalDetailMapBumpiness: f32;
	fn blendNormals(inN1: vec3f, inN2: vec3f) -> vec3f {
		let n1: vec3f = inN1 + vec3f(0.0, 0.0, 1.0);
		let n2: vec3f = inN2 * vec3f(-1.0, -1.0, 1.0);
		return n1 * dot(n1, n2) / n1.z - n2;
	}
#endif
fn getNormal() {
#ifdef STD_NORMAL_TEXTURE
	var normalMap: vec3f = {STD_NORMAL_TEXTURE_DECODE}(textureSampleBias({STD_NORMAL_TEXTURE_NAME}, {STD_NORMAL_TEXTURE_NAME}Sampler, {STD_NORMAL_TEXTURE_UV}, uniform.textureBias));
	normalMap = mix(vec3f(0.0, 0.0, 1.0), normalMap, uniform.material_bumpiness);
	#ifdef STD_NORMALDETAIL_TEXTURE
		var normalDetailMap: vec3f = {STD_NORMALDETAIL_TEXTURE_DECODE}(textureSampleBias({STD_NORMALDETAIL_TEXTURE_NAME}, {STD_NORMALDETAIL_TEXTURE_NAME}Sampler, {STD_NORMALDETAIL_TEXTURE_UV}, uniform.textureBias));
		normalDetailMap = mix(vec3f(0.0, 0.0, 1.0), normalDetailMap, uniform.material_normalDetailMapBumpiness);
		normalMap = blendNormals(normalMap, normalDetailMap);
	#endif
	dNormalW = normalize(dTBN * normalMap);
#else
	dNormalW = dVertexNormalW;
#endif
}
`,_k=`
uniform material_opacity: f32;
fn getOpacity() {
	dAlpha = uniform.material_opacity;
	#ifdef STD_OPACITY_TEXTURE
	dAlpha = dAlpha * textureSampleBias({STD_OPACITY_TEXTURE_NAME}, {STD_OPACITY_TEXTURE_NAME}Sampler, {STD_OPACITY_TEXTURE_UV}, uniform.textureBias).{STD_OPACITY_TEXTURE_CHANNEL};
	#endif
	#ifdef STD_OPACITY_VERTEX
	dAlpha = dAlpha * clamp(vVertexColor.{STD_OPACITY_VERTEX_CHANNEL}, 0.0, 1.0);
	#endif
}
`,gk=`
#if STD_OPACITY_DITHER == BAYER8
	#include "bayerPS"
#endif
uniform blueNoiseJitter: vec4f;
#if STD_OPACITY_DITHER == BLUENOISE
	var blueNoiseTex32 : texture_2d<f32>;
	var blueNoiseTex32Sampler : sampler;
#endif
fn opacityDither(alpha: f32, id: f32) {
	#if STD_OPACITY_DITHER == BAYER8
		var noise: f32 = bayer8(floor((pcPosition.xy + uniform.blueNoiseJitter.xy + id) % vec2f(8.0))) / 64.0;
	#else
		#if STD_OPACITY_DITHER == BLUENOISE
			var uv = fract(pcPosition.xy / 32.0 + uniform.blueNoiseJitter.xy + id);
			var noise: f32 = textureSampleLevel(blueNoiseTex32, blueNoiseTex32Sampler, uv, 0.0).y;
		#endif
		#if STD_OPACITY_DITHER == IGNNOISE
			var magic = vec3f(0.06711056, 0.00583715, 52.9829189);
			var noise: f32 = fract(magic.z * fract(dot(pcPosition.xy + uniform.blueNoiseJitter.xy + id, magic.xy)));
		#endif
	#endif
	noise = pow(noise, 2.2);
	if (alpha < noise) {
		discard;
	}
}
`,vk=`
`,Sk=`
#if LIT_BLEND_TYPE == NORMAL || LIT_BLEND_TYPE == ADDITIVEALPHA || defined(LIT_ALPHA_TO_COVERAGE)
	output.color = vec4f(output.color.rgb, litArgs_opacity);
#elif LIT_BLEND_TYPE == PREMULTIPLIED
	output.color = vec4f(output.color.rgb * litArgs_opacity, litArgs_opacity);
#else
	output.color = vec4f(output.color.rgb, 1.0);
#endif
`,yk=`
varying vUv0: vec2f;
var source: texture_2d<f32>;
var sourceSampler: sampler;
@fragment fn fragmentMain(input : FragmentInput) -> FragmentOutput {
	var output: FragmentOutput;
	output.color = textureSample(source, sourceSampler, input.vUv0);
	return output;
}
`,Tk=`
uniform material_sheen: vec3f;
fn getSheen() {
	var sheenColor = uniform.material_sheen;
	#ifdef STD_SHEEN_TEXTURE
	sheenColor = sheenColor * {STD_SHEEN_TEXTURE_DECODE}(textureSampleBias({STD_SHEEN_TEXTURE_NAME}, {STD_SHEEN_TEXTURE_NAME}Sampler, {STD_SHEEN_TEXTURE_UV}, uniform.textureBias)).{STD_SHEEN_TEXTURE_CHANNEL};
	#endif
	#ifdef STD_SHEEN_VERTEX
	sheenColor = sheenColor * saturate3(vVertexColor.{STD_SHEEN_VERTEX_CHANNEL});
	#endif
	sSpecularity = sheenColor;
}
`,xk=`
uniform material_sheenGloss: f32;
fn getSheenGlossiness() {
	var sheenGlossiness = uniform.material_sheenGloss;
	#ifdef STD_SHEENGLOSS_TEXTURE
	sheenGlossiness = sheenGlossiness * textureSampleBias({STD_SHEENGLOSS_TEXTURE_NAME}, {STD_SHEENGLOSS_TEXTURE_NAME}Sampler, {STD_SHEENGLOSS_TEXTURE_UV}, uniform.textureBias).{STD_SHEENGLOSS_TEXTURE_CHANNEL};
	#endif
	#ifdef STD_SHEENGLOSS_VERTEX
	sheenGlossiness = sheenGlossiness * saturate(vVertexColor.{STD_SHEENGLOSS_VERTEX_CHANNEL});
	#endif
	#ifdef STD_SHEENGLOSS_INVERT
	sheenGlossiness = 1.0 - sheenGlossiness;
	#endif
	sGlossiness = sheenGlossiness + 0.0000001;
}
`,Ek=`
uniform material_heightMapFactor: f32;
fn getParallax() {
	var parallaxScale = uniform.material_heightMapFactor;
	var height: f32 = textureSampleBias({STD_HEIGHT_TEXTURE_NAME}, {STD_HEIGHT_TEXTURE_NAME}Sampler, {STD_HEIGHT_TEXTURE_UV}, uniform.textureBias).{STD_HEIGHT_TEXTURE_CHANNEL};
	height = height * parallaxScale - parallaxScale * 0.5;
	var viewDirT: vec3f = dViewDirW * dTBN;
	viewDirT.z = viewDirT.z + 0.42;
	dUvOffset = height * (viewDirT.xy / viewDirT.z);
}
`,Ak=`
uniform meshInstanceId: u32;
fn getPickOutput() -> vec4f {
	let inv: vec4f = vec4f(1.0 / 255.0);
	let shifts: vec4u = vec4u(16u, 8u, 0u, 24u);
	let col: vec4u = (vec4u(uniform.meshInstanceId) >> shifts) & vec4u(0xffu);
	return vec4f(col) * inv;
}`,bk=`
fn getReflDir(worldNormal: vec3f, viewDir: vec3f, gloss: f32, tbn: mat3x3f) {
	dReflDirW = normalize(-reflect(viewDir, worldNormal));
}
`,wk=`
fn getReflDir(worldNormal: vec3f, viewDir: vec3f, gloss: f32, tbn: mat3x3f) {
	let roughness: f32 = sqrt(1.0 - min(gloss, 1.0));
	let direction: vec2f = dAnisotropyRotation;
	let anisotropicT: vec3f = normalize(tbn * vec3f(direction, 0.0));
	let anisotropicB: vec3f = normalize(cross(tbn[2], anisotropicT));
	let anisotropy: f32 = dAnisotropy;
	let anisotropicDirection: vec3f = anisotropicB;
	let anisotropicTangent: vec3f = cross(anisotropicDirection, viewDir);
	let anisotropicNormal: vec3f = cross(anisotropicTangent, anisotropicDirection);
	let bendFactor: f32 = 1.0 - anisotropy * (1.0 - roughness);
	let bendFactor4: f32 = bendFactor * bendFactor * bendFactor * bendFactor;
	let bentNormal: vec3f = normalize(mix(normalize(anisotropicNormal), normalize(worldNormal), bendFactor4));
	dReflDirW = reflect(-viewDir, bentNormal);
}`,Ck=`
#ifdef LIT_CLEARCOAT
fn addReflectionCC(reflDir: vec3f, gloss: f32) {
	ccReflection = ccReflection + calcReflection(reflDir, gloss);
}
#endif
`,Pk=`
var texture_cubeMap: texture_cube<f32>;
var texture_cubeMapSampler: sampler;
uniform material_reflectivity: f32;
fn calcReflection(reflDir: vec3f, gloss: f32) -> vec3f {
	var lookupVec: vec3f = cubeMapProject(reflDir);
	lookupVec.x = lookupVec.x * -1.0;
	return {reflectionDecode}(textureSample(texture_cubeMap, texture_cubeMapSampler, lookupVec));
}
fn addReflection(reflDir: vec3f, gloss: f32) {
	dReflection = dReflection + vec4f(calcReflection(reflDir, gloss), uniform.material_reflectivity);
}
`,Lk=`
#ifndef ENV_ATLAS
	#define ENV_ATLAS
	var texture_envAtlas: texture_2d<f32>;
	var texture_envAtlasSampler: sampler;
#endif
var texture_cubeMap: texture_cube<f32>;
var texture_cubeMapSampler: sampler;
uniform material_reflectivity: f32;
fn calcReflection(reflDir: vec3f, gloss: f32) -> vec3f {
	let dir: vec3f = cubeMapProject(reflDir) * vec3f(-1.0, 1.0, 1.0);
	let uv: vec2f = toSphericalUv(dir);
	let level: f32 = saturate(1.0 - gloss) * 5.0;
	let ilevel: f32 = floor(level);
	let flevel: f32 = level - ilevel;
	let sharp: vec3f = {reflectionCubemapDecode}(textureSample(texture_cubeMap, texture_cubeMapSampler, dir));
	let roughA: vec3f = {reflectionDecode}(textureSample(texture_envAtlas, texture_envAtlasSampler, mapRoughnessUv(uv, ilevel)));
	let roughB: vec3f = {reflectionDecode}(textureSample(texture_envAtlas, texture_envAtlasSampler, mapRoughnessUv(uv, ilevel + 1.0)));
	return processEnvironment(mix(sharp, mix(roughA, roughB, flevel), min(level, 1.0)));
}
fn addReflection(reflDir: vec3f, gloss: f32) {
	dReflection = dReflection + vec4f(calcReflection(reflDir, gloss), uniform.material_reflectivity);
}
`,Ik=`
#ifndef ENV_ATLAS
#define ENV_ATLAS
	var texture_envAtlas: texture_2d<f32>;
	var texture_envAtlasSampler: sampler;
#endif
uniform material_reflectivity: f32;
fn shinyMipLevel(uv: vec2f) -> f32 {
	let dx: vec2f = dpdx(uv);
	let dy: vec2f = dpdy(uv);
	let uv2: vec2f = vec2f(fract(uv.x + 0.5), uv.y);
	let dx2: vec2f = dpdx(uv2);
	let dy2: vec2f = dpdy(uv2);
	let maxd: f32 = min(max(dot(dx, dx), dot(dy, dy)), max(dot(dx2, dx2), dot(dy2, dy2)));
	return clamp(0.5 * log2(maxd) - 1.0 + uniform.textureBias, 0.0, 5.0);
}
fn calcReflection(reflDir: vec3f, gloss: f32) -> vec3f {
	let dir: vec3f = cubeMapProject(reflDir) * vec3f(-1.0, 1.0, 1.0);
	let uv: vec2f = toSphericalUv(dir);
	let level: f32 = saturate(1.0 - gloss) * 5.0;
	let ilevel: f32 = floor(level);
	let level2: f32 = shinyMipLevel(uv * atlasSize);
	let ilevel2: f32 = floor(level2);
	var uv0: vec2f;
	var uv1: vec2f;
	var weight: f32;
	if (ilevel == 0.0) {
		uv0 = mapShinyUv(uv, ilevel2);
		uv1 = mapShinyUv(uv, ilevel2 + 1.0);
		weight = level2 - ilevel2;
	} else {
		uv0 = mapRoughnessUv(uv, ilevel);
		uv1 = uv0;
		weight = 0.0;
	}
	let linearA: vec3f = {reflectionDecode}(textureSample(texture_envAtlas, texture_envAtlasSampler, uv0));
	let linearB: vec3f = {reflectionDecode}(textureSample(texture_envAtlas, texture_envAtlasSampler, uv1));
	let linear0: vec3f = mix(linearA, linearB, weight);
	let linear1: vec3f = {reflectionDecode}(textureSample(texture_envAtlas, texture_envAtlasSampler, mapRoughnessUv(uv, ilevel + 1.0)));
	return processEnvironment(mix(linear0, linear1, level - ilevel));
}
fn addReflection(reflDir: vec3f, gloss: f32) {
	dReflection = dReflection + vec4f(calcReflection(reflDir, gloss), uniform.material_reflectivity);
}
`,Mk=`
#ifndef VIEWMATRIX
	#define VIEWMATRIX
	uniform matrix_view: mat4x4f;
#endif
var texture_sphereMap: texture_2d<f32>;
var texture_sphereMapSampler: sampler;
uniform material_reflectivity: f32;
fn calcReflection(reflDir: vec3f, gloss: f32) -> vec3f {
	let viewRotationMatrix = mat3x3f(uniform.matrix_view[0].xyz, uniform.matrix_view[1].xyz, uniform.matrix_view[2].xyz);
	let reflDirV: vec3f = viewRotationMatrix * reflDir;
	let m: f32 = 2.0 * sqrt(dot(reflDirV.xy, reflDirV.xy) + (reflDirV.z + 1.0) * (reflDirV.z + 1.0));
	let sphereMapUv: vec2f = reflDirV.xy / m + 0.5;
	return {reflectionDecode}(textureSample(texture_sphereMap, texture_sphereMapSampler, sphereMapUv));
}
fn addReflection(reflDir: vec3f, gloss: f32) {
	dReflection = dReflection + vec4f(calcReflection(reflDir, gloss), uniform.material_reflectivity);
}
`,Dk=`
fn addReflectionSheen(worldNormal: vec3f, viewDir: vec3f, gloss: f32) {
	let NoV: f32 = dot(worldNormal, viewDir);
	let alphaG: f32 = gloss * gloss;
	let a: f32 = select(
		-8.48 * alphaG + 14.3 * gloss - 9.95,
		-339.2 * alphaG + 161.4 * gloss - 25.9,
		gloss < 0.25
	);
	let b: f32 = select(
		1.97 * alphaG - 3.27 * gloss + 0.72,
		44.0 * alphaG - 23.7 * gloss + 3.26,
		gloss < 0.25
	);
	let dg_add: f32 = select(
		0.1 * ( gloss - 0.25 ),
		0.0,
		gloss < 0.25
	);
	let dg: f32 = exp( a * NoV + b ) + dg_add;
	sReflection = sReflection + (calcReflection(worldNormal, 0.0) * saturate(dg));
}`,Rk=`
fn refract2(viewVec: vec3f, normal: vec3f, IOR: f32) -> vec3f {
	let vn: f32 = dot(viewVec, normal);
	let k: f32 = 1.0 - IOR * IOR * (1.0 - vn * vn);
	let refrVec: vec3f = IOR * viewVec - (IOR * vn + sqrt(k)) * normal;
	return refrVec;
}
fn addRefraction(
	worldNormal: vec3f,
	viewDir: vec3f,
	thickness: f32,
	gloss: f32,
	specularity: vec3f,
	albedo: vec3f,
	transmission: f32,
	refractionIndex: f32,
	dispersion: f32
#if defined(LIT_IRIDESCENCE)
	, iridescenceFresnel: vec3f,
	iridescenceIntensity: f32
#endif
) {
	let tmpRefl: vec4f = dReflection;
	let reflectionDir: vec3f = refract2(-viewDir, worldNormal, refractionIndex);
	dReflection = vec4f(0.0);
	addReflection(reflectionDir, gloss);
	dDiffuseLight = mix(dDiffuseLight, dReflection.rgb * albedo, transmission);
	dReflection = tmpRefl;
}
`,Ok=`
uniform material_invAttenuationDistance: f32;
uniform material_attenuation: vec3f;
fn evalRefractionColor(refractionVector: vec3f, gloss: f32, refractionIndex: f32) -> vec3f {
	let pointOfRefraction: vec4f = vec4f(vPositionW + refractionVector, 1.0);
	let projectionPoint: vec4f = uniform.matrix_viewProjection * pointOfRefraction;
	let uv: vec2f = getGrabScreenPos(projectionPoint);
	let iorToRoughness: f32 = (1.0 - gloss) * clamp((1.0 / refractionIndex) * 2.0 - 2.0, 0.0, 1.0);
	let refractionLod: f32 = log2(uniform.uScreenSize.x) * iorToRoughness;
	let refraction: vec3f = textureSampleLevel(uSceneColorMap, uSceneColorMapSampler, uv, refractionLod).rgb;
	return refraction;
}
fn addRefraction(
	worldNormal: vec3f,
	viewDir: vec3f,
	thickness: f32,
	gloss: f32,
	specularity: vec3f,
	albedo: vec3f,
	transmission: f32,
	refractionIndex: f32,
	dispersion: f32,
#if defined(LIT_IRIDESCENCE)
	iridescenceFresnel: vec3f,
	iridescenceIntensity: f32
#endif
) {
	var modelScale: vec3f;
	modelScale.x = length(uniform.matrix_model[0].xyz);
	modelScale.y = length(uniform.matrix_model[1].xyz);
	modelScale.z = length(uniform.matrix_model[2].xyz);
	let scale: vec3f = thickness * modelScale;
	var refractionVector = normalize(refract(-viewDir, worldNormal, refractionIndex)) * scale;
	var refraction = evalRefractionColor(refractionVector, gloss, refractionIndex);
	#ifdef LIT_DISPERSION
		let halfSpread: f32 = (1.0 / refractionIndex - 1.0) * 0.025 * dispersion;
		let refractionIndexR: f32 = refractionIndex - halfSpread;
		refractionVector = normalize(refract(-viewDir, worldNormal, refractionIndexR)) * scale;
		refraction.r = evalRefractionColor(refractionVector, gloss, refractionIndexR).r;
		let refractionIndexB: f32 = refractionIndex + halfSpread;
		refractionVector = normalize(refract(-viewDir, worldNormal, refractionIndexB)) * scale;
		refraction.b = evalRefractionColor(refractionVector, gloss, refractionIndexB).b;
	#endif
	var transmittance: vec3f;
	if (uniform.material_invAttenuationDistance != 0.0)
	{
		let attenuation: vec3f = -log(uniform.material_attenuation) * uniform.material_invAttenuationDistance;
		transmittance = exp(-attenuation * length(refractionVector));
	}
	else
	{
		transmittance = refraction;
	}
	let fresnel: vec3f = vec3f(1.0) -
		getFresnel(
			dot(viewDir, worldNormal),
			gloss,
			specularity
		#if defined(LIT_IRIDESCENCE)
			, iridescenceFresnel,
			iridescenceIntensity
		#endif
		);
	dDiffuseLight = mix(dDiffuseLight, refraction * transmittance * fresnel, transmission);
}
`,Nk=`
varying vUv0: vec2f;
#ifdef CUBEMAP_SOURCE
	var sourceCube: texture_cube<f32>;
	var sourceCubeSampler : sampler;
#else
	var sourceTex: texture_2d<f32>;
	var sourceTexSampler : sampler;
#endif
#ifdef USE_SAMPLES_TEX
	var samplesTex: texture_2d<f32>;
	var samplesTexSampler : sampler;
	uniform samplesTexInverseSize: vec2f;
#endif
uniform params: vec3f;
fn targetFace() -> f32 { return uniform.params.x; }
fn targetTotalPixels() -> f32 { return uniform.params.y; }
fn sourceTotalPixels() -> f32 { return uniform.params.z; }
const PI: f32 = 3.141592653589793;
fn saturate(x: f32) -> f32 {
	return clamp(x, 0.0, 1.0);
}
#include "decodePS"
#include "encodePS"
fn modifySeams(dir: vec3f, scale: f32) -> vec3f {
	let adir = abs(dir);
	let M = max(max(adir.x, adir.y), adir.z);
	return dir / M * vec3f(
		select(scale, 1.0, adir.x == M),
		select(scale, 1.0, adir.y == M),
		select(scale, 1.0, adir.z == M)
	);
}
fn toSpherical(dir: vec3f) -> vec2f {
	let nonZeroXZ = any(dir.xz != vec2f(0.0, 0.0));
	return vec2f(select(0.0, atan2(dir.x, dir.z), nonZeroXZ), asin(dir.y));
}
fn fromSpherical(uv: vec2f) -> vec3f {
	return vec3f(cos(uv.y) * sin(uv.x),
				sin(uv.y),
				cos(uv.y) * cos(uv.x));
}
fn getDirectionEquirect(uv: vec2f) -> vec3f {
	return fromSpherical((vec2f(uv.x, 1.0 - uv.y) * 2.0 - 1.0) * vec2f(PI, PI * 0.5));
}
fn signNotZero(k: f32) -> f32 {
	return select(-1.0, 1.0, k >= 0.0);
}
fn signNotZeroVec2(v: vec2f) -> vec2f {
	return vec2f(signNotZero(v.x), signNotZero(v.y));
}
fn octDecode(o: vec2f) -> vec3f {
	var v = vec3f(o.x, 1.0 - abs(o.x) - abs(o.y), o.y);
	if (v.y < 0.0) {
		var temp: vec2f = (1.0 - abs(v.zx)) * signNotZeroVec2(v.xz);
		v = vec3f(temp.x, v.y, temp.y);
	}
	return normalize(v);
}
fn getDirectionOctahedral(uv: vec2f) -> vec3f {
	return octDecode(vec2f(uv.x, 1.0 - uv.y) * 2.0 - 1.0);
}
fn octEncode(v: vec3f) -> vec2f {
	let l1norm = abs(v.x) + abs(v.y) + abs(v.z);
	var result = v.xz * (1.0 / l1norm);
	if (v.y < 0.0) {
		result = (1.0 - abs(result.yx)) * signNotZeroVec2(result.xy);
	}
	return result;
}
#ifdef CUBEMAP_SOURCE
	fn sampleCubemapDir(dir: vec3f) -> vec4f {
		return textureSample(sourceCube, sourceCubeSampler, modifySeams(dir, 1.0));
	}
	fn sampleCubemapSph(sph: vec2f) -> vec4f {
		return sampleCubemapDir(fromSpherical(sph));
	}
	fn sampleCubemapDirLod(dir: vec3f, mipLevel: f32) -> vec4f {
		return textureSampleLevel(sourceCube, sourceCubeSampler, modifySeams(dir, 1.0), mipLevel);
	}
	fn sampleCubemapSphLod(sph: vec2f, mipLevel: f32) -> vec4f {
		return sampleCubemapDirLod(fromSpherical(sph), mipLevel);
	}
#else
	fn sampleEquirectSph(sph: vec2f) -> vec4f {
		let uv = sph / vec2f(PI * 2.0, PI) + 0.5;
		return textureSample(sourceTex, sourceTexSampler, vec2f(uv.x, 1.0 - uv.y));
	}
	fn sampleEquirectDir(dir: vec3f) -> vec4f {
		return sampleEquirectSph(toSpherical(dir));
	}
	fn sampleEquirectSphLod(sph: vec2f, mipLevel: f32) -> vec4f {
		let uv = sph / vec2f(PI * 2.0, PI) + 0.5;
		return textureSampleLevel(sourceTex, sourceTexSampler, vec2f(uv.x, 1.0 - uv.y), mipLevel);
	}
	fn sampleEquirectDirLod(dir: vec3f, mipLevel: f32) -> vec4f {
		return sampleEquirectSphLod(toSpherical(dir), mipLevel);
	}
	fn sampleOctahedralDir(dir: vec3f) -> vec4f {
		let uv = octEncode(dir) * 0.5 + 0.5;
		return textureSample(sourceTex, sourceTexSampler, vec2f(uv.x, 1.0 - uv.y));
	}
	fn sampleOctahedralSph(sph: vec2f) -> vec4f {
		return sampleOctahedralDir(fromSpherical(sph));
	}
	fn sampleOctahedralDirLod(dir: vec3f, mipLevel: f32) -> vec4f {
		let uv = octEncode(dir) * 0.5 + 0.5;
		return textureSampleLevel(sourceTex, sourceTexSampler, vec2f(uv.x, 1.0 - uv.y), mipLevel);
	}
	fn sampleOctahedralSphLod(sph: vec2f, mipLevel: f32) -> vec4f {
		return sampleOctahedralDirLod(fromSpherical(sph), mipLevel);
	}
#endif
fn getDirectionCubemap(uv: vec2f) -> vec3f {
	let st = uv * 2.0 - 1.0;
	let face = targetFace();
	var vec: vec3f;
	if (face == 0.0) {
		vec = vec3f(1, -st.y, -st.x);
	} else if (face == 1.0) {
		vec = vec3f(-1, -st.y, st.x);
	} else if (face == 2.0) {
		vec = vec3f(st.x, 1, st.y);
	} else if (face == 3.0) {
		vec = vec3f(st.x, -1, -st.y);
	} else if (face == 4.0) {
		vec = vec3f(st.x, -st.y, 1);
	} else {
		vec = vec3f(-st.x, -st.y, -1);
	}
	return normalize(modifySeams(vec, 1.0));
}
fn matrixFromVector(n: vec3f) -> mat3x3f {
	let a = 1.0 / (1.0 + n.z);
	let b = -n.x * n.y * a;
	let b1 = vec3f(1.0 - n.x * n.x * a, b, -n.x);
	let b2 = vec3f(b, 1.0 - n.y * n.y * a, -n.y);
	return mat3x3f(b1, b2, n);
}
fn matrixFromVectorSlow(n: vec3f) -> mat3x3f {
	let up = select(vec3f(0.0, 0.0, select(-1.0, 1.0, n.y > 0.0)), vec3f(0.0, 1.0, 0.0), abs(n.y) > 0.0000001);
	let x = normalize(cross(up, n));
	let y = cross(n, x);
	return mat3x3f(x, y, n);
}
fn reproject(uv: vec2f) -> vec4f {
	if ({NUM_SAMPLES} <= 1) {
		return {ENCODE_FUNC}({DECODE_FUNC}({SOURCE_FUNC}Dir({TARGET_FUNC}(uv))));
	} else {
		let t = {TARGET_FUNC}(uv);
		let tu = dpdx(t);
		let tv = dpdy(t);
		var result = vec3f(0.0);
		for (var u = 0.0; u < {NUM_SAMPLES_SQRT}; u += 1.0) {
			for (var v = 0.0; v < {NUM_SAMPLES_SQRT}; v += 1.0) {
				result += {DECODE_FUNC}({SOURCE_FUNC}Dir(normalize(t +
															tu * (u / {NUM_SAMPLES_SQRT} - 0.5) +
															tv * (v / {NUM_SAMPLES_SQRT} - 0.5))));
			}
		}
		return {ENCODE_FUNC}(result / ({NUM_SAMPLES_SQRT} * {NUM_SAMPLES_SQRT}));
	}
}
const unpackFloat: vec4f = vec4f(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0);
#ifdef USE_SAMPLES_TEX
	fn unpackSample(i: i32, L: ptr<function, vec3f>, mipLevel: ptr<function, f32>) {
		var u = (f32(i * 4) + 0.5) * uniform.samplesTexInverseSize.x;
		var v = (floor(u) + 0.5) * uniform.samplesTexInverseSize.y;
		var raw: vec4f;
		raw.x = dot(textureSample(samplesTex, samplesTexSampler, vec2f(u, v)), unpackFloat); u += uniform.samplesTexInverseSize.x;
		raw.y = dot(textureSample(samplesTex, samplesTexSampler, vec2f(u, v)), unpackFloat); u += uniform.samplesTexInverseSize.x;
		raw.z = dot(textureSample(samplesTex, samplesTexSampler, vec2f(u, v)), unpackFloat); u += uniform.samplesTexInverseSize.x;
		raw.w = dot(textureSample(samplesTex, samplesTexSampler, vec2f(u, v)), unpackFloat);
		*L = raw.xyz * 2.0 - 1.0;
		*mipLevel = raw.w * 8.0;
	}
	fn prefilterSamples(uv: vec2f) -> vec4f {
		let vecSpace = matrixFromVectorSlow({TARGET_FUNC}(uv));
		var L: vec3f;
		var mipLevel: f32;
		var result = vec3f(0.0);
		var totalWeight = 0.0;
		for (var i = 0; i < {NUM_SAMPLES}; i += 1) {
			unpackSample(i, &L, &mipLevel);
			result += {DECODE_FUNC}({SOURCE_FUNC}DirLod(vecSpace * L, mipLevel)) * L.z;
			totalWeight += L.z;
		}
		return {ENCODE_FUNC}(result / totalWeight);
	}
	fn prefilterSamplesUnweighted(uv: vec2f) -> vec4f {
		let vecSpace = matrixFromVectorSlow({TARGET_FUNC}(uv));
		var L: vec3f;
		var mipLevel: f32;
		var result = vec3f(0.0);
		for (var i = 0; i < {NUM_SAMPLES}; i += 1) {
			unpackSample(i, &L, &mipLevel);
			result += {DECODE_FUNC}({SOURCE_FUNC}DirLod(vecSpace * L, mipLevel));
		}
		return {ENCODE_FUNC}(result / f32({NUM_SAMPLES}));
	}
#endif
@fragment
fn fragmentMain(input : FragmentInput) -> FragmentOutput {
	var output: FragmentOutput;
	output.color = {PROCESS_FUNC}(input.vUv0);
	return output;
}
`,Fk=`
attribute vertex_position: vec2f;
uniform uvMod: vec4f;
varying vUv0: vec2f;
@vertex
fn vertexMain(input: VertexInput) -> VertexOutput {
	var output: VertexOutput;
	output.position = vec4f(input.vertex_position, 0.5, 1.0);
	output.vUv0 = getImageEffectUV((input.vertex_position * 0.5 + vec2f(0.5, 0.5)) * uniform.uvMod.xy + uniform.uvMod.zw);
	return output;
}
`,kk=`
var uSceneDepthMap: texture_2d<f32>;
var uSceneDepthMapSampler: sampler;
#ifndef SCREENSIZE
	#define SCREENSIZE
	uniform uScreenSize: vec4f;
#endif
#ifndef VIEWMATRIX
	#define VIEWMATRIX
	uniform matrix_view: mat4x4f;
#endif
#ifndef LINEARIZE_DEPTH
	#define LINEARIZE_DEPTH
	#ifndef CAMERAPLANES
		#define CAMERAPLANES
		uniform camera_params: vec4f;
	#endif
	fn linearizeDepth(z: f32) -> f32 {
		if (uniform.camera_params.w == 0.0) {
			return (uniform.camera_params.z * uniform.camera_params.y) / (uniform.camera_params.y + z * (uniform.camera_params.z - uniform.camera_params.y));
		} else {
			return uniform.camera_params.z + z * (uniform.camera_params.y - uniform.camera_params.z);
		}
	}
#endif
fn delinearizeDepth(linearDepth: f32) -> f32 {
	if (uniform.camera_params.w == 0.0) {
		return (uniform.camera_params.y * (uniform.camera_params.z - linearDepth)) / (linearDepth * (uniform.camera_params.z - uniform.camera_params.y));
	} else {
		return (linearDepth - uniform.camera_params.z) / (uniform.camera_params.y - uniform.camera_params.z);
	}
}
fn getLinearScreenDepth(uv: vec2f) -> f32 {
	#ifdef SCENE_DEPTHMAP_LINEAR
		#ifdef SCENE_DEPTHMAP_FLOAT
			return textureSample(uSceneDepthMap, uSceneDepthMapSampler, uv).r;
		#else
			let textureSize = textureDimensions(uSceneDepthMap, 0);
			let texel: vec2i = vec2i(uv * vec2f(textureSize));
			let data: vec4f = textureLoad(uSceneDepthMap, texel, 0);
			let data_u32: vec4u = vec4u(data * 255.0);
			let intBits: u32 = (data_u32.r << 24u) | (data_u32.g << 16u) | (data_u32.b << 8u) | data_u32.a;
			return bitcast<f32>(intBits);
		#endif
	#else
		return linearizeDepth(textureSample(uSceneDepthMap, uSceneDepthMapSampler, uv).r);
	#endif
}
#ifndef VERTEXSHADER
	fn getLinearScreenDepthFrag() -> f32 {
		let uv: vec2f = pcPosition.xy * uniform.uScreenSize.zw;
		return getLinearScreenDepth(uv);
	}
#endif
fn getLinearDepth(pos: vec3f) -> f32 {
	return -(uniform.matrix_view * vec4f(pos, 1.0)).z;
}
`,Uk=`
fn getShadowCascadeIndex(shadowCascadeDistances: vec4f, shadowCascadeCount: i32) -> i32 {
	let depth: f32 = 1.0 / pcPosition.w;
	let comparisons: vec4f = step(shadowCascadeDistances, vec4f(depth));
	let cascadeIndex: i32 = i32(dot(comparisons, vec4f(1.0)));
	return min(cascadeIndex, shadowCascadeCount - 1);
}
fn ditherShadowCascadeIndex(cascadeIndex_in: i32, shadowCascadeDistances: vec4f, shadowCascadeCount: i32, blendFactor: f32) -> i32 {
	var cascadeIndex: i32 = cascadeIndex_in;
	if (cascadeIndex < shadowCascadeCount - 1) {
		let currentRangeEnd: f32 = shadowCascadeDistances[cascadeIndex];
		let transitionStart: f32 = blendFactor * currentRangeEnd;
		let depth: f32 = 1.0 / pcPosition.w;
		if (depth > transitionStart) {
			let transitionFactor: f32 = smoothstep(transitionStart, currentRangeEnd, depth);
			let dither: f32 = fract(sin(dot(pcPosition.xy, vec2f(12.9898, 78.233))) * 43758.5453);
			if (dither < transitionFactor) {
				cascadeIndex = cascadeIndex + 1;
			}
		}
	}
	return cascadeIndex;
}
fn fadeShadow(shadowCoord_in: vec3f, shadowCascadeDistances: vec4f) -> vec3f {
	var shadowCoord: vec3f = shadowCoord_in;
	let depth: f32 = 1.0 / pcPosition.w;
	if (depth > shadowCascadeDistances.w) {
		shadowCoord.z = -9999999.0;
	}
	return shadowCoord;
}
`,Bk=`
fn linstep(a: f32, b: f32, v: f32) -> f32 {
	return clamp((v - a) / (b - a), 0.0, 1.0);
}
fn reduceLightBleeding(pMax: f32, amount: f32) -> f32 {
	 return linstep(amount, 1.0, pMax);
}
fn chebyshevUpperBound(moments: vec2f, mean: f32, minVariance: f32, lightBleedingReduction: f32) -> f32 {
	var variance: f32 = moments.y - (moments.x * moments.x);
	variance = max(variance, minVariance);
	let d: f32 = mean - moments.x;
	var pMax: f32 = variance / (variance + (d * d));
	pMax = reduceLightBleeding(pMax, lightBleedingReduction);
	return select(pMax, 1.0, mean <= moments.x);
}
fn calculateEVSM(moments_in: vec3f, Z_in: f32, vsmBias: f32, exponent: f32) -> f32 {
	let Z: f32 = 2.0 * Z_in - 1.0;
	let warpedDepth: f32 = exp(exponent * Z);
	let moments: vec2f = moments_in.xy + vec2f(warpedDepth, warpedDepth*warpedDepth) * (1.0 - moments_in.z);
	let VSMBias: f32 = vsmBias;
	let depthScale: f32 = VSMBias * exponent * warpedDepth;
	let minVariance1: f32 = depthScale * depthScale;
	return chebyshevUpperBound(moments, warpedDepth, minVariance1, 0.1);
}
fn VSM16(tex: texture_2d<f32>, texSampler: sampler, texCoords: vec2f, resolution: f32, Z: f32, vsmBias: f32, exponent: f32) -> f32 {
	let moments: vec3f = textureSampleLevel(tex, texSampler, texCoords, 0.0).xyz;
	return calculateEVSM(moments, Z, vsmBias, exponent);
}
fn getShadowVSM16(shadowMap: texture_2d<f32>, shadowMapSampler: sampler, shadowCoord: vec3f, shadowParams: vec4f, exponent: f32) -> f32 {
	return VSM16(shadowMap, shadowMapSampler, shadowCoord.xy, shadowParams.x, shadowCoord.z, shadowParams.y, exponent);
}
fn getShadowSpotVSM16(shadowMap: texture_2d<f32>, shadowMapSampler: sampler, shadowCoord: vec3f, shadowParams: vec4f, exponent: f32, lightDir: vec3f) -> f32 {
	let Z: f32 = length(lightDir) * shadowParams.w + shadowParams.z;
	return VSM16(shadowMap, shadowMapSampler, shadowCoord.xy, shadowParams.x, Z, shadowParams.y, exponent);
}
fn VSM32(tex: texture_2d<f32>, texSampler: sampler, texCoords_in: vec2f, resolution: f32, Z: f32, vsmBias: f32, exponent: f32) -> f32 {
	#ifdef CAPS_TEXTURE_FLOAT_FILTERABLE
		var moments: vec3f = textureSampleLevel(tex, texSampler, texCoords_in, 0.0).xyz;
	#else
		var pixelSize : f32 = 1.0 / resolution;
		let texCoords: vec2f = texCoords_in - vec2f(pixelSize);
		let s00: vec3f = textureSampleLevel(tex, texSampler, texCoords, 0.0).xyz;
		let s10: vec3f = textureSampleLevel(tex, texSampler, texCoords + vec2f(pixelSize, 0.0), 0.0).xyz;
		let s01: vec3f = textureSampleLevel(tex, texSampler, texCoords + vec2f(0.0, pixelSize), 0.0).xyz;
		let s11: vec3f = textureSampleLevel(tex, texSampler, texCoords + vec2f(pixelSize), 0.0).xyz;
		let fr: vec2f = fract(texCoords * resolution);
		let h0: vec3f = mix(s00, s10, fr.x);
		let h1: vec3f = mix(s01, s11, fr.x);
		var moments: vec3f = mix(h0, h1, fr.y);
	#endif
	return calculateEVSM(moments, Z, vsmBias, exponent);
}
fn getShadowVSM32(shadowMap: texture_2d<f32>, shadowMapSampler: sampler, shadowCoord: vec3f, shadowParams: vec4f, exponent: f32) -> f32 {
	return VSM32(shadowMap, shadowMapSampler, shadowCoord.xy, shadowParams.x, shadowCoord.z, shadowParams.y, exponent);
}
fn getShadowSpotVSM32(shadowMap: texture_2d<f32>, shadowMapSampler: sampler, shadowCoord: vec3f, shadowParams: vec4f, exponent: f32, lightDir: vec3f) -> f32 {
	let Z: f32 = length(lightDir) * shadowParams.w + shadowParams.z;
	return VSM32(shadowMap, shadowMapSampler, shadowCoord.xy, shadowParams.x, Z, shadowParams.y, exponent);
}
`,Vk=`
fn getShadowPCF1x1(shadowMap: texture_depth_2d, shadowMapSampler: sampler_comparison, shadowCoord: vec3f, shadowParams: vec4f) -> f32 {
	return textureSampleCompareLevel(shadowMap, shadowMapSampler, shadowCoord.xy, shadowCoord.z);
}
fn getShadowSpotPCF1x1(shadowMap: texture_depth_2d, shadowMapSampler: sampler_comparison, shadowCoord: vec3f, shadowParams: vec4f) -> f32 {
	return textureSampleCompareLevel(shadowMap, shadowMapSampler, shadowCoord.xy, shadowCoord.z);
}
`,zk=`
fn _getShadowPCF3x3(shadowMap: texture_depth_2d, shadowMapSampler: sampler_comparison, shadowCoord: vec3f, shadowParams: vec3f) -> f32 {
	let z: f32 = shadowCoord.z;
	let uv: vec2f = shadowCoord.xy * shadowParams.x;
	let shadowMapSizeInv: f32 = 1.0 / shadowParams.x;
	let base_uv_temp: vec2f = floor(uv + 0.5);
	let s: f32 = (uv.x + 0.5 - base_uv_temp.x);
	let t: f32 = (uv.y + 0.5 - base_uv_temp.y);
	let base_uv: vec2f = (base_uv_temp - vec2f(0.5)) * shadowMapSizeInv;
	var sum: f32 = 0.0;
	let uw0: f32 = (3.0 - 2.0 * s);
	let uw1: f32 = (1.0 + 2.0 * s);
	let u0_offset: f32 = (2.0 - s) / uw0 - 1.0;
	let u1_offset: f32 = s / uw1 + 1.0;
	let vw0: f32 = (3.0 - 2.0 * t);
	let vw1: f32 = (1.0 + 2.0 * t);
	let v0_offset: f32 = (2.0 - t) / vw0 - 1.0;
	let v1_offset: f32 = t / vw1 + 1.0;
	let u0: f32 = u0_offset * shadowMapSizeInv + base_uv.x;
	let v0: f32 = v0_offset * shadowMapSizeInv + base_uv.y;
	let u1: f32 = u1_offset * shadowMapSizeInv + base_uv.x;
	let v1: f32 = v1_offset * shadowMapSizeInv + base_uv.y;
	sum = sum + uw0 * vw0 * textureSampleCompareLevel(shadowMap, shadowMapSampler, vec2f(u0, v0), z);
	sum = sum + uw1 * vw0 * textureSampleCompareLevel(shadowMap, shadowMapSampler, vec2f(u1, v0), z);
	sum = sum + uw0 * vw1 * textureSampleCompareLevel(shadowMap, shadowMapSampler, vec2f(u0, v1), z);
	sum = sum + uw1 * vw1 * textureSampleCompareLevel(shadowMap, shadowMapSampler, vec2f(u1, v1), z);
	sum = sum * (1.0 / 16.0);
	return sum;
}
fn getShadowPCF3x3(shadowMap: texture_depth_2d, shadowMapSampler: sampler_comparison, shadowCoord: vec3f, shadowParams: vec4f) -> f32 {
	return _getShadowPCF3x3(shadowMap, shadowMapSampler, shadowCoord, shadowParams.xyz);
}
fn getShadowSpotPCF3x3(shadowMap: texture_depth_2d, shadowMapSampler: sampler_comparison, shadowCoord: vec3f, shadowParams: vec4f) -> f32 {
	return _getShadowPCF3x3(shadowMap, shadowMapSampler, shadowCoord, shadowParams.xyz);
}
`,Hk=`
fn _getShadowPCF5x5(shadowMap: texture_depth_2d, shadowMapSampler: sampler_comparison, shadowCoord: vec3f, shadowParams: vec3f) -> f32 {
	let z: f32 = shadowCoord.z;
	let uv: vec2f = shadowCoord.xy * shadowParams.x;
	let shadowMapSizeInv: f32 = 1.0 / shadowParams.x;
	let base_uv_temp: vec2f = floor(uv + 0.5);
	let s: f32 = (uv.x + 0.5 - base_uv_temp.x);
	let t: f32 = (uv.y + 0.5 - base_uv_temp.y);
	let base_uv: vec2f = (base_uv_temp - vec2f(0.5)) * shadowMapSizeInv;
	let uw0: f32 = (4.0 - 3.0 * s);
	let uw1: f32 = 7.0;
	let uw2: f32 = (1.0 + 3.0 * s);
	let u0_offset: f32 = (3.0 - 2.0 * s) / uw0 - 2.0;
	let u1_offset: f32 = (3.0 + s) / uw1;
	let u2_offset: f32 = s / uw2 + 2.0;
	let vw0: f32 = (4.0 - 3.0 * t);
	let vw1: f32 = 7.0;
	let vw2: f32 = (1.0 + 3.0 * t);
	let v0_offset: f32 = (3.0 - 2.0 * t) / vw0 - 2.0;
	let v1_offset: f32 = (3.0 + t) / vw1;
	let v2_offset: f32 = t / vw2 + 2.0;
	var sum: f32 = 0.0;
	let u0: f32 = u0_offset * shadowMapSizeInv + base_uv.x;
	let v0: f32 = v0_offset * shadowMapSizeInv + base_uv.y;
	let u1: f32 = u1_offset * shadowMapSizeInv + base_uv.x;
	let v1: f32 = v1_offset * shadowMapSizeInv + base_uv.y;
	let u2: f32 = u2_offset * shadowMapSizeInv + base_uv.x;
	let v2: f32 = v2_offset * shadowMapSizeInv + base_uv.y;
	sum = sum + uw0 * vw0 * textureSampleCompareLevel(shadowMap, shadowMapSampler, vec2f(u0, v0), z);
	sum = sum + uw1 * vw0 * textureSampleCompareLevel(shadowMap, shadowMapSampler, vec2f(u1, v0), z);
	sum = sum + uw2 * vw0 * textureSampleCompareLevel(shadowMap, shadowMapSampler, vec2f(u2, v0), z);
	sum = sum + uw0 * vw1 * textureSampleCompareLevel(shadowMap, shadowMapSampler, vec2f(u0, v1), z);
	sum = sum + uw1 * vw1 * textureSampleCompareLevel(shadowMap, shadowMapSampler, vec2f(u1, v1), z);
	sum = sum + uw2 * vw1 * textureSampleCompareLevel(shadowMap, shadowMapSampler, vec2f(u2, v1), z);
	sum = sum + uw0 * vw2 * textureSampleCompareLevel(shadowMap, shadowMapSampler, vec2f(u0, v2), z);
	sum = sum + uw1 * vw2 * textureSampleCompareLevel(shadowMap, shadowMapSampler, vec2f(u1, v2), z);
	sum = sum + uw2 * vw2 * textureSampleCompareLevel(shadowMap, shadowMapSampler, vec2f(u2, v2), z);
	sum = sum * (1.0 / 144.0);
	sum = saturate(sum);
	return sum;
}
fn getShadowPCF5x5(shadowMap: texture_depth_2d, shadowMapSampler: sampler_comparison, shadowCoord: vec3f, shadowParams: vec4f) -> f32 {
	return _getShadowPCF5x5(shadowMap, shadowMapSampler, shadowCoord, shadowParams.xyz);
}
fn getShadowSpotPCF5x5(shadowMap: texture_depth_2d, shadowMapSampler: sampler_comparison, shadowCoord: vec3f, shadowParams: vec4f) -> f32 {
	return _getShadowPCF5x5(shadowMap, shadowMapSampler, shadowCoord, shadowParams.xyz);
}
`,Gk=`
fn fractSinRand(uv: vec2f) -> f32 {
	let PI: f32 = 3.141592653589793;
	let a: f32 = 12.9898; let b: f32 = 78.233; let c: f32 = 43758.5453;
	let dt: f32 = dot(uv.xy, vec2f(a, b));
	let sn: f32 = dt % PI;
	return fract(sin(sn) * c);
}
struct VogelDiskData {
	invNumSamples: f32,
	initialAngle: f32,
	currentPointId: f32,
}
fn prepareDiskConstants(data: ptr<function, VogelDiskData>, sampleCount: i32, randomSeed: f32) {
	let pi2: f32 = 6.28318530718;
	data.invNumSamples = 1.0 / f32(sampleCount);
	data.initialAngle = randomSeed * pi2;
	data.currentPointId = 0.0;
}
fn generateDiskSample(data: ptr<function, VogelDiskData>) -> vec2f {
	let GOLDEN_ANGLE: f32 = 2.399963;
	let r: f32 = sqrt((data.currentPointId + 0.5) * data.invNumSamples);
	let theta: f32 = data.currentPointId * GOLDEN_ANGLE + data.initialAngle;
	let offset: vec2f = vec2f(cos(theta), sin(theta)) * pow(r, 1.33);
	data.currentPointId = data.currentPointId + 1.0;
	return offset;
}
fn PCSSFindBlocker(shadowMap: texture_2d<f32>, shadowMapSampler: sampler, avgBlockerDepth: ptr<function, f32>, numBlockers: ptr<function, i32>,
	shadowCoords: vec2f, z: f32, shadowBlockerSamples: i32, penumbraSize: f32, invShadowMapSize: f32, randomSeed: f32) {
	var diskData: VogelDiskData;
	prepareDiskConstants(&diskData, shadowBlockerSamples, randomSeed);
	let searchWidth: f32 = penumbraSize * invShadowMapSize;
	var blockerSum: f32 = 0.0;
	var numBlockers_local: i32 = 0;
	for( var i: i32 = 0; i < shadowBlockerSamples; i = i + 1 ) {
		let diskUV: vec2f = generateDiskSample(&diskData);
		let sampleUV: vec2f = shadowCoords + diskUV * searchWidth;
		let shadowMapDepth: f32 = textureSampleLevel(shadowMap, shadowMapSampler, sampleUV, 0.0).r;
		if ( shadowMapDepth < z ) {
			blockerSum = blockerSum + shadowMapDepth;
			numBlockers_local = numBlockers_local + 1;
		}
	}
	*avgBlockerDepth = blockerSum / f32(numBlockers_local);
	*numBlockers = numBlockers_local;
}
fn PCSSFilter(shadowMap: texture_2d<f32>, shadowMapSampler: sampler, uv: vec2f, receiverDepth: f32, shadowSamples: i32, filterRadius: f32, randomSeed: f32) -> f32 {
	var diskData: VogelDiskData;
	prepareDiskConstants(&diskData, shadowSamples, randomSeed);
	var sum: f32 = 0.0;
	for (var i: i32 = 0; i < shadowSamples; i = i + 1) {
		let offsetUV: vec2f = generateDiskSample(&diskData) * filterRadius;
		let depth: f32 = textureSampleLevel(shadowMap, shadowMapSampler, uv + offsetUV, 0.0).r;
		sum = sum + step(receiverDepth, depth);
	}
	return sum / f32(shadowSamples);
}
fn getPenumbra(dblocker: f32, dreceiver: f32, penumbraSize: f32, penumbraFalloff: f32) -> f32 {
	let dist: f32 = dreceiver - dblocker;
	let penumbra: f32 = 1.0 - pow(1.0 - dist, penumbraFalloff);
	return penumbra * penumbraSize;
}
fn PCSSDirectional(shadowMap: texture_2d<f32>, shadowMapSampler: sampler, shadowCoords: vec3f, cameraParams: vec4f, softShadowParams: vec4f) -> f32 {
	let receiverDepth: f32 = shadowCoords.z;
	let randomSeed: f32 = fractSinRand(pcPosition.xy);
	let shadowSamples: i32 = i32(softShadowParams.x);
	let shadowBlockerSamples: i32 = i32(softShadowParams.y);
	let penumbraSize: f32 = softShadowParams.z;
	let penumbraFalloff: f32 = softShadowParams.w;
	let shadowMapSize: i32 = i32(textureDimensions(shadowMap, 0).x);
	var invShadowMapSize: f32 = 1.0 / f32(shadowMapSize);
	invShadowMapSize = invShadowMapSize * (f32(shadowMapSize) / 2048.0);
	var penumbra: f32;
	if (shadowBlockerSamples > 0) {
		var avgBlockerDepth: f32 = 0.0;
		var numBlockers: i32 = 0;
		PCSSFindBlocker(shadowMap, shadowMapSampler, &avgBlockerDepth, &numBlockers, shadowCoords.xy, receiverDepth, shadowBlockerSamples, penumbraSize, invShadowMapSize, randomSeed);
		if (numBlockers < 1) {
			return 1.0;
		}
		penumbra = getPenumbra(avgBlockerDepth, shadowCoords.z, penumbraSize, penumbraFalloff);
	} else {
		penumbra = penumbraSize;
	}
	let filterRadius: f32 = penumbra * invShadowMapSize;
	return PCSSFilter(shadowMap, shadowMapSampler, shadowCoords.xy, receiverDepth, shadowSamples, filterRadius, randomSeed);
}
fn getShadowPCSS(shadowMap: texture_2d<f32>, shadowMapSampler: sampler, shadowCoord: vec3f, shadowParams: vec4f, cameraParams: vec4f, softShadowParams: vec4f, lightDir: vec3f) -> f32 {
	return PCSSDirectional(shadowMap, shadowMapSampler, shadowCoord, cameraParams, softShadowParams);
}
`,Wk=`
attribute vertex_boneIndices: f32;
var texture_poseMap: texture_2d<f32>;
fn getBoneMatrix(indexFloat: f32) -> mat4x4f {
	let width = i32(textureDimensions(texture_poseMap).x);
	let index: i32 = i32(indexFloat + 0.5) * 3;
	let iy: i32 = index / width;
	let ix: i32 = index % width;
	let v1: vec4f = textureLoad(texture_poseMap, vec2i(ix + 0, iy), 0);
	let v2: vec4f = textureLoad(texture_poseMap, vec2i(ix + 1, iy), 0);
	let v3: vec4f = textureLoad(texture_poseMap, vec2i(ix + 2, iy), 0);
	return mat4x4f(
		v1.x, v2.x, v3.x, 0,
		v1.y, v2.y, v3.y, 0,
		v1.z, v2.z, v3.z, 0,
		v1.w, v2.w, v3.w, 1.0
	);
}
`,$k=`
attribute vertex_boneWeights: vec4f;
attribute vertex_boneIndices: vec4f;
var texture_poseMap: texture_2d<f32>;
struct BoneMatrix {
	v1: vec4f,
	v2: vec4f,
	v3: vec4f,
}
fn getBoneMatrix(width: i32, index: i32) -> BoneMatrix {
	let v = index / width;
	let u = index % width;
	var result: BoneMatrix;
	result.v1 = textureLoad(texture_poseMap, vec2i(u + 0, v), 0);
	result.v2 = textureLoad(texture_poseMap, vec2i(u + 1, v), 0);
	result.v3 = textureLoad(texture_poseMap, vec2i(u + 2, v), 0);
	return result;
}
fn getSkinMatrix(indicesFloat: vec4f, weights: vec4f) -> mat4x4f {
	let width = i32(textureDimensions(texture_poseMap).x);
	var indices = vec4i(indicesFloat + 0.5) * 3;
	let boneA = getBoneMatrix(width, indices.x);
	let boneB = getBoneMatrix(width, indices.y);
	let boneC = getBoneMatrix(width, indices.z);
	let boneD = getBoneMatrix(width, indices.w);
	let v1 = boneA.v1 * weights.x + boneB.v1 * weights.y + boneC.v1 * weights.z + boneD.v1 * weights.w;
	let v2 = boneA.v2 * weights.x + boneB.v2 * weights.y + boneC.v2 * weights.z + boneD.v2 * weights.w;
	let v3 = boneA.v3 * weights.x + boneB.v3 * weights.y + boneC.v3 * weights.z + boneD.v3 * weights.w;
	let one = dot(weights, vec4f(1.0, 1.0, 1.0, 1.0));
	return mat4x4f(
		v1.x, v2.x, v3.x, 0,
		v1.y, v2.y, v3.y, 0,
		v1.z, v2.z, v3.z, 0,
		v1.w, v2.w, v3.w, one
	);
}
`,Xk=`
	#define LIT_SKYBOX_INTENSITY
	#include "envProcPS"
	#include "gammaPS"
	#include "tonemappingPS"
	#ifdef PREPASS_PASS
		varying vLinearDepth: f32;
		#include "floatAsUintPS"
	#endif
	varying vViewDir : vec3f;
	uniform skyboxHighlightMultiplier : f32;
	#ifdef SKY_CUBEMAP
		var texture_cubeMap : texture_cube<f32>;
		var texture_cubeMap_sampler : sampler;
		#ifdef SKYMESH
			varying vWorldPos : vec3f;
			uniform cubeMapRotationMatrix : mat3x3f;
			uniform projectedSkydomeCenter : vec3f;
		#endif
	#else
		#include "sphericalPS"
		#include "envAtlasPS"
		var texture_envAtlas : texture_2d<f32>;
		var texture_envAtlas_sampler : sampler;
		uniform mipLevel : f32;
	#endif
	@fragment
	fn fragmentMain(input : FragmentInput) -> FragmentOutput {
		var output: FragmentOutput;
		#ifdef PREPASS_PASS
			output.color = float2vec4(vLinearDepth);
		#else
			var linear : vec3f;
			var dir : vec3f;
			#ifdef SKY_CUBEMAP
				#ifdef SKYMESH
					var envDir : vec3f = normalize(input.vWorldPos - uniform.projectedSkydomeCenter);
					dir = envDir * uniform.cubeMapRotationMatrix;
				#else
					dir = input.vViewDir;
				#endif
				dir.x *= -1.0;
				linear = {SKYBOX_DECODE_FNC}(textureSample(texture_cubeMap, texture_cubeMap_sampler, dir));
			#else
				dir = input.vViewDir * vec3f(-1.0, 1.0, 1.0);
				let uv : vec2f = toSphericalUv(normalize(dir));
				linear = {SKYBOX_DECODE_FNC}(textureSample(texture_envAtlas, texture_envAtlas_sampler, mapRoughnessUv(uv, uniform.mipLevel)));
			#endif
			if (any(linear >= vec3f(64.0))) {
				linear *= uniform.skyboxHighlightMultiplier;
			}
			
			output.color = vec4f(gammaCorrectOutput(toneMap(processEnvironment(linear))), 1.0);
		#endif
		return output;
	}
`,qk=`
	attribute aPosition : vec4f;
	uniform matrix_view : mat4x4f;
	uniform matrix_projectionSkybox : mat4x4f;
	uniform cubeMapRotationMatrix : mat3x3f;
	varying vViewDir : vec3f;
	#ifdef PREPASS_PASS
		varying vLinearDepth: f32;
	#endif
	#ifdef SKYMESH
		uniform matrix_model : mat4x4f;
		varying vWorldPos : vec3f;
	#endif
	@vertex
	fn vertexMain(input : VertexInput) -> VertexOutput {
		var output : VertexOutput;
		var view : mat4x4f = uniform.matrix_view;
		#ifdef SKYMESH
			var worldPos : vec4f = uniform.matrix_model * input.aPosition;
			output.vWorldPos = worldPos.xyz;
			output.position = uniform.matrix_projectionSkybox * (view * worldPos);
			#ifdef PREPASS_PASS
				output.vLinearDepth = -(uniform.matrix_view * vec4f(worldPos.xyz, 1.0)).z;
			#endif
		#else
			view[3][0] = 0.0;
			view[3][1] = 0.0;
			view[3][2] = 0.0;
			output.position = uniform.matrix_projectionSkybox * (view * input.aPosition);
			output.vViewDir = input.aPosition.xyz * uniform.cubeMapRotationMatrix;
			#ifdef PREPASS_PASS
				output.vLinearDepth = -pcPosition.w;
			#endif
		#endif
		output.position.z = output.position.w - 1.0e-7;
		return output;
	}
`,Yk=`
#ifdef STD_SPECULAR_CONSTANT
	uniform material_specular: vec3f;
#endif
fn getSpecularity() {
	var specularColor = vec3f(1.0, 1.0, 1.0);
	#ifdef STD_SPECULAR_CONSTANT
	specularColor = specularColor * uniform.material_specular;
	#endif
	#ifdef STD_SPECULAR_TEXTURE
	specularColor = specularColor * {STD_SPECULAR_TEXTURE_DECODE}(textureSampleBias({STD_SPECULAR_TEXTURE_NAME}, {STD_SPECULAR_TEXTURE_NAME}Sampler, {STD_SPECULAR_TEXTURE_UV}, uniform.textureBias)).{STD_SPECULAR_TEXTURE_CHANNEL};
	#endif
	#ifdef STD_SPECULAR_VERTEX
	specularColor = specularColor * saturate3(vVertexColor.{STD_SPECULAR_VERTEX_CHANNEL});
	#endif
	dSpecularity = specularColor;
}
`,jk=`
fn toSpherical(dir: vec3f) -> vec2f {
	let angle_xz = select(0.0, atan2(dir.x, dir.z), any(dir.xz != vec2f(0.0)));
	return vec2f(angle_xz, asin(dir.y));
}
fn toSphericalUv(dir : vec3f) -> vec2f {
	const PI : f32 = 3.141592653589793;
	let uv : vec2f = toSpherical(dir) / vec2f(PI * 2.0, PI) + vec2f(0.5, 0.5);
	return vec2f(uv.x, 1.0 - uv.y);
}
`,Kk=`
#ifdef STD_SPECULARITYFACTOR_CONSTANT
	uniform material_specularityFactor: f32;
#endif
fn getSpecularityFactor() {
	var specularityFactor = 1.0;
	#ifdef STD_SPECULARITYFACTOR_CONSTANT
	specularityFactor = specularityFactor * uniform.material_specularityFactor;
	#endif
	#ifdef STD_SPECULARITYFACTOR_TEXTURE
	specularityFactor = specularityFactor * textureSampleBias({STD_SPECULARITYFACTOR_TEXTURE_NAME}, {STD_SPECULARITYFACTOR_TEXTURE_NAME}Sampler, {STD_SPECULARITYFACTOR_TEXTURE_UV}, uniform.textureBias).{STD_SPECULARITYFACTOR_TEXTURE_CHANNEL};
	#endif
	#ifdef STD_SPECULARITYFACTOR_VERTEX
	specularityFactor = specularityFactor * saturate(vVertexColor.{STD_SPECULARITYFACTOR_VERTEX_CHANNEL});
	#endif
	dSpecularityFactor = specularityFactor;
}
`,Zk=`
fn getSpotEffect(lightSpotDir: vec3f, lightInnerConeAngle: f32, lightOuterConeAngle: f32, lightDirNorm: vec3f) -> f32 {
	let cosAngle: f32 = dot(lightDirNorm, lightSpotDir);
	return smoothstep(lightOuterConeAngle, lightInnerConeAngle, cosAngle);
}`,Qk=`
	nineSlicedUv = vec2f(vUv0.x, 1.0 - vUv0.y);
`,Jk=`
	let tileMask: vec2f = step(vMask, vec2f(0.99999));
	let tileSize: vec2f = 0.5 * (innerOffset.xy + innerOffset.zw);
	let tileScale: vec2f = vec2f(1.0) / (vec2f(1.0) - tileSize);
	var clampedUv: vec2f = mix(innerOffset.xy * 0.5, vec2f(1.0) - innerOffset.zw * 0.5, fract((vTiledUv - tileSize) * tileScale));
	clampedUv = clampedUv * atlasRect.zw + atlasRect.xy;
	var nineSlicedUv: vec2f = vUv0 * tileMask + clampedUv * (vec2f(1.0) - tileMask);
	nineSlicedUv.y = 1.0 - nineSlicedUv.y;
`,eU=`
	var<private> dAlpha: f32 = 1.0;
	#if LIT_BLEND_TYPE != NONE || defined(LIT_ALPHA_TEST) || defined(LIT_ALPHA_TO_COVERAGE) || STD_OPACITY_DITHER != NONE
		#ifdef STD_OPACITY_TEXTURE_ALLOCATE
			var texture_opacityMap : texture_2d<f32>;
			var texture_opacityMapSampler : sampler;
		#endif
	#endif
	#ifdef FORWARD_PASS
		var<private> dAlbedo: vec3f;
		var<private> dNormalW: vec3f;
		var<private> dSpecularity: vec3f = vec3f(0.0, 0.0, 0.0);
		var<private> dGlossiness: f32 = 0.0;
		#ifdef LIT_REFRACTION
			var<private> dTransmission: f32;
			var<private> dThickness: f32;
		#endif
		#ifdef LIT_SCENE_COLOR
			var uSceneColorMap : texture_2d<f32>;
			var uSceneColorMapSampler : sampler;
		#endif
		#ifdef LIT_SCREEN_SIZE
			uniform uScreenSize: vec4f;
		#endif
		#ifdef LIT_TRANSFORMS
			var<private> matrix_viewProjection: mat4x4f;
			var<private> matrix_model: mat4x4f;
		#endif
		#ifdef STD_HEIGHT_MAP
			var<private> dUvOffset: vec2f;
			#ifdef STD_HEIGHT_TEXTURE_ALLOCATE
				var texture_heightMap : texture_2d<f32>;
				var texture_heightMapSampler : sampler;
			#endif
		#endif
		#ifdef STD_DIFFUSE_TEXTURE_ALLOCATE
			var texture_diffuseMap : texture_2d<f32>;
			var texture_diffuseMapSampler : sampler;
		#endif
		#ifdef STD_DIFFUSEDETAIL_TEXTURE_ALLOCATE
			var texture_diffuseDetailMap : texture_2d<f32>;
			var texture_diffuseDetailMapSampler : sampler;
		#endif
		#ifdef STD_NORMAL_TEXTURE_ALLOCATE
			var texture_normalMap : texture_2d<f32>;
			var texture_normalMapSampler : sampler;
		#endif
		#ifdef STD_NORMALDETAIL_TEXTURE_ALLOCATE
			var texture_normalDetailMap : texture_2d<f32>;
			var texture_normalDetailMapSampler : sampler;
		#endif
		#ifdef STD_THICKNESS_TEXTURE_ALLOCATE
			var texture_thicknessMap : texture_2d<f32>;
			var texture_thicknessMapSampler : sampler;
		#endif
		#ifdef STD_REFRACTION_TEXTURE_ALLOCATE
			var texture_refractionMap : texture_2d<f32>;
			var texture_refractionMapSampler : sampler;
		#endif
		#ifdef LIT_IRIDESCENCE
			var<private> dIridescence: f32;
			var<private> dIridescenceThickness: f32;
			#ifdef STD_IRIDESCENCE_THICKNESS_TEXTURE_ALLOCATE
				var texture_iridescenceThicknessMap : texture_2d<f32>;
				var texture_iridescenceThicknessMapSampler : sampler;
			#endif
			#ifdef STD_IRIDESCENCE_TEXTURE_ALLOCATE
				var texture_iridescenceMap : texture_2d<f32>;
				var texture_iridescenceMapSampler : sampler;
			#endif
		#endif
		#ifdef LIT_CLEARCOAT
			var<private> ccSpecularity: f32;
			var<private> ccGlossiness: f32;
			var<private> ccNormalW: vec3f;
		#endif
		#ifdef LIT_GGX_SPECULAR
			var<private> dAnisotropy: f32;
			var<private> dAnisotropyRotation: vec2f;
		#endif
		#ifdef LIT_SPECULAR_OR_REFLECTION
			#ifdef LIT_SHEEN
				var<private> sSpecularity: vec3f;
				var<private> sGlossiness: f32;
				#ifdef STD_SHEEN_TEXTURE_ALLOCATE
					var texture_sheenMap : texture_2d<f32>;
					var texture_sheenMapSampler : sampler;
				#endif
				#ifdef STD_SHEENGLOSS_TEXTURE_ALLOCATE
					var texture_sheenGlossMap : texture_2d<f32>;
					var texture_sheenGlossMapSampler : sampler;
				#endif
			#endif
			#ifdef LIT_METALNESS
				var<private> dMetalness: f32;
				var<private> dIor: f32;
				#ifdef STD_METALNESS_TEXTURE_ALLOCATE
					var texture_metalnessMap : texture_2d<f32>;
					var texture_metalnessMapSampler : sampler;
				#endif
			#endif
			#ifdef LIT_SPECULARITY_FACTOR
				var<private> dSpecularityFactor: f32;
				#ifdef STD_SPECULARITYFACTOR_TEXTURE_ALLOCATE
					var texture_specularityFactorMap : texture_2d<f32>;
					var texture_specularityFactorMapSampler : sampler;
				#endif
			#endif
			#ifdef STD_SPECULAR_COLOR
				#ifdef STD_SPECULAR_TEXTURE_ALLOCATE
					var texture_specularMap : texture_2d<f32>;
					var texture_specularMapSampler : sampler;
				#endif
			#endif
			#ifdef STD_GLOSS_TEXTURE_ALLOCATE
				var texture_glossMap : texture_2d<f32>;
				var texture_glossMapSampler : sampler;
			#endif
		#endif
		#ifdef STD_AO
			var <private> dAo: f32;
			#ifdef STD_AO_TEXTURE_ALLOCATE
				var texture_aoMap : texture_2d<f32>;
				var texture_aoMapSampler : sampler;
			#endif
			#ifdef STD_AODETAIL_TEXTURE_ALLOCATE
				var texture_aoDetailMap : texture_2d<f32>;
				var texture_aoDetailMapSampler : sampler;
			#endif
		#endif
		var <private> dEmission: vec3f;
		#ifdef STD_EMISSIVE_TEXTURE_ALLOCATE
			var texture_emissiveMap : texture_2d<f32>;
			var texture_emissiveMapSampler : sampler;
		#endif
		#ifdef LIT_CLEARCOAT
			#ifdef STD_CLEARCOAT_TEXTURE_ALLOCATE
				var texture_clearCoatMap : texture_2d<f32>;
				var texture_clearCoatMapSampler : sampler;
			#endif
			#ifdef STD_CLEARCOATGLOSS_TEXTURE_ALLOCATE
				var texture_clearCoatGlossMap : texture_2d<f32>;
				var texture_clearCoatGlossMapSampler : sampler;
			#endif
			#ifdef STD_CLEARCOATNORMAL_TEXTURE_ALLOCATE
				var texture_clearCoatNormalMap : texture_2d<f32>;
				var texture_clearCoatNormalMapSampler : sampler;
			#endif
		#endif
		#ifdef LIT_GGX_SPECULAR
			#ifdef STD_ANISOTROPY_TEXTURE_ALLOCATE
				var texture_anisotropyMap : texture_2d<f32>;
				var texture_anisotropyMapSampler : sampler;
			#endif
		#endif
		#if defined(STD_LIGHTMAP) || defined(STD_LIGHT_VERTEX_COLOR)
			var<private> dLightmap: vec3f;
			#ifdef STD_LIGHT_TEXTURE_ALLOCATE
				var texture_lightMap : texture_2d<f32>;
				var texture_lightMapSampler : sampler;
			#endif
		#endif
	#endif
	#include "litShaderCorePS"
`,tU=`
	#if LIT_BLEND_TYPE != NONE || defined(LIT_ALPHA_TEST) || defined(LIT_ALPHA_TO_COVERAGE) || STD_OPACITY_DITHER != NONE
		#include "opacityPS"
		#if defined(LIT_ALPHA_TEST)
			#include "alphaTestPS"
		#endif
		#if STD_OPACITY_DITHER != NONE
			#include "opacityDitherPS"
		#endif
	#endif
	#ifdef FORWARD_PASS
		#ifdef STD_HEIGHT_MAP
			#include "parallaxPS"
		#endif
		#include  "diffusePS"
		#ifdef LIT_NEEDS_NORMAL
			#include "normalMapPS"
		#endif
		#ifdef LIT_REFRACTION
			#include "transmissionPS"
			#include "thicknessPS"
		#endif
		#ifdef LIT_IRIDESCENCE
			#include "iridescencePS"
			#include "iridescenceThicknessPS"
		#endif
		#ifdef LIT_SPECULAR_OR_REFLECTION
			#ifdef LIT_SHEEN
				#include "sheenPS"
				#include "sheenGlossPS"
			#endif
			#ifdef LIT_METALNESS
				#include "metalnessPS"
				#include "iorPS"
			#endif
			#ifdef LIT_SPECULARITY_FACTOR
				#include "specularityFactorPS"
			#endif
			#ifdef STD_SPECULAR_COLOR
				#include "specularPS"
			#else
				fn getSpecularity() { 
					dSpecularity = vec3f(1.0, 1.0, 1.0);
				}
			#endif
			#include "glossPS"
		#endif
		#ifdef STD_AO
			#include "aoPS"
		#endif
		#include "emissivePS"
		#ifdef LIT_CLEARCOAT
			#include "clearCoatPS"
			#include "clearCoatGlossPS"
			#include "clearCoatNormalPS"
		#endif
		#if defined(LIT_SPECULAR) && defined(LIT_LIGHTING) && defined(LIT_GGX_SPECULAR)
			#include "anisotropyPS"
		#endif
		#if defined(STD_LIGHTMAP) || defined(STD_LIGHT_VERTEX_COLOR)
			#include "lightmapPS"
		#endif
	#endif
	fn evaluateFrontend() {
		#if LIT_BLEND_TYPE != NONE || defined(LIT_ALPHA_TEST) || defined(LIT_ALPHA_TO_COVERAGE) || STD_OPACITY_DITHER != NONE
			getOpacity();
			#if defined(LIT_ALPHA_TEST)
				alphaTest(dAlpha);
			#endif
			#if STD_OPACITY_DITHER != NONE
				opacityDither(dAlpha, 0.0);
			#endif
			litArgs_opacity = dAlpha;
		#endif
		#ifdef FORWARD_PASS
			#ifdef STD_HEIGHT_MAP
				getParallax();
			#endif
			getAlbedo();
			litArgs_albedo = dAlbedo;
			#ifdef LIT_NEEDS_NORMAL
				getNormal();
				litArgs_worldNormal = dNormalW;
			#endif
			#ifdef LIT_REFRACTION
				getRefraction();
				litArgs_transmission = dTransmission;
				getThickness();
				litArgs_thickness = dThickness;
				#ifdef LIT_DISPERSION
					litArgs_dispersion = uniform.material_dispersion;
				#endif
			#endif
			#ifdef LIT_IRIDESCENCE
				getIridescence();
				getIridescenceThickness();
				litArgs_iridescence_intensity = dIridescence;
				litArgs_iridescence_thickness = dIridescenceThickness;
			#endif
			#ifdef LIT_SPECULAR_OR_REFLECTION
				#ifdef LIT_SHEEN
					getSheen();
					litArgs_sheen_specularity = sSpecularity;
					getSheenGlossiness();
					litArgs_sheen_gloss = sGlossiness;
				#endif
				#ifdef LIT_METALNESS
					getMetalness();
					litArgs_metalness = dMetalness;
					getIor();
					litArgs_ior = dIor;
				#endif
				#ifdef LIT_SPECULARITY_FACTOR
					getSpecularityFactor();
					litArgs_specularityFactor = dSpecularityFactor;
				#endif
				getGlossiness();
				getSpecularity();
				litArgs_specularity = dSpecularity;
				litArgs_gloss = dGlossiness;
			#endif
			#ifdef STD_AO
				getAO();
				litArgs_ao = dAo;
			#endif
			getEmission();
			litArgs_emission = dEmission;
			#ifdef LIT_CLEARCOAT
				getClearCoat();
				getClearCoatGlossiness();
				getClearCoatNormal();
				litArgs_clearcoat_specularity = ccSpecularity;
				litArgs_clearcoat_gloss = ccGlossiness;
				litArgs_clearcoat_worldNormal = ccNormalW;
			#endif
			#if defined(LIT_SPECULAR) && defined(LIT_LIGHTING) && defined(LIT_GGX_SPECULAR)
				getAnisotropy();
			#endif
			#if defined(STD_LIGHTMAP) || defined(STD_LIGHT_VERTEX_COLOR)
				getLightMap();
				litArgs_lightmap = dLightmap;
				#ifdef STD_LIGHTMAP_DIR
					litArgs_lightmapDir = dLightmapDir;
				#endif
			#endif
		#endif
	}
`,sU=`
#ifdef LIT_TANGENTS
	#define TBN_TANGENTS
#else
	#if defined(LIT_USE_NORMALS) || defined(LIT_USE_CLEARCOAT_NORMALS)
		#define TBN_DERIVATIVES
	#endif
#endif
#if defined(TBN_DERIVATIVES)
	uniform tbnBasis: f32;
#endif
fn getTBN(tangent: vec3f, binormal: vec3f, normal: vec3f) {
	#ifdef TBN_TANGENTS
		dTBN = mat3x3f(normalize(tangent), normalize(binormal), normalize(normal));
	#elif defined(TBN_DERIVATIVES)
		let uv: vec2f = {lightingUv};
		let dp1: vec3f = dpdx( vPositionW );
		let dp2: vec3f = dpdy( vPositionW );
		let duv1: vec2f = dpdx( uv );
		let duv2: vec2f = dpdy( uv );
		let dp2perp: vec3f = cross( dp2, normal );
		let dp1perp: vec3f = cross( normal, dp1 );
		let T: vec3f = dp2perp * duv1.x + dp1perp * duv2.x;
		let B: vec3f = dp2perp * duv1.y + dp1perp * duv2.y;
		let denom: f32 = max( dot(T, T), dot(B, B) );
		let invmax: f32 = select(uniform.tbnBasis / sqrt( denom ), 0.0, denom == 0.0);
		dTBN = mat3x3f(T * invmax, -B * invmax, normal );
	#else
		var B: vec3f = cross(normal, vObjectSpaceUpW);
		var T: vec3f = cross(normal, B);
		if (dot(B,B) == 0.0)
		{
			let major: f32 = max(max(normal.x, normal.y), normal.z);
			if (normal.x == major)
			{
				B = cross(normal, vec3f(0.0, 1.0, 0.0));
				T = cross(normal, B);
			}
			else if (normal.y == major)
			{
				B = cross(normal, vec3f(0.0, 0.0, 1.0));
				T = cross(normal, B);
			}
			else
			{
				B = cross(normal, vec3f(1.0, 0.0, 0.0));
				T = cross(normal, B);
			}
		}
		dTBN = mat3x3f(normalize(T), normalize(B), normalize(normal));
	#endif
}`,iU=`
#ifdef STD_THICKNESS_CONSTANT
uniform material_thickness: f32;
#endif
fn getThickness() {
	dThickness = 1.0;
	#ifdef STD_THICKNESS_CONSTANT
	dThickness = dThickness * uniform.material_thickness;
	#endif
	#ifdef STD_THICKNESS_TEXTURE
	dThickness = dThickness * textureSampleBias({STD_THICKNESS_TEXTURE_NAME}, {STD_THICKNESS_TEXTURE_NAME}Sampler, {STD_THICKNESS_TEXTURE_UV}, uniform.textureBias).{STD_THICKNESS_TEXTURE_CHANNEL};
	#endif
	#ifdef STD_THICKNESS_VERTEX
	dThickness = dThickness * saturate(vVertexColor.{STD_THICKNESS_VERTEX_CHANNEL});
	#endif
}
`,rU=`
#if (TONEMAP == NONE)
	#include "tonemappingNonePS"
#elif TONEMAP == FILMIC
	#include "tonemappingFilmicPS"
#elif TONEMAP == LINEAR
	#include "tonemappingLinearPS"
#elif TONEMAP == HEJL
	#include "tonemappingHejlPS"
#elif TONEMAP == ACES
	#include "tonemappingAcesPS"
#elif TONEMAP == ACES2
	#include "tonemappingAces2PS"
#elif TONEMAP == NEUTRAL
	#include "tonemappingNeutralPS"
#endif
`,aU=`
uniform exposure: f32;
fn toneMap(color: vec3f) -> vec3f {
	let tA: f32 = 2.51;
	let tB: f32 = 0.03;
	let tC: f32 = 2.43;
	let tD: f32 = 0.59;
	let tE: f32 = 0.14;
	let x: vec3f = color * uniform.exposure;
	return (x * (tA * x + tB)) / (x * (tC * x + tD) + tE);
}
`,nU=`
uniform exposure: f32;
const ACESInputMat: mat3x3f = mat3x3f(
	vec3f(0.59719, 0.35458, 0.04823),
	vec3f(0.07600, 0.90834, 0.01566),
	vec3f(0.02840, 0.13383, 0.83777)
);
const ACESOutputMat: mat3x3f = mat3x3f(
	vec3f( 1.60475, -0.53108, -0.07367),
	vec3f(-0.10208,  1.10813, -0.00605),
	vec3f(-0.00327, -0.07276,  1.07602)
);
fn RRTAndODTFit(v: vec3f) -> vec3f {
	let a: vec3f = v * (v + vec3f(0.0245786)) - vec3f(0.000090537);
	let b: vec3f = v * (vec3f(0.983729) * v + vec3f(0.4329510)) + vec3f(0.238081);
	return a / b;
}
fn toneMap(color: vec3f) -> vec3f {
	var c: vec3f = color * (uniform.exposure / 0.6);
	c = c * ACESInputMat;
	c = RRTAndODTFit(c);
	c = c * ACESOutputMat;
	return clamp(c, vec3f(0.0), vec3f(1.0));
}
`,oU=`
const A: f32 = 0.15;
const B: f32 = 0.50;
const C: f32 = 0.10;
const D: f32 = 0.20;
const E: f32 = 0.02;
const F: f32 = 0.30;
const W: f32 = 11.2;
uniform exposure: f32;
fn uncharted2Tonemap(x: vec3f) -> vec3f {
	return ((x * (A * x + C * B) + D * E) / (x * (A * x + B) + D * F)) - vec3f(E / F);
}
fn toneMap(color: vec3f) -> vec3f {
	var c: vec3f = uncharted2Tonemap(color * uniform.exposure);
	let whiteScale: vec3f = vec3f(1.0) / uncharted2Tonemap(vec3f(W, W, W));
	c *= whiteScale;
	return c;
}
`,lU=`
uniform exposure: f32;
fn toneMap(color: vec3f) -> vec3f {
	let A: f32 = 0.22;
	let B: f32 = 0.3;
	let C: f32 = 0.1;
	let D: f32 = 0.2;
	let E: f32 = 0.01;
	let F: f32 = 0.3;
	let Scl: f32 = 1.25;
	let adjusted_color = color * uniform.exposure;
	let h = max(vec3f(0.0), adjusted_color - vec3f(0.004));
	return (h * ((Scl * A) * h + Scl * vec3f(C * B)) + Scl * vec3f(D * E)) /
		   (h * (A * h + vec3f(B)) + vec3f(D * F)) -
		   Scl * vec3f(E / F);
}
`,hU=`
uniform exposure: f32;
fn toneMap(color: vec3f) -> vec3f {
	return color * uniform.exposure;
}
`,cU=`
uniform exposure: f32;
fn toneMap(col: vec3f) -> vec3f {
	var color = col * uniform.exposure;
	let startCompression = 0.8 - 0.04;
	let desaturation = 0.15;
	let x = min(color.r, min(color.g, color.b));
	let offset = select(0.04, x - 6.25 * x * x, x < 0.08);
	color -= vec3f(offset);
	let peak = max(color.r, max(color.g, color.b));
	if (peak < startCompression) {
		return color;
	}
	let d = 1.0 - startCompression;
	let newPeak = 1.0 - d * d / (peak + d - startCompression);
	color *= newPeak / peak;
	let g = 1.0 - 1.0 / (desaturation * (peak - newPeak) + 1.0);
	return mix(color, vec3f(newPeak), vec3f(g));
}
`,dU=`
fn toneMap(color: vec3f) -> vec3f {
	return color;
}
`,fU=`
#ifdef PIXELSNAP
	uniform uScreenSize: vec4f;
#endif
#ifdef SCREENSPACE
	uniform projectionFlipY: f32;
#endif
fn evalWorldPosition(vertexPosition: vec3f, modelMatrix: mat4x4f) -> vec4f {
	var localPos: vec3f = getLocalPosition(vertexPosition);
	#ifdef NINESLICED
		var localPosXZ: vec2f = localPos.xz;
		localPosXZ = localPosXZ * uniform.outerScale;
		let positiveUnitOffset: vec2f = clamp(vertexPosition.xz, vec2f(0.0), vec2f(1.0));
		let negativeUnitOffset: vec2f = clamp(-vertexPosition.xz, vec2f(0.0), vec2f(1.0));
		localPosXZ = localPosXZ + (-positiveUnitOffset * uniform.innerOffset.xy + negativeUnitOffset * uniform.innerOffset.zw) * vertex_texCoord0.xy;
		dTiledUvGlobal = (localPosXZ - uniform.outerScale + uniform.innerOffset.xy) * -0.5 + 1.0;
		localPosXZ = localPosXZ * -0.5;
		localPos = vec3f(localPosXZ.x, localPosXZ.y, localPos.y);
	#endif
	var posW: vec4f = modelMatrix * vec4f(localPos, 1.0);
	#ifdef SCREENSPACE
		posW = vec4f(posW.xy, 0.0, 1.0);
	#endif
	return posW;
}
fn getPosition() -> vec4f {
	dModelMatrix = getModelMatrix();
	let posW: vec4f = evalWorldPosition(vertex_position.xyz, dModelMatrix);
	dPositionW = posW.xyz;
	var screenPos: vec4f;
	#ifdef UV1LAYOUT
		screenPos = vec4f(vertex_texCoord1.xy * 2.0 - 1.0, 0.5, 1.0);
		screenPos.y *= -1.0;
	#else
		#ifdef SCREENSPACE
			screenPos = posW;
			screenPos.y *= uniform.projectionFlipY;
		#else
			screenPos = uniform.matrix_viewProjection * posW;
		#endif
		#ifdef PIXELSNAP
			screenPos.xy = (screenPos.xy * 0.5) + 0.5;
			screenPos.xy *= uniforms.uScreenSize.xy;
			screenPos.xy = floor(screenPos.xy);
			screenPos.xy *= uniforms.uScreenSize.zw;
			screenPos.xy = (screenPos.xy * 2.0) - 1.0;
		#endif
	#endif
	return screenPos;
}
fn getWorldPosition() -> vec3f {
	return dPositionW;
}
`,uU=`
	attribute vertex_position: vec4f;
	uniform matrix_viewProjection: mat4x4f;
	uniform matrix_model: mat4x4f;
	
	#ifdef MORPHING
		uniform morph_tex_params: vec2f;
		attribute morph_vertex_id: u32;
		fn getTextureMorphCoords() -> vec2i {
			var textureSize: vec2i = vec2i(uniform.morph_tex_params);
			var morphGridV: i32 = i32(morph_vertex_id) / textureSize.x;
			var morphGridU: i32 = i32(morph_vertex_id) - (morphGridV * textureSize.x);
			morphGridV = textureSize.y - morphGridV - 1;
			return vec2i(morphGridU, morphGridV);
		}
		#ifdef MORPHING_POSITION
			#ifdef MORPHING_INT
				uniform aabbSize: vec3f;
				uniform aabbMin: vec3f;
				var morphPositionTex: texture_2d<u32>;
			#else
				var morphPositionTex: texture_2d<f32>;
			#endif
		#endif
	#endif
	#ifdef defined(BATCH)
		#include "skinBatchVS"
		fn getModelMatrix() -> mat4x4f {
			return getBoneMatrix(vertex_boneIndices);
		}
	#elif defined(SKIN)
		#include "skinVS"
		fn getModelMatrix() -> mat4x4f {
			return uniform.matrix_model * getSkinMatrix(vertex_boneIndices, vertex_boneWeights);
		}
	#elif defined(INSTANCING)
		#include "transformInstancingVS"
	#else
		fn getModelMatrix() -> mat4x4f {
			return uniform.matrix_model;
		}
	#endif
	fn getLocalPosition(vertexPosition: vec3f) -> vec3f {
		var localPos: vec3f = vertexPosition;
		#ifdef MORPHING_POSITION
			var morphUV: vec2i = getTextureMorphCoords();
			#ifdef MORPHING_INT
				var morphPos: vec3f = vec3f(textureLoad(morphPositionTex, morphUV, 0).xyz) / 65535.0 * uniform.aabbSize + uniform.aabbMin;
			#else
				var morphPos: vec3f = textureLoad(morphPositionTex, morphUV, 0).xyz;
			#endif
			localPos += morphPos;
		#endif
		return localPos;
	}
`,pU=`
attribute instance_line1: vec4f;
attribute instance_line2: vec4f;
attribute instance_line3: vec4f;
attribute instance_line4: vec4f;
fn getModelMatrix() -> mat4x4f {
	return uniform.matrix_model * mat4x4f(instance_line1, instance_line2, instance_line3, instance_line4);
}
`,mU=`
#ifdef STD_REFRACTION_CONSTANT
	uniform material_refraction: f32;
#endif
fn getRefraction() {
	var refraction: f32 = 1.0;
	#ifdef STD_REFRACTION_CONSTANT
	refraction = uniform.material_refraction;
	#endif
	#ifdef STD_REFRACTION_TEXTURE
	refraction = refraction * textureSampleBias({STD_REFRACTION_TEXTURE_NAME}, {STD_REFRACTION_TEXTURE_NAME}Sampler, {STD_REFRACTION_TEXTURE_UV}, uniform.textureBias).{STD_REFRACTION_TEXTURE_CHANNEL};
	#endif
	#ifdef STD_REFRACTION_VERTEX
	refraction = refraction * saturate(vVertexColor.{STD_REFRACTION_VERTEX_CHANNEL});
	#endif
	dTransmission = refraction;
}
`,_U=`
uniform twoSidedLightingNegScaleFactor: f32;
fn handleTwoSidedLighting() {
	dTBN[2] = dTBN[2] * select(-uniform.twoSidedLightingNegScaleFactor, uniform.twoSidedLightingNegScaleFactor, pcFrontFacing);
}
`,gU=`
#ifdef NINESLICED
	fn getUv0() -> vec2f {
		var uv = vertex_position.xz;
		let positiveUnitOffset = clamp(vertex_position.xz, vec2f(0.0, 0.0), vec2f(1.0, 1.0));
		let negativeUnitOffset = clamp(-vertex_position.xz, vec2f(0.0, 0.0), vec2f(1.0, 1.0));
		uv = uv + ((-positiveUnitOffset * uniform.innerOffset.xy) + (negativeUnitOffset * uniform.innerOffset.zw)) * vertex_texCoord0.xy;
		uv = uv * -0.5 + vec2f(0.5, 0.5);
		uv = uv * uniform.atlasRect.zw + uniform.atlasRect.xy;
		dMaskGlobal = vertex_texCoord0.xy;
		return uv;
	}
#else
	fn getUv0() -> vec2f {
		return vertex_texCoord0;
	}
#endif
`,vU=`
fn getUv1() -> vec2f {
	return vertex_texCoord1;
}
`,SU=`
output.vUV{TRANSFORM_UV_{i}}_{TRANSFORM_ID_{i}} = vec2f(
	dot(vec3f(uv{TRANSFORM_UV_{i}}, 1), uniform.{TRANSFORM_NAME_{i}}0),
	dot(vec3f(uv{TRANSFORM_UV_{i}}, 1), uniform.{TRANSFORM_NAME_{i}}1)
);
`,yU=`
	uniform {TRANSFORM_NAME_{i}}0: vec3f;
	uniform {TRANSFORM_NAME_{i}}1: vec3f;
`,TU=`
fn getViewDir() {
	dViewDirW = normalize(uniform.view_position - vPositionW);
}
`;const xU={alphaTestPS:TN,ambientPS:xN,anisotropyPS:EN,aoPS:AN,aoDiffuseOccPS:bN,aoSpecOccPS:wN,bakeDirLmEndPS:CN,bakeLmEndPS:PN,basePS:LN,baseNineSlicedPS:IN,baseNineSlicedTiledPS:MN,bayerPS:DN,blurVSMPS:RN,clearCoatPS:ON,clearCoatGlossPS:NN,clearCoatNormalPS:FN,clusteredLightCookiesPS:UN,clusteredLightShadowsPS:BN,clusteredLightUtilsPS:kN,clusteredLightPS:VN,combinePS:zN,cookieBlit2DPS:HN,cookieBlitCubePS:GN,cookieBlitVS:WN,cubeMapProjectPS:$N,cubeMapRotatePS:XN,debugOutputPS:qN,debugProcessFrontendPS:YN,detailModesPS:KN,diffusePS:ZN,decodePS:jN,emissivePS:QN,encodePS:JN,endPS:eF,envAtlasPS:tF,envProcPS:sF,falloffInvSquaredPS:iF,falloffLinearPS:rF,floatAsUintPS:aF,fogPS:nF,fresnelSchlickPS:oF,frontendCodePS:"",frontendDeclPS:"",fullscreenQuadVS:lF,gammaPS:hF,glossPS:cF,gsplatCenterVS:dF,gsplatCornerVS:TF,gsplatColorVS:fF,gsplatCommonVS:uF,gsplatCompressedDataVS:pF,gsplatCompressedSHVS:mF,gsplatEvalSHVS:_F,gsplatQuatToMat3VS:gF,gsplatSogsColorVS:vF,gsplatSogsDataVS:SF,gsplatSogsSHVS:yF,gsplatDataVS:xF,gsplatOutputVS:EF,gsplatPS:AF,gsplatSHVS:bF,gsplatSourceVS:wF,gsplatVS:CF,quadVS:PF,indirectCoreCS:LF,immediateLinePS:IF,immediateLineVS:MF,iridescenceDiffractionPS:DF,iridescencePS:RF,iridescenceThicknessPS:OF,iorPS:NF,lightDeclarationPS:FF,lightDiffuseLambertPS:kF,lightDirPointPS:UF,lightEvaluationPS:BF,lightFunctionLightPS:VF,lightFunctionShadowPS:zF,lightingPS:HF,lightmapAddPS:GF,lightmapPS:WF,lightSpecularAnisoGGXPS:$F,lightSpecularBlinnPS:XF,lightSheenPS:qF,linearizeDepthPS:YF,litForwardBackendPS:jF,litForwardDeclarationPS:KF,litForwardMainPS:ZF,litForwardPostCodePS:QF,litForwardPreCodePS:JF,litMainPS:ek,litMainVS:tk,litOtherMainPS:sk,litShaderArgsPS:ik,litShaderCorePS:rk,litShadowMainPS:ak,litUserDeclarationPS:"",litUserDeclarationVS:"",litUserCodePS:"",litUserCodeVS:"",litUserMainStartPS:"",litUserMainStartVS:"",litUserMainEndPS:"",litUserMainEndVS:"",ltcPS:nk,metalnessPS:ok,metalnessModulatePS:hk,morphPS:ck,morphVS:dk,msdfPS:lk,msdfVS:fk,normalVS:uk,normalCoreVS:pk,normalMapPS:mk,opacityPS:_k,opacityDitherPS:gk,outputPS:vk,outputAlphaPS:Sk,outputTex2DPS:yk,sheenPS:Tk,sheenGlossPS:xk,parallaxPS:Ek,pickPS:Ak,reflDirPS:bk,reflDirAnisoPS:wk,reflectionCCPS:Ck,reflectionCubePS:Pk,reflectionEnvHQPS:Lk,reflectionEnvPS:Ik,reflectionSpherePS:Mk,reflectionSheenPS:Dk,refractionCubePS:Rk,refractionDynamicPS:Ok,reprojectPS:Nk,reprojectVS:Fk,screenDepthPS:kk,shadowCascadesPS:Uk,shadowEVSMPS:Bk,shadowPCF1PS:Vk,shadowPCF3PS:zk,shadowPCF5PS:Hk,shadowSoftPS:Gk,skinBatchVS:Wk,skinVS:$k,skyboxPS:Xk,skyboxVS:qk,specularPS:Yk,sphericalPS:jk,specularityFactorPS:Kk,spotPS:Zk,startNineSlicedPS:Qk,startNineSlicedTiledPS:Jk,stdDeclarationPS:eU,stdFrontEndPS:tU,TBNPS:sU,thicknessPS:iU,tonemappingPS:rU,tonemappingAcesPS:aU,tonemappingAces2PS:nU,tonemappingFilmicPS:oU,tonemappingHejlPS:lU,tonemappingLinearPS:hU,tonemappingNeutralPS:cU,tonemappingNonePS:dU,transformVS:fU,transformCoreVS:uU,transformInstancingVS:pU,transmissionPS:mU,twoSidedLightingPS:_U,uv0VS:gU,uv1VS:vU,uvTransformVS:SU,uvTransformUniformsPS:yU,viewDirPS:TU,webgpuPS:XT,webgpuVS:qT},Br=class Br extends ne{constructor(e){super(),this._batcher=null,this._destroyRequested=!1,this._inFrameUpdate=!1,this._librariesLoaded=!1,this._fillMode=US,this._resolutionMode=QR,this._allowResize=!0,this._skyboxAsset=null,this._entityIndex={},this._inTools=!1,this._scriptPrefix="",this._time=0,this.enableBundles=typeof TextDecoder<"u",this.timeScale=1,this.maxDeltaTime=.1,this.frame=0,this.frameGraph=new JR,this.scriptsOrder=[],this.autoRender=!0,this.renderNextFrame=!1,this.lightmapper=null,this.loader=new Fn(this),this.scenes=new _2(this),this.scripts=new f2(this),this.systems=new l2,this.i18n=new xa(this),this.keyboard=null,this.mouse=null,this.touch=null,this.gamepads=null,this.elementInput=null,this.xr=null,Br._applications[e.id]=this,vp(this),this.root=new Ve,this.root._enabledInHierarchy=!0}init(e){const{assetPrefix:t,batchManager:s,componentSystems:i,elementInput:r,gamepads:a,graphicsDevice:n,keyboard:l,lightmapper:h,mouse:c,resourceHandlers:d,scriptsOrder:f,scriptPrefix:u,soundManager:p,touch:m,xr:_}=e;this.graphicsDevice=n,de.get(n,Ee).add(yN),de.get(n,Be).add(xU),this._initDefaultMaterial(),this._initProgramLibrary(),this.stats=new g2(n),this._soundManager=p,this.scene=new _p(n),this._registerSceneImmediate(this.scene),this.assets=new Sp(this.loader),t&&(this.assets.prefix=t),this.bundles=new o2(this.assets),this.scriptsOrder=f||[],this.defaultLayerWorld=new Va({name:"World",id:Ni}),this.defaultLayerDepth=new Va({name:"Depth",id:kt,enabled:!1,opaqueSortMode:tc}),this.defaultLayerSkybox=new Va({name:"Skybox",id:k_,opaqueSortMode:tc}),this.defaultLayerUi=new Va({name:"UI",id:sf,transparentSortMode:IM}),this.defaultLayerImmediate=new Va({name:"Immediate",id:U_,opaqueSortMode:tc});const g=new uS("default");g.pushOpaque(this.defaultLayerWorld),g.pushOpaque(this.defaultLayerDepth),g.pushOpaque(this.defaultLayerSkybox),g.pushTransparent(this.defaultLayerWorld),g.pushOpaque(this.defaultLayerImmediate),g.pushTransparent(this.defaultLayerImmediate),g.pushTransparent(this.defaultLayerUi),this.scene.layers=g,Xr.createPlaceholder(n),this.renderer=new s1(n),this.renderer.scene=this.scene,h&&(this.lightmapper=new h(n,this.root,this.scene,this.renderer,this.assets),this.once("prerender",this._firstBake,this)),s&&(this._batcher=new s(n,this.root,this.scene),this.once("prerender",this._firstBatch,this)),this.keyboard=l||null,this.mouse=c||null,this.touch=m||null,this.gamepads=a||null,r&&(this.elementInput=r,this.elementInput.app=this),this.xr=_?new _(this):null,this.elementInput&&this.elementInput.attachSelectEvents(),this._scriptPrefix=u||"",this.enableBundles&&this.loader.addHandler("bundle",new c2(this)),d.forEach(y=>{const A=new y(this);this.loader.addHandler(A.handlerType,A)}),i.forEach(y=>{this.systems.add(new y(this))}),this._visibilityChangeHandler=this.onVisibilityChange.bind(this),typeof document<"u"&&(document.hidden!==void 0?(this._hiddenAttr="hidden",document.addEventListener("visibilitychange",this._visibilityChangeHandler,!1)):document.mozHidden!==void 0?(this._hiddenAttr="mozHidden",document.addEventListener("mozvisibilitychange",this._visibilityChangeHandler,!1)):document.msHidden!==void 0?(this._hiddenAttr="msHidden",document.addEventListener("msvisibilitychange",this._visibilityChangeHandler,!1)):document.webkitHidden!==void 0&&(this._hiddenAttr="webkitHidden",document.addEventListener("webkitvisibilitychange",this._visibilityChangeHandler,!1))),this.tick=EU(this)}static getApplication(e){return e?Br._applications[e]:ia()}_initDefaultMaterial(){const e=new bs;e.name="Default Material",tD(this.graphicsDevice,e)}_initProgramLibrary(){const e=new PR(this.graphicsDevice,new bs);$M(this.graphicsDevice,e)}get soundManager(){return this._soundManager}get batcher(){return this._batcher}get fillMode(){return this._fillMode}get resolutionMode(){return this._resolutionMode}configure(e,t){He.get(e,(s,i)=>{if(s){t(s);return}const r=i.application_properties,a=i.scenes,n=i.assets;this._parseApplicationProperties(r,l=>{this._parseScenes(a),this._parseAssets(n),t(l||null)})})}preload(e){this.fire("preload:start");const t=this.assets.list({preload:!0});if(t.length===0){this.fire("preload:end"),e();return}let s=0;const i=()=>{s++,this.fire("preload:progress",s/t.length),s===t.length&&(this.fire("preload:end"),e())};t.forEach(r=>{r.loaded?i():(r.once("load",i),r.once("error",i),this.assets.load(r))})}_preloadScripts(e,t){t()}_parseApplicationProperties(e,t){if(typeof e.maxAssetRetries=="number"&&e.maxAssetRetries>0&&this.loader.enableRetry(e.maxAssetRetries),e.useDevicePixelRatio||(e.useDevicePixelRatio=e.use_device_pixel_ratio),e.resolutionMode||(e.resolutionMode=e.resolution_mode),e.fillMode||(e.fillMode=e.fill_mode),this._width=e.width,this._height=e.height,e.useDevicePixelRatio&&(this.graphicsDevice.maxPixelRatio=window.devicePixelRatio),this.setCanvasResolution(e.resolutionMode,this._width,this._height),this.setCanvasFillMode(e.fillMode,this._width,this._height),e.layers&&e.layerOrder){const s=new uS("application"),i={};for(const r in e.layers){const a=e.layers[r];a.id=parseInt(r,10),a.enabled=a.id!==kt,i[r]=new Va(a)}for(let r=0,a=e.layerOrder.length;r<a;r++){const n=e.layerOrder[r],l=i[n.layer];l&&(n.transparent?s.pushTransparent(l):s.pushOpaque(l),s.subLayerEnabled[r]=n.enabled)}this.scene.layers=s}if(e.batchGroups){const s=this.batcher;if(s)for(let i=0,r=e.batchGroups.length;i<r;i++){const a=e.batchGroups[i];s.addGroup(a.name,a.dynamic,a.maxAabbSize,a.id,a.layers)}}e.i18nAssets&&(this.i18n.assets=e.i18nAssets),this._loadLibraries(e.libraries,t)}_loadLibraries(e,t){const s=e.length;let i=s;const r=/^https?:\/\//;if(s){const a=(n,l)=>{i--,n?t(n):i===0&&(this.onLibrariesLoaded(),t(null))};for(let n=0;n<s;++n){let l=e[n];!r.test(l.toLowerCase())&&this._scriptPrefix&&(l=le.join(this._scriptPrefix,l)),this.loader.load(l,"script",a)}}else this.onLibrariesLoaded(),t(null)}_parseScenes(e){if(e)for(let t=0;t<e.length;t++)this.scenes.add(e[t].name,e[t].url)}_parseAssets(e){const t=[],s={},i={};for(let r=0;r<this.scriptsOrder.length;r++){const a=this.scriptsOrder[r];e[a]&&(s[a]=!0,t.push(e[a]))}if(this.enableBundles)for(const r in e)e[r].type==="bundle"&&(i[r]=!0,t.push(e[r]));for(const r in e)s[r]||i[r]||t.push(e[r]);for(let r=0;r<t.length;r++){const a=t[r],n=new ie(a.name,a.type,a.file,a.data);if(n.id=parseInt(a.id,10),n.preload=a.preload?a.preload:!1,n.loaded=a.type==="script"&&a.data&&a.data.loadingType>0,n.tags.add(a.tags),a.i18n)for(const l in a.i18n)n.addLocalizedAssetId(l,a.i18n[l]);this.assets.add(n)}}start(){this.frame=0,this.fire("start",{timestamp:Mi(),target:this}),this._librariesLoaded||this.onLibrariesLoaded(),this.systems.fire("initialize",this.root),this.fire("initialize"),this.systems.fire("postInitialize",this.root),this.systems.fire("postPostInitialize",this.root),this.fire("postinitialize"),this.tick()}inputUpdate(e){this.controller&&this.controller.update(e),this.mouse&&this.mouse.update(),this.keyboard&&this.keyboard.update(),this.gamepads&&this.gamepads.update()}update(e){this.frame++,this.graphicsDevice.update(),this.systems.fire(this._inTools?"toolsUpdate":"update",e),this.systems.fire("animationUpdate",e),this.systems.fire("postUpdate",e),this.fire("update",e),this.inputUpdate(e)}render(){this.updateCanvasSize(),this.graphicsDevice.frameStart(),this.fire("prerender"),this.root.syncHierarchy(),this._batcher&&this._batcher.updateAll(),this.renderComposition(this.scene.layers),this.fire("postrender"),this.graphicsDevice.frameEnd()}renderComposition(e){this.renderer.update(e),this.renderer.buildFrameGraph(this.frameGraph,e),this.frameGraph.render(this.graphicsDevice)}_fillFrameStatsBasic(e,t,s){const i=this.stats.frame;i.dt=t,i.ms=s,e>i._timeToCountFrames?(i.fps=i._fpsAccum,i._fpsAccum=0,i._timeToCountFrames=e+1e3):i._fpsAccum++,this.stats.drawCalls.total=this.graphicsDevice._drawCallsPerFrame,this.graphicsDevice._drawCallsPerFrame=0}_fillFrameStats(){let e=this.stats.frame;e.cameras=this.renderer._camerasRendered,e.materials=this.renderer._materialSwitches,e.shaders=this.graphicsDevice._shaderSwitchesPerFrame,e.shadowMapUpdates=this.renderer._shadowMapUpdates,e.shadowMapTime=this.renderer._shadowMapTime,e.depthMapTime=this.renderer._depthMapTime,e.forwardTime=this.renderer._forwardTime;const t=this.graphicsDevice._primsPerFrame;e.triangles=t[Ci]/3+Math.max(t[dr]-2,0)+Math.max(t[Kr]-2,0),e.cullTime=this.renderer._cullTime,e.sortTime=this.renderer._sortTime,e.skinTime=this.renderer._skinTime,e.morphTime=this.renderer._morphTime,e.lightClusters=this.renderer._lightClusters,e.lightClustersTime=this.renderer._lightClustersTime,e.otherPrimitives=0;for(let s=0;s<t.length;s++)s<Ci&&(e.otherPrimitives+=t[s]),t[s]=0;this.renderer._camerasRendered=0,this.renderer._materialSwitches=0,this.renderer._shadowMapUpdates=0,this.graphicsDevice._shaderSwitchesPerFrame=0,this.renderer._cullTime=0,this.renderer._layerCompositionUpdateTime=0,this.renderer._lightClustersTime=0,this.renderer._sortTime=0,this.renderer._skinTime=0,this.renderer._morphTime=0,this.renderer._shadowMapTime=0,this.renderer._depthMapTime=0,this.renderer._forwardTime=0,e=this.stats.drawCalls,e.forward=this.renderer._forwardDrawCalls,e.culled=this.renderer._numDrawCallsCulled,e.depth=0,e.shadow=this.renderer._shadowDrawCalls,e.skinned=this.renderer._skinDrawCalls,e.immediate=0,e.instanced=0,e.removedByInstancing=0,e.misc=e.total-(e.forward+e.shadow),this.renderer._depthDrawCalls=0,this.renderer._shadowDrawCalls=0,this.renderer._forwardDrawCalls=0,this.renderer._numDrawCallsCulled=0,this.renderer._skinDrawCalls=0,this.renderer._immediateRendered=0,this.renderer._instancedDrawCalls=0,this.stats.misc.renderTargetCreationTime=this.graphicsDevice.renderTargetCreationTime,e=this.stats.particles,e.updatesPerFrame=e._updatesPerFrame,e.frameTime=e._frameTime,e._updatesPerFrame=0,e._frameTime=0}setCanvasFillMode(e,t,s){this._fillMode=e,this.resizeCanvas(t,s)}setCanvasResolution(e,t,s){this._resolutionMode=e,e===gp&&t===void 0&&(t=this.graphicsDevice.canvas.clientWidth,s=this.graphicsDevice.canvas.clientHeight),this.graphicsDevice.resizeCanvas(t,s)}isHidden(){return document[this._hiddenAttr]}onVisibilityChange(){this.isHidden()?this._soundManager&&this._soundManager.suspend():this._soundManager&&this._soundManager.resume()}resizeCanvas(e,t){if(!this._allowResize||this.xr&&this.xr.session)return;const s=window.innerWidth,i=window.innerHeight;if(this._fillMode===US){const r=this.graphicsDevice.canvas.width/this.graphicsDevice.canvas.height,a=s/i;r>a?(e=s,t=e/r):(t=i,e=t*r)}else this._fillMode===ZR&&(e=s,t=i);return this.graphicsDevice.canvas.style.width=`${e}px`,this.graphicsDevice.canvas.style.height=`${t}px`,this.updateCanvasSize(),{width:e,height:t}}updateCanvasSize(){if(!(!this._allowResize||this.xr?.active)&&this._resolutionMode===gp){const e=this.graphicsDevice.canvas;this.graphicsDevice.resizeCanvas(e.clientWidth,e.clientHeight)}}onLibrariesLoaded(){this._librariesLoaded=!0,this.systems.rigidbody&&this.systems.rigidbody.onLibraryLoaded()}applySceneSettings(e){let t;if(this.systems.rigidbody&&typeof Ammo<"u"){const[s,i,r]=e.physics.gravity;this.systems.rigidbody.gravity.set(s,i,r)}this.scene.applySettings(e),e.render.hasOwnProperty("skybox")&&(e.render.skybox?(t=this.assets.get(e.render.skybox),t?this.setSkybox(t):this.assets.once(`add:${e.render.skybox}`,this.setSkybox,this)):this.setSkybox(null))}setAreaLightLuts(e,t){e&&t&&Xr.set(this.graphicsDevice,e,t)}setSkybox(e){if(e!==this._skyboxAsset){const t=()=>{this.setSkybox(null)},s=()=>{this.scene.setSkybox(this._skyboxAsset?this._skyboxAsset.resources:null)};this._skyboxAsset&&(this.assets.off(`load:${this._skyboxAsset.id}`,s,this),this.assets.off(`remove:${this._skyboxAsset.id}`,t,this),this._skyboxAsset.off("change",s,this)),this._skyboxAsset=e,this._skyboxAsset&&(this.assets.on(`load:${this._skyboxAsset.id}`,s,this),this.assets.once(`remove:${this._skyboxAsset.id}`,t,this),this._skyboxAsset.on("change",s,this),this.scene.skyboxMip===0&&!this._skyboxAsset.loadFaces&&(this._skyboxAsset.loadFaces=!0),this.assets.load(this._skyboxAsset)),s()}}_firstBake(){this.lightmapper?.bake(null,this.scene.lightmapMode)}_firstBatch(){this.batcher?.generate()}_processTimestamp(e){return e}drawLine(e,t,s,i,r){this.scene.drawLine(e,t,s,i,r)}drawLines(e,t,s=!0,i=this.scene.defaultDrawLayer){this.scene.drawLines(e,t,s,i)}drawLineArrays(e,t,s=!0,i=this.scene.defaultDrawLayer){this.scene.drawLineArrays(e,t,s,i)}drawWireSphere(e,t,s=q.WHITE,i=20,r=!0,a=this.scene.defaultDrawLayer){this.scene.immediate.drawWireSphere(e,t,s,i,r,a)}drawWireAlignedBox(e,t,s=q.WHITE,i=!0,r=this.scene.defaultDrawLayer,a){this.scene.immediate.drawWireAlignedBox(e,t,s,i,r,a)}drawMeshInstance(e,t=this.scene.defaultDrawLayer){this.scene.immediate.drawMesh(null,null,null,e,t)}drawMesh(e,t,s,i=this.scene.defaultDrawLayer){this.scene.immediate.drawMesh(t,s,e,null,i)}drawQuad(e,t,s=this.scene.defaultDrawLayer){this.scene.immediate.drawMesh(t,e,this.scene.immediate.getQuadMesh(),null,s)}drawTexture(e,t,s,i,r,a,n=this.scene.defaultDrawLayer,l=!0){if(l===!1&&!this.graphicsDevice.isWebGPU)return;const h=new $;h.setTRS(new x(e,t,0),Q.IDENTITY,new x(s,-i,0)),a||(a=new yl,a.cull=lt,a.setParameter("colorMap",r),a.shaderDesc=l?this.scene.immediate.getTextureShaderDesc(r.encoding):this.scene.immediate.getUnfilterableTextureShaderDesc(),a.update()),this.drawQuad(h,a,n)}drawDepthTexture(e,t,s,i,r=this.scene.defaultDrawLayer){const a=new yl;a.cull=lt,a.shaderDesc=this.scene.immediate.getDepthTextureShaderDesc(),a.update(),this.drawTexture(e,t,s,i,null,a,r)}destroy(){if(this._inFrameUpdate){this._destroyRequested=!0;return}const e=this.graphicsDevice.canvas.id;this.fire("destroy",this),this.off("librariesloaded"),typeof document<"u"&&(document.removeEventListener("visibilitychange",this._visibilityChangeHandler,!1),document.removeEventListener("mozvisibilitychange",this._visibilityChangeHandler,!1),document.removeEventListener("msvisibilitychange",this._visibilityChangeHandler,!1),document.removeEventListener("webkitvisibilitychange",this._visibilityChangeHandler,!1)),this._visibilityChangeHandler=null,this.root.destroy(),this.root=null,this.mouse&&(this.mouse.off(),this.mouse.detach(),this.mouse=null),this.keyboard&&(this.keyboard.off(),this.keyboard.detach(),this.keyboard=null),this.touch&&(this.touch.off(),this.touch.detach(),this.touch=null),this.elementInput&&(this.elementInput.detach(),this.elementInput=null),this.gamepads&&(this.gamepads.destroy(),this.gamepads=null),this.controller&&(this.controller=null),this.systems.destroy(),this.scene.layers&&this.scene.layers.destroy();const t=this.assets.list();for(let i=0;i<t.length;i++)t[i].unload(),t[i].off();this.assets.off(),this.bundles.destroy(),this.bundles=null,this.i18n.destroy(),this.i18n=null,this.loader.getHandler("script")?.clearCache(),this.loader.destroy(),this.loader=null,this.scene.destroy(),this.scene=null,this.systems=null,this.context=null,this.scripts.destroy(),this.scripts=null,this.scenes.destroy(),this.scenes=null,this.lightmapper?.destroy(),this.lightmapper=null,this._batcher&&(this._batcher.destroy(),this._batcher=null),this._entityIndex={},this.defaultLayerDepth.onDisable=null,this.defaultLayerDepth.onEnable=null,this.defaultLayerDepth=null,this.defaultLayerWorld=null,this.xr?.end(),this.xr?.destroy(),this.renderer.destroy(),this.renderer=null,this.graphicsDevice.destroy(),this.graphicsDevice=null,this.tick=null,this.off(),this._soundManager?.destroy(),this._soundManager=null,Br._applications[e]=null,ia()===this&&vp(null),Br.cancelTick(this)}static cancelTick(e){e.frameRequestId&&(window.cancelAnimationFrame(e.frameRequestId),e.frameRequestId=void 0)}getEntityFromIndex(e){return this._entityIndex[e]}_registerSceneImmediate(e){this.on("postrender",e.immediate.onPostRender,e.immediate)}};Br._applications={};let Bc=Br;const EU=function(o){const e=o;return function(t,s){if(!e.graphicsDevice)return;e.frameRequestId&&(e.xr?.session?.cancelAnimationFrame(e.frameRequestId),cancelAnimationFrame(e.frameRequestId),e.frameRequestId=null),e._inFrameUpdate=!0,vp(e);const i=e._processTimestamp(t)||Mi(),r=i-(e._time||i);let a=r/1e3;if(a=B.clamp(a,0,e.maxDeltaTime),a*=e.timeScale,e._time=i,e.xr?.session?e.frameRequestId=e.xr.session.requestAnimationFrame(e.tick):e.frameRequestId=Se.browser||Se.worker?requestAnimationFrame(e.tick):null,e.graphicsDevice.contextLost)return;e._fillFrameStatsBasic(i,a,r),e.fire("frameupdate",r);let n=!1;s?(n=!e.xr?.update(s),e.graphicsDevice.defaultFramebuffer=s.session.renderState.baseLayer.framebuffer):e.graphicsDevice.defaultFramebuffer=null,n||(e.update(a),e.fire("framerender"),(e.autoRender||e.renderNextFrame)&&(e.render(),e.renderNextFrame=!1),e.fire("frameend")),e._inFrameUpdate=!1,e._destroyRequested&&e.destroy()}};class AU{constructor(){this.componentSystems=[],this.resourceHandlers=[]}}const Ro=new Um;class Hx{constructor(e,t,s){this.scene=e,this.light=t,this.store(),t.numCascades=1,this.scene.clusteredLightingEnabled&&!s.shadowsEnabled&&(t.castShadows=!1),t.type!==oe&&(t._node.getWorldTransform(),t.getBoundingSphere(Ro),this.lightBounds=new fe,this.lightBounds.center.copy(Ro.center),this.lightBounds.halfExtents.set(Ro.radius,Ro.radius,Ro.radius))}store(){this.mask=this.light.mask,this.shadowUpdateMode=this.light.shadowUpdateMode,this.enabled=this.light.enabled,this.intensity=this.light.intensity,this.rotation=this.light._node.getLocalRotation().clone(),this.numCascades=this.light.numCascades,this.castShadows=this.light._castShadows}restore(){const e=this.light;e.mask=this.mask,e.shadowUpdateMode=this.shadowUpdateMode,e.enabled=this.enabled,e.intensity=this.intensity,e._node.setLocalRotation(this.rotation),e.numCascades=this.numCascades,e._castShadows=this.castShadows}startBake(){this.light.enabled=!0,this.light._destroyShadowMap(),this.light.beginFrame()}endBake(e){const t=this.light;t.enabled=!1,t.shadowMap&&(t.shadowMap.cached&&e.add(t,t.shadowMap),t.shadowMap=null)}}const Dh=new z;class bU extends Hx{constructor(e,t){super(e.scene,t,e.lightingParams)}get numVirtualLights(){return this.light.type===oe?this.light.bakeNumSamples:1}prepareVirtualLight(e,t){const s=this.light;if(s._node.setLocalRotation(this.rotation),e>0){const a=s.bakeArea;Yl.circlePointDeterministic(Dh,e,t),Dh.mulScalar(a*.5),s._node.rotateLocal(Dh.x,0,Dh.y)}s._node.getWorldTransform();const i=2.2,r=Math.pow(this.intensity,i);s.intensity=Math.pow(r/t,1/i)}}const GS=new x;class WS extends Hx{constructor(e){const t=e.scene,s=new Ve("AmbientLight");s.addComponent("light",{type:"directional",affectDynamic:!0,affectLightmapped:!1,bake:!0,bakeNumSamples:t.ambientBakeNumSamples,castShadows:!0,normalOffsetBias:.05,shadowBias:.2,shadowDistance:1,shadowResolution:2048,shadowType:vs,color:q.WHITE,intensity:1,bakeDir:!1}),super(t,s.light.light,e.lightingParams)}get numVirtualLights(){return this.light.bakeNumSamples}prepareVirtualLight(e,t){Yl.spherePointDeterministic(GS,e,t,0,this.scene.ambientBakeSpherePart),this.light._node.lookAt(GS.mulScalar(-1)),this.light._node.rotateLocal(90,0,0);const s=2.2,i=2*Math.PI*this.scene.ambientBakeSpherePart,r=Math.pow(i,s);this.light.intensity=Math.pow(r/t,1/s)}}class Rh{constructor(e,t=null){this.node=e,this.component=e.render||e.model,t=t||this.component.meshInstances,this.store(),this.meshInstances=t,this.bounds=null,this.renderTargets=[]}store(){this.castShadows=this.component.castShadows}restore(){this.component.castShadows=this.castShadows}}var wU=`
float normpdf3(in vec3 v, in float sigma) {
	return 0.39894 * exp(-0.5 * dot(v, v) / (sigma * sigma)) / sigma;
}
vec3 decodeRGBM(vec4 rgbm) {
	vec3 color = (8.0 * rgbm.a) * rgbm.rgb;
	return color * color;
}
float saturate(float x) {
	return clamp(x, 0.0, 1.0);
}
vec4 encodeRGBM(vec3 color) {
	vec4 encoded;
	encoded.rgb = pow(color.rgb, vec3(0.5));
	encoded.rgb *= 1.0 / 8.0;
	encoded.a = saturate( max( max( encoded.r, encoded.g ), max( encoded.b, 1.0 / 255.0 ) ) );
	encoded.a = ceil(encoded.a * 255.0) / 255.0;
	encoded.rgb /= encoded.a;
	return encoded;
}
vec3 decode(vec4 pixel) {
	#if HDR
		return pixel.rgb;
	#else
		return decodeRGBM(pixel);
	#endif
}
bool isUsed(vec4 pixel) {
	#if HDR
		return any(greaterThan(pixel.rgb, vec3(0.0)));
	#else
		return pixel.a > 0.0;
	#endif
}
varying vec2 vUv0;
uniform sampler2D source;
uniform vec2 pixelOffset;
uniform vec2 sigmas;
uniform float bZnorm;
uniform float kernel[{MSIZE}];
void main(void) {
	
	vec4 pixel = texture2DLod(source, vUv0, 0.0);
	if (!isUsed(pixel)) {
		gl_FragColor = pixel;
		return ;
	}
	float sigma = sigmas.x;
	float bSigma = sigmas.y;
	vec3 pixelHdr = decode(pixel);
	vec3 accumulatedHdr = vec3(0.0);
	float accumulatedFactor = 0.000001;
	const int kSize = ({MSIZE} - 1) / 2;
	for (int i = -kSize; i <= kSize; ++i) {
		for (int j = -kSize; j <= kSize; ++j) {
			
			vec2 coord = vUv0 + vec2(float(i), float(j)) * pixelOffset;
			vec4 pix = texture2DLod(source, coord, 0.0);
			if (isUsed(pix)) {
				vec3 hdr = decode(pix);
				float factor = kernel[kSize + j] * kernel[kSize + i];
				factor *= normpdf3(hdr - pixelHdr, bSigma) * bZnorm;
				accumulatedHdr += factor * hdr;
				accumulatedFactor += factor;
			}
		}
	}
	vec3 finalHDR = accumulatedHdr / accumulatedFactor;
	#if HDR
		gl_FragColor = vec4(finalHDR, 1.0);
	#else
		gl_FragColor = encodeRGBM(finalHDR);
	#endif
}
`,CU=`
varying vec2 vUv0;
uniform sampler2D source;
uniform vec2 pixelOffset;
bool isUsed(vec4 pixel) {
	#if HDR
		return any(greaterThan(pixel.rgb, vec3(0.0)));
	#else
		return pixel.a > 0.0;
	#endif
}
void main(void) {
	vec4 c = texture2DLod(source, vUv0, 0.0);
	c = isUsed(c) ? c : texture2DLod(source, vUv0 - pixelOffset, 0.0);
	c = isUsed(c) ? c : texture2DLod(source, vUv0 + vec2(0, -pixelOffset.y), 0.0);
	c = isUsed(c) ? c : texture2DLod(source, vUv0 + vec2(pixelOffset.x, -pixelOffset.y), 0.0);
	c = isUsed(c) ? c : texture2DLod(source, vUv0 + vec2(-pixelOffset.x, 0), 0.0);
	c = isUsed(c) ? c : texture2DLod(source, vUv0 + vec2(pixelOffset.x, 0), 0.0);
	c = isUsed(c) ? c : texture2DLod(source, vUv0 + vec2(-pixelOffset.x, pixelOffset.y), 0.0);
	c = isUsed(c) ? c : texture2DLod(source, vUv0 + vec2(0, pixelOffset.y), 0.0);
	c = isUsed(c) ? c : texture2DLod(source, vUv0 + pixelOffset, 0.0);
	gl_FragColor = c;
}
`,PU=`
fn normpdf3(v: vec3f, sigma: f32) -> f32 {
	return 0.39894 * exp(-0.5 * dot(v, v) / (sigma * sigma)) / sigma;
}
fn decodeRGBM(rgbm: vec4f) -> vec3f {
	let color = (8.0 * rgbm.a) * rgbm.rgb;
	return color * color;
}
fn saturate(x: f32) -> f32 {
	return clamp(x, 0.0, 1.0);
}
fn encodeRGBM(color: vec3f) -> vec4f {
	var encoded: vec4f;
	let rgb_processed = pow(color.rgb, vec3f(0.5)) * (1.0 / 8.0);
	encoded = vec4f(rgb_processed, 0.0);
	let max_g_b = max( encoded.g, max( encoded.b, 1.0 / 255.0 ) );
	let max_rgb = max( encoded.r, max_g_b );
	encoded.a = clamp(max_rgb, 0.0, 1.0);
	encoded.a = ceil(encoded.a * 255.0) / 255.0;
	encoded = vec4f(encoded.rgb / encoded.a, encoded.a);
	return encoded;
}
fn decode(pixel: vec4f) -> vec3f {
	#if HDR
		return pixel.rgb;
	#else
		return decodeRGBM(pixel);
	#endif
}
fn isUsed(pixel: vec4f) -> bool {
	#if HDR
		return any(pixel.rgb > vec3f(0.0));
	#else
		return pixel.a > 0.0;
	#endif
}
varying vUv0: vec2f;
var source: texture_2d<f32>;
var sourceSampler: sampler;
uniform kernel: array<f32, {MSIZE}>;
uniform pixelOffset: vec2f;
uniform sigmas: vec2f;
uniform bZnorm: f32;
@fragment
fn fragmentMain(input: FragmentInput) -> FragmentOutput {
	var output: FragmentOutput;
	let pixel = textureSampleLevel(source, sourceSampler, input.vUv0, 0.0);
	if (!isUsed(pixel)) {
		output.color = pixel;
		return output;
	}
	let sigma = uniform.sigmas.x;
	let bSigma = uniform.sigmas.y;
	let pixelHdr = decode(pixel);
	var accumulatedHdr = vec3f(0.0);
	var accumulatedFactor = 0.000001;
	const kSize = ({MSIZE} - 1) / 2;
	for (var i: i32 = -kSize; i <= kSize; i = i + 1) {
		for (var j: i32 = -kSize; j <= kSize; j = j + 1) {
			let coord = input.vUv0 + vec2f(f32(i), f32(j)) * uniform.pixelOffset;
			let pix = textureSampleLevel(source, sourceSampler, coord, 0.0);
			if (isUsed(pix)) {
				let hdr = decode(pix);
				var factor = uniform.kernel[u32(kSize + j)].element * uniform.kernel[u32(kSize + i)].element;
				factor = factor * normpdf3(hdr - pixelHdr, bSigma) * uniform.bZnorm;
				accumulatedHdr = accumulatedHdr + factor * hdr;
				accumulatedFactor = accumulatedFactor + factor;
			}
		}
	}
	let finalHDR = accumulatedHdr / accumulatedFactor;
	#if HDR
		output.color = vec4f(finalHDR, 1.0);
	#else
		output.color = encodeRGBM(finalHDR);
	#endif
	return output;
}
`,LU=`
varying vUv0: vec2f;
var source: texture_2d<f32>;
var sourceSampler: sampler;
uniform pixelOffset: vec2f;
fn isUsed(pixel: vec4f) -> bool {
	#ifdef HDR
		return any(pixel.rgb > vec3f(0.0));
	#else
		return pixel.a > 0.0;
	#endif
}
@fragment
fn fragmentMain(input: FragmentInput) -> FragmentOutput {
	var c: vec4f = textureSampleLevel(source, sourceSampler, input.vUv0, 0.0);
	c = select(textureSampleLevel(source, sourceSampler, input.vUv0 - uniform.pixelOffset, 0.0), c, isUsed(c));
	c = select(textureSampleLevel(source, sourceSampler, input.vUv0 + vec2f(0.0, -uniform.pixelOffset.y), 0.0), c, isUsed(c));
	c = select(textureSampleLevel(source, sourceSampler, input.vUv0 + vec2f(uniform.pixelOffset.x, -uniform.pixelOffset.y), 0.0), c, isUsed(c));
	c = select(textureSampleLevel(source, sourceSampler, input.vUv0 + vec2f(-uniform.pixelOffset.x, 0.0), 0.0), c, isUsed(c));
	c = select(textureSampleLevel(source, sourceSampler, input.vUv0 + vec2f(uniform.pixelOffset.x, 0.0), 0.0), c, isUsed(c));
	c = select(textureSampleLevel(source, sourceSampler, input.vUv0 + vec2f(-uniform.pixelOffset.x, uniform.pixelOffset.y), 0.0), c, isUsed(c));
	c = select(textureSampleLevel(source, sourceSampler, input.vUv0 + vec2f(0.0, uniform.pixelOffset.y), 0.0), c, isUsed(c));
	c = select(textureSampleLevel(source, sourceSampler, input.vUv0 + uniform.pixelOffset, 0.0), c, isUsed(c));
	var output: FragmentOutput;
	output.color = c;
	return output;
}
`;const $S=15,IU={glslBilateralDeNoisePS:wU,glslDilatePS:CU},MU={wgslBilateralDeNoisePS:PU,wgslDilatePS:LU};class DU{constructor(e){this.shaderDilate=[],this.shaderDenoise=[],this.device=e,de.get(this.device,Ee).add(IU),de.get(this.device,Be).add(MU),this.constantTexSource=e.scope.resolve("source"),this.constantPixelOffset=e.scope.resolve("pixelOffset"),this.pixelOffset=new Float32Array(2),this.sigmas=null,this.constantSigmas=null,this.kernel=null}setSourceTexture(e){this.constantTexSource.setValue(e)}prepare(e,t){this.pixelOffset[0]=1/e,this.pixelOffset[1]=1/t,this.constantPixelOffset.setValue(this.pixelOffset)}prepareDenoise(e,t,s){const i=s?0:1;if(!this.shaderDenoise[i]){const r=new Map;r.set("{MSIZE}",15),s&&r.set("HDR",""),this.shaderDenoise[i]=vt.createShader(this.device,{uniqueName:`lmBilateralDeNoise-${s?"hdr":"rgbm"}`,attributes:{vertex_position:ue},vertexGLSL:de.get(this.device,Ee).get("fullscreenQuadVS"),vertexWGSL:de.get(this.device,Be).get("fullscreenQuadVS"),fragmentGLSL:de.get(this.device,Ee).get("glslBilateralDeNoisePS"),fragmentWGSL:de.get(this.device,Be).get("wgslBilateralDeNoisePS"),fragmentDefines:r}),this.sigmas=new Float32Array(2),this.constantSigmas=this.device.scope.resolve("sigmas"),this.constantKernel=this.device.scope.resolve("kernel[0]"),this.bZnorm=this.device.scope.resolve("bZnorm")}this.sigmas[0]=e,this.sigmas[1]=t,this.constantSigmas.setValue(this.sigmas),this.evaluateDenoiseUniforms(e,t)}getDenoise(e){const t=e?0:1;return this.shaderDenoise[t]}getDilate(e,t){const s=t?0:1;if(!this.shaderDilate[s]){const i=t?`#define HDR
`:"";this.shaderDilate[s]=vt.createShader(e,{uniqueName:`lmDilate-${t?"hdr":"rgbm"}`,attributes:{vertex_position:ue},vertexGLSL:de.get(this.device,Ee).get("fullscreenQuadVS"),vertexWGSL:de.get(this.device,Be).get("fullscreenQuadVS"),fragmentGLSL:i+de.get(this.device,Ee).get("glslDilatePS"),fragmentWGSL:i+de.get(this.device,Be).get("wgslDilatePS")})}return this.shaderDilate[s]}evaluateDenoiseUniforms(e,t){function s(n,l){return .39894*Math.exp(-.5*n*n/(l*l))/l}this.kernel=this.kernel||new Float32Array($S);const i=this.kernel,r=Math.floor(($S-1)/2);for(let n=0;n<=r;++n){const l=s(n,e);i[r+n]=l,i[r-n]=l}this.constantKernel.setValue(this.kernel);const a=1/s(0,t);this.bZnorm.setValue(a)}}class RU extends os{constructor(e,t,s,i,r,a){super(e),this.viewBindGroups=[],this.renderer=t,this.camera=s,this.worldClusters=i,this.receivers=r,this.lightArray=a}destroy(){this.viewBindGroups.forEach(e=>{e.defaultUniformBuffer.destroy(),e.destroy()}),this.viewBindGroups.length=0}execute(){this.device;const{renderer:e,camera:t,receivers:s,renderTarget:i,worldClusters:r,lightArray:a}=this;e.renderForwardLayer(t,i,null,void 0,wa,this.viewBindGroups,{meshInstances:s,splitLights:a,lightClusters:r})}}const OU=2048,NU=0,FU=1,Oh=new x;class kU{constructor(e,t,s,i,r){this.device=e,this.root=t,this.scene=s,this.renderer=i,this.assets=r,this.shadowMapCache=i.shadowMapCache,this._tempSet=new Set,this._initCalled=!1,this.passMaterials=[],this.ambientAOMaterial=null,this.fog="",this.ambientLight=new q,this.renderTargets=new Map,this.stats={renderPasses:0,lightmapCount:0,totalRenderTime:0,forwardTime:0,fboTime:0,shadowMapTime:0,compileTime:0,shadersLinked:0}}destroy(){Hs.decRef(this.blackTex),this.blackTex=null,Hs.destroy(),this.device=null,this.root=null,this.scene=null,this.renderer=null,this.assets=null,this.camera?.destroy(),this.camera=null}initBake(e){if(this.bakeHDR=this.scene.lightmapPixelFormat!==Ae,!this._initCalled){this._initCalled=!0,this.lightmapFilters=new DU(e),this.constantBakeDir=e.scope.resolve("bakeDir"),this.materials=[],this.blackTex=new ae(this.device,{width:4,height:4,format:Ae,type:ca,name:"lightmapBlack"}),Hs.incRef(this.blackTex);const t=new Xl;t.clearColor.set(0,0,0,0),t.clearColorBuffer=!0,t.clearDepthBuffer=!1,t.clearStencilBuffer=!1,t.frustumCulling=!1,t.projection=Rn,t.aspectRatio=1,t.node=new ze,this.camera=t,this.camera.shaderParams.gammaCorrection=Gl,this.camera.shaderParams.toneMapping=G_}if(this.scene.clusteredLightingEnabled){const t=new wx(e.supportsAreaLights,e.maxTextureSize,()=>{});this.lightingParams=t;const s=this.scene.lighting;t.shadowsEnabled=s.shadowsEnabled,t.shadowAtlasResolution=s.shadowAtlasResolution,t.cookiesEnabled=s.cookiesEnabled,t.cookieAtlasResolution=s.cookieAtlasResolution,t.areaLightsEnabled=s.areaLightsEnabled,t.cells=new x(3,3,3),t.maxLightsPerCell=4,this.worldClusters=new dp(e),this.worldClusters.name="ClusterLightmapper"}}finishBake(e){this.materials=[];function t(s){Hs.decRef(s.colorBuffer),s.destroy()}this.renderTargets.forEach(s=>{t(s)}),this.renderTargets.clear(),e.forEach(s=>{s.renderTargets.forEach(i=>{t(i)}),s.renderTargets.length=0}),this.ambientAOMaterial=null,this.worldClusters&&(this.worldClusters.destroy(),this.worldClusters=null)}createMaterialForPass(e,t,s){const i=new bs;return i.name=`lmMaterial-pass:${t}-ambient:${s}`,i.setDefine("UV1LAYOUT",""),i.setDefine("LIT_LIGHTMAP_BAKING",""),t===NU?(i.setDefine("LIT_LIGHTMAP_BAKING_COLOR",""),s?i.setDefine("LIT_LIGHTMAP_BAKING_ADD_AMBIENT",""):i.ambient=new q(0,0,0),this.bakeHDR||i.setDefine("LIGHTMAP_RGBM",""),i.lightMap=this.blackTex):(i.setDefine("LIT_LIGHTMAP_BAKING_DIR",""),i.setDefine("STD_LIGHTMAP_DIR","")),i.cull=lt,i.forceUv1=!0,i.update(),i}createMaterials(e,t,s){for(let i=0;i<s;i++)this.passMaterials[i]||(this.passMaterials[i]=this.createMaterialForPass(t,i,!1));this.ambientAOMaterial||(this.ambientAOMaterial=this.createMaterialForPass(t,0,!0),this.ambientAOMaterial.onUpdateShader=function(i){return i.litOptions.lightMapWithoutAmbient=!0,i.litOptions.separateAmbient=!0,i})}createTexture(e,t){return new ae(this.device,{width:e,height:e,format:this.scene.lightmapPixelFormat,mipmaps:!1,type:this.bakeHDR?ti:ca,minFilter:pe,magFilter:pe,addressU:te,addressV:te,name:t})}collectModels(e,t,s){if(!e.enabled)return;let i;if(e.model?.model&&e.model?.enabled&&(s&&s.push(new Rh(e)),e.model.lightmapped&&t&&(i=e.model.model.meshInstances)),e.render?.enabled&&(s&&s.push(new Rh(e)),e.render.lightmapped&&t&&(i=e.render.meshInstances)),i){let r=!0;for(let a=0;a<i.length;a++)if(!i[a].mesh.vertexBuffer.format.hasUv1){r=!1;break}if(r){const a=[];for(let n=0;n<i.length;n++){const l=i[n].mesh;this._tempSet.has(l)?t.push(new Rh(e,[i[n]])):a.push(i[n]),this._tempSet.add(l)}this._tempSet.clear(),a.length>0&&t.push(new Rh(e,a))}}for(let r=0;r<e._children.length;r++)this.collectModels(e._children[r],t,s)}prepareShadowCasters(e){const t=[];for(let s=0;s<e.length;s++){const i=e[s].component;if(i.castShadows=i.castShadowsLightmap,i.castShadowsLightmap){const r=e[s].meshInstances;for(let a=0;a<r.length;a++)r[a].visibleThisFrame=!0,t.push(r[a])}}return t}updateTransforms(e){for(let t=0;t<e.length;t++){const s=e[t].meshInstances;for(let i=0;i<s.length;i++)s[i].node.getWorldTransform()}}calculateLightmapSize(e){let t;const s=this.scene.lightmapSizeMultiplier||16,i=Oh;let r,a;e.model?(a=e.model.lightmapSizeMultiplier,e.model.asset?(t=this.assets.get(e.model.asset).data,t.area&&(r=t.area)):e.model._area&&(t=e.model,t._area&&(r=t._area))):e.render&&(a=e.render.lightmapSizeMultiplier,e.render.type!=="asset"&&e.render._area&&(t=e.render,t._area&&(r=t._area)));const n={x:1,y:1,z:1,uv:1};r&&(n.x=r.x,n.y=r.y,n.z=r.z,n.uv=r.uv);const l=a||1;n.x*=l,n.y*=l,n.z*=l;const h=e.render||e.model,c=this.computeNodeBounds(h.meshInstances);i.copy(c.halfExtents);let d=n.x*i.y*i.z+n.y*i.x*i.z+n.z*i.x*i.y;return d/=n.uv,d=Math.sqrt(d),Math.min(B.nextPowerOfTwo(d*s),this.scene.lightmapMaxResolution||OU)}setLightmapping(e,t,s,i){for(let r=0;r<e.length;r++){const a=e[r],n=a.meshInstances;for(let l=0;l<n.length;l++){const h=n[l];if(h.setLightmapped(t),t){i&&(h._shaderDefs|=i),h.mask=ma;for(let c=0;c<s;c++){const d=a.renderTargets[c].colorBuffer;d.minFilter=Ze,d.magFilter=Ze,h.setRealtimeLightmap(Oe.lightmapParamNames[c],d)}}}}}bake(e,t=ec){const s=this.device,i=Mi();this.scene._updateSkyMesh(),this.stats.renderPasses=0,this.stats.shadowMapTime=0,this.stats.forwardTime=0;const r=s._shaderStats.linked,a=s._renderTargetCreationTime,n=s._shaderStats.compileTime,l=[],h=[];if(e){for(let d=0;d<e.length;d++)this.collectModels(e[d],l,null);this.collectModels(this.root,null,h)}else this.collectModels(this.root,l,h);if(l.length>0){this.renderer.shadowRenderer.frameUpdate();const d=t===ec?2:1;this.setLightmapping(l,!1,d),this.initBake(s),this.bakeInternal(d,l,h);let f=lp;t===ec&&(f|=px),this.scene.ambientBake&&(f|=mx),this.setLightmapping(l,!0,d,f),this.finishBake(l)}const c=Mi();this.stats.totalRenderTime=c-i,this.stats.shadersLinked=s._shaderStats.linked-r,this.stats.compileTime=s._shaderStats.compileTime-n,this.stats.fboTime=s._renderTargetCreationTime-a,this.stats.lightmapCount=l.length}allocateTextures(e,t){for(let s=0;s<e.length;s++){const i=e[s],r=this.calculateLightmapSize(i.node);for(let a=0;a<t;a++){const n=this.createTexture(r,`lightmapper_lightmap_${s}`);Hs.incRef(n),i.renderTargets[a]=new ct({colorBuffer:n,depth:!1})}if(!this.renderTargets.has(r)){const a=this.createTexture(r,`lightmapper_temp_lightmap_${r}`);Hs.incRef(a),this.renderTargets.set(r,new ct({colorBuffer:a,depth:!1}))}}}prepareLightsToBake(e,t){if(this.scene.ambientBake){const i=new WS(this);t.push(i)}const s=this.renderer.lights;for(let i=0;i<s.length;i++){const r=s[i],a=new bU(this,r);e.push(a),r.enabled&&(r.mask&sa)!==0&&(r.mask=sa|ma|As,r.shadowUpdateMode=r.type===oe?Z_:rr,t.push(a))}t.sort()}restoreLights(e){for(let t=0;t<e.length;t++)e[t].restore()}setupScene(){this.ambientLight.copy(this.scene.ambientLight),this.scene.ambientBake||this.scene.ambientLight.set(0,0,0),this.renderer.setSceneConstants(),this.device.scope.resolve("ambientBakeOcclusionContrast").setValue(this.scene.ambientBakeOcclusionContrast),this.device.scope.resolve("ambientBakeOcclusionBrightness").setValue(this.scene.ambientBakeOcclusionBrightness)}restoreScene(){this.scene.ambientLight.copy(this.ambientLight)}computeNodeBounds(e){const t=new fe;if(e.length>0){t.copy(e[0].aabb);for(let s=1;s<e.length;s++)t.add(e[s].aabb)}return t}computeNodesBounds(e){for(let t=0;t<e.length;t++){const s=e[t].meshInstances;e[t].bounds=this.computeNodeBounds(s)}}computeBounds(e){const t=new fe;for(let s=0;s<e.length;s++){t.copy(e[0].aabb);for(let i=1;i<e.length;i++)t.add(e[i].aabb)}return t}backupMaterials(e){for(let t=0;t<e.length;t++)this.materials[t]=e[t].material}restoreMaterials(e){for(let t=0;t<e.length;t++)e[t].material=this.materials[t]}lightCameraPrepare(e,t){const s=t.light;let i;return s.type===Re&&(i=s.getRenderData(null,0).shadowCamera,i._node.setPosition(s._node.getPosition()),i._node.setRotation(s._node.getRotation()),i._node.rotateLocal(-90,0,0),i.projection=zs,i.nearClip=s.attenuationEnd/1e3,i.farClip=s.attenuationEnd,i.aspectRatio=1,i.fov=s._outerConeAngle*2,this.renderer.updateCameraFrustum(i)),i}lightCameraPrepareAndCull(e,t,s,i){const r=e.light;let a=!0;if(r.type===oe){Oh.copy(i.center),Oh.y+=i.halfExtents.y,this.camera.node.setPosition(Oh),this.camera.node.setEulerAngles(-90,0,0),this.camera.nearClip=0,this.camera.farClip=i.halfExtents.y*2;const n=Math.max(i.halfExtents.x,i.halfExtents.z);this.camera.orthoHeight=n}else e.lightBounds.intersects(t.bounds)||(a=!1);if(r.type===Re){let n=!1;const l=t.meshInstances;for(let h=0;h<l.length;h++)if(l[h]._isVisible(s)){n=!0;break}n||(a=!1)}return a}setupLightArray(e,t){e[oe].length=0,e[Me].length=0,e[Re].length=0,e[t.type][0]=t,t.visibleThisFrame=!0}renderShadowMap(e,t,s,i){const r=i.light,a=this.scene.clusteredLightingEnabled,n=r.castShadows&&(!a||this.scene.lighting.shadowsEnabled);if(!t&&n)if(!r.shadowMap&&!a&&(r.shadowMap=this.shadowMapCache.get(this.device,r)),r.type===oe)this.renderer._shadowRendererDirectional.cull(r,e,this.camera,s),this.renderer._shadowRendererDirectional.getLightRenderPass(r,this.camera)?.render();else{if(this.device.isWebGPU)return!0;this.renderer._shadowRendererLocal.cull(r,e,s),this.renderer.shadowRenderer.render(r,this.camera,!1)}return!0}postprocessTextures(e,t,s){const r=this.lightmapFilters.getDilate(e,this.bakeHDR);let a;const n=this.scene.lightmapFilterEnabled;n&&(this.lightmapFilters.prepareDenoise(this.scene.lightmapFilterRange,this.scene.lightmapFilterSmoothness,this.bakeHDR),a=this.lightmapFilters.getDenoise(this.bakeHDR)),e.setBlendState(dt.NOBLEND),e.setDepthState(Gt.NODEPTH),e.setStencilState(null,null);for(let l=0;l<t.length;l++){const h=t[l];for(let c=0;c<s;c++){const d=h.renderTargets[c],f=d.colorBuffer,u=this.renderTargets.get(f.width),p=u.colorBuffer;this.lightmapFilters.prepare(f.width,f.height);for(let m=0;m<1;m++)this.lightmapFilters.setSourceTexture(f),fr(e,u,n&&c===0&&m===0?a:r),this.lightmapFilters.setSourceTexture(p),fr(e,d,r)}}}bakeInternal(e,t,s){const i=this.scene,r=i.layers,a=this.device,n=i.clusteredLightingEnabled;this.createMaterials(a,i,e),this.setupScene(),r._update(),this.computeNodesBounds(t),this.allocateTextures(t,e),this.renderer.collectLights(r);const l=[],h=[];this.prepareLightsToBake(l,h),this.updateTransforms(s);const c=this.prepareShadowCasters(s);this.renderer.updateCpuSkinMatrices(c),this.renderer.gpuUpdate(c);const d=this.computeBounds(c);let f,u,p,m;for(f=0;f<t.length;f++)for(p=t[f].meshInstances,u=0;u<p.length;u++)m=p[u],m.setLightmapped(!1),m.mask=sa,m.setRealtimeLightmap(Oe.lightmapParamNames[0],this.blackTex),m.setRealtimeLightmap(Oe.lightmapParamNames[1],this.blackTex);for(u=0;u<h.length;u++)h[u].light.enabled=!1;const _=[[],[],[]];let g,y,A=!1;for(f=0;f<h.length;f++){const v=h[f],S=v instanceof WS,b=v.light.type===oe;let E=v.numVirtualLights;e>1&&E>1&&v.light.bakeDir&&(E=1);for(let T=0;T<E;T++){E>1&&v.prepareVirtualLight(T,E),v.startBake();let w=!1;const P=this.lightCameraPrepare(a,v);for(y=0;y<t.length;y++){const M=t[y];if(p=M.meshInstances,!this.lightCameraPrepareAndCull(v,M,P,d))continue;this.setupLightArray(_,v.light);const D=b?[]:[v.light];for(n&&this.renderer.lightTextureAtlas.update(D,this.lightingParams),w=this.renderShadowMap(r,w,c,v),n&&this.worldClusters.update(D,this.lightingParams),this.backupMaterials(p),g=0;g<e&&!(g>0&&T>0||S&&g>0);g++){const k=M.renderTargets[g],G=M.renderTargets[g].colorBuffer.width,U=this.renderTargets.get(G),C=U.colorBuffer;g===0?A=i.updateShaders:A&&(i.updateShaders=!0);let I=this.passMaterials[g];for(S&&T+1===E&&g===0&&(I=this.ambientAOMaterial),u=0;u<p.length;u++)p[u].material=I;if(this.renderer.updateShaders(p),g===FU&&this.constantBakeDir.setValue(v.light.bakeDir?1:0),a.isWebGPU){const R=new RU(a,this.renderer,this.camera,n?this.worldClusters:null,p,_);R.init(U),R.render(),R.destroy()}else this.renderer.setCamera(this.camera,U,!0),n&&this.worldClusters.activate(),this.renderer._forwardTime=0,this.renderer._shadowMapTime=0,this.renderer.renderForward(this.camera,U,p,_,wa),a.updateEnd();for(M.renderTargets[g]=U,this.renderTargets.set(G,k),u=0;u<p.length;u++)m=p[u],m.setRealtimeLightmap(Oe.lightmapParamNames[g],C),m._shaderDefs|=lp}this.restoreMaterials(p)}v.endBake(this.shadowMapCache)}}for(this.postprocessTextures(a,t,e),y=0;y<s.length;y++)s[y].restore();this.restoreLights(l),this.restoreScene(),n||this.shadowMapCache.clear()}}const ld=class ld extends ne{constructor(e,t){super(),this.system=e,this.entity=t,this.system.schema&&!this._accessorsBuilt&&this.buildAccessors(this.system.schema),this.on("set",function(s,i,r){this.fire(`set_${s}`,s,i,r)}),this.on("set_enabled",this.onSetEnabled,this)}static _buildAccessors(e,t){t.forEach(s=>{const i=typeof s=="object"?s.name:s;Object.defineProperty(e,i,{get:function(){return this.data[i]},set:function(r){const a=this.data,n=a[i];a[i]=r,this.fire("set",i,n,r)},configurable:!0})}),e._accessorsBuilt=!0}buildAccessors(e){ld._buildAccessors(this,e)}onSetEnabled(e,t,s){t!==s&&this.entity.enabled&&(s?this.onEnable():this.onDisable())}onEnable(){}onDisable(){}onPostStateChange(){}get data(){const e=this.system.store[this.entity.getGuid()];return e?e.data:null}set enabled(e){}get enabled(){return!0}};ld.order=0;let he=ld;class qe extends ne{constructor(e){super(),this.app=e,this.store={},this.schema=[]}addComponent(e,t={}){const s=new this.ComponentType(this,e),i=new this.DataType;return this.store[e.getGuid()]={entity:e,data:i},e[this.id]=s,e.c[this.id]=s,this.initializeComponentData(s,t,[]),this.fire("add",e,s),s}removeComponent(e){const t=this.id,s=this.store[e.getGuid()],i=e.c[t];i.fire("beforeremove"),this.fire("beforeremove",e,i),delete this.store[e.getGuid()],e[t]=void 0,delete e.c[t],this.fire("remove",e,s.data)}cloneComponent(e,t){const s=this.store[e.getGuid()];return this.addComponent(t,s.data)}initializeComponentData(e,t={},s){for(let i=0,r=s.length;i<r;i++){const a=s[i];let n,l;typeof a=="object"?(n=a.name,l=a.type):(n=a,l=void 0);let h=t[n];h!==void 0?(l!==void 0&&(h=UU(h,l)),e[n]=h):e[n]=e.data[n]}e.enabled&&e.entity.enabled&&e.onEnable()}getPropertiesOfType(e){const t=[];return(this.schema||[]).forEach(i=>{i&&typeof i=="object"&&i.type===e&&t.push(i)}),t}destroy(){this.off()}}function UU(o,e){if(!o)return o;switch(e){case"rgb":return o instanceof q?o.clone():new q(o[0],o[1],o[2]);case"rgba":return o instanceof q?o.clone():new q(o[0],o[1],o[2],o[3]);case"vec2":return o instanceof z?o.clone():new z(o[0],o[1]);case"vec3":return o instanceof x?o.clone():new x(o[0],o[1],o[2]);case"vec4":return o instanceof K?o.clone():new K(o[0],o[1],o[2],o[3]);case"boolean":case"number":case"string":return o;case"entity":return o;default:throw new Error(`Could not convert unhandled type: ${e}`)}}const Gx=0,Tp=1,xp=2;class BU{constructor(){this._left=1/0,this._right=-1/0,this._len=0,this._recip=0,this._p0=0,this._p1=0,this._t=0,this._hermite={valid:!1,p0:0,m0:0,p1:0,m1:0}}update(e,t){if(e<this._left||e>=this._right){const s=t.length;if(!s)this._left=-1/0,this._right=1/0,this._len=0,this._recip=0,this._p0=this._p1=0;else if(e<t[0])this._left=-1/0,this._right=t[0],this._len=0,this._recip=0,this._p0=this._p1=0;else if(e>=t[s-1])this._left=t[s-1],this._right=1/0,this._len=0,this._recip=0,this._p0=this._p1=s-1;else{const i=this._findKey(e,t);this._left=t[i],this._right=t[i+1],this._len=this._right-this._left;const r=1/this._len;this._recip=isFinite(r)?r:0,this._p0=i,this._p1=i+1}}this._t=this._recip===0?0:(e-this._left)*this._recip,this._hermite.valid=!1}_findKey(e,t){let s=0;for(;e>=t[s+1];)s++;return s}eval(e,t,s){const i=s._data,r=s._components,a=this._p0*r;if(t===Gx)for(let n=0;n<r;++n)e[n]=i[a+n];else{const n=this._t,l=this._p1*r;switch(t){case Tp:for(let h=0;h<r;++h)e[h]=B.lerp(i[a+h],i[l+h],n);break;case xp:{const h=this._hermite;if(!h.valid){const p=n*n,m=n+n,_=1-n,g=_*_;h.valid=!0,h.p0=(1+m)*g,h.m0=n*g,h.p1=p*(3-m),h.m1=p*(n-1)}const c=(this._p0*3+1)*r,d=(this._p0*3+2)*r,f=(this._p1*3+1)*r,u=(this._p1*3+0)*r;for(let p=0;p<r;++p)e[p]=h.p0*i[c+p]+h.m0*i[d+p]*this._len+h.p1*i[f+p]+h.m1*i[u+p]*this._len;break}}}}}class XS{constructor(e){this._name=`${e.name}Snapshot`,this._time=-1,this._cache=[],this._results=[];for(let i=0;i<e._inputs.length;++i)this._cache[i]=new BU;const t=e._curves,s=e._outputs;for(let i=0;i<t.length;++i){const r=t[i],a=s[r._output],n=[];for(let l=0;l<a._components;++l)n[l]=0;this._results[i]=n}}}const al=class al{constructor(e,t,s,i,r,a){this._name=e.name,this._track=e,this._snapshot=new XS(e),this._playing=i,this._time=t,this._speed=s,this._loop=r,this._blendWeight=1,this._blendOrder=0,this._eventHandler=a,this.alignCursorToCurrentTime()}set name(e){this._name=e}get name(){return this._name}set track(e){this._track=e,this._snapshot=new XS(e)}get track(){return this._track}get snapshot(){return this._snapshot}set time(e){this._time=e,this.alignCursorToCurrentTime()}get time(){return this._time}set speed(e){const t=Math.sign(e)!==Math.sign(this._speed);this._speed=e,t&&this.alignCursorToCurrentTime()}get speed(){return this._speed}set loop(e){this._loop=e}get loop(){return this._loop}set blendWeight(e){this._blendWeight=e}get blendWeight(){return this._blendWeight}set blendOrder(e){this._blendOrder=e}get blendOrder(){return this._blendOrder}set eventCursor(e){this._eventCursor=e}get eventCursor(){return this._eventCursor}get eventCursorEnd(){return this.isReverse?0:this._track.events.length-1}get nextEvent(){return this._track.events[this._eventCursor]}get isReverse(){return this._speed<0}nextEventAheadOfTime(e){return this.nextEvent?this.isReverse?this.nextEvent.time<=e:this.nextEvent.time>=e:!1}nextEventBehindTime(e){return this.nextEvent?e===this.track.duration?this.isReverse?this.nextEvent.time>=e:this.nextEvent.time<=e:this.isReverse?this.nextEvent.time>e:this.nextEvent.time<e:!1}resetEventCursor(){this._eventCursor=this.isReverse?this._track.events.length-1:0}moveEventCursor(){this._eventCursor+=this.isReverse?-1:1,this._eventCursor>=this.track.events.length?this._eventCursor=0:this._eventCursor<0&&(this._eventCursor=this.track.events.length-1)}clipFrameTime(e){const t=al.eventFrame;t.start=0,t.end=e,t.residual=0,this.isReverse?e<0&&(t.start=this.track.duration,t.end=0,t.residual=e+this.track.duration):e>this.track.duration&&(t.start=0,t.end=this.track.duration,t.residual=e-this.track.duration)}alignCursorToCurrentTime(){for(this.resetEventCursor();this.nextEventBehindTime(this._time)&&this._eventCursor!==this.eventCursorEnd;)this.moveEventCursor()}fireNextEvent(){this._eventHandler.fire(this.nextEvent.name,{track:this.track,...this.nextEvent}),this.moveEventCursor()}fireNextEventInFrame(e,t){return this.nextEventAheadOfTime(e)&&this.nextEventBehindTime(t)?(this.fireNextEvent(),!0):!1}activeEventsForFrame(e,t){const s=al.eventFrame;this.clipFrameTime(t);const i=this.eventCursor;for(;this.fireNextEventInFrame(e,s.end)&&i!==this.eventCursor;);this.loop&&Math.abs(s.residual)>0&&this.activeEventsForFrame(s.start,s.residual)}progressForTime(e){return e*this._speed/this._track.duration}_update(e){if(this._playing){let t=this._time;const s=this._track.duration,i=this._speed,r=this._loop;this._track.events.length>0&&s>0&&this.activeEventsForFrame(t,t+i*e),t+=i*e,i>=0?t>s&&(r?t=t%s||0:(t=this._track.duration,this.pause())):t<0&&(r?t=s+(t%s||0):(t=0,this.pause())),this._time=t}this._time!==this._snapshot._time&&this._track.eval(this._time,this._snapshot)}play(){this._playing=!0,this._time=0}stop(){this._playing=!1,this._time=0}pause(){this._playing=!1}resume(){this._playing=!0}reset(){this._time=0}};al.eventFrame={start:0,end:0,residual:0};let Vc=al;const Wx="NONE",VU="PREV_STATE",zU="NEXT_STATE",HU="PREV_STATE_NEXT_STATE",GU="NEXT_STATE_PREV_STATE",WU="GREATER_THAN",$U="LESS_THAN",XU="GREATER_THAN_EQUAL_TO",qU="LESS_THAN_EQUAL_TO",YU="EQUAL_TO",jU="NOT_EQUAL_TO",qS="INTEGER",YS="FLOAT",jS="BOOLEAN",ac="TRIGGER",KU="1D",ZU="2D_DIRECTIONAL",QU="2D_CARTESIAN",JU="DIRECT",zo="START",Ep="END",Or="ANY",zc=[zo,Ep,Or],$x="OVERWRITE",eB="ADDITIVE";class mt{static dot(e,t){const s=e.length;let i=0;for(let r=0;r<s;++r)i+=e[r]*t[r];return i}static normalize(e){let t=mt.dot(e,e);if(t>0){t=1/Math.sqrt(t);const s=e.length;for(let i=0;i<s;++i)e[i]*=t}}static set(e,t,s){const i=e.length;if(s==="quaternion"){let r=mt.dot(t,t);r>0&&(r=1/Math.sqrt(r));for(let a=0;a<i;++a)e[a]=t[a]*r}else for(let r=0;r<i;++r)e[r]=t[r]}static blendVec(e,t,s,i){const r=i?1:1-s,a=e.length;for(let n=0;n<a;++n)e[n]=e[n]*r+t[n]*s}static blendQuat(e,t,s,i){const r=e.length,a=i?1:1-s;mt.dot(e,t)<0&&(s=-s);for(let n=0;n<r;++n)e[n]=e[n]*a+t[n]*s;i||mt.normalize(e)}static blend(e,t,s,i,r){i==="quaternion"?mt.blendQuat(e,t,s,r):mt.blendVec(e,t,s,r)}static stableSort(e,t){const s=e.length;for(let i=0;i<s-1;++i)for(let r=i+1;r<s;++r)if(t(e[r],e[i])){const a=e[i];e[i]=e[r],e[r]=a}}}const Ue=class Ue{constructor(e,t){this._component=e,this.mask=new Int8Array(e.layers.length),this.weights=new Float32Array(e.layers.length),this.totalWeight=0,this.counter=0,this.layerCounter=0,this.valueType=t,this.dirty=!0,this.value=t===Ue.TYPE_QUAT?[0,0,0,1]:[0,0,0],this.baseValue=null,this.setter=null}get _normalizeWeights(){return this._component.normalizeWeights}getWeight(e){return this.dirty&&this.updateWeights(),this._normalizeWeights&&this.totalWeight===0||!this.mask[e]?0:this._normalizeWeights?this.weights[e]/this.totalWeight:B.clamp(this.weights[e],0,1)}_layerBlendType(e){return this._component.layers[e].blendType}setMask(e,t){this.mask[e]=t,this._normalizeWeights&&(this._component.layers[e].blendType===$x&&(this.mask=this.mask.fill(0,0,e)),this.dirty=!0)}updateWeights(){this.totalWeight=0;for(let e=0;e<this.weights.length;e++)this.weights[e]=this._component.layers[e].weight,this.totalWeight+=this.mask[e]*this.weights[e];this.dirty=!1}updateValue(e,t){if(this.counter===0&&(mt.set(this.value,Ue.IDENTITY_QUAT_ARR,this.valueType),this._normalizeWeights||mt.blend(this.value,this.baseValue,1,this.valueType)),!(!this.mask[e]||this.getWeight(e)===0)){if(this._layerBlendType(e)===eB&&!this._normalizeWeights)if(this.valueType===Ue.TYPE_QUAT){const s=Ue.q1.set(this.value[0],this.value[1],this.value[2],this.value[3]),i=Ue.q2.set(this.baseValue[0],this.baseValue[1],this.baseValue[2],this.baseValue[3]),r=Ue.q3.set(t[0],t[1],t[2],t[3]),a=i.invert().mul(r);a.slerp(Q.IDENTITY,a,this.getWeight(e)),s.mul(a),Ue.quatArr[0]=s.x,Ue.quatArr[1]=s.y,Ue.quatArr[2]=s.z,Ue.quatArr[3]=s.w,mt.set(this.value,Ue.quatArr,this.valueType)}else Ue.vecArr[0]=t[0]-this.baseValue[0],Ue.vecArr[1]=t[1]-this.baseValue[1],Ue.vecArr[2]=t[2]-this.baseValue[2],mt.blend(this.value,Ue.vecArr,this.getWeight(e),this.valueType,!0);else mt.blend(this.value,t,this.getWeight(e),this.valueType);this.setter&&this.setter(this.value)}}unbind(){this.setter&&this.setter(this.baseValue)}};Ue.TYPE_QUAT="quaternion",Ue.TYPE_VEC3="vector3",Ue.q1=new Q,Ue.q2=new Q,Ue.q3=new Q,Ue.quatArr=[0,0,0,1],Ue.vecArr=[0,0,0],Ue.IDENTITY_QUAT_ARR=[0,0,0,1];let Zo=Ue;class Xx{constructor(e){this._binder=e,this._clips=[],this._inputs=[],this._outputs=[],this._targets={}}get clips(){return this._clips}addClip(e){const t=this._targets,s=this._binder,i=e.track.curves,r=e.snapshot,a=[],n=[];for(let l=0;l<i.length;++l){const c=i[l].paths;for(let d=0;d<c.length;++d){const f=c[d],u=s.resolve(f);let p=t[u&&u.targetPath||null];if(!p&&u){p={target:u,value:[],curves:0,blendCounter:0};for(let m=0;m<p.target.components;++m)p.value.push(0);if(t[u.targetPath]=p,s.animComponent){if(!s.animComponent.targets[u.targetPath]){let m;u.targetPath.substring(u.targetPath.length-13)==="localRotation"?m=Zo.TYPE_QUAT:m=Zo.TYPE_VEC3,s.animComponent.targets[u.targetPath]=new Zo(s.animComponent,m)}s.animComponent.targets[u.targetPath].layerCounter++,s.animComponent.targets[u.targetPath].setMask(s.layerIndex,1)}}p&&(p.curves++,a.push(r._results[l]),n.push(p))}}this._clips.push(e),this._inputs.push(a),this._outputs.push(n)}removeClip(e){const t=this._targets,s=this._binder,i=this._clips,a=i[e].track.curves;for(let n=0;n<a.length;++n){const h=a[n].paths;for(let c=0;c<h.length;++c){const d=h[c],f=this._binder.resolve(d);f&&(f.curves--,f.curves===0&&(s.unresolve(d),delete t[f.targetPath],s.animComponent&&s.animComponent.targets[f.targetPath].layerCounter--))}}i.splice(e,1),this._inputs.splice(e,1),this._outputs.splice(e,1)}removeClips(){for(;this._clips.length>0;)this.removeClip(0)}updateClipTrack(e,t){this._clips.forEach(s=>{s.name.includes(e)&&(s.track=t)}),this.rebind()}findClip(e){const t=this._clips;for(let s=0;s<t.length;++s){const i=t[s];if(i.name===e)return i}return null}rebind(){this._binder.rebind(),this._targets={};const e=[...this.clips];this.removeClips(),e.forEach(t=>{this.addClip(t)})}assignMask(e){return this._binder.assignMask(e)}update(e,t=!0){const s=this._clips,i=s.map((n,l)=>l);mt.stableSort(i,(n,l)=>s[n].blendOrder<s[l].blendOrder);for(let n=0;n<i.length;++n){const l=i[n],h=s[l],c=this._inputs[l],d=this._outputs[l],f=h.blendWeight;if(f>0&&h._update(e),!t)break;let u,p,m;if(f>=1)for(let _=0;_<c.length;++_)u=c[_],p=d[_],m=p.value,mt.set(m,u,p.target.type),p.blendCounter++;else if(f>0)for(let _=0;_<c.length;++_)u=c[_],p=d[_],m=p.value,p.blendCounter===0?mt.set(m,u,p.target.type):mt.blend(m,u,f,p.target.type),p.blendCounter++}const r=this._targets,a=this._binder;for(const n in r)if(r.hasOwnProperty(n)){const l=r[n];if(a.animComponent&&l.target.isTransform){const h=a.animComponent.targets[n];h.counter===h.layerCounter&&(h.counter=0),h.path||(h.path=n,h.baseValue=l.target.get(),h.setter=l.target.set),h.updateValue(a.layerIndex,l.value),h.counter++}else l.target.set(l.value);l.blendCounter=0}this._binder.update(e)}}class qx{constructor(e){this._events=[...e],this._events.sort((t,s)=>t.time-s.time)}get events(){return this._events}}const hd=class hd{constructor(e,t,s,i,r,a=new qx([])){this._name=e,this._duration=t,this._inputs=s,this._outputs=i,this._curves=r,this._animEvents=a}get name(){return this._name}get duration(){return this._duration}get inputs(){return this._inputs}get outputs(){return this._outputs}get curves(){return this._curves}set events(e){this._animEvents=e}get events(){return this._animEvents.events}eval(e,t){t._time=e;const s=this._inputs,i=this._outputs,r=this._curves,a=t._cache,n=t._results;for(let l=0;l<s.length;++l)a[l].update(e,s[l]._data);for(let l=0;l<r.length;++l){const h=r[l],c=i[h._output],d=n[l];a[h._input].eval(d,h._interpolation,c)}}};hd.EMPTY=Object.freeze(new hd("empty",Number.MAX_VALUE,[],[],[]));let Di=hd;class vn{static joinPath(e,t){t=t||".";const s=function(i){return i.replace(/\\/g,"\\\\").replace(new RegExp(`\\${t}`,"g"),`\\${t}`)};return e.map(s).join(t)}static splitPath(e,t){t=t||".";const s=[];let i="",r=0;for(;r<e.length;){let a=e[r++];a==="\\"&&r<e.length?(a=e[r++],a==="\\"||a===t?i+=a:i+=`\\${a}`):a===t?(s.push(i),i=""):i+=a}return i.length>0&&s.push(i),s}static encode(e,t,s){return`${Array.isArray(e)?e.join("/"):e}/${t}/${Array.isArray(s)?s.join("/"):s}`}resolve(e){return null}unresolve(e){}update(e){}}class Ap{constructor(e,t,s,i){e.set?(this._set=e.set,this._get=e.get):this._set=e,this._type=t,this._components=s,this._targetPath=i,this._isTransform=this._targetPath.substring(this._targetPath.length-13)==="localRotation"||this._targetPath.substring(this._targetPath.length-13)==="localPosition"||this._targetPath.substring(this._targetPath.length-10)==="localScale"}get set(){return this._set}get get(){return this._get}get type(){return this._type}get components(){return this._components}get targetPath(){return this._targetPath}get isTransform(){return this._isTransform}}class tr{constructor(e){if(this._isPathInMask=(r,a)=>{const n=this._mask[r];if(n){if(n.children||a&&n.value!==!1)return!0}else return!1;return!1},this.graph=e,!e)return;this._mask=null;const t={},s=function(r){t[r.name]=r;for(let a=0;a<r.children.length;++a)s(r.children[a])};s(e),this.nodes=t,this.targetCache={};const i=function(r){let a=r;for(;a&&!(a instanceof Ve);)a=a.parent;let n;return a&&(a.render?n=a.render.meshInstances:a.model&&(n=a.model.meshInstances)),n};this.nodeCounts={},this.activeNodes=[],this.handlers={localPosition:function(r){const a=r.localPosition,n=function(l){a.set(...l)};return tr.createAnimTarget(n,"vector",3,r,"localPosition")},localRotation:function(r){const a=r.localRotation,n=function(l){a.set(...l)};return tr.createAnimTarget(n,"quaternion",4,r,"localRotation")},localScale:function(r){const a=r.localScale,n=function(l){a.set(...l)};return tr.createAnimTarget(n,"vector",3,r,"localScale")},weight:function(r,a){a.indexOf("name.")===0?a=a.replace("name.",""):a=Number(a);const n=i(r);let l;if(n){for(let h=0;h<n.length;++h)if(n[h].node.name===r.name&&n[h].morphInstance){const c=n[h].morphInstance,d=f=>{c.setWeight(a,f[0])};l||(l=[]),l.push(d)}}if(l){const h=c=>{for(let d=0;d<l.length;++d)l[d](c)};return tr.createAnimTarget(h,"number",1,r,`weight.${a}`)}return null},materialTexture:(r,a)=>{const n=i(r);if(n){let l;for(let h=0;h<n.length;++h)if(n[h].node.name===r.name){l=n[h];break}if(l){const h=c=>{const d=this.animComponent.system.app.assets.get(c[0]);d&&d.resource&&d.type==="texture"&&(l.material[a]=d.resource,l.material.update())};return tr.createAnimTarget(h,"vector",1,r,"materialTexture","material")}}return null}}}_isPathActive(e){if(!this._mask)return!0;const t=[e.entityPath[0],this.graph.name];for(let s=0;s<t.length;++s){let i=t[s];if(this._isPathInMask(i,e.entityPath.length===1))return!0;for(let r=1;r<e.entityPath.length;r++)if(i+=`/${e.entityPath[r]}`,this._isPathInMask(i,r===e.entityPath.length-1))return!0}return!1}findNode(e){if(!this._isPathActive(e))return null;let t;return this.graph&&(t=this.graph.findByPath(e.entityPath),t||(t=this.graph.findByPath(e.entityPath.slice(1)))),t||(t=this.nodes[e.entityPath[e.entityPath.length-1]||""]),t}static createAnimTarget(e,t,s,i,r,a){const n=vn.encode(i.path,a||"entity",r);return new Ap(e,t,s,n)}resolve(e){const t=vn.encode(e.entityPath,e.component,e.propertyPath);let s=this.targetCache[t];if(s)return s;const i=this.findNode(e);if(!i)return null;const r=this.handlers[e.propertyPath];return!r||(s=r(i),!s)?null:(this.targetCache[t]=s,this.nodeCounts[i.path]?this.nodeCounts[i.path]++:(this.activeNodes.push(i),this.nodeCounts[i.path]=1),s)}unresolve(e){if(e.component!=="graph")return;const t=this.nodes[e.entityPath[e.entityPath.length-1]||""];if(this.nodeCounts[t.path]--,this.nodeCounts[t.path]===0){const s=this.activeNodes,i=s.indexOf(t.node),r=s.length;i<r-1&&(s[i]=s[r-1]),s.pop()}}update(e){const t=this.activeNodes;for(let s=0;s<t.length;++s)t[s]._dirtifyLocal()}assignMask(e){return e!==this._mask?(this._mask=e,!0):!1}}class Yx extends he{set animations(e){this._animations=e,this.onSetAnimations()}get animations(){return this._animations}set assets(e){const t=this._assets;if(t&&t.length){for(let i=0;i<t.length;i++)if(t[i]){const r=this.system.app.assets.get(t[i]);if(r){r.off("change",this.onAssetChanged,this),r.off("remove",this.onAssetRemoved,this);const a=this.animationsIndex[r.id];this.currAnim===a&&this._stopCurrentAnimation(),delete this.animations[a],delete this.animationsIndex[r.id]}}}this._assets=e;const s=e.map(i=>i instanceof ie?i.id:i);this.loadAnimationAssets(s)}get assets(){return this._assets}set currentTime(e){if(this.skeleton&&(this.skeleton.currentTime=e,this.skeleton.addTime(0),this.skeleton.updateGraph()),this.animEvaluator){const t=this.animEvaluator.clips;for(let s=0;s<t.length;++s)t[s].time=e}}get currentTime(){if(this.skeleton)return this.skeleton._time;if(this.animEvaluator){const e=this.animEvaluator.clips;if(e.length>0)return e[e.length-1].time}return 0}get duration(){return this.currAnim?this.animations[this.currAnim].duration:0}set loop(e){if(this._loop=e,this.skeleton&&(this.skeleton.looping=e),this.animEvaluator)for(let t=0;t<this.animEvaluator.clips.length;++t)this.animEvaluator.clips[t].loop=e}get loop(){return this._loop}play(e,t=0){if(!(!this.enabled||!this.entity.enabled)&&this.animations[e]){if(this.prevAnim=this.currAnim,this.currAnim=e,this.model){!this.skeleton&&!this.animEvaluator&&this._createAnimationController();const s=this.animations[this.prevAnim],i=this.animations[this.currAnim];if(this.blending=t>0&&!!this.prevAnim,this.blending&&(this.blend=0,this.blendSpeed=1/t),this.skeleton&&(this.blending?(this.fromSkel.animation=s,this.fromSkel.addTime(this.skeleton._time),this.toSkel.animation=i):this.skeleton.animation=i),this.animEvaluator){const r=this.animEvaluator;if(this.blending)for(;r.clips.length>1;)r.removeClip(0);else this.animEvaluator.removeClips();const a=new Vc(this.animations[this.currAnim],0,1,!0,this.loop);a.name=this.currAnim,a.blendWeight=this.blending?0:1,a.reset(),this.animEvaluator.addClip(a)}}this.playing=!0}}getAnimation(e){return this.animations[e]}setModel(e){e!==this.model&&(this._resetAnimationController(),this.model=e,this.animations&&this.currAnim&&this.animations[this.currAnim]&&this.play(this.currAnim))}onSetAnimations(){const e=this.entity.model;if(e){const t=e.model;t&&t!==this.model&&this.setModel(t)}if(!this.currAnim&&this.activate&&this.enabled&&this.entity.enabled){const t=Object.keys(this._animations);t.length>0&&this.play(t[0])}}_resetAnimationController(){this.skeleton=null,this.fromSkel=null,this.toSkel=null,this.animEvaluator=null}_createAnimationController(){const e=this.model,t=this.animations;let s=!1,i=!1;for(const a in t)t.hasOwnProperty(a)&&(t[a].constructor===Di?i=!0:s=!0);const r=e.getGraph();s?(this.fromSkel=new pu(r),this.toSkel=new pu(r),this.skeleton=new pu(r),this.skeleton.looping=this.loop,this.skeleton.setGraph(r)):i&&(this.animEvaluator=new Xx(new tr(this.entity)))}loadAnimationAssets(e){if(!e||!e.length)return;const t=this.system.app.assets,s=r=>{if(r.resources.length>1)for(let a=0;a<r.resources.length;a++)this.animations[r.resources[a].name]=r.resources[a],this.animationsIndex[r.id]=r.resources[a].name;else this.animations[r.name]=r.resource,this.animationsIndex[r.id]=r.name;this.animations=this.animations},i=r=>{r.off("change",this.onAssetChanged,this),r.on("change",this.onAssetChanged,this),r.off("remove",this.onAssetRemoved,this),r.on("remove",this.onAssetRemoved,this),r.resource?s(r):(r.once("load",s,this),this.enabled&&this.entity.enabled&&t.load(r))};for(let r=0,a=e.length;r<a;r++){const n=t.get(e[r]);n?i(n):t.on(`add:${e[r]}`,i)}}onAssetChanged(e,t,s,i){if(t==="resource"||t==="resources")if(t==="resources"&&s&&s.length===0&&(s=null),s){let r=!1;if(s.length>1){if(i&&i.length>1)for(let a=0;a<i.length;a++)delete this.animations[i[a].name];else delete this.animations[e.name];r=!1;for(let a=0;a<s.length;a++)this.animations[s[a].name]=s[a],!r&&this.currAnim===s[a].name&&this.playing&&this.enabled&&this.entity.enabled&&(r=!0,this.play(s[a].name));r||(this._stopCurrentAnimation(),this.onSetAnimations())}else{if(i&&i.length>1)for(let a=0;a<i.length;a++)delete this.animations[i[a].name];this.animations[e.name]=s[0]||s,r=!1,this.currAnim===e.name&&this.playing&&this.enabled&&this.entity.enabled&&(r=!0,this.play(e.name)),r||(this._stopCurrentAnimation(),this.onSetAnimations())}this.animationsIndex[e.id]=e.name}else{if(i.length>1)for(let r=0;r<i.length;r++)delete this.animations[i[r].name],this.currAnim===i[r].name&&this._stopCurrentAnimation();else delete this.animations[e.name],this.currAnim===e.name&&this._stopCurrentAnimation();delete this.animationsIndex[e.id]}}onAssetRemoved(e){if(e.off("remove",this.onAssetRemoved,this),this.animations){if(e.resources.length>1)for(let t=0;t<e.resources.length;t++)delete this.animations[e.resources[t].name],this.currAnim===e.resources[t].name&&this._stopCurrentAnimation();else delete this.animations[e.name],this.currAnim===e.name&&this._stopCurrentAnimation();delete this.animationsIndex[e.id]}}_stopCurrentAnimation(){if(this.currAnim=null,this.playing=!1,this.skeleton&&(this.skeleton.currentTime=0,this.skeleton.animation=null),this.animEvaluator){for(let e=0;e<this.animEvaluator.clips.length;++e)this.animEvaluator.clips[e].stop();this.animEvaluator.update(0),this.animEvaluator.removeClips()}}onEnable(){super.onEnable();const e=this.assets,t=this.system.app.assets;if(e)for(let s=0,i=e.length;s<i;s++){let r=e[s];r instanceof ie||(r=t.get(r)),r&&!r.resource&&t.load(r)}if(this.activate&&!this.currAnim){const s=Object.keys(this.animations);s.length>0&&this.play(s[0])}}onBeforeRemove(){for(let e=0;e<this.assets.length;e++){let t=this.assets[e];typeof t=="number"&&(t=this.system.app.assets.get(t)),t&&(t.off("change",this.onAssetChanged,this),t.off("remove",this.onAssetRemoved,this))}this.skeleton=null,this.fromSkel=null,this.toSkel=null,this.animEvaluator=null}update(e){if(this.blending&&(this.blend+=e*this.blendSpeed,this.blend>=1&&(this.blend=1)),this.playing){const s=this.skeleton;if(s!==null&&this.model!==null){if(this.blending)s.blend(this.fromSkel,this.toSkel,this.blend);else{const i=e*this.speed;s.addTime(i),this.speed>0&&s._time===s.animation.duration&&!this.loop?this.playing=!1:this.speed<0&&s._time===0&&!this.loop&&(this.playing=!1)}this.blending&&this.blend===1&&(s.animation=this.toSkel.animation),s.updateGraph()}}const t=this.animEvaluator;if(t){for(let s=0;s<t.clips.length;++s){const i=t.clips[s];i.speed=this.speed,this.playing?i.resume():i.pause()}this.blending&&t.clips.length>1&&(t.clips[1].blendWeight=this.blend),t.update(e)}this.blending&&this.blend===1&&(this.blending=!1)}constructor(...e){super(...e),this._animations={},this._assets=[],this._loop=!0,this.animEvaluator=null,this.model=null,this.skeleton=null,this.fromSkel=null,this.toSkel=null,this.animationsIndex={},this.prevAnim=null,this.currAnim=null,this.blend=0,this.blending=!1,this.blendSpeed=0,this.activate=!0,this.speed=1}}class tB{constructor(){this.enabled=!0}}const bp=["enabled"];class sB extends qe{constructor(e){super(e),this.id="animation",this.ComponentType=Yx,this.DataType=tB,this.schema=bp,this.on("beforeremove",this.onBeforeRemove,this),this.app.systems.on("update",this.onUpdate,this)}initializeComponentData(e,t,s){s=["activate","enabled","loop","speed","assets"];for(const i of s)t.hasOwnProperty(i)&&(e[i]=t[i]);super.initializeComponentData(e,t,bp)}cloneComponent(e,t){this.addComponent(t,{}),t.animation.assets=e.animation.assets.slice(),t.animation.speed=e.animation.speed,t.animation.loop=e.animation.loop,t.animation.activate=e.animation.activate,t.animation.enabled=e.animation.enabled;const s={},i=e.animation.animations;for(const n in i)i.hasOwnProperty(n)&&(s[n]=i[n]);t.animation.animations=s;const r={},a=e.animation.animationsIndex;for(const n in a)a.hasOwnProperty(n)&&(r[n]=a[n]);return t.animation.animationsIndex=r,t.animation}onBeforeRemove(e,t){t.onBeforeRemove()}onUpdate(e){const t=this.store;for(const s in t)if(t.hasOwnProperty(s)){const i=t[s];i.data.enabled&&i.entity.enabled&&i.entity.animation.update(e)}}destroy(){super.destroy(),this.app.systems.off("update",this.onUpdate,this)}}he._buildAccessors(Yx.prototype,bp);class Tl{constructor(e,t,s,i,r=1){this._state=e,this._parent=t,this._name=s,Array.isArray(i)?(this._point=new z(i[0],i[1]),this._pointLength=this._point.length()):(this._point=i,this._pointLength=i),this._speed=r,this._weightedSpeed=1,this._weight=1,this._animTrack=null}get parent(){return this._parent}get name(){return this._name}get path(){return this._parent?`${this._parent.path}.${this._name}`:this._name}get point(){return this._point}get pointLength(){return this._pointLength}set weight(e){this._weight=e}get weight(){return this._parent?this._parent.weight*this._weight:this._weight}get normalizedWeight(){const e=this._state.totalWeight;return e===0?0:this.weight/e}get speed(){return this._weightedSpeed*this._speed}get absoluteSpeed(){return Math.abs(this._speed)}set weightedSpeed(e){this._weightedSpeed=e}get weightedSpeed(){return this._weightedSpeed}set animTrack(e){this._animTrack=e}get animTrack(){return this._animTrack}}class mo extends Tl{constructor(e,t,s,i,r,a,n,l,h){super(e,t,s,i),this._parameters=r,this._parameterValues=new Array(r.length),this._children=[],this._findParameter=h,this._syncAnimations=n!==!1,this._pointCache={};for(let c=0;c<a.length;c++){const d=a[c];d.children?this._children.push(l(d.type,e,this,d.name,1,d.parameter?[d.parameter]:d.parameters,d.children,d.syncAnimations,l,h)):this._children.push(new Tl(e,this,d.name,d.point,d.speed))}}get weight(){return this.calculateWeights(),this._parent?this._parent.weight*this._weight:this._weight}get syncAnimations(){return this._syncAnimations}getChild(e){for(let t=0;t<this._children.length;t++)if(this._children[t].name===e)return this._children[t];return null}updateParameterValues(){let e=!0;for(let t=0;t<this._parameterValues.length;t++){const s=this._findParameter(this._parameters[t]).value;this._parameterValues[t]!==s&&(this._parameterValues[t]=s,e=!1)}return e}getNodeWeightedDuration(e){return this._children[e].animTrack.duration/this._children[e].speedMultiplier*this._children[e].weight}getNodeCount(){let e=0;for(let t=0;t<this._children.length;t++)this._children[t].constructor===mo?e+=this._children[t].getNodeCount():e++;return e}}class iB extends mo{constructor(e,t,s,i,r,a,n,l,h){a.sort((c,d)=>c.point-d.point),super(e,t,s,i,r,a,n,l,h)}calculateWeights(){if(this.updateParameterValues())return;let e=0;this._children[0].weight=0;for(let t=0;t<this._children.length;t++){const s=this._children[t];if(t!==this._children.length-1){const i=this._children[t+1];if(s.point===i.point)s.weight=.5,i.weight=.5;else if(B.between(this._parameterValues[0],s.point,i.point,!0)){const r=Math.abs(s.point-i.point),a=Math.abs(s.point-this._parameterValues[0]),n=(r-a)/r;s.weight=n,i.weight=1-n}else i.weight=0}this._syncAnimations&&(e+=s.animTrack.duration/s.absoluteSpeed*s.weight)}if(this._syncAnimations)for(let t=0;t<this._children.length;t++){const s=this._children[t];s.weightedSpeed=s.animTrack.duration/s.absoluteSpeed/e}}}const vi=class vi extends mo{pointDistanceCache(e,t){const s=`${e}${t}`;return this._pointCache[s]||(this._pointCache[s]=this._children[t].point.clone().sub(this._children[e].point)),this._pointCache[s]}calculateWeights(){if(this.updateParameterValues())return;let e,t;vi._p.set(...this._parameterValues),e=0,t=0;for(let s=0;s<this._children.length;s++){const i=this._children[s],r=i.point;vi._pip.set(vi._p.x,vi._p.y).sub(r);let a=Number.MAX_VALUE;for(let n=0;n<this._children.length;n++){if(s===n)continue;const l=this.pointDistanceCache(s,n),h=B.clamp(1-vi._pip.dot(l)/l.lengthSq(),0,1);h<a&&(a=h)}i.weight=a,e+=a,this._syncAnimations&&(t+=i.animTrack.duration/i.absoluteSpeed*i.weight)}for(let s=0;s<this._children.length;s++){const i=this._children[s];i.weight=i._weight/e,this._syncAnimations&&(i.weightedSpeed=i.animTrack.duration/i.absoluteSpeed/t)}}};vi._p=new z,vi._pip=new z;let wp=vi;const Si=class Si extends mo{pointCache(e,t){const s=`${e}${t}`;return this._pointCache[s]||(this._pointCache[s]=new z((this._children[t].pointLength-this._children[e].pointLength)/((this._children[t].pointLength+this._children[e].pointLength)/2),z.angleRad(this._children[e].point,this._children[t].point)*2)),this._pointCache[s]}calculateWeights(){if(this.updateParameterValues())return;let e,t;Si._p.set(...this._parameterValues);const s=Si._p.length();e=0,t=0;for(let i=0;i<this._children.length;i++){const r=this._children[i],a=r.point,n=r.pointLength;let l=Number.MAX_VALUE;for(let h=0;h<this._children.length;h++){if(i===h)continue;const c=this.pointCache(i,h),d=this._children[h].pointLength;Si._pip.set((s-n)/((d+n)/2),z.angleRad(a,Si._p)*2);const f=B.clamp(1-Math.abs(Si._pip.dot(c)/c.lengthSq()),0,1);f<l&&(l=f)}r.weight=l,e+=l,this._syncAnimations&&(t+=r.animTrack.duration/r.absoluteSpeed*r.weight)}for(let i=0;i<this._children.length;i++){const r=this._children[i];if(r.weight=r._weight/e,this._syncAnimations){const a=r.animTrack.duration/t*e;r.weightedSpeed=r.absoluteSpeed*a}}}};Si._p=new z,Si._pip=new z;let Cp=Si;class rB extends mo{calculateWeights(){if(this.updateParameterValues())return;let e=0,t=0;for(let s=0;s<this._children.length;s++)if(e+=Math.max(this._parameterValues[s],0),this._syncAnimations){const i=this._children[s];t+=i.animTrack.duration/i.absoluteSpeed*i.weight}for(let s=0;s<this._children.length;s++){const i=this._children[s],r=Math.max(this._parameterValues[s],0);e?(i.weight=r/e,this._syncAnimations&&(i.weightedSpeed=i.animTrack.duration/i.absoluteSpeed/t)):(i.weight=0,this._syncAnimations&&(i.weightedSpeed=0))}}}class KS{constructor(e,t,s=1,i=!0,r){this._animations={},this._animationList=[],this._controller=e,this._name=t,this._speed=s,this._loop=i,this._hasAnimations=!1,r?this._blendTree=this._createTree(r.type,this,null,t,1,r.parameter?[r.parameter]:r.parameters,r.children,r.syncAnimations,this._createTree,this._controller.findParameter):this._blendTree=new Tl(this,null,t,1,s)}_createTree(e,t,s,i,r,a,n,l,h,c){switch(e){case KU:return new iB(t,s,i,r,a,n,l,h,c);case QU:return new wp(t,s,i,r,a,n,l,h,c);case ZU:return new Cp(t,s,i,r,a,n,l,h,c);case JU:return new rB(t,s,i,r,a,n,l,h,c)}}_getNodeFromPath(e){let t=this._blendTree;for(let s=1;s<e.length;s++)t=t.getChild(e[s]);return t}addAnimation(e,t){const s=e.join("."),i=this._animationList.findIndex(r=>r.path===s);if(i>=0)this._animationList[i].animTrack=t;else{const r=this._getNodeFromPath(e);r.animTrack=t,this._animationList.push(r)}this._updateHasAnimations()}_updateHasAnimations(){this._hasAnimations=this._animationList.length>0&&this._animationList.every(e=>e.animTrack&&e.animTrack!==Di.EMPTY)}get name(){return this._name}set animations(e){this._animationList=e,this._updateHasAnimations()}get animations(){return this._animationList}get hasAnimations(){return this._hasAnimations}set speed(e){this._speed=e}get speed(){return this._speed}set loop(e){this._loop=e}get loop(){return this._loop}get nodeCount(){return!this._blendTree||this._blendTree.constructor===Tl?1:this._blendTree.getNodeCount()}get playable(){return zc.indexOf(this.name)!==-1||this.animations.length===this.nodeCount}get looping(){if(this.animations.length>0){const e=`${this.name}.${this.animations[0].animTrack.name}`,t=this._controller.animEvaluator.findClip(e);if(t)return t.loop}return!1}get totalWeight(){let e=0;for(let t=0;t<this.animations.length;t++)e+=this.animations[t].weight;return e}get timelineDuration(){let e=0;for(let t=0;t<this.animations.length;t++){const s=this.animations[t];s.animTrack.duration>e&&(e=s.animTrack.duration)}return e}}class Hc{constructor({from:e,to:t,time:s=0,priority:i=0,conditions:r=[],exitTime:a=null,transitionOffset:n=null,interruptionSource:l=Wx}){this._from=e,this._to=t,this._time=s,this._priority=i,this._conditions=r,this._exitTime=a,this._transitionOffset=n,this._interruptionSource=l}get from(){return this._from}set to(e){this._to=e}get to(){return this._to}get time(){return this._time}get priority(){return this._priority}get conditions(){return this._conditions}get exitTime(){return this._exitTime}get transitionOffset(){return this._transitionOffset}get interruptionSource(){return this._interruptionSource}get hasExitTime(){return!!this.exitTime}}class aB{constructor(e,t,s,i,r,a,n){this._states={},this._stateNames=[],this._findTransitionsFromStateCache={},this._findTransitionsBetweenStatesCache={},this._previousStateName=null,this._activeStateName=zo,this._activeStateDuration=0,this._activeStateDurationDirty=!0,this._playing=!1,this._currTransitionTime=1,this._totalTransitionTime=1,this._isTransitioning=!1,this._transitionInterruptionSource=Wx,this._transitionPreviousStates=[],this._timeInState=0,this._timeInStateBefore=0,this.findParameter=l=>this._findParameter(l),this._animEvaluator=e,this._eventHandler=r,this._findParameter=a,this._consumeTrigger=n;for(let l=0;l<t.length;l++)this._states[t[l].name]=new KS(this,t[l].name,t[l].speed,t[l].loop,t[l].blendTree),this._stateNames.push(t[l].name);this._transitions=s.map(l=>new Hc({...l})),this._activate=i}get animEvaluator(){return this._animEvaluator}set activeState(e){this._activeStateName=e}get activeState(){return this._findState(this._activeStateName)}get activeStateName(){return this._activeStateName}get activeStateAnimations(){return this.activeState.animations}set previousState(e){this._previousStateName=e}get previousState(){return this._findState(this._previousStateName)}get previousStateName(){return this._previousStateName}get playable(){let e=!0;for(let t=0;t<this._stateNames.length;t++)this._states[this._stateNames[t]].playable||(e=!1);return e}set playing(e){this._playing=e}get playing(){return this._playing}get activeStateProgress(){return this._getActiveStateProgressForTime(this._timeInState)}get activeStateDuration(){if(this._activeStateDurationDirty){let e=0;for(let t=0;t<this.activeStateAnimations.length;t++){const s=this._animEvaluator.findClip(this.activeStateAnimations[t].name);s&&(e=Math.max(e,s.track.duration))}this._activeStateDuration=e,this._activeStateDurationDirty=!1}return this._activeStateDuration}set activeStateCurrentTime(e){this._timeInStateBefore=e,this._timeInState=e;for(let t=0;t<this.activeStateAnimations.length;t++){const s=this.animEvaluator.findClip(this.activeStateAnimations[t].name);s&&(s.time=e)}}get activeStateCurrentTime(){return this._timeInState}get transitioning(){return this._isTransitioning}get transitionProgress(){return this._currTransitionTime/this._totalTransitionTime}get states(){return this._stateNames}assignMask(e){return this._animEvaluator.assignMask(e)}_findState(e){return this._states[e]}_getActiveStateProgressForTime(e){if(this.activeStateName===zo||this.activeStateName===Ep||this.activeStateName===Or)return 1;const t=this._animEvaluator.findClip(this.activeStateAnimations[0].name);return t?t.progressForTime(e):null}_findTransitionsFromState(e){let t=this._findTransitionsFromStateCache[e];return t||(t=this._transitions.filter(s=>s.from===e),vl(t),this._findTransitionsFromStateCache[e]=t),t}_findTransitionsBetweenStates(e,t){let s=this._findTransitionsBetweenStatesCache[`${e}->${t}`];return s||(s=this._transitions.filter(i=>i.from===e&&i.to===t),vl(s),this._findTransitionsBetweenStatesCache[`${e}->${t}`]=s),s}_transitionHasConditionsMet(e){const t=e.conditions;for(let s=0;s<t.length;s++){const i=t[s],r=this._findParameter(i.parameterName);switch(i.predicate){case WU:if(!(r.value>i.value))return!1;break;case $U:if(!(r.value<i.value))return!1;break;case XU:if(!(r.value>=i.value))return!1;break;case qU:if(!(r.value<=i.value))return!1;break;case YU:if(r.value!==i.value)return!1;break;case jU:if(r.value===i.value)return!1;break}}return!0}_findTransition(e,t){let s=[];if(e&&t)s=s.concat(this._findTransitionsBetweenStates(e,t));else if(!this._isTransitioning)s=s.concat(this._findTransitionsFromState(this._activeStateName)),s=s.concat(this._findTransitionsFromState(Or));else switch(this._transitionInterruptionSource){case VU:s=s.concat(this._findTransitionsFromState(this._previousStateName)),s=s.concat(this._findTransitionsFromState(Or));break;case zU:s=s.concat(this._findTransitionsFromState(this._activeStateName)),s=s.concat(this._findTransitionsFromState(Or));break;case HU:s=s.concat(this._findTransitionsFromState(this._previousStateName)),s=s.concat(this._findTransitionsFromState(this._activeStateName)),s=s.concat(this._findTransitionsFromState(Or));break;case GU:s=s.concat(this._findTransitionsFromState(this._activeStateName)),s=s.concat(this._findTransitionsFromState(this._previousStateName)),s=s.concat(this._findTransitionsFromState(Or));break}if(s=s.filter(i=>{if(i.to===this.activeStateName)return!1;if(i.hasExitTime){let r=this._getActiveStateProgressForTime(this._timeInStateBefore),a=this._getActiveStateProgressForTime(this._timeInState);if(i.exitTime<1&&this.activeState.loop&&(r-=Math.floor(r),a-=Math.floor(a)),a===r){if(a!==i.exitTime)return null}else if(!(i.exitTime>r&&i.exitTime<=a))return null}return this._transitionHasConditionsMet(i)}),s.length>0){const i=s[0];if(i.to===Ep){const r=this._findTransitionsFromState(zo)[0];i.to=r.to}return i}return null}updateStateFromTransition(e){let t,s,i;this.previousState=e.from?this.activeStateName:null,this.activeState=e.to,this._activeStateDurationDirty=!0;for(let h=0;h<e.conditions.length;h++){const c=e.conditions[h];this._findParameter(c.parameterName).type===ac&&this._consumeTrigger(c.parameterName)}if(this.previousState){this._isTransitioning||(this._transitionPreviousStates=[]),this._transitionPreviousStates.push({name:this._previousStateName,weight:1});const h=Math.min(this._totalTransitionTime!==0?this._currTransitionTime/this._totalTransitionTime:1,1);for(let c=0;c<this._transitionPreviousStates.length;c++){this._isTransitioning?c!==this._transitionPreviousStates.length-1?this._transitionPreviousStates[c].weight*=1-h:this._transitionPreviousStates[c].weight=h:this._transitionPreviousStates[c].weight=1,t=this._findState(this._transitionPreviousStates[c].name);for(let d=0;d<t.animations.length;d++)s=t.animations[d],i=this._animEvaluator.findClip(`${s.name}.previous.${c}`),i||(i=this._animEvaluator.findClip(s.name),i.name=`${s.name}.previous.${c}`),c!==this._transitionPreviousStates.length-1&&i.pause()}}this._isTransitioning=!0,this._totalTransitionTime=e.time,this._currTransitionTime=0,this._transitionInterruptionSource=e.interruptionSource;const r=this.activeState,a=e.transitionOffset&&e.transitionOffset>0&&e.transitionOffset<1;let n=0,l=0;if(a){const h=r.timelineDuration*e.transitionOffset;n=h,l=h}this._timeInState=n,this._timeInStateBefore=l;for(let h=0;h<r.animations.length;h++){if(i=this._animEvaluator.findClip(r.animations[h].name),i)i.reset();else{const c=Number.isFinite(r.animations[h].speed)?r.animations[h].speed:r.speed;i=new Vc(r.animations[h].animTrack,this._timeInState,c,!0,r.loop,this._eventHandler),i.name=r.animations[h].name,this._animEvaluator.addClip(i)}if(e.time>0?i.blendWeight=0:i.blendWeight=r.animations[h].normalizedWeight,i.play(),a)i.time=r.timelineDuration*e.transitionOffset;else{const c=r.speed>=0?0:this.activeStateDuration;i.time=c}}}_transitionToState(e){if(!this._findState(e))return;let t=this._findTransition(this._activeStateName,e);t||(this._animEvaluator.removeClips(),t=new Hc({from:null,to:e})),this.updateStateFromTransition(t)}assignAnimation(e,t,s,i){const r=e.split(".");let a=this._findState(r[0]);a||(a=new KS(this,r[0],s),this._states[r[0]]=a,this._stateNames.push(r[0])),a.addAnimation(r,t),this._animEvaluator.updateClipTrack(a.name,t),s!==void 0&&(a.speed=s),i!==void 0&&(a.loop=i),!this._playing&&this._activate&&this.playable&&this.play(),this._activeStateDurationDirty=!0}removeNodeAnimations(e){if(zc.indexOf(e)!==-1)return!1;const t=this._findState(e);return t?(t.animations=[],!0):!1}play(e){e&&this._transitionToState(e),this._playing=!0}pause(){this._playing=!1}reset(){this._previousStateName=null,this._activeStateName=zo,this._playing=!1,this._currTransitionTime=1,this._totalTransitionTime=1,this._isTransitioning=!1,this._timeInState=0,this._timeInStateBefore=0,this._animEvaluator.removeClips()}rebind(){this._animEvaluator.rebind()}update(e){if(!this._playing)return;let t,s,i;(this.activeState.loop||this._timeInState<this.activeStateDuration)&&(this._timeInStateBefore=this._timeInState,this._timeInState+=e*this.activeState.speed,!this.activeState.loop&&this._timeInState>this.activeStateDuration&&(this._timeInState=this.activeStateDuration,e=this.activeStateDuration-this._timeInStateBefore));const r=this._findTransition(this._activeStateName);if(r&&this.updateStateFromTransition(r),this._isTransitioning)if(this._currTransitionTime+=e,this._currTransitionTime<=this._totalTransitionTime){const a=this._totalTransitionTime!==0?this._currTransitionTime/this._totalTransitionTime:1;for(let n=0;n<this._transitionPreviousStates.length;n++){t=this._findState(this._transitionPreviousStates[n].name);const l=this._transitionPreviousStates[n].weight;for(let h=0;h<t.animations.length;h++)s=t.animations[h],i=this._animEvaluator.findClip(`${s.name}.previous.${n}`),i&&(i.blendWeight=(1-a)*s.normalizedWeight*l)}t=this.activeState;for(let n=0;n<t.animations.length;n++)s=t.animations[n],this._animEvaluator.findClip(s.name).blendWeight=a*s.normalizedWeight}else{this._isTransitioning=!1;const a=this.activeStateAnimations.length,n=this._animEvaluator.clips.length;for(let l=0;l<n-a;l++)this._animEvaluator.removeClip(0);this._transitionPreviousStates=[],t=this.activeState;for(let l=0;l<t.animations.length;l++)s=t.animations[l],i=this._animEvaluator.findClip(s.name),i&&(i.blendWeight=s.normalizedWeight)}else if(this.activeState._blendTree.constructor!==Tl){t=this.activeState;for(let a=0;a<t.animations.length;a++)s=t.animations[a],i=this._animEvaluator.findClip(s.name),i&&(i.blendWeight=s.normalizedWeight,s.parent.syncAnimations&&(i.speed=s.speed))}this._animEvaluator.update(e,this.activeState.hasAnimations)}}const Tu=new z,Nh=new x,Oo=new K,No=new q,Fo=new Q;class gi extends tr{constructor(e,t,s,i,r){super(t),this.animComponent=e,this._mask=i,this.layerName=s,this.layerIndex=r}static _packFloat(e){return e[0]}static _packBoolean(e){return!!e[0]}static _packVec2(e){return Tu.x=e[0],Tu.y=e[1],Tu}static _packVec3(e){return Nh.x=e[0],Nh.y=e[1],Nh.z=e[2],Nh}static _packVec4(e){return Oo.x=e[0],Oo.y=e[1],Oo.z=e[2],Oo.w=e[3],Oo}static _packColor(e){return No.r=e[0],No.g=e[1],No.b=e[2],No.a=e[3],No}static _packQuat(e){return Fo.x=e[0],Fo.y=e[1],Fo.z=e[2],Fo.w=e[3],Fo}resolve(e){const t=vn.encode(e.entityPath,e.component,e.propertyPath);let s=this.targetCache[t];if(s)return s;let i,r,a;switch(e.component){case"entity":i=this._getEntityFromHierarchy(e.entityPath),a=vn.encode(i.path,"entity",e.propertyPath),r=i;break;case"graph":if(r=this.findNode(e),!r)return null;a=vn.encode(r.path,"graph",e.propertyPath);break;default:if(i=this._getEntityFromHierarchy(e.entityPath),r=i.findComponent(e.component),!r)return null;a=vn.encode(i.path,e.component,e.propertyPath);break}return s=this._createAnimTargetForProperty(r,e.propertyPath,a),this.targetCache[t]=s,s}update(e){const t=this.activeNodes;if(t)for(let s=0;s<t.length;s++)t[s]._dirtifyLocal()}_getEntityFromHierarchy(e){if(!this.animComponent.entity.name===e[0])return null;const t=this.animComponent.entity;return e.length===1?t:t._parent.findByPath(e)}_resolvePath(e,t,s){const i=t.length-(s?0:1);for(let r=0;r<i;r++)e=e[t[r]];return e}_setter(e,t,s){const i=this._resolvePath(e,t),r=t[t.length-1],a=`set${r.substring(0,1).toUpperCase()}${r.substring(1)}`;if(i[a]){let h=i[`get${r.substring(0,1).toUpperCase()}${r.substring(1)}`].bind(i)();h=[h.x,h.y,h.z,h.w];const c=i[a].bind(i);return{set:d=>{c(s(d))},get:()=>h}}const n=i[r];if(typeof n=="object"&&n.hasOwnProperty("copy"))return function(l){n.copy(s(l))};if([z,x,K,q,Q].indexOf(i.constructor)!==-1&&t.length>1){const l=t.length>2?this._resolvePath(e,t.slice(0,-1)):e,h=t[t.length-2];return function(c){i[r]=s(c),l[h]=i}}return function(l){i[r]=s(l)}}_createAnimTargetForProperty(e,t,s){if(this.handlers&&t[0].startsWith("weight."))return this.handlers.weight(e,t[0].replace("weight.",""));if(this.handlers&&t[0]==="material"&&t.length===2){const l=t[1];if(l.endsWith("Map"))return this.handlers.materialTexture(e,l)}const i=this._resolvePath(e,t,!0);if(typeof i>"u")return null;let r,a,n;if(typeof i=="number")r=this._setter(e,t,gi._packFloat),a="vector",n=1;else if(typeof i=="boolean")r=this._setter(e,t,gi._packBoolean),a="vector",n=1;else if(typeof i=="object")switch(i.constructor){case z:r=this._setter(e,t,gi._packVec2),a="vector",n=2;break;case x:r=this._setter(e,t,gi._packVec3),a="vector",n=3;break;case K:r=this._setter(e,t,gi._packVec4),a="vector",n=4;break;case q:r=this._setter(e,t,gi._packColor),a="vector",n=4;break;case Q:r=this._setter(e,t,gi._packQuat),a="quaternion",n=4;break;default:return null}return t.indexOf("material")!==-1?new Ap(l=>{r(l),e.material.update()},a,n,s):new Ap(r,a,n,s)}rebind(){this.targetCache={},this.animComponent.rootBone?this.graph=this.animComponent.rootBone:this.graph=this.animComponent.entity;const e={},t=function(s){e[s.name]=s;for(let i=0;i<s.children.length;++i)t(s.children[i])};t(this.graph),this.nodes=e}}class nB{constructor(e,t,s,i=1,r=$x){this._mask=null,this._blendTime=0,this._blendTimeElapsed=0,this._startingWeight=0,this._targetWeight=0,this._name=e,this._controller=t,this._component=s,this._weight=i,this._blendType=r}get name(){return this._name}set playing(e){this._controller.playing=e}get playing(){return this._controller.playing}get playable(){return this._controller.playable}get activeState(){return this._controller.activeStateName}get previousState(){return this._controller.previousStateName}get activeStateProgress(){return this._controller.activeStateProgress}get activeStateDuration(){return this._controller.activeStateDuration}set activeStateCurrentTime(e){const t=this._controller,s=t.playing;t.playing=!0,t.activeStateCurrentTime=e,s||t.update(0),t.playing=s}get activeStateCurrentTime(){return this._controller.activeStateCurrentTime}get transitioning(){return this._controller.transitioning}get transitionProgress(){return this.transitioning?this._controller.transitionProgress:null}get states(){return this._controller.states}set weight(e){this._weight=e,this._component.dirtifyTargets()}get weight(){return this._weight}set blendType(e){e!==this._blendType&&(this._blendType=e,this._controller.normalizeWeights&&this._component.rebind())}get blendType(){return this._blendType}set mask(e){this._controller.assignMask(e)&&this._component.rebind(),this._mask=e}get mask(){return this._mask}play(e){this._controller.play(e)}pause(){this._controller.pause()}reset(){this._controller.reset()}rebind(){this._controller.rebind()}update(e){this._blendTime&&(this._blendTimeElapsed<this._blendTime?(this.weight=B.lerp(this._startingWeight,this._targetWeight,this._blendTimeElapsed/this._blendTime),this._blendTimeElapsed+=e):(this.weight=this._targetWeight,this._blendTime=0,this._blendTimeElapsed=0,this._startingWeight=0,this._targetWeight=0)),this._controller.update(e)}blendToWeight(e,t){this._startingWeight=this.weight,this._targetWeight=e,this._blendTime=Math.max(0,t),this._blendTimeElapsed=0}assignAnimation(e,t,s,i){t instanceof Di&&(this._controller.assignAnimation(e,t,s,i),this._controller._transitions.length===0&&this._controller._transitions.push(new Hc({from:"START",to:e})),this._component.activate&&this._component.playable&&(this._component.playing=!0))}removeNodeAnimations(e){this._controller.removeNodeAnimations(e)&&(this._component.playing=!1)}getAnimationAsset(e){return this._component.animationAssets[`${this.name}:${e}`]}transition(e,t=0,s=null){this._controller.updateStateFromTransition(new Hc({from:this._controller.activeStateName,to:e,time:t,transitionOffset:s}))}}class nc{constructor(e){if(this._layers=[],this._parameters={},Array.isArray(e.layers))this._layers=e.layers;else for(const t in e.layers){const s=e.layers[t],i={name:s.name,blendType:s.blendType,weight:s.weight,states:[],transitions:[]};for(let r=0;r<s.states.length;r++)i.states.push(e.states[s.states[r]]);for(let r=0;r<s.transitions.length;r++){const a=e.transitions[s.transitions[r]];if(a.conditions&&!Array.isArray(a.conditions)){const n=Object.keys(a.conditions),l=[];for(let h=0;h<n.length;h++){const c=a.conditions[n[h]];c.parameterName&&l.push(c)}a.conditions=l}Number.isInteger(a.from)&&(a.from=e.states[a.from].name),Number.isInteger(a.to)&&(a.to=e.states[a.to].name),i.transitions.push(a)}this._layers.push(i)}for(const t in e.parameters){const s=e.parameters[t];this._parameters[s.name]={type:s.type,value:s.value}}}get parameters(){return Object.assign({},this._parameters)}get layers(){return this._layers}}class jx extends he{set stateGraphAsset(e){if(e===null){this.removeStateGraph();return}this._stateGraphAsset&&this.system.app.assets.get(this._stateGraphAsset).off("change",this._onStateGraphAssetChangeEvent,this);let t,s;e instanceof ie?(t=e.id,s=this.system.app.assets.get(t),s||(this.system.app.assets.add(e),s=this.system.app.assets.get(t))):(t=e,s=this.system.app.assets.get(t)),!(!s||this._stateGraphAsset===t)&&(s.resource?(this._stateGraph=s.resource,this.loadStateGraph(this._stateGraph),s.on("change",this._onStateGraphAssetChangeEvent,this)):(s.once("load",i=>{this._stateGraph=i.resource,this.loadStateGraph(this._stateGraph)}),s.on("change",this._onStateGraphAssetChangeEvent,this),this.system.app.assets.load(s)),this._stateGraphAsset=t)}get stateGraphAsset(){return this._stateGraphAsset}set normalizeWeights(e){this._normalizeWeights=e,this.unbind()}get normalizeWeights(){return this._normalizeWeights}set animationAssets(e){this._animationAssets=e,this.loadAnimationAssets()}get animationAssets(){return this._animationAssets}set speed(e){this._speed=e}get speed(){return this._speed}set activate(e){this._activate=e}get activate(){return this._activate}set playing(e){this._playing=e}get playing(){return this._playing}set rootBone(e){if(typeof e=="string"){const t=this.entity.root.findByGuid(e);this._rootBone=t}else e instanceof Ve?this._rootBone=e:this._rootBone=null;this.rebind()}get rootBone(){return this._rootBone}set stateGraph(e){this._stateGraph=e}get stateGraph(){return this._stateGraph}get layers(){return this._layers}set layerIndices(e){this._layerIndices=e}get layerIndices(){return this._layerIndices}set parameters(e){this._parameters=e}get parameters(){return this._parameters}set targets(e){this._targets=e}get targets(){return this._targets}get playable(){for(let e=0;e<this._layers.length;e++)if(!this._layers[e].playable)return!1;return!0}get baseLayer(){return this._layers.length>0?this._layers[0]:null}_onStateGraphAssetChangeEvent(e){const t=this.animationAssets,s=this.layers.map(i=>i.mask);this.removeStateGraph(),this._stateGraph=new nc(e._data),this.loadStateGraph(this._stateGraph),this.animationAssets=t,this.loadAnimationAssets(),this.layers.forEach((i,r)=>{i.mask=s[r]}),this.rebind()}dirtifyTargets(){const e=Object.values(this._targets);for(let t=0;t<e.length;t++)e[t].dirty=!0}_addLayer({name:e,states:t,transitions:s,weight:i,mask:r,blendType:a}){let n;this.rootBone?n=this.rootBone:n=this.entity;const l=this._layers.length,h=new gi(this,n,e,r,l),c=new Xx(h),d=new aB(c,t,s,this._activate,this,this.findParameter,this.consumeTrigger);return this._layers.push(new nB(e,d,this,i,a)),this._layerIndices[e]=l,this._layers[l]}addLayer(e,t,s,i){const r=this.findAnimationLayer(e);if(r)return r;const a=[{name:"START",speed:1}],n=[];return this._addLayer({name:e,states:a,transitions:n,weight:t,mask:s,blendType:i})}_assignParameters(e){this._parameters={};const t=Object.keys(e.parameters);for(let s=0;s<t.length;s++){const i=t[s];this._parameters[i]={type:e.parameters[i].type,value:e.parameters[i].value}}}loadStateGraph(e){this._stateGraph=e,this._assignParameters(e),this._layers=[];let t=!1;for(let s=0;s<e.layers.length;s++){const i=e.layers[s];this._addLayer({...i}),i.states.some(r=>r.blendTree)&&(t=!0)}t||this.setupAnimationAssets()}setupAnimationAssets(){for(let e=0;e<this._layers.length;e++){const t=this._layers[e],s=t.name;for(let i=0;i<t.states.length;i++){const r=t.states[i];if(zc.indexOf(r)===-1){const a=`${s}:${r}`;this._animationAssets[a]||(this._animationAssets[a]={asset:null})}}}this.loadAnimationAssets()}loadAnimationAssets(){for(let e=0;e<this._layers.length;e++){const t=this._layers[e];for(let s=0;s<t.states.length;s++){const i=t.states[s];if(zc.indexOf(i)!==-1)continue;const r=this._animationAssets[`${t.name}:${i}`];if(!r||!r.asset){this.findAnimationLayer(t.name).assignAnimation(i,Di.EMPTY);continue}const a=r.asset,n=this.system.app.assets.get(a);n&&(n.resource?this.onAnimationAssetLoaded(t.name,i,n):(n.once("load",(function(l,h){return(function(c){this.onAnimationAssetLoaded(l,h,c)}).bind(this)}).bind(this)(t.name,i)),this.system.app.assets.load(n)))}}}onAnimationAssetLoaded(e,t,s){this.findAnimationLayer(e).assignAnimation(t,s.resource)}removeStateGraph(){this._stateGraph=null,this._stateGraphAsset=null,this._animationAssets={},this._layers=[],this._layerIndices={},this._parameters={},this._playing=!1,this.unbind(),this._targets={}}reset(){this._assignParameters(this._stateGraph);for(let e=0;e<this._layers.length;e++){const t=this._layers[e].playing;this._layers[e].reset(),this._layers[e].playing=t}}unbind(){this._normalizeWeights||Object.keys(this._targets).forEach(e=>{this._targets[e].unbind()})}rebind(){this._targets={};for(let e=0;e<this._layers.length;e++)this._layers[e].rebind()}findAnimationLayer(e){const t=this._layerIndices[e];return this._layers[t]||null}addAnimationState(e,t,s=1,i=!0,r="Base"){this._stateGraph||this.loadStateGraph(new nc({layers:[{name:r,states:[{name:"START",speed:1},{name:e,speed:s,loop:i,defaultState:!0}],transitions:[{from:"START",to:e}]}],parameters:{}}));const a=this.findAnimationLayer(r);a?a.assignAnimation(e,t,s,i):this.addLayer(r)?.assignAnimation(e,t,s,i)}assignAnimation(e,t,s,i=1,r=!0){if(!this._stateGraph&&e.indexOf(".")===-1){this.loadStateGraph(new nc({layers:[{name:"Base",states:[{name:"START",speed:1},{name:e,speed:i,loop:r,defaultState:!0}],transitions:[{from:"START",to:e}]}],parameters:{}})),this.baseLayer.assignAnimation(e,t);return}const a=s?this.findAnimationLayer(s):this.baseLayer;a&&a.assignAnimation(e,t,i,r)}removeNodeAnimations(e,t){const s=t?this.findAnimationLayer(t):this.baseLayer;s&&s.removeNodeAnimations(e)}getParameterValue(e,t){const s=this._parameters[e];if(s&&s.type===t)return s.value}setParameterValue(e,t,s){const i=this._parameters[e];if(i&&i.type===t){i.value=s;return}}getFloat(e){return this.getParameterValue(e,YS)}setFloat(e,t){this.setParameterValue(e,YS,t)}getInteger(e){return this.getParameterValue(e,qS)}setInteger(e,t){typeof t=="number"&&t%1===0&&this.setParameterValue(e,qS,t)}getBoolean(e){return this.getParameterValue(e,jS)}setBoolean(e,t){this.setParameterValue(e,jS,!!t)}getTrigger(e){return this.getParameterValue(e,ac)}setTrigger(e,t=!1){this.setParameterValue(e,ac,!0),t&&this._consumedTriggers.add(e)}resetTrigger(e){this.setParameterValue(e,ac,!1)}onBeforeRemove(){Number.isFinite(this._stateGraphAsset)&&this.system.app.assets.get(this._stateGraphAsset).off("change",this._onStateGraphAssetChangeEvent,this)}update(e){for(let t=0;t<this.layers.length;t++)this.layers[t].update(e*this.speed);this._consumedTriggers.forEach(t=>{this.parameters[t].value=!1}),this._consumedTriggers.clear()}resolveDuplicatedEntityReferenceProperties(e,t){e.rootBone&&t[e.rootBone.getGuid()]?this.rootBone=t[e.rootBone.getGuid()]:this.rebind()}constructor(...e){super(...e),this._stateGraphAsset=null,this._animationAssets={},this._speed=1,this._activate=!0,this._playing=!1,this._rootBone=null,this._stateGraph=null,this._layers=[],this._layerIndices={},this._parameters={},this._targets={},this._consumedTriggers=new Set,this._normalizeWeights=!1,this.findParameter=t=>this._parameters[t],this.consumeTrigger=t=>{this._consumedTriggers.add(t)}}}class oB{constructor(){this.enabled=!0}}const Pp=["enabled"];class lB extends qe{constructor(e){super(e),this.id="anim",this.ComponentType=jx,this.DataType=oB,this.schema=Pp,this.on("beforeremove",this.onBeforeRemove,this),this.app.systems.on("animationUpdate",this.onAnimationUpdate,this)}initializeComponentData(e,t,s){super.initializeComponentData(e,t,Pp);const i=["animationAssets","stateGraph","layers","masks"];Object.keys(t).forEach(r=>{i.includes(r)||(e[r]=t[r])}),t.stateGraph&&(e.stateGraph=t.stateGraph,e.loadStateGraph(e.stateGraph)),t.layers&&t.layers.forEach((r,a)=>{r._controller.states.forEach(n=>{r._controller._states[n]._animationList.forEach(l=>{if(!l.animTrack||l.animTrack===Di.EMPTY){const h=this.app.assets.get(r._component._animationAssets[`${r.name}:${l.name}`].asset);h&&!h.loaded&&h.once("load",()=>{e.layers[a].assignAnimation(l.name,h.resource)})}else e.layers[a].assignAnimation(l.name,l.animTrack)})})}),t.animationAssets&&(e.animationAssets=Object.assign(e.animationAssets,t.animationAssets)),t.masks&&Object.keys(t.masks).forEach(r=>{if(e.layers[r]){const a=t.masks[r].mask,n={};Object.keys(a).forEach(l=>{n[decodeURI(l)]=a[l]}),e.layers[r].mask=n}})}onAnimationUpdate(e){const t=this.store;for(const s in t)if(t.hasOwnProperty(s)){const i=t[s].entity.anim;i.data.enabled&&i.entity.enabled&&i.playing&&i.update(e)}}cloneComponent(e,t){let s;(!e.anim.rootBone||e.anim.rootBone===e)&&(s={},e.anim.layers.forEach((r,a)=>{if(r.mask){const n={};Object.keys(r.mask).forEach(l=>{const h=l.split("/");h.shift();const c=[t.name,...h].join("/");n[c]=r.mask[l]}),s[a]={mask:n}}}));const i={enabled:e.anim.enabled,stateGraphAsset:e.anim.stateGraphAsset,animationAssets:e.anim.animationAssets,speed:e.anim.speed,activate:e.anim.activate,playing:e.anim.playing,rootBone:e.anim.rootBone,stateGraph:e.anim.stateGraph,layers:e.anim.layers,layerIndices:e.anim.layerIndices,parameters:e.anim.parameters,normalizeWeights:e.anim.normalizeWeights,masks:s};return this.addComponent(t,i)}onBeforeRemove(e,t){t.onBeforeRemove()}destroy(){super.destroy(),this.app.systems.off("animationUpdate",this.onAnimationUpdate,this)}}he._buildAccessors(jx.prototype,Pp);class Kx extends he{setCurrentListener(){if(this.enabled&&this.entity.audiolistener&&this.entity.enabled){this.system.current=this.entity;const e=this.system.current.getPosition();this.system.manager.listener.setPosition(e)}}onEnable(){this.setCurrentListener()}onDisable(){this.system.current===this.entity&&(this.system.current=null)}}class hB{constructor(){this.enabled=!0}}const Zx=["enabled"];class cB extends qe{constructor(e){super(e),this.id="audiolistener",this.ComponentType=Kx,this.DataType=hB,this.schema=Zx,this.manager=e.soundManager,this.current=null,this.app.systems.on("update",this.onUpdate,this)}initializeComponentData(e,t,s){s=["enabled"],super.initializeComponentData(e,t,s)}onUpdate(e){if(this.current){const t=this.current.getPosition();this.manager.listener.setPosition(t);const s=this.current.getWorldTransform();this.manager.listener.setOrientation(s)}}destroy(){super.destroy(),this.app.systems.off("update",this.onUpdate,this)}}he._buildAccessors(Kx.prototype,Zx);const Lp=0,ZS=1,oc="group",Ip="image",Qx="text",lc="stretch",dB="contain",fB="cover",je={DEFAULT:"DEFAULT",HOVER:"HOVER",PRESSED:"PRESSED",INACTIVE:"INACTIVE"},jl={};jl[je.DEFAULT]="_defaultTint";jl[je.HOVER]="hoverTint";jl[je.PRESSED]="pressedTint";jl[je.INACTIVE]="inactiveTint";const Kl={};Kl[je.DEFAULT]="_defaultSpriteAsset";Kl[je.HOVER]="hoverSpriteAsset";Kl[je.PRESSED]="pressedSpriteAsset";Kl[je.INACTIVE]="inactiveSpriteAsset";const Zl={};Zl[je.DEFAULT]="_defaultSpriteFrame";Zl[je.HOVER]="hoverSpriteFrame";Zl[je.PRESSED]="pressedSpriteFrame";Zl[je.INACTIVE]="inactiveSpriteFrame";const st=class st extends he{constructor(e,t){super(e,t),this._visualState=je.DEFAULT,this._isHovering=!1,this._hoveringCounter=0,this._isPressed=!1,this._defaultTint=new q(1,1,1,1),this._defaultSpriteAsset=null,this._defaultSpriteFrame=0,this._imageEntity=null,this._evtElementAdd=null,this._evtImageEntityElementAdd=null,this._evtImageEntityElementRemove=null,this._evtImageEntityElementColor=null,this._evtImageEntityElementOpacity=null,this._evtImageEntityElementSpriteAsset=null,this._evtImageEntityElementSpriteFrame=null,this._visualState=je.DEFAULT,this._isHovering=!1,this._hoveringCounter=0,this._isPressed=!1,this._defaultTint=new q(1,1,1,1),this._defaultSpriteAsset=null,this._defaultSpriteFrame=0,this._toggleLifecycleListeners("on",e)}get data(){const e=this.system.store[this.entity.getGuid()];return e?e.data:null}set enabled(e){this._setValue("enabled",e)}get enabled(){return this.data.enabled}set active(e){this._setValue("active",e)}get active(){return this.data.active}set imageEntity(e){if(this._imageEntity!==e){const t=typeof e=="string";if(this._imageEntity&&t&&this._imageEntity.getGuid()===e)return;this._imageEntity&&this._imageEntityUnsubscribe(),e instanceof ze?this._imageEntity=e:t?this._imageEntity=this.system.app.getEntityFromIndex(e)||null:this._imageEntity=null,this._imageEntity&&this._imageEntitySubscribe(),this._imageEntity?this.data.imageEntity=this._imageEntity.getGuid():t&&e&&(this.data.imageEntity=e)}}get imageEntity(){return this._imageEntity}set hitPadding(e){this._setValue("hitPadding",e)}get hitPadding(){return this.data.hitPadding}set transitionMode(e){this._setValue("transitionMode",e)}get transitionMode(){return this.data.transitionMode}set hoverTint(e){this._setValue("hoverTint",e)}get hoverTint(){return this.data.hoverTint}set pressedTint(e){this._setValue("pressedTint",e)}get pressedTint(){return this.data.pressedTint}set inactiveTint(e){this._setValue("inactiveTint",e)}get inactiveTint(){return this.data.inactiveTint}set fadeDuration(e){this._setValue("fadeDuration",e)}get fadeDuration(){return this.data.fadeDuration}set hoverSpriteAsset(e){this._setValue("hoverSpriteAsset",e)}get hoverSpriteAsset(){return this.data.hoverSpriteAsset}set hoverSpriteFrame(e){this._setValue("hoverSpriteFrame",e)}get hoverSpriteFrame(){return this.data.hoverSpriteFrame}set pressedSpriteAsset(e){this._setValue("pressedSpriteAsset",e)}get pressedSpriteAsset(){return this.data.pressedSpriteAsset}set pressedSpriteFrame(e){this._setValue("pressedSpriteFrame",e)}get pressedSpriteFrame(){return this.data.pressedSpriteFrame}set inactiveSpriteAsset(e){this._setValue("inactiveSpriteAsset",e)}get inactiveSpriteAsset(){return this.data.inactiveSpriteAsset}set inactiveSpriteFrame(e){this._setValue("inactiveSpriteFrame",e)}get inactiveSpriteFrame(){return this.data.inactiveSpriteFrame}_setValue(e,t){const s=this.data,i=s[e];s[e]=t,this.fire("set",e,i,t)}_toggleLifecycleListeners(e,t){this[e]("set_active",this._onSetActive,this),this[e]("set_transitionMode",this._onSetTransitionMode,this),this[e]("set_hoverTint",this._onSetTransitionValue,this),this[e]("set_pressedTint",this._onSetTransitionValue,this),this[e]("set_inactiveTint",this._onSetTransitionValue,this),this[e]("set_hoverSpriteAsset",this._onSetTransitionValue,this),this[e]("set_hoverSpriteFrame",this._onSetTransitionValue,this),this[e]("set_pressedSpriteAsset",this._onSetTransitionValue,this),this[e]("set_pressedSpriteFrame",this._onSetTransitionValue,this),this[e]("set_inactiveSpriteAsset",this._onSetTransitionValue,this),this[e]("set_inactiveSpriteFrame",this._onSetTransitionValue,this),e==="on"?this._evtElementAdd=this.entity.on("element:add",this._onElementComponentAdd,this):(this._evtElementAdd?.off(),this._evtElementAdd=null)}_onSetActive(e,t,s){t!==s&&this._updateVisualState()}_onSetTransitionMode(e,t,s){t!==s&&(this._cancelTween(),this._resetToDefaultVisualState(t),this._forceReapplyVisualState())}_onSetTransitionValue(e,t,s){t!==s&&this._forceReapplyVisualState()}_imageEntitySubscribe(){this._evtImageEntityElementAdd=this._imageEntity.on("element:add",this._onImageElementGain,this),this._imageEntity.element&&this._onImageElementGain()}_imageEntityUnsubscribe(){this._evtImageEntityElementAdd?.off(),this._evtImageEntityElementAdd=null,this._imageEntity?.element&&this._onImageElementLose()}_imageEntityElementSubscribe(){const e=this._imageEntity.element;this._evtImageEntityElementRemove=e.once("beforeremove",this._onImageElementLose,this),this._evtImageEntityElementColor=e.on("set:color",this._onSetColor,this),this._evtImageEntityElementOpacity=e.on("set:opacity",this._onSetOpacity,this),this._evtImageEntityElementSpriteAsset=e.on("set:spriteAsset",this._onSetSpriteAsset,this),this._evtImageEntityElementSpriteFrame=e.on("set:spriteFrame",this._onSetSpriteFrame,this)}_imageEntityElementUnsubscribe(){this._evtImageEntityElementRemove?.off(),this._evtImageEntityElementRemove=null,this._evtImageEntityElementColor?.off(),this._evtImageEntityElementColor=null,this._evtImageEntityElementOpacity?.off(),this._evtImageEntityElementOpacity=null,this._evtImageEntityElementSpriteAsset?.off(),this._evtImageEntityElementSpriteAsset=null,this._evtImageEntityElementSpriteFrame?.off(),this._evtImageEntityElementSpriteFrame=null}_onElementComponentRemove(){this._toggleHitElementListeners("off")}_onElementComponentAdd(){this._toggleHitElementListeners("on")}_onImageElementLose(){this._imageEntityElementUnsubscribe(),this._cancelTween(),this._resetToDefaultVisualState(this.transitionMode)}_onImageElementGain(){this._imageEntityElementSubscribe(),this._storeDefaultVisualState(),this._forceReapplyVisualState()}_toggleHitElementListeners(e){if(this.entity.element){const t=e==="on";if(t&&this._hasHitElementListeners)return;this.entity.element[e]("beforeremove",this._onElementComponentRemove,this),this.entity.element[e]("mouseenter",this._onMouseEnter,this),this.entity.element[e]("mouseleave",this._onMouseLeave,this),this.entity.element[e]("mousedown",this._onMouseDown,this),this.entity.element[e]("mouseup",this._onMouseUp,this),this.entity.element[e]("touchstart",this._onTouchStart,this),this.entity.element[e]("touchend",this._onTouchEnd,this),this.entity.element[e]("touchleave",this._onTouchLeave,this),this.entity.element[e]("touchcancel",this._onTouchCancel,this),this.entity.element[e]("selectstart",this._onSelectStart,this),this.entity.element[e]("selectend",this._onSelectEnd,this),this.entity.element[e]("selectenter",this._onSelectEnter,this),this.entity.element[e]("selectleave",this._onSelectLeave,this),this.entity.element[e]("click",this._onClick,this),this._hasHitElementListeners=t}}_storeDefaultVisualState(){const e=this._imageEntity?.element;!e||e.type===oc||(this._storeDefaultColor(e.color),this._storeDefaultOpacity(e.opacity),this._storeDefaultSpriteAsset(e.spriteAsset),this._storeDefaultSpriteFrame(e.spriteFrame))}_storeDefaultColor(e){this._defaultTint.r=e.r,this._defaultTint.g=e.g,this._defaultTint.b=e.b}_storeDefaultOpacity(e){this._defaultTint.a=e}_storeDefaultSpriteAsset(e){this._defaultSpriteAsset=e}_storeDefaultSpriteFrame(e){this._defaultSpriteFrame=e}_onSetColor(e){this._isApplyingTint||(this._storeDefaultColor(e),this._forceReapplyVisualState())}_onSetOpacity(e){this._isApplyingTint||(this._storeDefaultOpacity(e),this._forceReapplyVisualState())}_onSetSpriteAsset(e){this._isApplyingSprite||(this._storeDefaultSpriteAsset(e),this._forceReapplyVisualState())}_onSetSpriteFrame(e){this._isApplyingSprite||(this._storeDefaultSpriteFrame(e),this._forceReapplyVisualState())}_onMouseEnter(e){this._isHovering=!0,this._updateVisualState(),this._fireIfActive("mouseenter",e)}_onMouseLeave(e){this._isHovering=!1,this._isPressed=!1,this._updateVisualState(),this._fireIfActive("mouseleave",e)}_onMouseDown(e){this._isPressed=!0,this._updateVisualState(),this._fireIfActive("mousedown",e)}_onMouseUp(e){this._isPressed=!1,this._updateVisualState(),this._fireIfActive("mouseup",e)}_onTouchStart(e){this._isPressed=!0,this._updateVisualState(),this._fireIfActive("touchstart",e)}_onTouchEnd(e){e.event.preventDefault(),this._isPressed=!1,this._updateVisualState(),this._fireIfActive("touchend",e)}_onTouchLeave(e){this._isPressed=!1,this._updateVisualState(),this._fireIfActive("touchleave",e)}_onTouchCancel(e){this._isPressed=!1,this._updateVisualState(),this._fireIfActive("touchcancel",e)}_onSelectStart(e){this._isPressed=!0,this._updateVisualState(),this._fireIfActive("selectstart",e)}_onSelectEnd(e){this._isPressed=!1,this._updateVisualState(),this._fireIfActive("selectend",e)}_onSelectEnter(e){this._hoveringCounter++,this._hoveringCounter===1&&(this._isHovering=!0,this._updateVisualState()),this._fireIfActive("selectenter",e)}_onSelectLeave(e){this._hoveringCounter--,this._hoveringCounter===0&&(this._isHovering=!1,this._isPressed=!1,this._updateVisualState()),this._fireIfActive("selectleave",e)}_onClick(e){this._fireIfActive("click",e)}_fireIfActive(e,t){this.data.active&&this.fire(e,t)}_updateVisualState(e){const t=this._visualState,s=this._determineVisualState();if((t!==s||e)&&this.enabled)switch(this._visualState=s,t===je.HOVER&&this._fireIfActive("hoverend"),t===je.PRESSED&&this._fireIfActive("pressedend"),s===je.HOVER&&this._fireIfActive("hoverstart"),s===je.PRESSED&&this._fireIfActive("pressedstart"),this.transitionMode){case Lp:{const i=jl[this._visualState],r=this[i];this._applyTint(r);break}case ZS:{const i=Kl[this._visualState],r=Zl[this._visualState],a=this[i],n=this[r];this._applySprite(a,n);break}}}_forceReapplyVisualState(){this._updateVisualState(!0)}_resetToDefaultVisualState(e){if(this._imageEntity?.element)switch(e){case Lp:this._cancelTween(),this._applyTintImmediately(this._defaultTint);break;case ZS:this._applySprite(this._defaultSpriteAsset,this._defaultSpriteFrame);break}}_determineVisualState(){if(this.active){if(this._isPressed)return je.PRESSED;if(this._isHovering)return je.HOVER}else return je.INACTIVE;return je.DEFAULT}_applySprite(e,t){const s=this._imageEntity?.element;s&&(t=t||0,this._isApplyingSprite=!0,s.spriteAsset!==e&&(s.spriteAsset=e),s.spriteFrame!==t&&(s.spriteFrame=t),this._isApplyingSprite=!1)}_applyTint(e){this._cancelTween(),this.fadeDuration===0?this._applyTintImmediately(e):this._applyTintWithTween(e)}_applyTintImmediately(e){const t=this._imageEntity?.element;if(!e||!t||t.type===oc)return;const s=QS(e);this._isApplyingTint=!0,s.equals(t.color)||(t.color=s),t.opacity!==e.a&&(t.opacity=e.a),this._isApplyingTint=!1}_applyTintWithTween(e){const t=this._imageEntity?.element;if(!e||!t||t.type===oc)return;const s=QS(e),i=t.color,r=t.opacity;s.equals(i)&&e.a===r||(this._tweenInfo={startTime:Mi(),from:new q(i.r,i.g,i.b,r),to:e.clone(),lerpColor:new q})}_updateTintTween(){const e=Mi()-this._tweenInfo.startTime;let t=this.fadeDuration===0?1:e/this.fadeDuration;if(t=B.clamp(t,0,1),Math.abs(t-1)>1e-5){const s=this._tweenInfo.lerpColor;s.lerp(this._tweenInfo.from,this._tweenInfo.to,t),this._applyTintImmediately(new q(s.r,s.g,s.b,s.a))}else this._applyTintImmediately(this._tweenInfo.to),this._cancelTween()}_cancelTween(){delete this._tweenInfo}onUpdate(){this._tweenInfo&&this._updateTintTween()}onEnable(){this._isHovering=!1,this._hoveringCounter=0,this._isPressed=!1,this._toggleHitElementListeners("on"),this._forceReapplyVisualState()}onDisable(){this._toggleHitElementListeners("off"),this._resetToDefaultVisualState(this.transitionMode)}onRemove(){this._imageEntityUnsubscribe(),this._toggleLifecycleListeners("off",this.system),this.onDisable()}resolveDuplicatedEntityReferenceProperties(e,t){e.imageEntity&&(this.imageEntity=t[e.imageEntity.getGuid()])}};st.EVENT_MOUSEDOWN="mousedown",st.EVENT_MOUSEUP="mouseup",st.EVENT_MOUSEENTER="mouseenter",st.EVENT_MOUSELEAVE="mouseleave",st.EVENT_CLICK="click",st.EVENT_TOUCHSTART="touchstart",st.EVENT_TOUCHEND="touchend",st.EVENT_TOUCHCANCEL="touchcancel",st.EVENT_TOUCHLEAVE="touchleave",st.EVENT_SELECTSTART="selectstart",st.EVENT_SELECTEND="selectend",st.EVENT_SELECTENTER="selectenter",st.EVENT_SELECTLEAVE="selectleave",st.EVENT_HOVERSTART="hoverstart",st.EVENT_HOVEREND="hoverend",st.EVENT_PRESSEDSTART="pressedstart",st.EVENT_PRESSEDEND="pressedend";let Mp=st;function QS(o){return new q(o.r,o.g,o.b)}class uB{constructor(){this.enabled=!0,this.active=!0,this.imageEntity=null,this.hitPadding=new K,this.transitionMode=Lp,this.hoverTint=new q(.75,.75,.75),this.pressedTint=new q(.5,.5,.5),this.inactiveTint=new q(.25,.25,.25),this.fadeDuration=0,this.hoverSpriteAsset=null,this.hoverSpriteFrame=0,this.pressedSpriteAsset=null,this.pressedSpriteFrame=0,this.inactiveSpriteAsset=null,this.inactiveSpriteFrame=0}}const JS=["enabled","active",{name:"hitPadding",type:"vec4"},"transitionMode",{name:"hoverTint",type:"rgba"},{name:"pressedTint",type:"rgba"},{name:"inactiveTint",type:"rgba"},"fadeDuration","hoverSpriteAsset","hoverSpriteFrame","pressedSpriteAsset","pressedSpriteFrame","inactiveSpriteAsset","inactiveSpriteFrame"];class pB extends qe{constructor(e){super(e),this.id="button",this.ComponentType=Mp,this.DataType=uB,this.schema=JS,this.on("beforeremove",this._onRemoveComponent,this),this.app.systems.on("update",this.onUpdate,this)}initializeComponentData(e,t,s){e.imageEntity=t.imageEntity,super.initializeComponentData(e,t,JS)}onUpdate(e){const t=this.store;for(const s in t){const i=t[s].entity,r=i.button;r.enabled&&i.enabled&&r.onUpdate()}}_onRemoveComponent(e,t){t.onRemove()}destroy(){super.destroy(),this.app.systems.off("update",this.onUpdate,this)}}const ey=new x,ty=new Q,Vr=class Vr extends he{constructor(e,t){super(e,t),this._compoundParent=null,this._hasOffset=!1,this.entity.on("insert",this._onInsert,this),this.on("set_type",this.onSetType,this),this.on("set_convexHull",this.onSetModel,this),this.on("set_halfExtents",this.onSetHalfExtents,this),this.on("set_linearOffset",this.onSetOffset,this),this.on("set_angularOffset",this.onSetOffset,this),this.on("set_radius",this.onSetRadius,this),this.on("set_height",this.onSetHeight,this),this.on("set_axis",this.onSetAxis,this),this.on("set_asset",this.onSetAsset,this),this.on("set_renderAsset",this.onSetRenderAsset,this),this.on("set_model",this.onSetModel,this),this.on("set_render",this.onSetRender,this)}get data(){const e=this.system.store[this.entity.getGuid()];return e?e.data:null}set enabled(e){this._setValue("enabled",e)}get enabled(){return this.data.enabled}set type(e){this._setValue("type",e)}get type(){return this.data.type}set halfExtents(e){this._setValue("halfExtents",e)}get halfExtents(){return this.data.halfExtents}set linearOffset(e){this._setValue("linearOffset",e)}get linearOffset(){return this.data.linearOffset}set angularOffset(e){this._setValue("angularOffset",e)}get angularOffset(){return this.data.angularOffset}set radius(e){this._setValue("radius",e)}get radius(){return this.data.radius}set axis(e){this._setValue("axis",e)}get axis(){return this.data.axis}set height(e){this._setValue("height",e)}get height(){return this.data.height}set asset(e){this._setValue("asset",e)}get asset(){return this.data.asset}set renderAsset(e){this._setValue("renderAsset",e)}get renderAsset(){return this.data.renderAsset}set convexHull(e){this._setValue("convexHull",e)}get convexHull(){return this.data.convexHull}set shape(e){this._setValue("shape",e)}get shape(){return this.data.shape}set model(e){this._setValue("model",e)}get model(){return this.data.model}set render(e){this._setValue("render",e)}get render(){return this.data.render}set checkVertexDuplicates(e){this._setValue("checkVertexDuplicates",e)}get checkVertexDuplicates(){return this.data.checkVertexDuplicates}_setValue(e,t){const s=this.data,i=s[e];s[e]=t,this.fire("set",e,i,t)}onSetType(e,t,s){t!==s&&this.system.changeType(this,t,s)}onSetHalfExtents(e,t,s){const i=this.data.type;this.data.initialized&&i==="box"&&this.system.recreatePhysicalShapes(this)}onSetOffset(e,t,s){this._hasOffset=!this.data.linearOffset.equals(x.ZERO)||!this.data.angularOffset.equals(Q.IDENTITY),this.data.initialized&&this.system.recreatePhysicalShapes(this)}onSetRadius(e,t,s){const i=this.data.type;this.data.initialized&&(i==="sphere"||i==="capsule"||i==="cylinder"||i==="cone")&&this.system.recreatePhysicalShapes(this)}onSetHeight(e,t,s){const i=this.data.type;this.data.initialized&&(i==="capsule"||i==="cylinder"||i==="cone")&&this.system.recreatePhysicalShapes(this)}onSetAxis(e,t,s){const i=this.data.type;this.data.initialized&&(i==="capsule"||i==="cylinder"||i==="cone")&&this.system.recreatePhysicalShapes(this)}onSetAsset(e,t,s){const i=this.system.app.assets;if(t){const r=i.get(t);r&&r.off("remove",this.onAssetRemoved,this)}if(s){s instanceof ie&&(this.data.asset=s.id);const r=i.get(this.data.asset);r&&(r.off("remove",this.onAssetRemoved,this),r.on("remove",this.onAssetRemoved,this))}this.data.initialized&&this.data.type==="mesh"&&(s||(this.data.model=null),this.system.recreatePhysicalShapes(this))}onSetRenderAsset(e,t,s){const i=this.system.app.assets;if(t){const r=i.get(t);r&&r.off("remove",this.onRenderAssetRemoved,this)}if(s){s instanceof ie&&(this.data.renderAsset=s.id);const r=i.get(this.data.renderAsset);r&&(r.off("remove",this.onRenderAssetRemoved,this),r.on("remove",this.onRenderAssetRemoved,this))}this.data.initialized&&this.data.type==="mesh"&&(s||(this.data.render=null),this.system.recreatePhysicalShapes(this))}onSetModel(e,t,s){this.data.initialized&&this.data.type==="mesh"&&this.system.implementations.mesh.doRecreatePhysicalShape(this)}onSetRender(e,t,s){this.onSetModel(e,t,s)}onAssetRemoved(e){e.off("remove",this.onAssetRemoved,this),this.data.asset===e.id&&(this.asset=null)}onRenderAssetRemoved(e){e.off("remove",this.onRenderAssetRemoved,this),this.data.renderAsset===e.id&&(this.renderAsset=null)}getCompoundChildShapeIndex(e){const t=this.data.shape,s=t.getNumChildShapes();for(let i=0;i<s;i++){const r=t.getChildShape(i);if(Ammo.getPointer(r)===Ammo.getPointer(e))return i}return null}_onInsert(e){if(!(typeof Ammo>"u")){if(this._compoundParent)this.system.recreatePhysicalShapes(this);else if(!this.entity.rigidbody){let t=this.entity.parent;for(;t;){if(t.collision&&t.collision.type==="compound"){t.collision.shape.getNumChildShapes()===0?this.system.recreatePhysicalShapes(t.collision):this.system.recreatePhysicalShapes(this);break}t=t.parent}}}}_updateCompound(){const e=this.entity;if(e._dirtyWorld){let t=e._dirtyLocal,s=e;for(;s&&!t&&!(s.collision&&s.collision===this._compoundParent);)s._dirtyLocal&&(t=!0),s=s.parent;if(t){e.forEach(this.system.implementations.compound._updateEachDescendantTransform,e);const i=this._compoundParent.entity.rigidbody;i&&i.activate()}}}getShapePosition(){const e=this.entity.getPosition();if(this._hasOffset){const t=this.entity.getRotation(),s=this.data.linearOffset;return ty.copy(t).transformVector(s,ey),ey.add(e)}return e}getShapeRotation(){const e=this.entity.getRotation();return this._hasOffset?ty.copy(e).mul(this.data.angularOffset):e}onEnable(){if(this.data.type==="mesh"&&(this.data.asset||this.data.renderAsset)&&this.data.initialized){const e=this.system.app.assets.get(this.data.asset||this.data.renderAsset);if(e&&(!e.resource||!this.data.shape)){this.system.recreatePhysicalShapes(this);return}}if(this.entity.rigidbody)this.entity.rigidbody.enabled&&this.entity.rigidbody.enableSimulation();else if(this._compoundParent&&this!==this._compoundParent)if(this._compoundParent.shape.getNumChildShapes()===0)this.system.recreatePhysicalShapes(this._compoundParent);else{const e=this.system._getNodeTransform(this.entity,this._compoundParent.entity);this._compoundParent.shape.addChildShape(e,this.data.shape),Ammo.destroy(e),this._compoundParent.entity.rigidbody&&this._compoundParent.entity.rigidbody.activate()}else this.entity.trigger&&this.entity.trigger.enable()}onDisable(){this.entity.rigidbody?this.entity.rigidbody.disableSimulation():this._compoundParent&&this!==this._compoundParent?this._compoundParent.entity._destroying||(this.system._removeCompoundChild(this._compoundParent,this.data.shape),this._compoundParent.entity.rigidbody&&this._compoundParent.entity.rigidbody.activate()):this.entity.trigger&&this.entity.trigger.disable()}onBeforeRemove(){this.asset&&(this.asset=null),this.renderAsset&&(this.renderAsset=null),this.entity.off("insert",this._onInsert,this),this.off()}};Vr.EVENT_CONTACT="contact",Vr.EVENT_COLLISIONSTART="collisionstart",Vr.EVENT_COLLISIONEND="collisionend",Vr.EVENT_TRIGGERENTER="triggerenter",Vr.EVENT_TRIGGERLEAVE="triggerleave";let Dp=Vr;class mB{constructor(){this.enabled=!0,this.type="box",this.halfExtents=new x(.5,.5,.5),this.linearOffset=new x,this.angularOffset=new Q,this.radius=.5,this.axis=1,this.height=2,this.convexHull=!1,this.asset=null,this.renderAsset=null,this.checkVertexDuplicates=!0,this.shape=null,this.model=null,this.render=null,this.initialized=!1}}const ko="static",fs="dynamic",ja="kinematic",_B=2,Ho=4,Rp=1,sy=4,Jx=5,gB=1,iy=2,vB=4,ry=16,ay=65535,Op=65533;let us,Cr,Ka;class eE{constructor(e,t,s){this.entity=t.entity,this.component=t,this.app=e,typeof Ammo<"u"&&!us&&(us=new Ammo.btVector3,Cr=new Ammo.btQuaternion,Ka=new Ammo.btTransform),this.initialize(s)}initialize(e){const t=this.entity,s=e.shape;if(s&&typeof Ammo<"u"){t.trigger&&t.trigger.destroy();const i=1,r=this.component;if(r){const n=r.getShapePosition(),l=r.getShapeRotation();us.setValue(n.x,n.y,n.z),Cr.setValue(l.x,l.y,l.z,l.w)}else{const n=t.getPosition(),l=t.getRotation();us.setValue(n.x,n.y,n.z),Cr.setValue(l.x,l.y,l.z,l.w)}Ka.setOrigin(us),Ka.setRotation(Cr);const a=this.app.systems.rigidbody.createBody(i,s,Ka);a.setRestitution(0),a.setFriction(0),a.setDamping(0,0),us.setValue(0,0,0),a.setLinearFactor(us),a.setAngularFactor(us),a.setCollisionFlags(a.getCollisionFlags()|Ho),a.entity=t,this.body=a,this.component.enabled&&t.enabled&&this.enable()}}destroy(){this.body&&(this.disable(),this.app.systems.rigidbody.destroyBody(this.body),this.body=null)}_getEntityTransform(e){const t=this.component;if(t){const s=t.getShapePosition(),i=t.getShapeRotation();us.setValue(s.x,s.y,s.z),Cr.setValue(i.x,i.y,i.z,i.w)}else{const s=this.entity.getPosition(),i=this.entity.getRotation();us.setValue(s.x,s.y,s.z),Cr.setValue(i.x,i.y,i.z,i.w)}e.setOrigin(us),e.setRotation(Cr)}updateTransform(){this._getEntityTransform(Ka);const e=this.body;e.setWorldTransform(Ka),e.activate()}enable(){const e=this.body;if(!e)return;const t=this.app.systems.rigidbody;t._triggers.indexOf(this)<0&&(t.addBody(e,ry,Op^ry),t._triggers.push(this)),e.forceActivationState(Rp),this.updateTransform()}disable(){const e=this.body;if(!e)return;const t=this.app.systems.rigidbody,s=t._triggers.indexOf(this);s>-1&&(t.removeBody(e),t._triggers.splice(s,1)),e.forceActivationState(Jx)}}const Fh=new $,SB=new x,yB=new x,Pr=new Q,ny=new ze,TB=["enabled","type","halfExtents","linearOffset","angularOffset","radius","axis","height","convexHull","asset","renderAsset","shape","model","render","checkVertexDuplicates"];class Ca{constructor(e){this.system=e}beforeInitialize(e,t){t.shape=null,t.model=new Fi,t.model.graph=new ze}afterInitialize(e,t){this.recreatePhysicalShapes(e),e.data.initialized=!0}reset(e,t){this.beforeInitialize(e,t),this.afterInitialize(e,t)}recreatePhysicalShapes(e){const t=e.entity,s=e.data;if(typeof Ammo<"u"){t.trigger&&(t.trigger.destroy(),delete t.trigger),s.shape&&(e._compoundParent&&(e!==e._compoundParent&&this.system._removeCompoundChild(e._compoundParent,s.shape),e._compoundParent.entity.rigidbody&&e._compoundParent.entity.rigidbody.activate()),this.destroyShape(s)),s.shape=this.createPhysicalShape(e.entity,s);const i=!e._compoundParent;if(s.type==="compound"&&(!e._compoundParent||e===e._compoundParent))e._compoundParent=e,t.forEach(this._addEachDescendant,e);else if(s.type!=="compound"&&!e.rigidbody){e._compoundParent=null;let r=t.parent;for(;r;){if(r.collision&&r.collision.type==="compound"){e._compoundParent=r.collision;break}r=r.parent}}e._compoundParent&&e!==e._compoundParent&&(i&&e._compoundParent.shape.getNumChildShapes()===0?this.system.recreatePhysicalShapes(e._compoundParent):(this.system.updateCompoundChildTransform(t,!0),e._compoundParent.entity.rigidbody&&e._compoundParent.entity.rigidbody.activate())),t.rigidbody?(t.rigidbody.disableSimulation(),t.rigidbody.createBody(),t.enabled&&t.rigidbody.enabled&&t.rigidbody.enableSimulation()):e._compoundParent||(t.trigger?t.trigger.initialize(s):t.trigger=new eE(this.system.app,e,s))}}createPhysicalShape(e,t){}updateTransform(e,t,s,i){e.entity.trigger&&e.entity.trigger.updateTransform()}destroyShape(e){e.shape&&(Ammo.destroy(e.shape),e.shape=null)}beforeRemove(e,t){t.data.shape&&(t._compoundParent&&!t._compoundParent.entity._destroying&&(this.system._removeCompoundChild(t._compoundParent,t.data.shape),t._compoundParent.entity.rigidbody&&t._compoundParent.entity.rigidbody.activate()),t._compoundParent=null,this.destroyShape(t.data))}remove(e,t){e.rigidbody&&e.rigidbody.body&&e.rigidbody.disableSimulation(),e.trigger&&(e.trigger.destroy(),delete e.trigger)}clone(e,t){const s=this.system.store[e.getGuid()],i={enabled:s.data.enabled,type:s.data.type,halfExtents:[s.data.halfExtents.x,s.data.halfExtents.y,s.data.halfExtents.z],linearOffset:[s.data.linearOffset.x,s.data.linearOffset.y,s.data.linearOffset.z],angularOffset:[s.data.angularOffset.x,s.data.angularOffset.y,s.data.angularOffset.z,s.data.angularOffset.w],radius:s.data.radius,axis:s.data.axis,height:s.data.height,convexHull:s.data.convexHull,asset:s.data.asset,renderAsset:s.data.renderAsset,model:s.data.model,render:s.data.render,checkVertexDuplicates:s.data.checkVertexDuplicates};return this.system.addComponent(t,i)}}class xB extends Ca{createPhysicalShape(e,t){if(typeof Ammo<"u"){const s=t.halfExtents,i=new Ammo.btVector3(s?s.x:.5,s?s.y:.5,s?s.z:.5),r=new Ammo.btBoxShape(i);return Ammo.destroy(i),r}}}class EB extends Ca{createPhysicalShape(e,t){if(typeof Ammo<"u")return new Ammo.btSphereShape(t.radius)}}class AB extends Ca{createPhysicalShape(e,t){const s=t.axis??1,i=t.radius??.5,r=Math.max((t.height??2)-2*i,0);let a=null;if(typeof Ammo<"u")switch(s){case 0:a=new Ammo.btCapsuleShapeX(i,r);break;case 1:a=new Ammo.btCapsuleShape(i,r);break;case 2:a=new Ammo.btCapsuleShapeZ(i,r);break}return a}}class bB extends Ca{createPhysicalShape(e,t){const s=t.axis??1,i=t.radius??.5,r=t.height??1;let a=null,n=null;if(typeof Ammo<"u")switch(s){case 0:a=new Ammo.btVector3(r*.5,i,i),n=new Ammo.btCylinderShapeX(a);break;case 1:a=new Ammo.btVector3(i,r*.5,i),n=new Ammo.btCylinderShape(a);break;case 2:a=new Ammo.btVector3(i,i,r*.5),n=new Ammo.btCylinderShapeZ(a);break}return a&&Ammo.destroy(a),n}}class wB extends Ca{createPhysicalShape(e,t){const s=t.axis??1,i=t.radius??.5,r=t.height??1;let a=null;if(typeof Ammo<"u")switch(s){case 0:a=new Ammo.btConeShapeX(i,r);break;case 1:a=new Ammo.btConeShape(i,r);break;case 2:a=new Ammo.btConeShapeZ(i,r);break}return a}}class CB extends Ca{beforeInitialize(e,t){}createAmmoHull(e,t,s,i){const r=new Ammo.btConvexHullShape,a=new Ammo.btVector3,n=[];e.getPositions(n);for(let h=0;h<n.length;h+=3)a.setValue(n[h]*i.x,n[h+1]*i.y,n[h+2]*i.z),r.addPoint(a,!1);Ammo.destroy(a),r.recalcLocalAabb(),r.setMargin(.01);const l=this.system._getNodeTransform(t);s.addChildShape(l,r),Ammo.destroy(l)}createAmmoMesh(e,t,s,i,r=!0){const a=this.system;let n;if(a._triMeshCache[e.id])n=a._triMeshCache[e.id];else{const c=e.vertexBuffer,d=c.getFormat();let f,u;for(let M=0;M<d.elements.length;M++){const L=d.elements[M];if(L.name===ue){u=new Float32Array(c.lock(),L.offset),f=L.stride/4;break}}const p=[];e.getIndices(p);const m=e.primitive[0].count/3,_=new Ammo.btVector3;let g,y,A;const v=e.primitive[0].base;n=new Ammo.btTriangleMesh,a._triMeshCache[e.id]=n;const S=new Map,b=n.getIndexedMeshArray();b.at(0).m_numTriangles=m;const E=i?i.x:1,T=i?i.y:1,w=i?i.z:1,P=M=>{const L=u[M*f]*E,D=u[M*f+1]*T,k=u[M*f+2]*w;let G;if(r){const U=`${L}:${D}:${k}`;if(G=S.get(U),G!==void 0)return G;_.setValue(L,D,k),G=n.findOrAddVertex(_,!1),S.set(U,G)}else _.setValue(L,D,k),G=n.findOrAddVertex(_,!1);return G};for(let M=0;M<m;M++)g=P(p[v+M*3]),y=P(p[v+M*3+1]),A=P(p[v+M*3+2]),n.addIndex(g),n.addIndex(y),n.addIndex(A);Ammo.destroy(_)}const l=new Ammo.btBvhTriangleMeshShape(n,!0);if(!i){const c=a._getNodeScaling(t);l.setLocalScaling(c),Ammo.destroy(c)}const h=a._getNodeTransform(t);s.addChildShape(h,l),Ammo.destroy(h)}createPhysicalShape(e,t){if(!(typeof Ammo>"u")&&(t.model||t.render)){const s=new Ammo.btCompoundShape,r=e.getWorldTransform().getScale();if(t.render){const a=t.render.meshes;for(let n=0;n<a.length;n++)t.convexHull?this.createAmmoHull(a[n],ny,s,r):this.createAmmoMesh(a[n],ny,s,r,t.checkVertexDuplicates)}else if(t.model){const a=t.model.meshInstances;for(let l=0;l<a.length;l++)this.createAmmoMesh(a[l].mesh,a[l].node,s,null,t.checkVertexDuplicates);const n=new Ammo.btVector3(r.x,r.y,r.z);s.setLocalScaling(n),Ammo.destroy(n)}return s}}recreatePhysicalShapes(e){const t=e.data;if((t.renderAsset||t.asset)&&e.enabled&&e.entity.enabled){this.loadAsset(e,t.renderAsset||t.asset,t.renderAsset?"render":"model");return}this.doRecreatePhysicalShape(e)}loadAsset(e,t,s){const i=e.data,r=this.system.app.assets,a=i[s],n=c=>{i[s]===a&&(i[s]=c.resource,this.doRecreatePhysicalShape(e))},l=c=>{c.ready(d=>{if(d.data.containerAsset){const f=r.get(d.data.containerAsset);f.loaded?n(d):(f.ready(()=>{n(d)}),r.load(f))}else n(d)}),r.load(c)},h=r.get(t);h?l(h):r.once(`add:${t}`,l)}doRecreatePhysicalShape(e){const t=e.entity,s=e.data;s.model||s.render?(this.destroyShape(s),s.shape=this.createPhysicalShape(t,s),t.rigidbody?(t.rigidbody.disableSimulation(),t.rigidbody.createBody(),t.enabled&&t.rigidbody.enabled&&t.rigidbody.enableSimulation()):t.trigger?t.trigger.initialize(s):t.trigger=new eE(this.system.app,e,s)):(this.beforeRemove(t,e),this.remove(t,s))}updateTransform(e,t,s,i){if(e.shape){const a=e.entity.getWorldTransform().getScale(),n=e.shape.getLocalScaling();(a.x!==n.x()||a.y!==n.y()||a.z!==n.z())&&this.doRecreatePhysicalShape(e)}super.updateTransform(e,t,s,i)}destroyShape(e){if(!e.shape)return;const t=e.shape.getNumChildShapes();for(let s=0;s<t;s++){const i=e.shape.getChildShape(s);Ammo.destroy(i)}Ammo.destroy(e.shape),e.shape=null}}class PB extends Ca{createPhysicalShape(e,t){if(typeof Ammo<"u")return new Ammo.btCompoundShape}_addEachDescendant(e){!e.collision||e.rigidbody||(e.collision._compoundParent=this,e!==this.entity&&e.collision.system.recreatePhysicalShapes(e.collision))}_updateEachDescendant(e){e.collision&&e.collision._compoundParent===this&&(e.collision._compoundParent=null,e!==this.entity&&!e.rigidbody&&e.collision.system.recreatePhysicalShapes(e.collision))}_updateEachDescendantTransform(e){!e.collision||e.collision._compoundParent!==this.collision._compoundParent||this.collision.system.updateCompoundChildTransform(e,!1)}}class LB extends qe{constructor(e){super(e),this.id="collision",this.ComponentType=Dp,this.DataType=mB,this.schema=TB,this.implementations={},this._triMeshCache={},this.on("beforeremove",this.onBeforeRemove,this),this.on("remove",this.onRemove,this)}initializeComponentData(e,t,s){s=["type","halfExtents","radius","axis","height","convexHull","shape","model","asset","render","renderAsset","enabled","linearOffset","angularOffset","checkVertexDuplicates"];const i={};for(let n=0,l=s.length;n<l;n++){const h=s[n];i[h]=t[h]}let r;if(t.hasOwnProperty("asset")?(r=s.indexOf("model"),r!==-1&&s.splice(r,1),r=s.indexOf("render"),r!==-1&&s.splice(r,1)):t.hasOwnProperty("model")&&(r=s.indexOf("asset"),r!==-1&&s.splice(r,1)),i.type||(i.type=e.data.type),e.data.type=i.type,Array.isArray(i.halfExtents)&&(i.halfExtents=new x(i.halfExtents)),Array.isArray(i.linearOffset)&&(i.linearOffset=new x(i.linearOffset)),Array.isArray(i.angularOffset)){const n=i.angularOffset;n.length===3?i.angularOffset=new Q().setFromEulerAngles(n[0],n[1],n[2]):i.angularOffset=new Q(i.angularOffset)}const a=this._createImplementation(i.type);a.beforeInitialize(e,i),super.initializeComponentData(e,i,s),a.afterInitialize(e,i)}_createImplementation(e){if(this.implementations[e]===void 0){let t;switch(e){case"box":t=new xB(this);break;case"sphere":t=new EB(this);break;case"capsule":t=new AB(this);break;case"cylinder":t=new bB(this);break;case"cone":t=new wB(this);break;case"mesh":t=new CB(this);break;case"compound":t=new PB(this);break}this.implementations[e]=t}return this.implementations[e]}_getImplementation(e){return this.implementations[e.collision.data.type]}cloneComponent(e,t){return this._getImplementation(e).clone(e,t)}onBeforeRemove(e,t){this.implementations[t.data.type].beforeRemove(e,t),t.onBeforeRemove()}onRemove(e,t){this.implementations[t.type].remove(e,t)}updateCompoundChildTransform(e,t){const s=e.collision._compoundParent;if(s!==e.collision&&e.enabled&&e.collision.enabled&&(e._dirtyLocal||t)){const i=this._getNodeTransform(e,s.entity),r=s.getCompoundChildShapeIndex(e.collision.shape);r===null?s.shape.addChildShape(i,e.collision.data.shape):s.shape.updateChildTransform(r,i,!0),Ammo.destroy(i)}}_removeCompoundChild(e,t){if(e.shape.getNumChildShapes()!==0)if(e.shape.removeChildShape)e.shape.removeChildShape(t);else{const s=e.getCompoundChildShapeIndex(t);s!==null&&e.shape.removeChildShapeByIndex(s)}}onTransformChanged(e,t,s,i){this.implementations[e.data.type].updateTransform(e,t,s,i)}changeType(e,t,s){this.implementations[t].beforeRemove(e.entity,e),this.implementations[t].remove(e.entity,e.data),this._createImplementation(s).reset(e,e.data)}recreatePhysicalShapes(e){this.implementations[e.data.type].recreatePhysicalShapes(e)}_calculateNodeRelativeTransform(e,t){if(e===t){const s=e.getWorldTransform().getScale();Fh.setScale(s.x,s.y,s.z)}else this._calculateNodeRelativeTransform(e.parent,t),Fh.mul(e.getLocalTransform())}_getNodeScaling(e){const s=e.getWorldTransform().getScale();return new Ammo.btVector3(s.x,s.y,s.z)}_getNodeTransform(e,t){let s,i;t?(this._calculateNodeRelativeTransform(e,t),s=SB,i=Pr,Fh.getTranslation(s),i.setFromMat4(Fh)):(s=e.getPosition(),i=e.getRotation());const r=new Ammo.btQuaternion,a=new Ammo.btTransform;a.setIdentity();const n=a.getOrigin(),l=e.collision;if(l&&l._hasOffset){const h=l.data.linearOffset,c=l.data.angularOffset,d=yB;Pr.copy(i).transformVector(h,d),d.add(s),Pr.copy(i).mul(c),n.setValue(d.x,d.y,d.z),r.setValue(Pr.x,Pr.y,Pr.z,Pr.w)}else n.setValue(s.x,s.y,s.z),r.setValue(i.x,i.y,i.z,i.w);return a.setRotation(r),Ammo.destroy(r),a}destroy(){for(const e in this._triMeshCache)Ammo.destroy(this._triMeshCache[e]);this._triMeshCache=null,super.destroy()}}const kh=new q,IB=new Tt;class MB{constructor(e,t,s){this._entity=e,this._element=e.element,this.model=new Fi,this.node=new ze,this.model.graph=this.node,this.mesh=t,this.meshInstance=new Oe(this.mesh,s,this.node),this.meshInstance.name=`ImageElement: ${e.name}`,this.meshInstance.castShadow=!1,this.meshInstance.receiveShadow=!1,this._meshDirty=!1,this.model.meshInstances.push(this.meshInstance),this._entity.addChild(this.model.graph),this.model._entity=this._entity,this.unmaskMeshInstance=null}destroy(){this.setMaterial(null),this._element.removeModelFromLayers(this.model),this.model.destroy(),this.model=null,this.node=null,this.mesh=null,this.meshInstance?.destroy(),this.meshInstance=null,this.unmaskMeshInstance?.destroy(),this.unmaskMeshInstance=null,this._entity=null,this._element=null}setMesh(e){this.meshInstance&&(this.mesh=e,this.meshInstance.mesh=e,this.meshInstance.visible=!!e,this.unmaskMeshInstance&&(this.unmaskMeshInstance.mesh=e),this.forceUpdateAabb())}setMask(e){if(this.meshInstance){if(this._entity.enabled&&this._element.enabled&&this._element.removeModelFromLayers(this.model),e){this.unmaskMeshInstance=new Oe(this.mesh,this.meshInstance.material,this.node),this.unmaskMeshInstance.name=`Unmask: ${this._entity.name}`,this.unmaskMeshInstance.castShadow=!1,this.unmaskMeshInstance.receiveShadow=!1,this.unmaskMeshInstance.pick=!1,this.model.meshInstances.push(this.unmaskMeshInstance);for(const t in this.meshInstance.parameters)this.unmaskMeshInstance.setParameter(t,this.meshInstance.parameters[t].data)}else{const t=this.model.meshInstances.indexOf(this.unmaskMeshInstance);t>=0&&this.model.meshInstances.splice(t,1)}this._entity.enabled&&this._element.enabled&&this._element.addModelToLayers(this.model),e||(this.unmaskMeshInstance?.destroy(),this.unmaskMeshInstance=null)}}setMaterial(e){this.meshInstance&&(this.meshInstance.material=e,this.unmaskMeshInstance&&(this.unmaskMeshInstance.material=e))}setParameter(e,t){this.meshInstance&&(this.meshInstance.setParameter(e,t),this.unmaskMeshInstance&&this.unmaskMeshInstance.setParameter(e,t))}deleteParameter(e){this.meshInstance&&(this.meshInstance.deleteParameter(e),this.unmaskMeshInstance&&this.unmaskMeshInstance.deleteParameter(e))}setUnmaskDrawOrder(){if(!this.meshInstance)return;const e=function(t){let s;const i=t.children,r=i.length;if(r){for(let n=0;n<r;n++)i[n].element&&(s=i[n]);if(!s)return null;const a=e(s);return a||s}return null};if(this.unmaskMeshInstance){const t=e(this._entity);t&&t.element?this.unmaskMeshInstance.drawOrder=t.element.drawOrder+t.element.getMaskOffset():this.unmaskMeshInstance.drawOrder=this.meshInstance.drawOrder+this._element.getMaskOffset()}}setDrawOrder(e){this.meshInstance&&(this.meshInstance.drawOrder=e)}setCull(e){if(!this.meshInstance)return;const t=this._element;let s=null;e&&t._isScreenSpace()&&(s=function(i){return t.isVisibleForCamera(i)}),this.meshInstance.cull=e,this.meshInstance.isVisibleFunc=s,this.unmaskMeshInstance&&(this.unmaskMeshInstance.cull=e,this.unmaskMeshInstance.isVisibleFunc=s)}setScreenSpace(e){this.meshInstance&&(this.meshInstance.screenSpace=e,this.unmaskMeshInstance&&(this.unmaskMeshInstance.screenSpace=e))}setLayer(e){this.meshInstance&&(this.meshInstance.layer=e,this.unmaskMeshInstance&&(this.unmaskMeshInstance.layer=e))}forceUpdateAabb(e){this.meshInstance&&(this.meshInstance._aabbVer=-1,this.unmaskMeshInstance&&(this.unmaskMeshInstance._aabbVer=-1))}setAabbFunc(e){this.meshInstance&&(this.meshInstance._updateAabbFunc=e,this.unmaskMeshInstance&&(this.unmaskMeshInstance._updateAabbFunc=e))}}class DB{constructor(e){this._evtSetMeshes=null,this._element=e,this._entity=e.entity,this._system=e.system,this._textureAsset=null,this._texture=null,this._materialAsset=null,this._material=null,this._spriteAsset=null,this._sprite=null,this._spriteFrame=0,this._pixelsPerUnit=null,this._targetAspectRatio=-1,this._rect=new K(0,0,1,1),this._mask=!1,this._maskRef=0,this._outerScale=new z,this._outerScaleUniform=new Float32Array(2),this._innerOffset=new K,this._innerOffsetUniform=new Float32Array(4),this._atlasRect=new K,this._atlasRectUniform=new Float32Array(4),this._defaultMesh=this._createMesh(),this._renderable=new MB(this._entity,this._defaultMesh,this._material),this._color=new q(1,1,1,1),this._colorUniform=new Float32Array([1,1,1]),this._updateRenderableEmissive(),this._renderable.setParameter("material_opacity",1),this._updateAabbFunc=this._updateAabb.bind(this),this._onScreenChange(this._element.screen),this._element.on("resize",this._onParentResizeOrPivotChange,this),this._element.on("set:pivot",this._onParentResizeOrPivotChange,this),this._element.on("screen:set:screenspace",this._onScreenSpaceChange,this),this._element.on("set:screen",this._onScreenChange,this),this._element.on("set:draworder",this._onDrawOrderChange,this),this._element.on("screen:set:resolution",this._onResolutionChange,this)}destroy(){this.textureAsset=null,this.spriteAsset=null,this.materialAsset=null,this._renderable.setMesh(this._defaultMesh),this._renderable.destroy(),this._defaultMesh=null,this._element.off("resize",this._onParentResizeOrPivotChange,this),this._element.off("set:pivot",this._onParentResizeOrPivotChange,this),this._element.off("screen:set:screenspace",this._onScreenSpaceChange,this),this._element.off("set:screen",this._onScreenChange,this),this._element.off("set:draworder",this._onDrawOrderChange,this),this._element.off("screen:set:resolution",this._onResolutionChange,this)}_onResolutionChange(e){}_onParentResizeOrPivotChange(){this._renderable.mesh&&this._updateMesh(this._renderable.mesh)}_onScreenSpaceChange(e){this._updateMaterial(e)}_onScreenChange(e,t){e?this._updateMaterial(e.screen.screenSpace):this._updateMaterial(!1)}_onDrawOrderChange(e){this._renderable.setDrawOrder(e),this.mask&&this._element.screen&&this._element.screen.screen.once("syncdraworder",function(){this._renderable.setUnmaskDrawOrder()},this)}_hasUserMaterial(){return!!this._materialAsset||!!this._material&&this._system.defaultImageMaterials.indexOf(this._material)===-1}_use9Slicing(){return this.sprite&&(this.sprite.renderMode===it||this.sprite.renderMode===rt)}_updateMaterial(e){const t=!!this._mask,s=!!(this.sprite&&this.sprite.renderMode===it),i=!!(this.sprite&&this.sprite.renderMode===rt);this._hasUserMaterial()||(this._material=this._system.getImageElementMaterial(e,t,s,i)),this._renderable&&(this._renderable.setCull(!this._element._isScreenSpace()||this._element._isScreenCulled()),this._renderable.setMaterial(this._material),this._renderable.setScreenSpace(e),this._renderable.setLayer(e?_M:ZT))}_createMesh(){const e=this._element,t=e.calculatedWidth,s=e.calculatedHeight,i=this._rect,r=this._system.app.graphicsDevice,a=new Float32Array([t,0,0,0,0,1,i.x+i.z,1-i.y,t,s,0,0,0,1,i.x+i.z,1-(i.y+i.w),0,0,0,0,0,1,i.x,1-i.y,0,s,0,0,0,1,i.x,1-(i.y+i.w)]),n=IB.get(r,()=>new Wt(r,[{semantic:ue,components:3,type:Le},{semantic:Ht,components:3,type:Le},{semantic:as,components:2,type:Le}])),l=new si(r,n,4,{data:a.buffer}),h=new De(r);return h.vertexBuffer=l,h.primitive[0].type=dr,h.primitive[0].base=0,h.primitive[0].count=4,h.primitive[0].indexed=!1,h.aabb.setMinMax(x.ZERO,new x(t,s,0)),this._updateMesh(h),h}_updateMesh(e){const t=this._element;let s=t.calculatedWidth,i=t.calculatedHeight;if(t.fitMode!==lc&&this._targetAspectRatio>0){const a=t.calculatedWidth/t.calculatedHeight;t.fitMode===dB&&a>this._targetAspectRatio||t.fitMode===fB&&a<this._targetAspectRatio?s=t.calculatedHeight*this._targetAspectRatio:i=t.calculatedWidth/this._targetAspectRatio}const r=t._isScreenSpace();if(this._updateMaterial(r),this._renderable&&this._renderable.forceUpdateAabb(),this.sprite&&(this.sprite.renderMode===it||this.sprite.renderMode===rt)){const a=this._sprite.atlas.frames[this._sprite.frameKeys[this._spriteFrame]],n=2/a.rect.z,l=2/a.rect.w;this._innerOffset.set(a.border.x*n,a.border.y*l,a.border.z*n,a.border.w*l);const h=this.sprite.atlas.texture;this._atlasRect.set(a.rect.x/h.width,a.rect.y/h.height,a.rect.z/h.width,a.rect.w/h.height);const c=this._pixelsPerUnit!==null?this._pixelsPerUnit:this.sprite.pixelsPerUnit,d=a.rect.z/c,f=a.rect.w/c;this._outerScale.set(Math.max(s,this._innerOffset.x*d),Math.max(i,this._innerOffset.y*f));let u=d,p=f;this._outerScale.x/=d,this._outerScale.y/=f,u*=B.clamp(s/(this._innerOffset.x*d),1e-4,1),p*=B.clamp(i/(this._innerOffset.y*f),1e-4,1),this._renderable&&(this._innerOffsetUniform[0]=this._innerOffset.x,this._innerOffsetUniform[1]=this._innerOffset.y,this._innerOffsetUniform[2]=this._innerOffset.z,this._innerOffsetUniform[3]=this._innerOffset.w,this._renderable.setParameter("innerOffset",this._innerOffsetUniform),this._atlasRectUniform[0]=this._atlasRect.x,this._atlasRectUniform[1]=this._atlasRect.y,this._atlasRectUniform[2]=this._atlasRect.z,this._atlasRectUniform[3]=this._atlasRect.w,this._renderable.setParameter("atlasRect",this._atlasRectUniform),this._outerScaleUniform[0]=this._outerScale.x,this._outerScaleUniform[1]=this._outerScale.y,this._renderable.setParameter("outerScale",this._outerScaleUniform),this._renderable.setAabbFunc(this._updateAabbFunc),this._renderable.node.setLocalScale(u,p,1),this._renderable.node.setLocalPosition((.5-t.pivot.x)*s,(.5-t.pivot.y)*i,0))}else{const a=e.vertexBuffer,n=new Float32Array(a.lock()),l=t.pivot.x,h=t.pivot.y;n[0]=s-l*s,n[1]=0-h*i,n[8]=s-l*s,n[9]=i-h*i,n[16]=0-l*s,n[17]=0-h*i,n[24]=0-l*s,n[25]=i-h*i;let c=1,d=1,f=this._rect;if(this._sprite&&this._sprite.frameKeys[this._spriteFrame]&&this._sprite.atlas){const m=this._sprite.atlas.frames[this._sprite.frameKeys[this._spriteFrame]];m&&(f=m.rect,c=this._sprite.atlas.texture.width,d=this._sprite.atlas.texture.height)}n[6]=(f.x+f.z)/c,n[7]=1-f.y/d,n[14]=(f.x+f.z)/c,n[15]=1-(f.y+f.w)/d,n[22]=f.x/c,n[23]=1-f.y/d,n[30]=f.x/c,n[31]=1-(f.y+f.w)/d,a.unlock();const u=new x(0-l*s,0-h*i,0),p=new x(s-l*s,i-h*i,0);e.aabb.setMinMax(u,p),this._renderable&&(this._renderable.node.setLocalScale(1,1,1),this._renderable.node.setLocalPosition(0,0,0),this._renderable.setAabbFunc(null))}this._meshDirty=!1}_updateSprite(){let e=!1,t=null;if(this._targetAspectRatio=-1,this._sprite&&this._sprite.atlas){t=this._sprite.meshes[this.spriteFrame],e=this._sprite.renderMode===it||this._sprite.renderMode===rt;const s=this._sprite.atlas.frames[this._sprite.frameKeys[this._spriteFrame]];s?.rect.w>0&&(this._targetAspectRatio=s.rect.z/s.rect.w)}this.mesh=e?t:this._defaultMesh,this.refreshMesh()}refreshMesh(){this.mesh&&(this._element._beingInitialized?this._meshDirty=!0:this._updateMesh(this.mesh))}_updateAabb(e){return e.center.set(0,0,0),e.halfExtents.set(this._outerScale.x*.5,this._outerScale.y*.5,.001),e.setFromTransformedAabb(e,this._renderable.node.getWorldTransform()),e}_toggleMask(){this._element._dirtifyMask();const e=this._element._isScreenSpace();this._updateMaterial(e),this._renderable.setMask(!!this._mask)}_onMaterialLoad(e){this.material=e.resource}_onMaterialAdded(e){this._system.app.assets.off(`add:${e.id}`,this._onMaterialAdded,this),this._materialAsset===e.id&&this._bindMaterialAsset(e)}_bindMaterialAsset(e){this._entity.enabled&&(e.on("load",this._onMaterialLoad,this),e.on("change",this._onMaterialChange,this),e.on("remove",this._onMaterialRemove,this),e.resource?this._onMaterialLoad(e):this._system.app.assets.load(e))}_unbindMaterialAsset(e){e.off("load",this._onMaterialLoad,this),e.off("change",this._onMaterialChange,this),e.off("remove",this._onMaterialRemove,this)}_onMaterialChange(){}_onMaterialRemove(){}_onTextureAdded(e){this._system.app.assets.off(`add:${e.id}`,this._onTextureAdded,this),this._textureAsset===e.id&&this._bindTextureAsset(e)}_bindTextureAsset(e){this._entity.enabled&&(e.on("load",this._onTextureLoad,this),e.on("change",this._onTextureChange,this),e.on("remove",this._onTextureRemove,this),e.resource?this._onTextureLoad(e):this._system.app.assets.load(e))}_unbindTextureAsset(e){e.off("load",this._onTextureLoad,this),e.off("change",this._onTextureChange,this),e.off("remove",this._onTextureRemove,this)}_onTextureLoad(e){this.texture=e.resource}_onTextureChange(e){}_onTextureRemove(e){}_onSpriteAssetAdded(e){this._system.app.assets.off(`add:${e.id}`,this._onSpriteAssetAdded,this),this._spriteAsset===e.id&&this._bindSpriteAsset(e)}_bindSpriteAsset(e){this._entity.enabled&&(e.on("load",this._onSpriteAssetLoad,this),e.on("change",this._onSpriteAssetChange,this),e.on("remove",this._onSpriteAssetRemove,this),e.resource?this._onSpriteAssetLoad(e):this._system.app.assets.load(e))}_unbindSpriteAsset(e){e.off("load",this._onSpriteAssetLoad,this),e.off("change",this._onSpriteAssetChange,this),e.off("remove",this._onSpriteAssetRemove,this),e.data.textureAtlasAsset&&this._system.app.assets.off(`load:${e.data.textureAtlasAsset}`,this._onTextureAtlasLoad,this)}_onSpriteAssetLoad(e){if(!e||!e.resource)this.sprite=null;else if(e.resource.atlas)this.sprite=e.resource;else{const t=e.data.textureAtlasAsset;if(t){const s=this._system.app.assets;s.off(`load:${t}`,this._onTextureAtlasLoad,this),s.once(`load:${t}`,this._onTextureAtlasLoad,this)}}}_onSpriteAssetChange(e){this._onSpriteAssetLoad(e)}_onSpriteAssetRemove(e){}_bindSprite(e){this._evtSetMeshes=e.on("set:meshes",this._onSpriteMeshesChange,this),e.on("set:pixelsPerUnit",this._onSpritePpuChange,this),e.on("set:atlas",this._onAtlasTextureChange,this),e.atlas&&e.atlas.on("set:texture",this._onAtlasTextureChange,this)}_unbindSprite(e){this._evtSetMeshes?.off(),this._evtSetMeshes=null,e.off("set:pixelsPerUnit",this._onSpritePpuChange,this),e.off("set:atlas",this._onAtlasTextureChange,this),e.atlas&&e.atlas.off("set:texture",this._onAtlasTextureChange,this)}_onSpriteMeshesChange(){this._sprite&&(this._spriteFrame=B.clamp(this._spriteFrame,0,this._sprite.frameKeys.length-1)),this._updateSprite()}_onSpritePpuChange(){this.sprite.renderMode!==Ws&&this._pixelsPerUnit===null&&this._updateSprite()}_onAtlasTextureChange(){this.sprite&&this.sprite.atlas&&this.sprite.atlas.texture?(this._renderable.setParameter("texture_emissiveMap",this._sprite.atlas.texture),this._renderable.setParameter("texture_opacityMap",this._sprite.atlas.texture)):(this._renderable.deleteParameter("texture_emissiveMap"),this._renderable.deleteParameter("texture_opacityMap"))}_onTextureAtlasLoad(e){const t=this._spriteAsset;t instanceof ie?this._onSpriteAssetLoad(t):this._onSpriteAssetLoad(this._system.app.assets.get(t))}onEnable(){if(this._materialAsset){const e=this._system.app.assets.get(this._materialAsset);e&&e.resource!==this._material&&this._bindMaterialAsset(e)}if(this._textureAsset){const e=this._system.app.assets.get(this._textureAsset);e&&e.resource!==this._texture&&this._bindTextureAsset(e)}if(this._spriteAsset){const e=this._system.app.assets.get(this._spriteAsset);e&&e.resource!==this._sprite&&this._bindSpriteAsset(e)}this._element.addModelToLayers(this._renderable.model)}onDisable(){this._element.removeModelFromLayers(this._renderable.model)}_setStencil(e){this._renderable.meshInstance.stencilFront=e,this._renderable.meshInstance.stencilBack=e;let t=0;if(this._element.maskedBy&&(t=this._element.maskedBy.element._image._maskRef),this._renderable.unmaskMeshInstance){const s=new Ys({ref:t+1,func:xc,zpass:wL});this._renderable.unmaskMeshInstance.stencilFront=s,this._renderable.unmaskMeshInstance.stencilBack=s}}_updateRenderableEmissive(){kh.linear(this._color),this._colorUniform[0]=kh.r,this._colorUniform[1]=kh.g,this._colorUniform[2]=kh.b,this._renderable.setParameter("material_emissive",this._colorUniform)}set color(e){const{r:t,g:s,b:i}=e;(this._color.r!==t||this._color.g!==s||this._color.b!==i)&&(this._color.r=t,this._color.g=s,this._color.b=i,this._updateRenderableEmissive()),this._element&&this._element.fire("set:color",this._color)}get color(){return this._color}set opacity(e){e!==this._color.a&&(this._color.a=e,this._renderable.setParameter("material_opacity",e)),this._element&&this._element.fire("set:opacity",e)}get opacity(){return this._color.a}set rect(e){let t,s,i,r;e instanceof K?(t=e.x,s=e.y,i=e.z,r=e.w):(t=e[0],s=e[1],i=e[2],r=e[3]),!(t===this._rect.x&&s===this._rect.y&&i===this._rect.z&&r===this._rect.w)&&(this._rect.set(t,s,i,r),this._renderable.mesh&&(this._element._beingInitialized?this._meshDirty=!0:this._updateMesh(this._renderable.mesh)))}get rect(){return this._rect}_removeMaterialAssetEvents(){if(this._materialAsset){const e=this._system.app.assets;e.off(`add:${this._materialAsset}`,this._onMaterialAdded,this);const t=e.get(this._materialAsset);t&&(t.off("load",this._onMaterialLoad,this),t.off("change",this._onMaterialChange,this),t.off("remove",this._onMaterialRemove,this))}}set material(e){if(this._material!==e){if(!e){const t=this._element._isScreenSpace();this.mask?e=t?this._system.defaultScreenSpaceImageMaskMaterial:this._system.defaultImageMaskMaterial:e=t?this._system.defaultScreenSpaceImageMaterial:this._system.defaultImageMaterial}if(this._material=e,this._materialAsset){const t=this._system.app.assets.get(this._materialAsset);(!t||t.resource!==e)&&(this._removeMaterialAssetEvents(),this._materialAsset=null)}e&&(this._renderable.setMaterial(e),this._hasUserMaterial()?(this._renderable.deleteParameter("material_opacity"),this._renderable.deleteParameter("material_emissive")):(this._updateRenderableEmissive(),this._renderable.setParameter("material_opacity",this._color.a)))}}get material(){return this._material}set materialAsset(e){const t=this._system.app.assets;let s=e;if(e instanceof ie&&(s=e.id),this._materialAsset!==s)if(this._removeMaterialAssetEvents(),this._materialAsset=s,this._materialAsset){const i=t.get(this._materialAsset);i?this._bindMaterialAsset(i):(this._materialAsset=null,this.material=null,this._materialAsset=s,t.on(`add:${this._materialAsset}`,this._onMaterialAdded,this))}else this._materialAsset=null,this.material=null,this._materialAsset=s}get materialAsset(){return this._materialAsset}set texture(e){if(this._texture!==e){if(this._textureAsset){const t=this._system.app.assets.get(this._textureAsset);t&&t.resource!==e&&(this.textureAsset=null)}if(this._texture=e,e){this._spriteAsset&&(this.spriteAsset=null),this._renderable.setParameter("texture_emissiveMap",this._texture),this._renderable.setParameter("texture_opacityMap",this._texture),this._updateRenderableEmissive(),this._renderable.setParameter("material_opacity",this._color.a);const t=this._texture.width/this._texture.height;t!==this._targetAspectRatio&&(this._targetAspectRatio=t,this._element.fitMode!==lc&&this.refreshMesh())}else this._renderable.deleteParameter("texture_emissiveMap"),this._renderable.deleteParameter("texture_opacityMap"),this._targetAspectRatio=-1,this._element.fitMode!==lc&&this.refreshMesh()}}get texture(){return this._texture}set textureAsset(e){const t=this._system.app.assets;let s=e;if(e instanceof ie&&(s=e.id),this._textureAsset!==s){if(this._textureAsset){t.off(`add:${this._textureAsset}`,this._onTextureAdded,this);const i=t.get(this._textureAsset);i&&(i.off("load",this._onTextureLoad,this),i.off("change",this._onTextureChange,this),i.off("remove",this._onTextureRemove,this))}if(this._textureAsset=s,this._textureAsset){const i=t.get(this._textureAsset);i?this._bindTextureAsset(i):(this.texture=null,t.on(`add:${this._textureAsset}`,this._onTextureAdded,this))}else this.texture=null}}get textureAsset(){return this._textureAsset}set spriteAsset(e){const t=this._system.app.assets;let s=e;if(e instanceof ie&&(s=e.id),this._spriteAsset!==s){if(this._spriteAsset){t.off(`add:${this._spriteAsset}`,this._onSpriteAssetAdded,this);const i=t.get(this._spriteAsset);i&&this._unbindSpriteAsset(i)}if(this._spriteAsset=s,this._spriteAsset){const i=t.get(this._spriteAsset);i?this._bindSpriteAsset(i):(this.sprite=null,t.on(`add:${this._spriteAsset}`,this._onSpriteAssetAdded,this))}else this.sprite=null}this._element&&this._element.fire("set:spriteAsset",s)}get spriteAsset(){return this._spriteAsset}set sprite(e){if(this._sprite!==e){if(this._sprite&&this._unbindSprite(this._sprite),this._spriteAsset){const t=this._system.app.assets.get(this._spriteAsset);t&&t.resource!==e&&(this.spriteAsset=null)}this._sprite=e,this._sprite&&(this._bindSprite(this._sprite),this._textureAsset&&(this.textureAsset=null)),this._sprite&&this._sprite.atlas&&this._sprite.atlas.texture?(this._renderable.setParameter("texture_emissiveMap",this._sprite.atlas.texture),this._renderable.setParameter("texture_opacityMap",this._sprite.atlas.texture)):(this._renderable.deleteParameter("texture_emissiveMap"),this._renderable.deleteParameter("texture_opacityMap")),this._sprite&&(this._spriteFrame=B.clamp(this._spriteFrame,0,this._sprite.frameKeys.length-1)),this._updateSprite()}}get sprite(){return this._sprite}set spriteFrame(e){const t=this._spriteFrame;this._sprite?this._spriteFrame=B.clamp(e,0,this._sprite.frameKeys.length-1):this._spriteFrame=e,this._spriteFrame!==t&&this._updateSprite(),this._element&&this._element.fire("set:spriteFrame",e)}get spriteFrame(){return this._spriteFrame}set mesh(e){this._renderable.setMesh(e),this._defaultMesh===e?this._renderable.setAabbFunc(null):this._renderable.setAabbFunc(this._updateAabbFunc)}get mesh(){return this._renderable.mesh}set mask(e){this._mask!==e&&(this._mask=e,this._toggleMask())}get mask(){return this._mask}set pixelsPerUnit(e){this._pixelsPerUnit!==e&&(this._pixelsPerUnit=e,this._sprite&&(this._sprite.renderMode===it||this._sprite.renderMode===rt)&&this._updateSprite())}get pixelsPerUnit(){return this._pixelsPerUnit}get aabb(){return this._renderable.meshInstance?this._renderable.meshInstance.aabb:null}}class RB extends ne{constructor(e){super(),this._app=e,e.i18n.on(xa.EVENT_CHANGE,this._onSetLocale,this),this._autoLoad=!1,this._disableLocalization=!1,this._defaultAsset=null,this._localizedAsset=null}set defaultAsset(e){const t=e instanceof ie?e.id:e;this._defaultAsset!==t&&(this._defaultAsset&&this._unbindDefaultAsset(),this._defaultAsset=t,this._defaultAsset&&this._bindDefaultAsset(),this._onSetLocale(this._app.i18n.locale))}get defaultAsset(){return this._defaultAsset}set localizedAsset(e){const t=e instanceof ie?e.id:e;this._localizedAsset!==t&&(this._localizedAsset&&(this._app.assets.off(`add:${this._localizedAsset}`,this._onLocalizedAssetAdd,this),this._unbindLocalizedAsset()),this._localizedAsset=t,this._localizedAsset&&(this._app.assets.get(this._localizedAsset)?this._bindLocalizedAsset():this._app.assets.once(`add:${this._localizedAsset}`,this._onLocalizedAssetAdd,this)))}get localizedAsset(){return this._localizedAsset}set autoLoad(e){this._autoLoad!==e&&(this._autoLoad=e,this._autoLoad&&this._localizedAsset&&(this._unbindLocalizedAsset(),this._bindLocalizedAsset()))}get autoLoad(){return this._autoLoad}set disableLocalization(e){this._disableLocalization!==e&&(this._disableLocalization=e,this._onSetLocale(this._app.i18n.locale))}get disableLocalization(){return this._disableLocalization}_bindDefaultAsset(){const e=this._app.assets.get(this._defaultAsset);e?this._onDefaultAssetAdd(e):this._app.assets.once(`add:${this._defaultAsset}`,this._onDefaultAssetAdd,this)}_unbindDefaultAsset(){if(!this._defaultAsset)return;this._app.assets.off(`add:${this._defaultAsset}`,this._onDefaultAssetAdd,this);const e=this._app.assets.get(this._defaultAsset);e&&(e.off("add:localized",this._onLocaleAdd,this),e.off("remove:localized",this._onLocaleRemove,this),e.off("remove",this._onDefaultAssetRemove,this))}_onDefaultAssetAdd(e){this._defaultAsset===e.id&&(e.on("add:localized",this._onLocaleAdd,this),e.on("remove:localized",this._onLocaleRemove,this),e.once("remove",this._onDefaultAssetRemove,this))}_onDefaultAssetRemove(e){this._defaultAsset===e.id&&(e.off("add:localized",this._onLocaleAdd,this),e.off("remove:localized",this._onLocaleAdd,this),this._app.assets.once(`add:${this._defaultAsset}`,this._onDefaultAssetAdd,this))}_bindLocalizedAsset(){if(!this._autoLoad)return;const e=this._app.assets.get(this._localizedAsset);e&&(e.on("load",this._onLocalizedAssetLoad,this),e.on("change",this._onLocalizedAssetChange,this),e.on("remove",this._onLocalizedAssetRemove,this),e.resource?this._onLocalizedAssetLoad(e):this._app.assets.load(e))}_unbindLocalizedAsset(){const e=this._app.assets.get(this._localizedAsset);e&&(e.off("load",this._onLocalizedAssetLoad,this),e.off("change",this._onLocalizedAssetChange,this),e.off("remove",this._onLocalizedAssetRemove,this))}_onLocalizedAssetAdd(e){this._localizedAsset===e.id&&this._bindLocalizedAsset()}_onLocalizedAssetLoad(e){this.fire("load",e)}_onLocalizedAssetChange(e,t,s,i){this.fire("change",e,t,s,i)}_onLocalizedAssetRemove(e){this._localizedAsset===e.id&&(this.localizedAsset=this._defaultAsset),this.fire("remove",e)}_onLocaleAdd(e,t){this._app.i18n.locale===e&&this._onSetLocale(e)}_onLocaleRemove(e,t){this._app.i18n.locale===e&&this._onSetLocale(e)}_onSetLocale(e){if(!this._defaultAsset){this.localizedAsset=null;return}const t=this._app.assets.get(this._defaultAsset);if(!t||this._disableLocalization){this.localizedAsset=this._defaultAsset;return}const s=t.getLocalizedAssetId(e);if(!s){this.localizedAsset=this._defaultAsset;return}this.localizedAsset=s}destroy(){this.defaultAsset=null,this._app.i18n.off(xa.EVENT_CHANGE,this._onSetLocale,this),this.off()}}const Gc="msdf",OB="bitmap",Go=0,dn=1,Np=2,tE=3,Fp=4,kp=5,Up=6,Bp=7,oy=8,NB=` 	
\r\v\f`,FB=/[\w|/]/;class kB{constructor(e){this._symbols=e,this._index=0,this._last=0,this._cur=this._symbols.length>0?this._symbols[0]:null,this._buf=[],this._mode="text",this._error=null}read(){let e=this._read();for(;e===oy;)e=this._read();return e!==Go&&e!==dn&&(this._last=this._index),e}buf(){return this._buf}last(){return this._last}error(){return this._error}debugPrint(){const e=["EOF","ERROR","TEXT","OPEN_BRACKET","CLOSE_BRACKET","EQUALS","STRING","IDENTIFIER","WHITESPACE"];let t=this.read(),s="";for(;s+=`${(s.length>0?`
`:"")+e[t]} '${this.buf().join("")}'`,!(t===Go||t===dn);)t=this.read();return s}_read(){return this._buf=[],this._eof()?Go:this._mode==="text"?this._text():this._tag()}_text(){for(;;)switch(this._cur){case null:return this._buf.length>0?Np:Go;case"[":return this._mode="tag",this._buf.length>0?Np:this._tag();case"\\":switch(this._next(),this._cur){case"[":this._store();break;default:this._output("\\");break}break;default:this._store();break}}_tag(){switch(this._cur){case null:return this._error="unexpected end of input reading tag",dn;case"[":return this._store(),tE;case"]":return this._store(),this._mode="text",Fp;case"=":return this._store(),kp;case" ":case"	":case`
`:case"\r":case"\v":case"\f":return this._whitespace();case'"':return this._string();default:return this._isIdentifierSymbol(this._cur)?this._identifier():(this._error="unrecognized character",dn)}}_whitespace(){for(this._store();NB.indexOf(this._cur)!==-1;)this._store();return oy}_string(){for(this._next();;)switch(this._cur){case null:return this._error="unexpected end of input reading string",dn;case'"':return this._next(),Up;default:this._store();break}}_identifier(){for(this._store();this._cur!==null&&this._isIdentifierSymbol(this._cur);)this._store();return Bp}_isIdentifierSymbol(e){return e.length===1&&e.match(FB)!==null}_eof(){return this._cur===null}_next(){return this._eof()||(this._index++,this._cur=this._index<this._symbols.length?this._symbols[this._index]:null),this._cur}_store(){return this._buf.push(this._cur),this._next()}_output(e){this._buf.push(e)}}class UB{constructor(e){this._scanner=new kB(e),this._error=null}parse(e,t){for(;;)switch(this._scanner.read()){case Go:return!0;case dn:return!1;case Np:Array.prototype.push.apply(e,this._scanner.buf());break;case tE:if(!this._parseTag(e,t))return!1;break;default:return!1}}error(){return`Error evaluating markup at #${this._scanner.last().toString()} (${this._scanner.error()||this._error})`}_parseTag(e,t){let s=this._scanner.read();if(s!==Bp)return this._error="expected identifier",!1;const i=this._scanner.buf().join("");if(i[0]==="/"){for(let a=t.length-1;a>=0;--a)if(i===`/${t[a].name}`&&t[a].end===null)return t[a].end=e.length,s=this._scanner.read(),s!==Fp?(this._error="expected close bracket",!1):!0;return this._error="failed to find matching tag",!1}const r={name:i,value:null,attributes:{},start:e.length,end:null};if(s=this._scanner.read(),s===kp){if(s=this._scanner.read(),s!==Up)return this._error="expected string",!1;r.value=this._scanner.buf().join(""),s=this._scanner.read()}for(;;){switch(s){case Fp:return t.push(r),!0;case Bp:{const a=this._scanner.buf().join("");if(s=this._scanner.read(),s!==kp)return this._error="expected equals",!1;if(s=this._scanner.read(),s!==Up)return this._error="expected string",!1;const n=this._scanner.buf().join("");r.attributes[a]=n;break}default:return this._error="expected close bracket or identifier",!1}s=this._scanner.read()}}}function sE(o,e){for(const t in e){if(!e.hasOwnProperty(t))continue;const s=e[t];s instanceof Object?(o.hasOwnProperty(t)||(o[t]={}),sE(o[t],e[t])):o[t]=s}}function BB(o){if(o.length===0)return null;const e={};for(let t=0;t<o.length;++t){const s=o[t],i={};i[s.name]={value:s.value,attributes:s.attributes},sE(e,i)}return e}function VB(o,e){if(o.length===0)return null;const t={};for(let c=0;c<o.length;++c){const d=o[c];t.hasOwnProperty(d.start)?t[d.start].open===null?t[d.start].open=[d]:t[d.start].open.push(d):t[d.start]={open:[d],close:null},t.hasOwnProperty(d.end)?t[d.end].close===null?t[d.end].close=[d]:t[d.end].close.push(d):t[d.end]={open:null,close:[d]}}let s=[];function i(c){s=s.filter(d=>c.find(f=>f===d)===void 0)}function r(c){for(let d=0;d<c.length;++d)s.push(c[d])}const a=Object.keys(t).sort((c,d)=>c-d),n=[];for(let c=0;c<a.length;++c){const d=t[a[c]];d.close!==null&&i(d.close),d.open!==null&&r(d.open),n.push({start:a[c],tags:BB(s)})}const l=[];let h=null;for(let c=0;c<n.length;++c){const d=n[c];for(;l.length<d.start;)l.push(h?h.tags:null);h=d}for(;l.length<e;)l.push(null);return l}function zB(o){const e=new UB(o),t=[],s=[];if(!e.parse(t,s))return console.warn(e.error()),{symbols:o,tags:null};const i=s.find(a=>a.end===null);if(i)return console.warn(`Markup error: found unclosed tag='${i.name}'`),{symbols:o,tags:null};const r=VB(s,t.length);return{symbols:t,tags:r}}class HB{static evaluate(e){return zB(e)}}class GB{constructor(){this.count=0,this.quad=0,this.lines={},this.positions=[],this.normals=[],this.uvs=[],this.colors=[],this.indices=[],this.outlines=[],this.shadows=[],this.meshInstance=null}}function WB(o,e){const t=new De(o);return t.setPositions(e.positions),t.setNormals(e.normals),t.setColors32(e.colors),t.setUvs(0,e.uvs),t.setIndices(e.indices),t.setVertexStream(cl,e.outlines,3,void 0,Le,!1),t.setVertexStream(dl,e.shadows,3,void 0,Le,!1),t.update(),t}const ly=/^[\r\n]$/,$B=/^[ \t]$/,hy=/^[ \t\-]|\u200b$/,XB=/^[a-z0-9]$/i,cy=/^[\u1100-\u11ff]|[\u3000-\u9fff\ua960-\ua97f]|[\uac00-\ud7ff]$/,qB=/^[〕〉》」』】〙〗〟ヽヾーァィゥェォッャュョヮヵヶぁぃぅぇぉっゃゅょゎゕゖㇰㇱㇲㇳㇴㇵㇶㇷㇸㇹㇺㇻㇼㇽㇾㇿ々〻]$/,YB=["​","؜","‎","‏","‪","‫","‬","‭","‮","⁦","⁧","⁨","⁩"],jB={width:0,height:0,xadvance:0,xoffset:0,yoffset:0},dy=new q,KB=new z,be=new q;class ZB{constructor(e){this._element=e,this._system=e.system,this._entity=e.entity,this._text="",this._symbols=[],this._colorPalette=[],this._outlinePalette=[],this._shadowPalette=[],this._symbolColors=null,this._symbolOutlineParams=null,this._symbolShadowParams=null,this._i18nKey=null,this._fontAsset=new RB(this._system.app),this._fontAsset.disableLocalization=!0,this._fontAsset.on("load",this._onFontLoad,this),this._fontAsset.on("change",this._onFontChange,this),this._fontAsset.on("remove",this._onFontRemove,this),this._font=null,this._color=new q(1,1,1,1),this._colorUniform=new Float32Array(3),this._spacing=1,this._fontSize=32,this._fontMinY=0,this._fontMaxY=0,this._originalFontSize=32,this._maxFontSize=32,this._minFontSize=8,this._autoFitWidth=!1,this._autoFitHeight=!1,this._maxLines=-1,this._lineHeight=32,this._scaledLineHeight=32,this._wrapLines=!1,this._drawOrder=0,this._alignment=new z(.5,.5),this._autoWidth=!0,this._autoHeight=!0,this.width=0,this.height=0,this._node=new ze,this._model=new Fi,this._model.graph=this._node,this._entity.addChild(this._node),this._meshInfo=[],this._material=null,this._aabbDirty=!0,this._aabb=new fe,this._noResize=!1,this._currentMaterialType=null,this._maskedMaterialSrc=null,this._rtlReorder=!1,this._unicodeConverter=!1,this._rtl=!1,this._outlineColor=new q(0,0,0,1),this._outlineColorUniform=new Float32Array(4),this._outlineThicknessScale=.2,this._outlineThickness=0,this._shadowColor=new q(0,0,0,1),this._shadowColorUniform=new Float32Array(4),this._shadowOffsetScale=.005,this._shadowOffset=new z(0,0),this._shadowOffsetUniform=new Float32Array(2),this._enableMarkup=!1,this._onScreenChange(this._element.screen),e.on("resize",this._onParentResize,this),e.on("set:screen",this._onScreenChange,this),e.on("screen:set:screenspace",this._onScreenSpaceChange,this),e.on("set:draworder",this._onDrawOrderChange,this),e.on("set:pivot",this._onPivotChange,this),this._system.app.i18n.on(xa.EVENT_CHANGE,this._onLocaleSet,this),this._system.app.i18n.on("data:add",this._onLocalizationData,this),this._system.app.i18n.on("data:remove",this._onLocalizationData,this),this._rangeStart=0,this._rangeEnd=0}destroy(){this._setMaterial(null),this._model&&(this._element.removeModelFromLayers(this._model),this._model.destroy(),this._model=null),this._fontAsset.destroy(),this.font=null,this._element.off("resize",this._onParentResize,this),this._element.off("set:screen",this._onScreenChange,this),this._element.off("screen:set:screenspace",this._onScreenSpaceChange,this),this._element.off("set:draworder",this._onDrawOrderChange,this),this._element.off("set:pivot",this._onPivotChange,this),this._system.app.i18n.off(xa.EVENT_CHANGE,this._onLocaleSet,this),this._system.app.i18n.off("data:add",this._onLocalizationData,this),this._system.app.i18n.off("data:remove",this._onLocalizationData,this)}_onParentResize(e,t){this._noResize||this._font&&this._updateText()}_onScreenChange(e){e?this._updateMaterial(e.screen.screenSpace):this._updateMaterial(!1)}_onScreenSpaceChange(e){this._updateMaterial(e)}_onDrawOrderChange(e){if(this._drawOrder=e,this._model)for(let t=0,s=this._model.meshInstances.length;t<s;t++)this._model.meshInstances[t].drawOrder=e}_onPivotChange(e){this._font&&this._updateText()}_onLocaleSet(e){if(this._i18nKey){if(this.fontAsset){const t=this._system.app.assets.get(this.fontAsset);(!t||!t.resource||t.resource!==this._font)&&(this.font=null)}this._resetLocalizedText()}}_onLocalizationData(e,t){this._i18nKey&&t[this._i18nKey]&&this._resetLocalizedText()}_resetLocalizedText(){this._setText(this._system.app.i18n.getText(this._i18nKey))}_setText(e){if(this.unicodeConverter){const t=this._system.getUnicodeConverter();t?e=t(e):console.warn("Element created with unicodeConverter option but no unicodeConverter function registered")}this._text!==e&&(this._font&&this._updateText(e),this._text=e)}_updateText(e){let t;if(e===void 0&&(e=this._text),this._symbols=Zh.getSymbols(e.normalize?e.normalize("NFC"):e),this._symbols.length===0&&(this._symbols=[" "]),this._enableMarkup){const d=HB.evaluate(this._symbols);this._symbols=d.symbols,t=d.tags||[]}if(this._rtlReorder){const d=this._system.app.systems.element.getRtlReorder();if(d){const f=d(this._symbols);this._rtl=f.rtl,this._symbols=f.mapping.map(function(u){return this._symbols[u]},this),t&&(t=f.mapping.map(u=>t[u]))}else console.warn("Element created with rtlReorder option but no rtlReorder function registered")}else this._rtl=!1;const s=(d,f)=>`${d.toString(!0).toLowerCase()}:${f.toFixed(2)}`,i=(d,f)=>`${d.toString(!0).toLowerCase()}:${f.x.toFixed(2)}:${f.y.toFixed(2)}`;if(t){const d={},f={},u={};this._colorPalette=[Math.round(this._color.r*255),Math.round(this._color.g*255),Math.round(this._color.b*255)],this._outlinePalette=[Math.round(this._outlineColor.r*255),Math.round(this._outlineColor.g*255),Math.round(this._outlineColor.b*255),Math.round(this._outlineColor.a*255),Math.round(this._outlineThickness*255)],this._shadowPalette=[Math.round(this._shadowColor.r*255),Math.round(this._shadowColor.g*255),Math.round(this._shadowColor.b*255),Math.round(this._shadowColor.a*255),Math.round(this._shadowOffset.x*127),Math.round(this._shadowOffset.y*127)],this._symbolColors=[],this._symbolOutlineParams=[],this._symbolShadowParams=[],d[this._color.toString(!1).toLowerCase()]=0,f[s(this._outlineColor,this._outlineThickness)]=0,u[i(this._shadowColor,this._shadowOffset)]=0;for(let p=0,m=this._symbols.length;p<m;++p){const _=t[p];let g=0;if(_&&_.color&&_.color.value){const v=_.color.value;if(v.length===7&&v[0]==="#"){const S=v.substring(1).toLowerCase();d.hasOwnProperty(S)?g=d[S]:/^[0-9a-f]{6}$/.test(S)&&(g=this._colorPalette.length/3,d[S]=g,this._colorPalette.push(parseInt(S.substring(0,2),16)),this._colorPalette.push(parseInt(S.substring(2,4),16)),this._colorPalette.push(parseInt(S.substring(4,6),16)))}}this._symbolColors.push(g);let y=0;if(_&&_.outline&&(_.outline.attributes.color||_.outline.attributes.thickness)){let v=_.outline.attributes.color?dy.fromString(_.outline.attributes.color):this._outlineColor,S=Number(_.outline.attributes.thickness);(Number.isNaN(v.r)||Number.isNaN(v.g)||Number.isNaN(v.b)||Number.isNaN(v.a))&&(v=this._outlineColor),Number.isNaN(S)&&(S=this._outlineThickness);const b=s(v,S);f.hasOwnProperty(b)?y=f[b]:(y=this._outlinePalette.length/5,f[b]=y,this._outlinePalette.push(Math.round(v.r*255),Math.round(v.g*255),Math.round(v.b*255),Math.round(v.a*255),Math.round(S*255)))}this._symbolOutlineParams.push(y);let A=0;if(_&&_.shadow&&(_.shadow.attributes.color||_.shadow.attributes.offset||_.shadow.attributes.offsetX||_.shadow.attributes.offsetY)){let v=_.shadow.attributes.color?dy.fromString(_.shadow.attributes.color):this._shadowColor;const S=Number(_.shadow.attributes.offset),b=Number(_.shadow.attributes.offsetX),E=Number(_.shadow.attributes.offsetY);(Number.isNaN(v.r)||Number.isNaN(v.g)||Number.isNaN(v.b)||Number.isNaN(v.a))&&(v=this._shadowColor);const T=KB.set(Number.isNaN(b)?Number.isNaN(S)?this._shadowOffset.x:S:b,Number.isNaN(E)?Number.isNaN(S)?this._shadowOffset.y:S:E),w=i(v,T);u.hasOwnProperty(w)?A=u[w]:(A=this._shadowPalette.length/6,u[w]=A,this._shadowPalette.push(Math.round(v.r*255),Math.round(v.g*255),Math.round(v.b*255),Math.round(v.a*255),Math.round(T.x*127),Math.round(T.y*127)))}this._symbolShadowParams.push(A)}}else this._colorPalette=[],this._symbolColors=null,this._symbolOutlineParams=null,this._symbolShadowParams=null;this._updateMaterialEmissive(),this._updateMaterialOutline(),this._updateMaterialShadow();const r=this._calculateCharsPerTexture();let a=!1;const n=this._element,l=n._isScreenSpace(),h=n._isScreenCulled(),c=function(d){return n.isVisibleForCamera(d)};for(let d=0,f=this._meshInfo.length;d<f;d++){const u=r[d]||0,p=this._meshInfo[d];if(p.count!==u){if(a||(n.removeModelFromLayers(this._model),a=!0),p.count=u,p.positions.length=p.normals.length=u*3*4,p.indices.length=u*3*2,p.uvs.length=u*2*4,p.colors.length=u*4*4,p.outlines.length=u*4*3,p.shadows.length=u*4*3,p.meshInstance&&this._removeMeshInstance(p.meshInstance),u===0){p.meshInstance=null;continue}for(let g=0;g<u;g++)p.indices[g*3*2+0]=g*4,p.indices[g*3*2+1]=g*4+1,p.indices[g*3*2+2]=g*4+3,p.indices[g*3*2+3]=g*4+2,p.indices[g*3*2+4]=g*4+3,p.indices[g*3*2+5]=g*4+1,p.normals[g*4*3+0]=0,p.normals[g*4*3+1]=0,p.normals[g*4*3+2]=-1,p.normals[g*4*3+3]=0,p.normals[g*4*3+4]=0,p.normals[g*4*3+5]=-1,p.normals[g*4*3+6]=0,p.normals[g*4*3+7]=0,p.normals[g*4*3+8]=-1,p.normals[g*4*3+9]=0,p.normals[g*4*3+10]=0,p.normals[g*4*3+11]=-1;const m=WB(this._system.app.graphicsDevice,p),_=new Oe(m,this._material,this._node);if(_.name=`Text Element: ${this._entity.name}`,_.castShadow=!1,_.receiveShadow=!1,_.cull=!l,_.screenSpace=l,_.drawOrder=this._drawOrder,h&&(_.cull=!0,_.isVisibleFunc=c),this._setTextureParams(_,this._font.textures[d]),_.setParameter("material_emissive",this._colorUniform),_.setParameter("material_opacity",this._color.a),_.setParameter("font_sdfIntensity",this._font.intensity),_.setParameter("font_pxrange",this._getPxRange(this._font)),_.setParameter("font_textureWidth",this._font.data.info.maps[d].width),_.setParameter("outline_color",this._outlineColorUniform),_.setParameter("outline_thickness",this._outlineThicknessScale*this._outlineThickness),_.setParameter("shadow_color",this._shadowColorUniform),this._symbolShadowParams)this._shadowOffsetUniform[0]=0,this._shadowOffsetUniform[1]=0;else{const g=-this._font.data.info.maps[d].width/this._font.data.info.maps[d].height;this._shadowOffsetUniform[0]=this._shadowOffsetScale*this._shadowOffset.x,this._shadowOffsetUniform[1]=g*this._shadowOffsetScale*this._shadowOffset.y}_.setParameter("shadow_offset",this._shadowOffsetUniform),p.meshInstance=_,this._model.meshInstances.push(_)}}this._element.maskedBy&&this._element._setMaskedBy(this._element.maskedBy),a&&this._element.enabled&&this._entity.enabled&&this._element.addModelToLayers(this._model),this._updateMeshes(),this._rangeStart=0,this._rangeEnd=this._symbols.length,this._updateRenderRange()}_removeMeshInstance(e){e.destroy();const t=this._model.meshInstances.indexOf(e);t!==-1&&this._model.meshInstances.splice(t,1)}_setMaterial(e){if(this._material=e,this._model)for(let t=0,s=this._model.meshInstances.length;t<s;t++){const i=this._model.meshInstances[t];i.material=e}}_updateMaterial(e){const t=this._element,s=t._isScreenCulled(),i=function(a){return t.isVisibleForCamera(a)},r=this._font&&this._font.type===Gc;if(this._material=this._system.getTextElementMaterial(e,r,this._enableMarkup),this._model)for(let a=0,n=this._model.meshInstances.length;a<n;a++){const l=this._model.meshInstances[a];l.cull=!e,l.material=this._material,l.screenSpace=e,s?(l.cull=!0,l.isVisibleFunc=i):l.isVisibleFunc=null}}_updateMaterialEmissive(){this._symbolColors?(this._colorUniform[0]=1,this._colorUniform[1]=1,this._colorUniform[2]=1):(be.linear(this._color),this._colorUniform[0]=be.r,this._colorUniform[1]=be.g,this._colorUniform[2]=be.b)}_updateMaterialOutline(){this._symbolOutlineParams?(this._outlineColorUniform[0]=0,this._outlineColorUniform[1]=0,this._outlineColorUniform[2]=0,this._outlineColorUniform[3]=1):(be.linear(this._outlineColor),this._outlineColorUniform[0]=be.r,this._outlineColorUniform[1]=be.g,this._outlineColorUniform[2]=be.b,this._outlineColorUniform[3]=be.a)}_updateMaterialShadow(){this._symbolOutlineParams?(this._shadowColorUniform[0]=0,this._shadowColorUniform[1]=0,this._shadowColorUniform[2]=0,this._shadowColorUniform[3]=0):(be.linear(this._shadowColor),this._shadowColorUniform[0]=be.r,this._shadowColorUniform[1]=be.g,this._shadowColorUniform[2]=be.b,this._shadowColorUniform[3]=be.a)}_isWordBoundary(e){return hy.test(e)}_isValidNextChar(e){return e!==null&&!qB.test(e)}_isNextCJKBoundary(e,t){return cy.test(e)&&(hy.test(t)||XB.test(t))}_isNextCJKWholeWord(e){return cy.test(e)}_updateMeshes(){const e=this._font.data,t=this,s=Math.min(this._minFontSize,this._maxFontSize),i=this._maxFontSize,r=this._shouldAutoFit();r&&(this._fontSize=this._maxFontSize);const a=32,n=this._symbols.length;let l=0,h=0,c=0,d=0,f=1,u=0,p=0,m=0,_=0,g=0,y=0;const A=Math.abs(this._element.anchor.x-this._element.anchor.z)>=1e-4;let v=this._element.calculatedWidth;(this.autoWidth&&!A||!this._wrapLines)&&(v=Number.POSITIVE_INFINITY);let S=0,b=0,E,T,w,P;function M(C,I,R){t._lineWidths.push(Math.abs(R));const O=m>I?I+1:m,N=m>I?m+1:I,F=C.slice(O,N);if(y){let W=F.length;for(;W--&&y>0;)ly.test(F[W])&&(F.splice(W,1),y--)}t._lineContents.push(F.join("")),l=0,h-=t._scaledLineHeight,f++,_=0,g=0,y=0,u=0,m=I}let L=!0;for(;L;){L=!1,r?this._scaledLineHeight=this._lineHeight*this._fontSize/(this._maxFontSize||1e-4):this._scaledLineHeight=this._lineHeight,this.width=0,this.height=0,this._lineWidths=[],this._lineContents=[],l=0,h=0,c=0,d=0,f=1,u=0,p=0,m=0,_=0,g=0,y=0;const C=this._fontSize/a;S=this._fontMinY*C,b=this._fontMaxY*C;for(let j=0;j<this._meshInfo.length;j++)this._meshInfo[j].quad=0,this._meshInfo[j].lines={};let I=255,R=255,O=255,N=255+255*256,F=255+255*256,W=0,X=255+255*256,V=255+255*256,Y=127+127*256;for(let j=0;j<n;j++){if(E=this._symbols[j],P=j+1>=n?null:this._symbols[j+1],ly.test(E)){y++,(!this._wrapLines||this._maxLines<0||f<this._maxLines)&&(M(this._symbols,j,d),p=j+1,m=j+1);continue}let Ie=0,Ge=0,We=0,Cs=1,ri,Ql;if(T=e.chars[E],!T)if(YB.indexOf(E)!==-1)T=jB;else if(e.chars[" "])T=e.chars[" "];else for(const me in e.chars){T=e.chars[me];break}if(T){let me=0;if(g>0){const Sr=this._font.data.kerning;if(Sr){const yr=Sr[Zh.getCodePoint(this._symbols[j-1])||0];yr&&(me=yr[Zh.getCodePoint(this._symbols[j])||0]||0)}}ri=T.scale||1,Ql=(T.width+T.height)/2,Cs=C*Ql/ri,We=(T.xadvance+me)*C,Ie=(T.xoffset-me)*C,Ge=T.yoffset*C}else console.error(`Couldn't substitute missing character: '${E}'`);const Jl=$B.test(E),Pa=T&&T.map||0,eh=-this._font.data.info.maps[Pa].width/this._font.data.info.maps[Pa].height,Z=this._meshInfo[Pa],th=l+this._spacing*We;if(th>v&&g>0&&!Jl&&(this._maxLines<0||f<this._maxLines))if(_===0)p=j,M(this._symbols,j,d);else{const me=Math.max(j-p,0);if(this._meshInfo.length<=1)Z.lines[f-1]-=me,Z.quad-=me;else{const Sr=p,yr=j;for(let gf=Sr;gf<yr;gf++){const NE=this._symbols[gf],gg=e.chars[NE],vg=this._meshInfo[gg&&gg.map||0];vg.lines[f-1]-=1,vg.quad-=1}}j-=me+1,M(this._symbols,p,u);continue}w=Z.quad,Z.lines[f-1]=w;let Xt=l-Ie,ki=Xt+Cs;const La=h-Ge,go=La+Cs;if(this._rtl){const me=Cs-Ie-this._spacing*We-Ie;Xt-=me,ki-=me}Z.positions[w*4*3+0]=Xt,Z.positions[w*4*3+1]=La,Z.positions[w*4*3+2]=c,Z.positions[w*4*3+3]=ki,Z.positions[w*4*3+4]=La,Z.positions[w*4*3+5]=c,Z.positions[w*4*3+6]=ki,Z.positions[w*4*3+7]=go,Z.positions[w*4*3+8]=c,Z.positions[w*4*3+9]=Xt,Z.positions[w*4*3+10]=go,Z.positions[w*4*3+11]=c,this.width=Math.max(this.width,th);let qt;if(this._shouldAutoFitWidth()&&this.width>this._element.calculatedWidth&&(qt=Math.floor(this._element.fontSize*this._element.calculatedWidth/(this.width||1e-4)),qt=B.clamp(qt,s,i),qt!==this._element.fontSize)){this._fontSize=qt,L=!0;break}if(this.height=Math.max(this.height,b-(h+S)),this._shouldAutoFitHeight()&&this.height>this._element.calculatedHeight&&(qt=B.clamp(this._fontSize-1,s,i),qt!==this._element.fontSize)){this._fontSize=qt,L=!0;break}l+=this._spacing*We,Jl||(d=l),(this._isWordBoundary(E)||this._isValidNextChar(P)&&(this._isNextCJKBoundary(E,P)||this._isNextCJKWholeWord(P)))&&(_++,u=d,p=j+1),g++;const ls=this._getUv(E);if(Z.uvs[w*4*2+0]=ls[0],Z.uvs[w*4*2+1]=1-ls[1],Z.uvs[w*4*2+2]=ls[2],Z.uvs[w*4*2+3]=1-ls[1],Z.uvs[w*4*2+4]=ls[2],Z.uvs[w*4*2+5]=1-ls[3],Z.uvs[w*4*2+6]=ls[0],Z.uvs[w*4*2+7]=1-ls[3],this._symbolColors){const me=this._symbolColors[j]*3;I=this._colorPalette[me],R=this._colorPalette[me+1],O=this._colorPalette[me+2]}if(Z.colors[w*4*4+0]=I,Z.colors[w*4*4+1]=R,Z.colors[w*4*4+2]=O,Z.colors[w*4*4+3]=255,Z.colors[w*4*4+4]=I,Z.colors[w*4*4+5]=R,Z.colors[w*4*4+6]=O,Z.colors[w*4*4+7]=255,Z.colors[w*4*4+8]=I,Z.colors[w*4*4+9]=R,Z.colors[w*4*4+10]=O,Z.colors[w*4*4+11]=255,Z.colors[w*4*4+12]=I,Z.colors[w*4*4+13]=R,Z.colors[w*4*4+14]=O,Z.colors[w*4*4+15]=255,this._symbolOutlineParams){const me=this._symbolOutlineParams[j]*5;N=this._outlinePalette[me]+this._outlinePalette[me+1]*256,F=this._outlinePalette[me+2]+this._outlinePalette[me+3]*256,W=this._outlinePalette[me+4]}if(Z.outlines[w*4*3+0]=N,Z.outlines[w*4*3+1]=F,Z.outlines[w*4*3+2]=W,Z.outlines[w*4*3+3]=N,Z.outlines[w*4*3+4]=F,Z.outlines[w*4*3+5]=W,Z.outlines[w*4*3+6]=N,Z.outlines[w*4*3+7]=F,Z.outlines[w*4*3+8]=W,Z.outlines[w*4*3+9]=N,Z.outlines[w*4*3+10]=F,Z.outlines[w*4*3+11]=W,this._symbolShadowParams){const me=this._symbolShadowParams[j]*6;X=this._shadowPalette[me]+this._shadowPalette[me+1]*256,V=this._shadowPalette[me+2]+this._shadowPalette[me+3]*256,Y=this._shadowPalette[me+4]+127+Math.round(eh*this._shadowPalette[me+5]+127)*256}Z.shadows[w*4*3+0]=X,Z.shadows[w*4*3+1]=V,Z.shadows[w*4*3+2]=Y,Z.shadows[w*4*3+3]=X,Z.shadows[w*4*3+4]=V,Z.shadows[w*4*3+5]=Y,Z.shadows[w*4*3+6]=X,Z.shadows[w*4*3+7]=V,Z.shadows[w*4*3+8]=Y,Z.shadows[w*4*3+9]=X,Z.shadows[w*4*3+10]=V,Z.shadows[w*4*3+11]=Y,Z.quad++}L||m<n&&M(this._symbols,n,l)}this._noResize=!0,this.autoWidth=this._autoWidth,this.autoHeight=this._autoHeight,this._noResize=!1;const D=this._element.pivot.x,k=this._element.pivot.y,G=this._alignment.x,U=this._alignment.y;for(let C=0;C<this._meshInfo.length;C++){if(this._meshInfo[C].count===0)continue;let I=0;for(const F in this._meshInfo[C].lines){const W=this._meshInfo[C].lines[F],X=this._lineWidths[parseInt(F,10)],V=-D*this._element.calculatedWidth+G*(this._element.calculatedWidth-X)*(this._rtl?-1:1),Y=(1-k)*this._element.calculatedHeight-b-(1-U)*(this._element.calculatedHeight-this.height);for(let j=I;j<=W;j++)this._meshInfo[C].positions[j*4*3]+=V,this._meshInfo[C].positions[j*4*3+3]+=V,this._meshInfo[C].positions[j*4*3+6]+=V,this._meshInfo[C].positions[j*4*3+9]+=V,this._meshInfo[C].positions[j*4*3+1]+=Y,this._meshInfo[C].positions[j*4*3+4]+=Y,this._meshInfo[C].positions[j*4*3+7]+=Y,this._meshInfo[C].positions[j*4*3+10]+=Y;if(this._rtl)for(let j=I;j<=W;j++){const re=j*4*3;for(let We=0;We<4;++We)this._meshInfo[C].positions[re+We*3]=this._element.calculatedWidth-this._meshInfo[C].positions[re+We*3]+V*2;const Ie=this._meshInfo[C].positions[re+3],Ge=this._meshInfo[C].positions[re+6];this._meshInfo[C].positions[re+3]=this._meshInfo[C].positions[re+0],this._meshInfo[C].positions[re+6]=this._meshInfo[C].positions[re+9],this._meshInfo[C].positions[re+0]=Ie,this._meshInfo[C].positions[re+9]=Ge}I=W+1}const R=this._meshInfo[C].count*4,O=this._meshInfo[C].quad*4,N=new jo(this._meshInfo[C].meshInstance.mesh.vertexBuffer);for(let F=0;F<R;F++)F>=O?(N.element[ue].set(0,0,0),N.element[as].set(0,0),N.element[gt].set(0,0,0,0),N.element[cl].set(0,0,0,0),N.element[dl].set(0,0,0,0)):(N.element[ue].set(this._meshInfo[C].positions[F*3+0],this._meshInfo[C].positions[F*3+1],this._meshInfo[C].positions[F*3+2]),N.element[as].set(this._meshInfo[C].uvs[F*2+0],this._meshInfo[C].uvs[F*2+1]),N.element[gt].set(this._meshInfo[C].colors[F*4+0],this._meshInfo[C].colors[F*4+1],this._meshInfo[C].colors[F*4+2],this._meshInfo[C].colors[F*4+3]),N.element[cl].set(this._meshInfo[C].outlines[F*3+0],this._meshInfo[C].outlines[F*3+1],this._meshInfo[C].outlines[F*3+2]),N.element[dl].set(this._meshInfo[C].shadows[F*3+0],this._meshInfo[C].shadows[F*3+1],this._meshInfo[C].shadows[F*3+2])),N.next();N.end(),this._meshInfo[C].meshInstance.mesh.aabb.compute(this._meshInfo[C].positions),this._meshInfo[C].meshInstance._aabbVer=-1}this._aabbDirty=!0}_onFontRender(){this.font=this._font}_onFontLoad(e){this.font!==e.resource&&(this.font=e.resource)}_onFontChange(e,t,s,i){if(t==="data"){this._font.data=s;const r=this._font.data.info.maps.length;for(let a=0;a<r;a++){if(!this._meshInfo[a])continue;const n=this._meshInfo[a].meshInstance;n&&(n.setParameter("font_sdfIntensity",this._font.intensity),n.setParameter("font_pxrange",this._getPxRange(this._font)),n.setParameter("font_textureWidth",this._font.data.info.maps[a].width))}}}_onFontRemove(e){}_setTextureParams(e,t){this._font&&(this._font.type===Gc?(e.deleteParameter("texture_emissiveMap"),e.deleteParameter("texture_opacityMap"),e.setParameter("texture_msdfMap",t)):this._font.type===OB&&(e.deleteParameter("texture_msdfMap"),e.setParameter("texture_emissiveMap",t),e.setParameter("texture_opacityMap",t)))}_getPxRange(e){const t=Object.keys(this._font.data.chars);for(let s=0;s<t.length;s++){const i=this._font.data.chars[t[s]];if(i.range)return(i.scale||1)*i.range}return 2}_getUv(e){const t=this._font.data;if(!t.chars[e])return t.chars[" "]?this._getUv(" "):[0,0,0,0];const s=t.chars[e].map,i=t.info.maps[s].width,r=t.info.maps[s].height,a=t.chars[e].x,n=t.chars[e].y,l=a,h=n,c=a+t.chars[e].width,d=n-t.chars[e].height,f=1-t.chars[e].height/r;return[l/i,f-h/r,c/i,f-d/r]}onEnable(){this._fontAsset.autoLoad=!0,this._model&&this._element.addModelToLayers(this._model)}onDisable(){this._fontAsset.autoLoad=!1,this._model&&this._element.removeModelFromLayers(this._model)}_setStencil(e){if(this._model){const t=this._model.meshInstances;for(let s=0;s<t.length;s++)t[s].stencilFront=e,t[s].stencilBack=e}}_shouldAutoFitWidth(){return this._autoFitWidth&&!this._autoWidth}_shouldAutoFitHeight(){return this._autoFitHeight&&!this._autoHeight}_shouldAutoFit(){return this._autoFitWidth&&!this._autoWidth||this._autoFitHeight&&!this._autoHeight}_calculateCharsPerTexture(e){const t={};e===void 0&&(e=this._symbols.length);for(let s=0,i=e;s<i;s++){const r=this._symbols[s];let a=this._font.data.chars[r];a||(a=this._font.data.chars[" "],a||(a=this._font.data.chars[Object.keys(this._font.data.chars)[0]]));const n=a.map;t[n]?t[n]++:t[n]=1}return t}_updateRenderRange(){const e=this._rangeStart===0?0:this._calculateCharsPerTexture(this._rangeStart),t=this._rangeEnd===0?0:this._calculateCharsPerTexture(this._rangeEnd);for(let s=0,i=this._meshInfo.length;s<i;s++){const r=e[s]||0,a=t[s]||0,n=this._meshInfo[s].meshInstance;if(n){const l=n.mesh;l&&(l.primitive[0].base=r*3*2,l.primitive[0].count=(a-r)*3*2)}}}set text(e){this._i18nKey=null;const t=e!=null&&e.toString()||"";this._setText(t)}get text(){return this._text}set key(e){const t=e!==null?e.toString():null;this._i18nKey!==t&&(this._i18nKey=t,t?(this._fontAsset.disableLocalization=!1,this._resetLocalizedText()):this._fontAsset.disableLocalization=!0)}get key(){return this._i18nKey}set color(e){const t=e.r,s=e.g,i=e.b;if(!(this._color.r===t&&this._color.g===s&&this._color.b===i)&&(this._color.r=t,this._color.g=s,this._color.b=i,!!this._model)){if(this._symbolColors)this._font&&this._updateText();else{be.linear(this._color),this._colorUniform[0]=be.r,this._colorUniform[1]=be.g,this._colorUniform[2]=be.b;for(let r=0,a=this._model.meshInstances.length;r<a;r++)this._model.meshInstances[r].setParameter("material_emissive",this._colorUniform)}this._element&&this._element.fire("set:color",this._color)}}get color(){return this._color}set opacity(e){if(this._color.a!==e&&(this._color.a=e,this._model))for(let t=0,s=this._model.meshInstances.length;t<s;t++)this._model.meshInstances[t].setParameter("material_opacity",e);this._element&&this._element.fire("set:opacity",e)}get opacity(){return this._color.a}set lineHeight(e){const t=this._lineHeight;this._lineHeight=e,this._scaledLineHeight=e,t!==e&&this._font&&this._updateText()}get lineHeight(){return this._lineHeight}set wrapLines(e){const t=this._wrapLines;this._wrapLines=e,t!==e&&this._font&&this._updateText()}get wrapLines(){return this._wrapLines}get lines(){return this._lineContents}set spacing(e){const t=this._spacing;this._spacing=e,t!==e&&this._font&&this._updateText()}get spacing(){return this._spacing}set fontSize(e){const t=this._fontSize;this._fontSize=e,this._originalFontSize=e,t!==e&&this._font&&this._updateText()}get fontSize(){return this._fontSize}set fontAsset(e){this._fontAsset.defaultAsset=e}get fontAsset(){return this._fontAsset.localizedAsset}set font(e){let t;if(this._font&&(t=this._font.type,this._font.off&&this._font.off("render",this._onFontRender,this)),this._font=e,this._fontMinY=0,this._fontMaxY=0,!e)return;const s=this._font.data;for(const r in s.chars){const a=s.chars[r];a.bounds&&(this._fontMinY=Math.min(this._fontMinY,a.bounds[1]),this._fontMaxY=Math.max(this._fontMaxY,a.bounds[3]))}if(this._font.on&&this._font.on("render",this._onFontRender,this),this._fontAsset.localizedAsset&&this._system.app.assets.get(this._fontAsset.localizedAsset).resource!==this._font&&(this._fontAsset.defaultAsset=null),e.type!==t){const r=this._element._isScreenSpace();this._updateMaterial(r)}for(let r=0,a=this._font.textures.length;r<a;r++)if(!this._meshInfo[r])this._meshInfo[r]=new GB;else{const n=this._meshInfo[r].meshInstance;n&&(n.setParameter("font_sdfIntensity",this._font.intensity),n.setParameter("font_pxrange",this._getPxRange(this._font)),n.setParameter("font_textureWidth",this._font.data.info.maps[r].width),this._setTextureParams(n,this._font.textures[r]))}let i=!1;for(let r=this._font.textures.length;r<this._meshInfo.length;r++)this._meshInfo[r].meshInstance&&(i||(this._element.removeModelFromLayers(this._model),i=!0),this._removeMeshInstance(this._meshInfo[r].meshInstance));this._meshInfo.length>this._font.textures.length&&(this._meshInfo.length=this._font.textures.length),this._updateText()}get font(){return this._font}set alignment(e){e instanceof z?this._alignment.set(e.x,e.y):this._alignment.set(e[0],e[1]),this._font&&this._updateText()}get alignment(){return this._alignment}set autoWidth(e){const t=this._autoWidth;if(this._autoWidth=e,e&&Math.abs(this._element.anchor.x-this._element.anchor.z)<1e-4&&(this._element.width=this.width),t!==e){const s=this._shouldAutoFit()?this._maxFontSize:this._originalFontSize;s!==this._fontSize&&(this._fontSize=s,this._font&&this._updateText())}}get autoWidth(){return this._autoWidth}set autoHeight(e){const t=this._autoHeight;if(this._autoHeight=e,e&&Math.abs(this._element.anchor.y-this._element.anchor.w)<1e-4&&(this._element.height=this.height),t!==e){const s=this._shouldAutoFit()?this._maxFontSize:this._originalFontSize;s!==this._fontSize&&(this._fontSize=s,this._font&&this._updateText())}}get autoHeight(){return this._autoHeight}set rtlReorder(e){this._rtlReorder!==e&&(this._rtlReorder=e,this._font&&this._updateText())}get rtlReorder(){return this._rtlReorder}set unicodeConverter(e){this._unicodeConverter!==e&&(this._unicodeConverter=e,this._setText(this._text))}get unicodeConverter(){return this._unicodeConverter}get aabb(){if(this._aabbDirty){let e=!1;for(let t=0;t<this._meshInfo.length;t++)this._meshInfo[t].meshInstance&&(e?this._aabb.add(this._meshInfo[t].meshInstance.aabb):(this._aabb.copy(this._meshInfo[t].meshInstance.aabb),e=!0));this._aabbDirty=!1}return this._aabb}set outlineColor(e){const t=e instanceof q?e.r:e[0],s=e instanceof q?e.g:e[1],i=e instanceof q?e.b:e[2],r=e instanceof q?e.a:e[3];if(!(this._outlineColor.r===t&&this._outlineColor.g===s&&this._outlineColor.b===i&&this._outlineColor.a===r)&&(this._outlineColor.r=t,this._outlineColor.g=s,this._outlineColor.b=i,this._outlineColor.a=r,!!this._model)){if(this._symbolOutlineParams)this._font&&this._updateText();else{be.linear(this._outlineColor),this._outlineColorUniform[0]=be.r,this._outlineColorUniform[1]=be.g,this._outlineColorUniform[2]=be.b,this._outlineColorUniform[3]=be.a;for(let a=0,n=this._model.meshInstances.length;a<n;a++)this._model.meshInstances[a].setParameter("outline_color",this._outlineColorUniform)}this._element&&this._element.fire("set:outline",this._color)}}get outlineColor(){return this._outlineColor}set outlineThickness(e){const t=this._outlineThickness;if(this._outlineThickness=e,t!==e&&this._font){if(!this._model)return;if(this._symbolOutlineParams)this._font&&this._updateText();else for(let s=0,i=this._model.meshInstances.length;s<i;s++)this._model.meshInstances[s].setParameter("outline_thickness",this._outlineThicknessScale*this._outlineThickness)}}get outlineThickness(){return this._outlineThickness}set shadowColor(e){const t=e instanceof q?e.r:e[0],s=e instanceof q?e.g:e[1],i=e instanceof q?e.b:e[2],r=e instanceof q?e.a:e[3];if(!(this._shadowColor.r===t&&this._shadowColor.g===s&&this._shadowColor.b===i&&this._shadowColor.a===r)&&(this._shadowColor.r=t,this._shadowColor.g=s,this._shadowColor.b=i,this._shadowColor.a=r,!!this._model))if(this._symbolShadowParams)this._font&&this._updateText();else{be.linear(this._shadowColor),this._shadowColorUniform[0]=be.r,this._shadowColorUniform[1]=be.g,this._shadowColorUniform[2]=be.b,this._shadowColorUniform[3]=be.a;for(let a=0,n=this._model.meshInstances.length;a<n;a++)this._model.meshInstances[a].setParameter("shadow_color",this._shadowColorUniform)}}get shadowColor(){return this._shadowColor}set shadowOffset(e){const t=e instanceof z?e.x:e[0],s=e instanceof z?e.y:e[1];if(!(this._shadowOffset.x===t&&this._shadowOffset.y===s)&&(this._shadowOffset.set(t,s),this._font&&this._model))if(this._symbolShadowParams)this._updateText();else for(let i=0,r=this._model.meshInstances.length;i<r;i++){const a=-this._font.data.info.maps[i].width/this._font.data.info.maps[i].height;this._shadowOffsetUniform[0]=this._shadowOffsetScale*this._shadowOffset.x,this._shadowOffsetUniform[1]=a*this._shadowOffsetScale*this._shadowOffset.y,this._model.meshInstances[i].setParameter("shadow_offset",this._shadowOffsetUniform)}}get shadowOffset(){return this._shadowOffset}set minFontSize(e){this._minFontSize!==e&&(this._minFontSize=e,this.font&&this._shouldAutoFit()&&this._updateText())}get minFontSize(){return this._minFontSize}set maxFontSize(e){this._maxFontSize!==e&&(this._maxFontSize=e,this.font&&this._shouldAutoFit()&&this._updateText())}get maxFontSize(){return this._maxFontSize}set autoFitWidth(e){this._autoFitWidth!==e&&(this._autoFitWidth=e,this._fontSize=this._shouldAutoFit()?this._maxFontSize:this._originalFontSize,this.font&&this._updateText())}get autoFitWidth(){return this._autoFitWidth}set autoFitHeight(e){this._autoFitHeight!==e&&(this._autoFitHeight=e,this._fontSize=this._shouldAutoFit()?this._maxFontSize:this._originalFontSize,this.font&&this._updateText())}get autoFitHeight(){return this._autoFitHeight}set maxLines(e){this._maxLines!==e&&(e===null&&this._maxLines===-1||(this._maxLines=e===null?-1:e,this.font&&this._wrapLines&&this._updateText()))}get maxLines(){return this._maxLines}set enableMarkup(e){if(e=!!e,this._enableMarkup===e)return;this._enableMarkup=e,this.font&&this._updateText();const t=this._element._isScreenSpace();this._updateMaterial(t)}get enableMarkup(){return this._enableMarkup}get symbols(){return this._symbols}get symbolColors(){return this._symbolColors===null?null:this._symbolColors.map(function(e){return this._colorPalette.slice(e*3,e*3+3)},this)}get symbolOutlineParams(){return this._symbolOutlineParams===null?null:this._symbolOutlineParams.map(function(e){return this._outlinePalette.slice(e*5,e*5+5)},this)}get symbolShadowParams(){return this._symbolShadowParams===null?null:this._symbolShadowParams.map(function(e){return this._shadowPalette.slice(e*6,e*6+6)},this)}get rtl(){return this._rtl}set rangeStart(e){e=Math.max(0,Math.min(e,this._symbols.length)),e!==this._rangeStart&&(this._rangeStart=e,this._updateRenderRange())}get rangeStart(){return this._rangeStart}set rangeEnd(e){e=Math.max(this._rangeStart,Math.min(e,this._symbols.length)),e!==this._rangeEnd&&(this._rangeEnd=e,this._updateRenderRange())}get rangeEnd(){return this._rangeEnd}}const xu=new x,fy=new $,ui=new x,QB=new x,Zt=new $,Uh=new $,Bh=new $,Za=new $,Rt=class Rt extends he{constructor(e,t){super(e,t),this._evtLayersChanged=null,this._evtLayerAdded=null,this._evtLayerRemoved=null,this._beingInitialized=!1,this._anchor=new K,this._localAnchor=new K,this._pivot=new z,this._width=this._calculatedWidth=32,this._height=this._calculatedHeight=32,this._margin=new K(0,0,-32,-32),this._modelTransform=new $,this._screenToWorld=new $,this._anchorTransform=new $,this._anchorDirty=!0,this._parentWorldTransform=new $,this._screenTransform=new $,this._screenCorners=[new x,new x,new x,new x],this._canvasCorners=[new z,new z,new z,new z],this._worldCorners=[new x,new x,new x,new x],this._cornersDirty=!0,this._canvasCornersDirty=!0,this._worldCornersDirty=!0,this.entity.on("insert",this._onInsert,this),this._patch(),this.screen=null,this._type=oc,this._image=null,this._text=null,this._group=null,this._drawOrder=0,this._fitMode=lc,this._useInput=!1,this._layers=[sf],this._addedModels=[],this._batchGroupId=-1,this._offsetReadAt=0,this._maskOffset=.5,this._maskedBy=null}get data(){const e=this.system.store[this.entity.getGuid()];return e?e.data:null}set enabled(e){const t=this.data,s=t.enabled;t.enabled=e,this.fire("set","enabled",s,e)}get enabled(){return this.data.enabled}get _absLeft(){return this._localAnchor.x+this._margin.x}get _absRight(){return this._localAnchor.z-this._margin.z}get _absTop(){return this._localAnchor.w-this._margin.w}get _absBottom(){return this._localAnchor.y+this._margin.y}get _hasSplitAnchorsX(){return Math.abs(this._anchor.x-this._anchor.z)>.001}get _hasSplitAnchorsY(){return Math.abs(this._anchor.y-this._anchor.w)>.001}get aabb(){return this._image?this._image.aabb:this._text?this._text.aabb:null}set anchor(e){e instanceof K?this._anchor.copy(e):this._anchor.set(...e),!this.entity._parent&&!this.screen?this._calculateLocalAnchors():this._calculateSize(this._hasSplitAnchorsX,this._hasSplitAnchorsY),this._anchorDirty=!0,this.entity._dirtyLocal||this.entity._dirtifyLocal(),this.fire("set:anchor",this._anchor)}get anchor(){return this._anchor}set batchGroupId(e){this._batchGroupId!==e&&(this.entity.enabled&&this._batchGroupId>=0&&this.system.app.batcher?.remove(nt.ELEMENT,this.batchGroupId,this.entity),this.entity.enabled&&e>=0&&this.system.app.batcher?.insert(nt.ELEMENT,e,this.entity),e<0&&this._batchGroupId>=0&&this.enabled&&this.entity.enabled&&(this._image&&this._image._renderable.model?this.addModelToLayers(this._image._renderable.model):this._text&&this._text._model&&this.addModelToLayers(this._text._model)),this._batchGroupId=e)}get batchGroupId(){return this._batchGroupId}set bottom(e){this._margin.y=e;const t=this.entity.getLocalPosition(),s=this._absTop,i=this._localAnchor.y+e;this._setHeight(s-i),t.y=e+this._calculatedHeight*this._pivot.y,this.entity.setLocalPosition(t)}get bottom(){return this._margin.y}set calculatedWidth(e){this._setCalculatedWidth(e,!0)}get calculatedWidth(){return this._calculatedWidth}set calculatedHeight(e){this._setCalculatedHeight(e,!0)}get calculatedHeight(){return this._calculatedHeight}get canvasCorners(){if(!this._canvasCornersDirty||!this.screen||!this.screen.screen.screenSpace)return this._canvasCorners;const e=this.system.app.graphicsDevice,t=this.screenCorners,s=e.canvas.clientWidth/e.width,i=e.canvas.clientHeight/e.height;for(let r=0;r<4;r++)this._canvasCorners[r].set(t[r].x*s,(e.height-t[r].y)*i);return this._canvasCornersDirty=!1,this._canvasCorners}set drawOrder(e){let t=0;this.screen&&(t=this.screen.screen.priority),e>16777215&&(e=16777215),this._drawOrder=(t<<24)+e,this.fire("set:draworder",this._drawOrder)}get drawOrder(){return this._drawOrder}set height(e){this._height=e,this._hasSplitAnchorsY||this._setCalculatedHeight(e,!0),this.fire("set:height",this._height)}get height(){return this._height}set layers(e){if(this._addedModels.length)for(let t=0;t<this._layers.length;t++){const s=this.system.app.scene.layers.getLayerById(this._layers[t]);if(s)for(let i=0;i<this._addedModels.length;i++)s.removeMeshInstances(this._addedModels[i].meshInstances)}if(this._layers=e,!(!this.enabled||!this.entity.enabled||!this._addedModels.length))for(let t=0;t<this._layers.length;t++){const s=this.system.app.scene.layers.getLayerById(this._layers[t]);if(s)for(let i=0;i<this._addedModels.length;i++)s.addMeshInstances(this._addedModels[i].meshInstances)}}get layers(){return this._layers}set left(e){this._margin.x=e;const t=this.entity.getLocalPosition(),s=this._absRight,i=this._localAnchor.x+e;this._setWidth(s-i),t.x=e+this._calculatedWidth*this._pivot.x,this.entity.setLocalPosition(t)}get left(){return this._margin.x}set margin(e){this._margin.copy(e),this._calculateSize(!0,!0),this.fire("set:margin",this._margin)}get margin(){return this._margin}get maskedBy(){return this._maskedBy}set pivot(e){const{pivot:t,margin:s}=this,i=t.x,r=t.y;e instanceof z?t.copy(e):t.set(...e);const a=s.x+s.z,n=t.x-i;s.x+=a*n,s.z-=a*n;const l=s.y+s.w,h=t.y-r;s.y+=l*h,s.w-=l*h,this._anchorDirty=!0,this._cornersDirty=!0,this._worldCornersDirty=!0,this._calculateSize(!1,!1),this._flagChildrenAsDirty(),this.fire("set:pivot",t)}get pivot(){return this._pivot}set right(e){this._margin.z=e;const t=this.entity.getLocalPosition(),s=this._absLeft,i=this._localAnchor.z-e;this._setWidth(i-s),t.x=this._localAnchor.z-this._localAnchor.x-e-this._calculatedWidth*(1-this._pivot.x),this.entity.setLocalPosition(t)}get right(){return this._margin.z}get screenCorners(){if(!this._cornersDirty||!this.screen)return this._screenCorners;const e=this.entity.parent&&this.entity.parent.element&&this.entity.parent.element.screenCorners[0];this._screenCorners[0].set(this._absLeft,this._absBottom,0),this._screenCorners[1].set(this._absRight,this._absBottom,0),this._screenCorners[2].set(this._absRight,this._absTop,0),this._screenCorners[3].set(this._absLeft,this._absTop,0);const t=this.screen.screen.screenSpace;for(let s=0;s<4;s++)this._screenTransform.transformPoint(this._screenCorners[s],this._screenCorners[s]),t&&this._screenCorners[s].mulScalar(this.screen.screen.scale),e&&this._screenCorners[s].add(e);return this._cornersDirty=!1,this._canvasCornersDirty=!0,this._worldCornersDirty=!0,this._screenCorners}get textWidth(){return this._text?this._text.width:0}get textHeight(){return this._text?this._text.height:0}set top(e){this._margin.w=e;const t=this.entity.getLocalPosition(),s=this._absBottom,i=this._localAnchor.w-e;this._setHeight(i-s),t.y=this._localAnchor.w-this._localAnchor.y-e-this._calculatedHeight*(1-this._pivot.y),this.entity.setLocalPosition(t)}get top(){return this._margin.w}set type(e){e!==this._type&&(this._type=e,this._image&&(this._image.destroy(),this._image=null),this._text&&(this._text.destroy(),this._text=null),e===Ip?this._image=new DB(this):e===Qx&&(this._text=new ZB(this)))}get type(){return this._type}set useInput(e){this._useInput!==e&&(this._useInput=e,this.system.app.elementInput?e?this.enabled&&this.entity.enabled&&this.system.app.elementInput.addElement(this):this.system.app.elementInput.removeElement(this):this._useInput,this.fire("set:useInput",e))}get useInput(){return this._useInput}set fitMode(e){this._fitMode=e,this._calculateSize(!0,!0),this._image&&this._image.refreshMesh()}get fitMode(){return this._fitMode}set width(e){this._width=e,this._hasSplitAnchorsX||this._setCalculatedWidth(e,!0),this.fire("set:width",this._width)}get width(){return this._width}get worldCorners(){if(!this._worldCornersDirty)return this._worldCorners;if(this.screen){const e=this.screenCorners;if(!this.screen.screen.screenSpace){Zt.copy(this.screen.screen._screenMatrix),Zt.data[13]=-Zt.data[13],Zt.mul2(this.screen.getWorldTransform(),Zt);for(let t=0;t<4;t++)Zt.transformPoint(e[t],this._worldCorners[t])}}else{const e=this.entity.getLocalPosition();Zt.setTranslate(-e.x,-e.y,-e.z),Uh.setTRS(x.ZERO,this.entity.getLocalRotation(),this.entity.getLocalScale()),Bh.setTranslate(e.x,e.y,e.z);const t=this.entity.parent?this.entity.parent:this.entity;Za.copy(t.getWorldTransform()),Za.mul(Bh).mul(Uh).mul(Zt),ui.set(e.x-this.pivot.x*this.calculatedWidth,e.y-this.pivot.y*this.calculatedHeight,e.z),Za.transformPoint(ui,this._worldCorners[0]),ui.set(e.x+(1-this.pivot.x)*this.calculatedWidth,e.y-this.pivot.y*this.calculatedHeight,e.z),Za.transformPoint(ui,this._worldCorners[1]),ui.set(e.x+(1-this.pivot.x)*this.calculatedWidth,e.y+(1-this.pivot.y)*this.calculatedHeight,e.z),Za.transformPoint(ui,this._worldCorners[2]),ui.set(e.x-this.pivot.x*this.calculatedWidth,e.y+(1-this.pivot.y)*this.calculatedHeight,e.z),Za.transformPoint(ui,this._worldCorners[3])}return this._worldCornersDirty=!1,this._worldCorners}set fontSize(e){this._setValue("fontSize",e)}get fontSize(){return this._text?this._text.fontSize:null}set minFontSize(e){this._setValue("minFontSize",e)}get minFontSize(){return this._text?this._text.minFontSize:null}set maxFontSize(e){this._setValue("maxFontSize",e)}get maxFontSize(){return this._text?this._text.maxFontSize:null}set maxLines(e){this._setValue("maxLines",e)}get maxLines(){return this._text?this._text.maxLines:null}set autoFitWidth(e){this._setValue("autoFitWidth",e)}get autoFitWidth(){return this._text?this._text.autoFitWidth:null}set autoFitHeight(e){this._setValue("autoFitHeight",e)}get autoFitHeight(){return this._text?this._text.autoFitHeight:null}set color(e){this._setValue("color",e)}get color(){return this._text?this._text.color:this._image?this._image.color:null}set font(e){this._setValue("font",e)}get font(){return this._text?this._text.font:null}set fontAsset(e){this._setValue("fontAsset",e)}get fontAsset(){return this._text&&typeof this._text.fontAsset=="number"?this._text.fontAsset:null}set spacing(e){this._setValue("spacing",e)}get spacing(){return this._text?this._text.spacing:null}set lineHeight(e){this._setValue("lineHeight",e)}get lineHeight(){return this._text?this._text.lineHeight:null}set wrapLines(e){this._setValue("wrapLines",e)}get wrapLines(){return this._text?this._text.wrapLines:null}set lines(e){this._setValue("lines",e)}get lines(){return this._text?this._text.lines:null}set alignment(e){this._setValue("alignment",e)}get alignment(){return this._text?this._text.alignment:null}set autoWidth(e){this._setValue("autoWidth",e)}get autoWidth(){return this._text?this._text.autoWidth:null}set autoHeight(e){this._setValue("autoHeight",e)}get autoHeight(){return this._text?this._text.autoHeight:null}set rtlReorder(e){this._setValue("rtlReorder",e)}get rtlReorder(){return this._text?this._text.rtlReorder:null}set unicodeConverter(e){this._setValue("unicodeConverter",e)}get unicodeConverter(){return this._text?this._text.unicodeConverter:null}set text(e){this._setValue("text",e)}get text(){return this._text?this._text.text:null}set key(e){this._setValue("key",e)}get key(){return this._text?this._text.key:null}set texture(e){this._setValue("texture",e)}get texture(){return this._image?this._image.texture:null}set textureAsset(e){this._setValue("textureAsset",e)}get textureAsset(){return this._image?this._image.textureAsset:null}set material(e){this._setValue("material",e)}get material(){return this._image?this._image.material:null}set materialAsset(e){this._setValue("materialAsset",e)}get materialAsset(){return this._image?this._image.materialAsset:null}set sprite(e){this._setValue("sprite",e)}get sprite(){return this._image?this._image.sprite:null}set spriteAsset(e){this._setValue("spriteAsset",e)}get spriteAsset(){return this._image?this._image.spriteAsset:null}set spriteFrame(e){this._setValue("spriteFrame",e)}get spriteFrame(){return this._image?this._image.spriteFrame:null}set pixelsPerUnit(e){this._setValue("pixelsPerUnit",e)}get pixelsPerUnit(){return this._image?this._image.pixelsPerUnit:null}set opacity(e){this._setValue("opacity",e)}get opacity(){return this._text?this._text.opacity:this._image?this._image.opacity:null}set rect(e){this._setValue("rect",e)}get rect(){return this._image?this._image.rect:null}set mask(e){this._setValue("mask",e)}get mask(){return this._image?this._image.mask:null}set outlineColor(e){this._setValue("outlineColor",e)}get outlineColor(){return this._text?this._text.outlineColor:null}set outlineThickness(e){this._setValue("outlineThickness",e)}get outlineThickness(){return this._text?this._text.outlineThickness:null}set shadowColor(e){this._setValue("shadowColor",e)}get shadowColor(){return this._text?this._text.shadowColor:null}set shadowOffset(e){this._setValue("shadowOffset",e)}get shadowOffset(){return this._text?this._text.shadowOffset:null}set enableMarkup(e){this._setValue("enableMarkup",e)}get enableMarkup(){return this._text?this._text.enableMarkup:null}set rangeStart(e){this._setValue("rangeStart",e)}get rangeStart(){return this._text?this._text.rangeStart:null}set rangeEnd(e){this._setValue("rangeEnd",e)}get rangeEnd(){return this._text?this._text.rangeEnd:null}_setValue(e,t){this._text?(this._text[e]!==t&&this._dirtyBatch(),this._text[e]=t):this._image&&(this._image[e]!==t&&this._dirtyBatch(),this._image[e]=t)}_patch(){this.entity._sync=this._sync,this.entity.setPosition=this._setPosition,this.entity.setLocalPosition=this._setLocalPosition}_unpatch(){this.entity._sync=Ve.prototype._sync,this.entity.setPosition=Ve.prototype.setPosition,this.entity.setLocalPosition=Ve.prototype.setLocalPosition}_setPosition(e,t,s){if(!this.element.screen){Ve.prototype.setPosition.call(this,e,t,s);return}e instanceof x?xu.copy(e):xu.set(e,t,s),this.getWorldTransform(),fy.copy(this.element._screenToWorld).invert(),fy.transformPoint(xu,this.localPosition),this._dirtyLocal||this._dirtifyLocal()}_setLocalPosition(e,t,s){e instanceof x?this.localPosition.copy(e):this.localPosition.set(e,t,s);const i=this.element,r=this.localPosition,a=i._pivot;i._margin.x=r.x-i._calculatedWidth*a.x,i._margin.z=i._localAnchor.z-i._localAnchor.x-i._calculatedWidth-i._margin.x,i._margin.y=r.y-i._calculatedHeight*a.y,i._margin.w=i._localAnchor.w-i._localAnchor.y-i._calculatedHeight-i._margin.y,this._dirtyLocal||this._dirtifyLocal()}_sync(){const e=this.element,t=e.screen;if(t){if(e._anchorDirty){let s=0,i=0,r=0,a=1;if(this._parent&&this._parent.element)s=this._parent.element.calculatedWidth,i=this._parent.element.calculatedHeight,r=this._parent.element.pivot.x,a=this._parent.element.pivot.y;else{const n=t.screen.resolution;s=n.x/t.screen.scale,i=n.y/t.screen.scale}e._anchorTransform.setTranslate(s*(e.anchor.x-r),-(i*(a-e.anchor.y)),0),e._anchorDirty=!1,e._calculateLocalAnchors()}e._sizeDirty&&e._calculateSize(!1,!1)}if(this._dirtyLocal){this.localTransform.setTRS(this.localPosition,this.localRotation,this.localScale);const s=this.localPosition,i=e._pivot;e._margin.x=s.x-e._calculatedWidth*i.x,e._margin.z=e._localAnchor.z-e._localAnchor.x-e._calculatedWidth-e._margin.x,e._margin.y=s.y-e._calculatedHeight*i.y,e._margin.w=e._localAnchor.w-e._localAnchor.y-e._calculatedHeight-e._margin.y,this._dirtyLocal=!1}if(!t){this._dirtyWorld&&(e._cornersDirty=!0,e._canvasCornersDirty=!0,e._worldCornersDirty=!0),Ve.prototype._sync.call(this);return}if(this._dirtyWorld){if(this._parent===null)this.worldTransform.copy(this.localTransform);else if(this._parent.element?e._screenToWorld.mul2(this._parent.element._modelTransform,e._anchorTransform):e._screenToWorld.copy(e._anchorTransform),e._modelTransform.mul2(e._screenToWorld,this.localTransform),t){e._screenToWorld.mul2(t.screen._screenMatrix,e._screenToWorld),t.screen.screenSpace||e._screenToWorld.mul2(t.worldTransform,e._screenToWorld),this.worldTransform.mul2(e._screenToWorld,this.localTransform);const s=e._parentWorldTransform;s.setIdentity();const i=this._parent;i&&i.element&&i!==t&&(Zt.setTRS(x.ZERO,i.getLocalRotation(),i.getLocalScale()),s.mul2(i.element._parentWorldTransform,Zt));const r=ui;r.set(0,0,this.localPosition.z);const a=QB;a.set(e._absLeft+e._pivot.x*e.calculatedWidth,e._absBottom+e._pivot.y*e.calculatedHeight,0),Zt.setTranslate(-a.x,-a.y,-a.z),Uh.setTRS(r,this.getLocalRotation(),this.getLocalScale()),Bh.setTranslate(a.x,a.y,a.z),e._screenTransform.mul2(e._parentWorldTransform,Bh).mul(Uh).mul(Zt),e._cornersDirty=!0,e._canvasCornersDirty=!0,e._worldCornersDirty=!0}else this.worldTransform.copy(e._modelTransform);this._dirtyWorld=!1}}_onInsert(e){const t=this._parseUpToScreen();this.entity._dirtifyWorld(),this._updateScreen(t.screen),this._dirtifyMask()}_dirtifyMask(){let e=this.entity;for(;e;){const t=e.parent;if((t===null||t.screen)&&e.element){(!this.system._prerender||!this.system._prerender.length)&&(this.system._prerender=[],this.system.app.once("prerender",this._onPrerender,this));const s=this.system._prerender.indexOf(this.entity);s>=0&&this.system._prerender.splice(s,1),this.system._prerender.indexOf(e)<0&&this.system._prerender.push(e)}e=t}}_onPrerender(){for(let e=0;e<this.system._prerender.length;e++){const t=this.system._prerender[e];t.element&&t.element.syncMask(1)}this.system._prerender.length=0}_bindScreen(e){e._bindElement(this)}_unbindScreen(e){e._unbindElement(this)}_updateScreen(e){this.screen&&this.screen!==e&&this._unbindScreen(this.screen.screen);const t=this.screen;this.screen=e,this.screen&&this._bindScreen(this.screen.screen),this._calculateSize(this._hasSplitAnchorsX,this._hasSplitAnchorsY),this.fire("set:screen",this.screen,t),this._anchorDirty=!0;const s=this.entity.children;for(let i=0,r=s.length;i<r;i++)s[i].element&&s[i].element._updateScreen(e);this.screen&&this.screen.screen.syncDrawOrder()}syncMask(e){const t=this._parseUpToScreen();this._updateMask(t.mask,e)}_setMaskedBy(e){const t=this._image||this._text;if(e){const s=e.element._image._maskRef;t?._setStencil(new Ys({ref:s,func:xc})),this._maskedBy=e}else t?._setStencil(null),this._maskedBy=null}_updateMask(e,t){if(e){if(this._setMaskedBy(e),this.mask){const i=e.element._image._maskRef,r=new Ys({ref:i,func:xc,zpass:bL});this._image._setStencil(r),this._image._maskRef=t,t++,e=this.entity}const s=this.entity.children;for(let i=0,r=s.length;i<r;i++)s[i].element?._updateMask(e,t);this.mask&&t--}else{if(this._setMaskedBy(null),this.mask){const i=new Ys({ref:t,func:Ei,zpass:AL});this._image._setStencil(i),this._image._maskRef=t,t++,e=this.entity}const s=this.entity.children;for(let i=0,r=s.length;i<r;i++)s[i].element?._updateMask(e,t);this.mask&&t--}}_parseUpToScreen(){const e={screen:null,mask:null};let t=this.entity._parent;for(;t&&!t.screen;)t.element&&t.element.mask&&(e.mask||(e.mask=t)),t=t.parent;return t&&t.screen&&(e.screen=t),e}_onScreenResize(e){this._anchorDirty=!0,this._cornersDirty=!0,this._worldCornersDirty=!0,this._calculateSize(this._hasSplitAnchorsX,this._hasSplitAnchorsY),this.fire("screen:set:resolution",e)}_onScreenSpaceChange(){this.fire("screen:set:screenspace",this.screen.screen.screenSpace)}_onScreenRemove(){this.screen&&(this.screen._destroying?this.screen=null:this._updateScreen(null))}_calculateLocalAnchors(){let e=1e3,t=1e3;const s=this.entity._parent;if(s&&s.element)e=s.element.calculatedWidth,t=s.element.calculatedHeight;else if(this.screen){const i=this.screen.screen.resolution,r=this.screen.screen.scale;e=i.x/r,t=i.y/r}this._localAnchor.set(this._anchor.x*e,this._anchor.y*t,this._anchor.z*e,this._anchor.w*t)}getOffsetPosition(e,t){const s=this.entity.getLocalPosition().clone();return s.x+=e,s.y+=t,this._screenToWorld.transformPoint(s,s),s}onLayersChanged(e,t){this.addModelToLayers(this._image?this._image._renderable.model:this._text._model),e.off("add",this.onLayerAdded,this),e.off("remove",this.onLayerRemoved,this),t.on("add",this.onLayerAdded,this),t.on("remove",this.onLayerRemoved,this)}onLayerAdded(e){this.layers.indexOf(e.id)<0||(this._image?e.addMeshInstances(this._image._renderable.model.meshInstances):this._text&&e.addMeshInstances(this._text._model.meshInstances))}onLayerRemoved(e){this.layers.indexOf(e.id)<0||(this._image?e.removeMeshInstances(this._image._renderable.model.meshInstances):this._text&&e.removeMeshInstances(this._text._model.meshInstances))}onEnable(){const e=this.system.app.scene,t=e.layers;this._image&&this._image.onEnable(),this._text&&this._text.onEnable(),this._group&&this._group.onEnable(),this.useInput&&this.system.app.elementInput&&this.system.app.elementInput.addElement(this),this._evtLayersChanged=e.on("set:layers",this.onLayersChanged,this),t&&(this._evtLayerAdded=t.on("add",this.onLayerAdded,this),this._evtLayerRemoved=t.on("remove",this.onLayerRemoved,this)),this._batchGroupId>=0&&this.system.app.batcher?.insert(nt.ELEMENT,this.batchGroupId,this.entity),this.fire("enableelement")}onDisable(){const t=this.system.app.scene.layers;this._evtLayersChanged?.off(),this._evtLayersChanged=null,t&&(this._evtLayerAdded?.off(),this._evtLayerAdded=null,this._evtLayerRemoved?.off(),this._evtLayerRemoved=null),this._image&&this._image.onDisable(),this._text&&this._text.onDisable(),this._group&&this._group.onDisable(),this.system.app.elementInput&&this.useInput&&this.system.app.elementInput.removeElement(this),this._batchGroupId>=0&&this.system.app.batcher?.remove(nt.ELEMENT,this.batchGroupId,this.entity),this.fire("disableelement")}onRemove(){this.entity.off("insert",this._onInsert,this),this._unpatch(),this._image&&this._image.destroy(),this._text&&this._text.destroy(),this.system.app.elementInput&&this.useInput&&this.system.app.elementInput.removeElement(this),this.screen&&this.screen.screen&&(this._unbindScreen(this.screen.screen),this.screen.screen.syncDrawOrder()),this.off()}_calculateSize(e,t){if(!this.entity._parent&&!this.screen)return;this._calculateLocalAnchors();const s=this._absRight-this._absLeft,i=this._absTop-this._absBottom;e?this._setWidth(s):this._setCalculatedWidth(s,!1),t?this._setHeight(i):this._setCalculatedHeight(i,!1);const r=this.entity.getLocalPosition();r.x=this._margin.x+this._calculatedWidth*this._pivot.x,r.y=this._margin.y+this._calculatedHeight*this._pivot.y,this.entity.setLocalPosition(r),this._sizeDirty=!1}_setWidth(e){this._width=e,this._setCalculatedWidth(e,!1),this.fire("set:width",this._width)}_setHeight(e){this._height=e,this._setCalculatedHeight(e,!1),this.fire("set:height",this._height)}_setCalculatedWidth(e,t){if(!(Math.abs(e-this._calculatedWidth)<=1e-4)){if(this._calculatedWidth=e,this.entity._dirtifyLocal(),t){const s=this.entity.getLocalPosition(),i=this._pivot;this._margin.x=s.x-this._calculatedWidth*i.x,this._margin.z=this._localAnchor.z-this._localAnchor.x-this._calculatedWidth-this._margin.x}this._flagChildrenAsDirty(),this.fire("set:calculatedWidth",this._calculatedWidth),this.fire("resize",this._calculatedWidth,this._calculatedHeight)}}_setCalculatedHeight(e,t){if(!(Math.abs(e-this._calculatedHeight)<=1e-4)){if(this._calculatedHeight=e,this.entity._dirtifyLocal(),t){const s=this.entity.getLocalPosition(),i=this._pivot;this._margin.y=s.y-this._calculatedHeight*i.y,this._margin.w=this._localAnchor.w-this._localAnchor.y-this._calculatedHeight-this._margin.y}this._flagChildrenAsDirty(),this.fire("set:calculatedHeight",this._calculatedHeight),this.fire("resize",this._calculatedWidth,this._calculatedHeight)}}_flagChildrenAsDirty(){const e=this.entity._children;for(let t=0,s=e.length;t<s;t++)e[t].element&&(e[t].element._anchorDirty=!0,e[t].element._sizeDirty=!0)}addModelToLayers(e){this._addedModels.push(e);for(let t=0;t<this.layers.length;t++){const s=this.system.app.scene.layers.getLayerById(this.layers[t]);s&&s.addMeshInstances(e.meshInstances)}}removeModelFromLayers(e){const t=this._addedModels.indexOf(e);t>=0&&this._addedModels.splice(t,1);for(let s=0;s<this.layers.length;s++){const i=this.system.app.scene.layers.getLayerById(this.layers[s]);i&&i.removeMeshInstances(e.meshInstances)}}getMaskOffset(){const e=this.system.app.frame;this._offsetReadAt!==e&&(this._maskOffset=.5,this._offsetReadAt=e);const t=this._maskOffset;return this._maskOffset-=.001,t}isVisibleForCamera(e){let t,s,i,r;if(this.maskedBy){const d=this.maskedBy.element.screenCorners;t=Math.min(Math.min(d[0].x,d[1].x),Math.min(d[2].x,d[3].x)),s=Math.max(Math.max(d[0].x,d[1].x),Math.max(d[2].x,d[3].x)),r=Math.min(Math.min(d[0].y,d[1].y),Math.min(d[2].y,d[3].y)),i=Math.max(Math.max(d[0].y,d[1].y),Math.max(d[2].y,d[3].y))}else{const d=this.system.app.graphicsDevice.width,f=this.system.app.graphicsDevice.height,u=e._rect.z*d,p=e._rect.w*f;t=e._rect.x*d,s=t+u,i=(1-e._rect.y)*f,r=i-p}const a=this.screenCorners,n=Math.min(Math.min(a[0].x,a[1].x),Math.min(a[2].x,a[3].x)),l=Math.max(Math.max(a[0].x,a[1].x),Math.max(a[2].x,a[3].x)),h=Math.min(Math.min(a[0].y,a[1].y),Math.min(a[2].y,a[3].y)),c=Math.max(Math.max(a[0].y,a[1].y),Math.max(a[2].y,a[3].y));return!(l<t||n>s||h>i||c<r)}_isScreenSpace(){return this.screen&&this.screen.screen?this.screen.screen.screenSpace:!1}_isScreenCulled(){return this.screen&&this.screen.screen?this.screen.screen.cull:!1}_dirtyBatch(){this.batchGroupId!==-1&&this.system.app.batcher?.markGroupDirty(this.batchGroupId)}};Rt.EVENT_MOUSEDOWN="mousedown",Rt.EVENT_MOUSEUP="mouseup",Rt.EVENT_MOUSEENTER="mouseenter",Rt.EVENT_MOUSELEAVE="mouseleave",Rt.EVENT_MOUSEMOVE="mousemove",Rt.EVENT_MOUSEWHEEL="mousewheel",Rt.EVENT_CLICK="click",Rt.EVENT_TOUCHSTART="touchstart",Rt.EVENT_TOUCHEND="touchend",Rt.EVENT_TOUCHMOVE="touchmove",Rt.EVENT_TOUCHCANCEL="touchcancel";let Wc=Rt;class JB{constructor(){this.enabled=!0}}const eV=["enabled"];class tV extends qe{constructor(e){super(e),this.id="element",this.ComponentType=Wc,this.DataType=JB,this.schema=eV,this._unicodeConverter=null,this._rtlReorder=null,this._defaultTexture=new ae(e.graphicsDevice,{width:1,height:1,format:zt,name:"element-system"});const t=this._defaultTexture.lock(),s=new Uint8Array(4);s[0]=255,s[1]=255,s[2]=255,s[3]=255,t.set(s),this._defaultTexture.unlock(),this.defaultImageMaterial=null,this.defaultImage9SlicedMaterial=null,this.defaultImage9TiledMaterial=null,this.defaultImageMaskMaterial=null,this.defaultImage9SlicedMaskMaterial=null,this.defaultImage9TiledMaskMaterial=null,this.defaultScreenSpaceImageMaterial=null,this.defaultScreenSpaceImage9SlicedMaterial=null,this.defaultScreenSpaceImage9TiledMaterial=null,this.defaultScreenSpaceImageMask9SlicedMaterial=null,this.defaultScreenSpaceImageMask9TiledMaterial=null,this.defaultScreenSpaceImageMaskMaterial=null,this._defaultTextMaterials={},this.defaultImageMaterials=[],this.on("add",this.onAddComponent,this),this.on("beforeremove",this.onRemoveComponent,this)}destroy(){super.destroy(),this._defaultTexture.destroy()}initializeComponentData(e,t,s){e._beingInitialized=!0,t.anchor!==void 0&&(t.anchor instanceof K?e.anchor.copy(t.anchor):e.anchor.set(t.anchor[0],t.anchor[1],t.anchor[2],t.anchor[3])),t.pivot!==void 0&&(t.pivot instanceof z?e.pivot.copy(t.pivot):e.pivot.set(t.pivot[0],t.pivot[1]));const i=Math.abs(e.anchor.x-e.anchor.z)>.001,r=Math.abs(e.anchor.y-e.anchor.w)>.001;let a=!1,n;t.margin!==void 0&&(t.margin instanceof K?e.margin.copy(t.margin):e._margin.set(t.margin[0],t.margin[1],t.margin[2],t.margin[3]),a=!0),t.left!==void 0&&(e._margin.x=t.left,a=!0),t.bottom!==void 0&&(e._margin.y=t.bottom,a=!0),t.right!==void 0&&(e._margin.z=t.right,a=!0),t.top!==void 0&&(e._margin.w=t.top,a=!0),a&&(e.margin=e._margin);let l=!1;t.width!==void 0&&!i?e.width=t.width:i&&(l=!0),t.height!==void 0&&!r?e.height=t.height:r&&(l=!0),l&&(e.anchor=e.anchor),t.enabled!==void 0&&(e.enabled=t.enabled),t.useInput!==void 0&&(e.useInput=t.useInput),t.fitMode!==void 0&&(e.fitMode=t.fitMode),e.batchGroupId=t.batchGroupId===void 0||t.batchGroupId===null?-1:t.batchGroupId,t.layers&&Array.isArray(t.layers)&&(e.layers=t.layers.slice(0)),t.type!==void 0&&(e.type=t.type),e.type===Ip?(t.rect!==void 0&&(e.rect=t.rect),t.color!==void 0&&(n=t.color,n instanceof q||(n=new q(t.color[0],t.color[1],t.color[2])),e.color=n),t.opacity!==void 0&&(e.opacity=t.opacity),t.textureAsset!==void 0&&(e.textureAsset=t.textureAsset),t.texture&&(e.texture=t.texture),t.spriteAsset!==void 0&&(e.spriteAsset=t.spriteAsset),t.sprite&&(e.sprite=t.sprite),t.spriteFrame!==void 0&&(e.spriteFrame=t.spriteFrame),t.pixelsPerUnit!==void 0&&t.pixelsPerUnit!==null&&(e.pixelsPerUnit=t.pixelsPerUnit),t.materialAsset!==void 0&&(e.materialAsset=t.materialAsset),t.material&&(e.material=t.material),t.mask!==void 0&&(e.mask=t.mask)):e.type===Qx&&(t.autoWidth!==void 0&&(e.autoWidth=t.autoWidth),t.autoHeight!==void 0&&(e.autoHeight=t.autoHeight),t.rtlReorder!==void 0&&(e.rtlReorder=t.rtlReorder),t.unicodeConverter!==void 0&&(e.unicodeConverter=t.unicodeConverter),t.text!==null&&t.text!==void 0?e.text=t.text:t.key!==null&&t.key!==void 0&&(e.key=t.key),t.color!==void 0&&(n=t.color,n instanceof q||(n=new q(n[0],n[1],n[2])),e.color=n),t.opacity!==void 0&&(e.opacity=t.opacity),t.spacing!==void 0&&(e.spacing=t.spacing),t.fontSize!==void 0&&(e.fontSize=t.fontSize,t.lineHeight||(e.lineHeight=t.fontSize)),t.lineHeight!==void 0&&(e.lineHeight=t.lineHeight),t.maxLines!==void 0&&(e.maxLines=t.maxLines),t.wrapLines!==void 0&&(e.wrapLines=t.wrapLines),t.minFontSize!==void 0&&(e.minFontSize=t.minFontSize),t.maxFontSize!==void 0&&(e.maxFontSize=t.maxFontSize),t.autoFitWidth&&(e.autoFitWidth=t.autoFitWidth),t.autoFitHeight&&(e.autoFitHeight=t.autoFitHeight),t.fontAsset!==void 0&&(e.fontAsset=t.fontAsset),t.font!==void 0&&(e.font=t.font),t.alignment!==void 0&&(e.alignment=t.alignment),t.outlineColor!==void 0&&(e.outlineColor=t.outlineColor),t.outlineThickness!==void 0&&(e.outlineThickness=t.outlineThickness),t.shadowColor!==void 0&&(e.shadowColor=t.shadowColor),t.shadowOffset!==void 0&&(e.shadowOffset=t.shadowOffset),t.enableMarkup!==void 0&&(e.enableMarkup=t.enableMarkup));const h=e._parseUpToScreen();h.screen&&e._updateScreen(h.screen),super.initializeComponentData(e,t,s),e._beingInitialized=!1,e.type===Ip&&e._image._meshDirty&&e._image._updateMesh(e._image.mesh)}onAddComponent(e,t){e.fire("element:add")}onRemoveComponent(e,t){t.onRemove()}cloneComponent(e,t){const s=e.element,i={enabled:s.enabled,width:s.width,height:s.height,anchor:s.anchor.clone(),pivot:s.pivot.clone(),margin:s.margin.clone(),alignment:s.alignment&&s.alignment.clone()||s.alignment,autoWidth:s.autoWidth,autoHeight:s.autoHeight,type:s.type,rect:s.rect&&s.rect.clone()||s.rect,rtlReorder:s.rtlReorder,unicodeConverter:s.unicodeConverter,materialAsset:s.materialAsset,material:s.material,color:s.color&&s.color.clone()||s.color,opacity:s.opacity,textureAsset:s.textureAsset,texture:s.texture,spriteAsset:s.spriteAsset,sprite:s.sprite,spriteFrame:s.spriteFrame,pixelsPerUnit:s.pixelsPerUnit,spacing:s.spacing,lineHeight:s.lineHeight,wrapLines:s.wrapLines,layers:s.layers,fontSize:s.fontSize,minFontSize:s.minFontSize,maxFontSize:s.maxFontSize,autoFitWidth:s.autoFitWidth,autoFitHeight:s.autoFitHeight,maxLines:s.maxLines,fontAsset:s.fontAsset,font:s.font,useInput:s.useInput,fitMode:s.fitMode,batchGroupId:s.batchGroupId,mask:s.mask,outlineColor:s.outlineColor&&s.outlineColor.clone()||s.outlineColor,outlineThickness:s.outlineThickness,shadowColor:s.shadowColor&&s.shadowColor.clone()||s.shadowColor,shadowOffset:s.shadowOffset&&s.shadowOffset.clone()||s.shadowOffset,enableMarkup:s.enableMarkup};return s.key!==void 0&&s.key!==null?i.key=s.key:i.text=s.text,this.addComponent(t,i)}getTextElementMaterial(e,t,s){const i=(e&&1)|(t&&2)|(s&&4);let r=this._defaultTextMaterials[i];if(r)return r;let a="TextMaterial";return r=new bs,t?(r.msdfMap=this._defaultTexture,r.msdfTextAttribute=s,r.emissive.set(1,1,1)):(a=`Bitmap${a}`,r.emissive.set(1,1,1),r.emissiveMap=this._defaultTexture,r.opacityMap=this._defaultTexture,r.opacityMapChannel="a"),e&&(a=`ScreenSpace${a}`,r.depthTest=!1),r.name=`default${a}`,r.useLighting=!1,r.useTonemap=!1,r.useFog=!1,r.useSkybox=!1,r.diffuse.set(0,0,0),r.opacity=.5,r.blendType=pa,r.depthWrite=!1,r.emissiveVertexColor=!0,r.update(),this._defaultTextMaterials[i]=r,r}_createBaseImageMaterial(){const e=new bs;return e.diffuse.set(0,0,0),e.emissive.set(1,1,1),e.emissiveMap=this._defaultTexture,e.opacityMap=this._defaultTexture,e.opacityMapChannel="a",e.useLighting=!1,e.useTonemap=!1,e.useFog=!1,e.useSkybox=!1,e.blendType=pa,e.depthWrite=!1,e}getImageElementMaterial(e,t,s,i){return e?t?s?(this.defaultScreenSpaceImageMask9SlicedMaterial||(this.defaultScreenSpaceImageMask9SlicedMaterial=this._createBaseImageMaterial(),this.defaultScreenSpaceImageMask9SlicedMaterial.name="defaultScreenSpaceImageMask9SlicedMaterial",this.defaultScreenSpaceImageMask9SlicedMaterial.nineSlicedMode=it,this.defaultScreenSpaceImageMask9SlicedMaterial.depthTest=!1,this.defaultScreenSpaceImageMask9SlicedMaterial.alphaTest=1,this.defaultScreenSpaceImageMask9SlicedMaterial.redWrite=!1,this.defaultScreenSpaceImageMask9SlicedMaterial.greenWrite=!1,this.defaultScreenSpaceImageMask9SlicedMaterial.blueWrite=!1,this.defaultScreenSpaceImageMask9SlicedMaterial.alphaWrite=!1,this.defaultScreenSpaceImageMask9SlicedMaterial.update(),this.defaultImageMaterials.push(this.defaultScreenSpaceImageMask9SlicedMaterial)),this.defaultScreenSpaceImageMask9SlicedMaterial):i?(this.defaultScreenSpaceImageMask9TiledMaterial||(this.defaultScreenSpaceImageMask9TiledMaterial=this.defaultScreenSpaceImage9TiledMaterial.clone(),this.defaultScreenSpaceImageMask9TiledMaterial.name="defaultScreenSpaceImageMask9TiledMaterial",this.defaultScreenSpaceImageMask9TiledMaterial.nineSlicedMode=rt,this.defaultScreenSpaceImageMask9TiledMaterial.depthTest=!1,this.defaultScreenSpaceImageMask9TiledMaterial.alphaTest=1,this.defaultScreenSpaceImageMask9TiledMaterial.redWrite=!1,this.defaultScreenSpaceImageMask9TiledMaterial.greenWrite=!1,this.defaultScreenSpaceImageMask9TiledMaterial.blueWrite=!1,this.defaultScreenSpaceImageMask9TiledMaterial.alphaWrite=!1,this.defaultScreenSpaceImageMask9TiledMaterial.update(),this.defaultImageMaterials.push(this.defaultScreenSpaceImageMask9TiledMaterial)),this.defaultScreenSpaceImageMask9TiledMaterial):(this.defaultScreenSpaceImageMaskMaterial||(this.defaultScreenSpaceImageMaskMaterial=this._createBaseImageMaterial(),this.defaultScreenSpaceImageMaskMaterial.name="defaultScreenSpaceImageMaskMaterial",this.defaultScreenSpaceImageMaskMaterial.depthTest=!1,this.defaultScreenSpaceImageMaskMaterial.alphaTest=1,this.defaultScreenSpaceImageMaskMaterial.redWrite=!1,this.defaultScreenSpaceImageMaskMaterial.greenWrite=!1,this.defaultScreenSpaceImageMaskMaterial.blueWrite=!1,this.defaultScreenSpaceImageMaskMaterial.alphaWrite=!1,this.defaultScreenSpaceImageMaskMaterial.update(),this.defaultImageMaterials.push(this.defaultScreenSpaceImageMaskMaterial)),this.defaultScreenSpaceImageMaskMaterial):s?(this.defaultScreenSpaceImage9SlicedMaterial||(this.defaultScreenSpaceImage9SlicedMaterial=this._createBaseImageMaterial(),this.defaultScreenSpaceImage9SlicedMaterial.name="defaultScreenSpaceImage9SlicedMaterial",this.defaultScreenSpaceImage9SlicedMaterial.nineSlicedMode=it,this.defaultScreenSpaceImage9SlicedMaterial.depthTest=!1,this.defaultScreenSpaceImage9SlicedMaterial.update(),this.defaultImageMaterials.push(this.defaultScreenSpaceImage9SlicedMaterial)),this.defaultScreenSpaceImage9SlicedMaterial):i?(this.defaultScreenSpaceImage9TiledMaterial||(this.defaultScreenSpaceImage9TiledMaterial=this._createBaseImageMaterial(),this.defaultScreenSpaceImage9TiledMaterial.name="defaultScreenSpaceImage9TiledMaterial",this.defaultScreenSpaceImage9TiledMaterial.nineSlicedMode=rt,this.defaultScreenSpaceImage9TiledMaterial.depthTest=!1,this.defaultScreenSpaceImage9TiledMaterial.update(),this.defaultImageMaterials.push(this.defaultScreenSpaceImage9TiledMaterial)),this.defaultScreenSpaceImage9TiledMaterial):(this.defaultScreenSpaceImageMaterial||(this.defaultScreenSpaceImageMaterial=this._createBaseImageMaterial(),this.defaultScreenSpaceImageMaterial.name="defaultScreenSpaceImageMaterial",this.defaultScreenSpaceImageMaterial.depthTest=!1,this.defaultScreenSpaceImageMaterial.update(),this.defaultImageMaterials.push(this.defaultScreenSpaceImageMaterial)),this.defaultScreenSpaceImageMaterial):t?s?(this.defaultImage9SlicedMaskMaterial||(this.defaultImage9SlicedMaskMaterial=this._createBaseImageMaterial(),this.defaultImage9SlicedMaskMaterial.name="defaultImage9SlicedMaskMaterial",this.defaultImage9SlicedMaskMaterial.nineSlicedMode=it,this.defaultImage9SlicedMaskMaterial.alphaTest=1,this.defaultImage9SlicedMaskMaterial.redWrite=!1,this.defaultImage9SlicedMaskMaterial.greenWrite=!1,this.defaultImage9SlicedMaskMaterial.blueWrite=!1,this.defaultImage9SlicedMaskMaterial.alphaWrite=!1,this.defaultImage9SlicedMaskMaterial.update(),this.defaultImageMaterials.push(this.defaultImage9SlicedMaskMaterial)),this.defaultImage9SlicedMaskMaterial):i?(this.defaultImage9TiledMaskMaterial||(this.defaultImage9TiledMaskMaterial=this._createBaseImageMaterial(),this.defaultImage9TiledMaskMaterial.name="defaultImage9TiledMaskMaterial",this.defaultImage9TiledMaskMaterial.nineSlicedMode=rt,this.defaultImage9TiledMaskMaterial.alphaTest=1,this.defaultImage9TiledMaskMaterial.redWrite=!1,this.defaultImage9TiledMaskMaterial.greenWrite=!1,this.defaultImage9TiledMaskMaterial.blueWrite=!1,this.defaultImage9TiledMaskMaterial.alphaWrite=!1,this.defaultImage9TiledMaskMaterial.update(),this.defaultImageMaterials.push(this.defaultImage9TiledMaskMaterial)),this.defaultImage9TiledMaskMaterial):(this.defaultImageMaskMaterial||(this.defaultImageMaskMaterial=this._createBaseImageMaterial(),this.defaultImageMaskMaterial.name="defaultImageMaskMaterial",this.defaultImageMaskMaterial.alphaTest=1,this.defaultImageMaskMaterial.redWrite=!1,this.defaultImageMaskMaterial.greenWrite=!1,this.defaultImageMaskMaterial.blueWrite=!1,this.defaultImageMaskMaterial.alphaWrite=!1,this.defaultImageMaskMaterial.update(),this.defaultImageMaterials.push(this.defaultImageMaskMaterial)),this.defaultImageMaskMaterial):s?(this.defaultImage9SlicedMaterial||(this.defaultImage9SlicedMaterial=this._createBaseImageMaterial(),this.defaultImage9SlicedMaterial.name="defaultImage9SlicedMaterial",this.defaultImage9SlicedMaterial.nineSlicedMode=it,this.defaultImage9SlicedMaterial.update(),this.defaultImageMaterials.push(this.defaultImage9SlicedMaterial)),this.defaultImage9SlicedMaterial):i?(this.defaultImage9TiledMaterial||(this.defaultImage9TiledMaterial=this._createBaseImageMaterial(),this.defaultImage9TiledMaterial.name="defaultImage9TiledMaterial",this.defaultImage9TiledMaterial.nineSlicedMode=rt,this.defaultImage9TiledMaterial.update(),this.defaultImageMaterials.push(this.defaultImage9TiledMaterial)),this.defaultImage9TiledMaterial):(this.defaultImageMaterial||(this.defaultImageMaterial=this._createBaseImageMaterial(),this.defaultImageMaterial.name="defaultImageMaterial",this.defaultImageMaterial.update(),this.defaultImageMaterials.push(this.defaultImageMaterial)),this.defaultImageMaterial)}registerUnicodeConverter(e){this._unicodeConverter=e}registerRtlReorder(e){this._rtlReorder=e}getUnicodeConverter(){return this._unicodeConverter}getRtlReorder(){return this._rtlReorder}}const Qa="free",Ja="limited",en="locked",sV=["angularDampingX","angularDampingY","angularDampingZ","angularEquilibriumX","angularEquilibriumY","angularEquilibriumZ","angularLimitsX","angularLimitsY","angularLimitsZ","angularMotionX","angularMotionY","angularMotionZ","angularSpringX","angularSpringY","angularSpringZ","angularStiffnessX","angularStiffnessY","angularStiffnessZ","breakForce","enableCollision","enabled","entityA","entityB","linearDampingX","linearDampingY","linearDampingZ","linearEquilibriumX","linearEquilibriumY","linearEquilibriumZ","linearLimitsX","linearLimitsY","linearLimitsZ","linearMotionX","linearMotionY","linearMotionZ","linearSpringX","linearSpringY","linearSpringZ","linearStiffnessX","linearStiffnessY","linearStiffnessZ"];class ng extends he{constructor(e,t){super(e,t),this._constraint=null,this._entityA=null,this._entityB=null,this._breakForce=34e37,this._enableCollision=!0,this._linearMotionX=en,this._linearLimitsX=new z(0,0),this._linearSpringX=!1,this._linearStiffnessX=0,this._linearDampingX=1,this._linearEquilibriumX=0,this._linearMotionY=en,this._linearLimitsY=new z(0,0),this._linearSpringY=!1,this._linearStiffnessY=0,this._linearDampingY=1,this._linearEquilibriumY=0,this._linearMotionZ=en,this._linearLimitsZ=new z(0,0),this._linearSpringZ=!1,this._linearStiffnessZ=0,this._linearDampingZ=1,this._linearEquilibriumZ=0,this._angularMotionX=en,this._angularLimitsX=new z(0,0),this._angularSpringX=!1,this._angularStiffnessX=0,this._angularDampingX=1,this._angularEquilibriumX=0,this._angularMotionY=en,this._angularLimitsY=new z(0,0),this._angularSpringY=!1,this._angularStiffnessY=0,this._angularDampingY=1,this._angularEquilibriumY=0,this._angularMotionZ=en,this._angularLimitsZ=new z(0,0),this._angularSpringZ=!1,this._angularEquilibriumZ=0,this._angularDampingZ=1,this._angularStiffnessZ=0,this.on("set_enabled",this._onSetEnabled,this)}set entityA(e){this._destroyConstraint(),this._entityA=e,this._createConstraint()}get entityA(){return this._entityA}set entityB(e){this._destroyConstraint(),this._entityB=e,this._createConstraint()}get entityB(){return this._entityB}set breakForce(e){this._constraint&&this._breakForce!==e&&(this._constraint.setBreakingImpulseThreshold(e),this._breakForce=e)}get breakForce(){return this._breakForce}set enableCollision(e){this._destroyConstraint(),this._enableCollision=e,this._createConstraint()}get enableCollision(){return this._enableCollision}set angularLimitsX(e){this._angularLimitsX.equals(e)||(this._angularLimitsX.copy(e),this._updateAngularLimits())}get angularLimitsX(){return this._angularLimitsX}set angularMotionX(e){this._angularMotionX!==e&&(this._angularMotionX=e,this._updateAngularLimits())}get angularMotionX(){return this._angularMotionX}set angularLimitsY(e){this._angularLimitsY.equals(e)||(this._angularLimitsY.copy(e),this._updateAngularLimits())}get angularLimitsY(){return this._angularLimitsY}set angularMotionY(e){this._angularMotionY!==e&&(this._angularMotionY=e,this._updateAngularLimits())}get angularMotionY(){return this._angularMotionY}set angularLimitsZ(e){this._angularLimitsZ.equals(e)||(this._angularLimitsZ.copy(e),this._updateAngularLimits())}get angularLimitsZ(){return this._angularLimitsZ}set angularMotionZ(e){this._angularMotionZ!==e&&(this._angularMotionZ=e,this._updateAngularLimits())}get angularMotionZ(){return this._angularMotionZ}set linearLimitsX(e){this._linearLimitsX.equals(e)||(this._linearLimitsX.copy(e),this._updateLinearLimits())}get linearLimitsX(){return this._linearLimitsX}set linearMotionX(e){this._linearMotionX!==e&&(this._linearMotionX=e,this._updateLinearLimits())}get linearMotionX(){return this._linearMotionX}set linearLimitsY(e){this._linearLimitsY.equals(e)||(this._linearLimitsY.copy(e),this._updateLinearLimits())}get linearLimitsY(){return this._linearLimitsY}set linearMotionY(e){this._linearMotionY!==e&&(this._linearMotionY=e,this._updateLinearLimits())}get linearMotionY(){return this._linearMotionY}set linearLimitsZ(e){this._linearLimitsZ.equals(e)||(this._linearLimitsZ.copy(e),this._updateLinearLimits())}get linearLimitsZ(){return this._linearLimitsZ}set linearMotionZ(e){this._linearMotionZ!==e&&(this._linearMotionZ=e,this._updateLinearLimits())}get linearMotionZ(){return this._linearMotionZ}_convertTransform(e,t){const s=e.getTranslation(),i=new Q;i.setFromMat4(e);const r=new Ammo.btVector3(s.x,s.y,s.z),a=new Ammo.btQuaternion(i.x,i.y,i.z,i.w);t.setOrigin(r),t.setRotation(a),Ammo.destroy(r),Ammo.destroy(a)}_updateAngularLimits(){const e=this._constraint;if(e){let t,s,i,r,a,n;this._angularMotionX===Ja?(t=this._angularLimitsX.x*B.DEG_TO_RAD,r=this._angularLimitsX.y*B.DEG_TO_RAD):this._angularMotionX===Qa?(t=1,r=0):t=r=0,this._angularMotionY===Ja?(s=this._angularLimitsY.x*B.DEG_TO_RAD,a=this._angularLimitsY.y*B.DEG_TO_RAD):this._angularMotionY===Qa?(s=1,a=0):s=a=0,this._angularMotionZ===Ja?(i=this._angularLimitsZ.x*B.DEG_TO_RAD,n=this._angularLimitsZ.y*B.DEG_TO_RAD):this._angularMotionZ===Qa?(i=1,n=0):i=n=0;const l=new Ammo.btVector3(t,s,i);e.setAngularLowerLimit(l),l.setValue(r,a,n),e.setAngularUpperLimit(l),Ammo.destroy(l)}}_updateLinearLimits(){const e=this._constraint;if(e){let t,s,i,r,a,n;this._linearMotionX===Ja?(t=this._linearLimitsX.x,r=this._linearLimitsX.y):this._linearMotionX===Qa?(t=1,r=0):t=r=0,this._linearMotionY===Ja?(s=this._linearLimitsY.x,a=this._linearLimitsY.y):this._linearMotionY===Qa?(s=1,a=0):s=a=0,this._linearMotionZ===Ja?(i=this._linearLimitsZ.x,n=this._linearLimitsZ.y):this._linearMotionZ===Qa?(i=1,n=0):i=n=0;const l=new Ammo.btVector3(t,s,i);e.setLinearLowerLimit(l),l.setValue(r,a,n),e.setLinearUpperLimit(l),Ammo.destroy(l)}}_createConstraint(){if(this._entityA&&this._entityA.rigidbody){this._destroyConstraint();const e=new $,t=this._entityA.rigidbody.body;t.activate();const s=this.entity.getWorldTransform(),r=this._entityA.getWorldTransform().clone().invert();e.mul2(r,s);const a=new Ammo.btTransform;if(this._convertTransform(e,a),this._entityB&&this._entityB.rigidbody){const c=this._entityB.rigidbody.body;c.activate();const f=this._entityB.getWorldTransform().clone().invert();e.mul2(f,s);const u=new Ammo.btTransform;this._convertTransform(e,u),this._constraint=new Ammo.btGeneric6DofSpringConstraint(t,c,a,u,!this._enableCollision),Ammo.destroy(u)}else this._constraint=new Ammo.btGeneric6DofSpringConstraint(t,a,!this._enableCollision);Ammo.destroy(a);const n=["X","Y","Z","X","Y","Z"];for(let c=0;c<6;c++){const d=c<3?"_linear":"_angular";this._constraint.enableSpring(c,this[`${d}Spring${n[c]}`]),this._constraint.setDamping(c,this[`${d}Damping${n[c]}`]),this._constraint.setEquilibriumPoint(c,this[`${d}Equilibrium${n[c]}`]),this._constraint.setStiffness(c,this[`${d}Stiffness${n[c]}`])}this._constraint.setBreakingImpulseThreshold(this._breakForce),this._updateLinearLimits(),this._updateAngularLimits(),this.system.app.systems.rigidbody.dynamicsWorld.addConstraint(this._constraint,!this._enableCollision)}}_destroyConstraint(){this._constraint&&(this.system.app.systems.rigidbody.dynamicsWorld.removeConstraint(this._constraint),Ammo.destroy(this._constraint),this._constraint=null)}initFromData(e){for(const t of sV)e.hasOwnProperty(t)&&(e[t]instanceof z?this[`_${t}`].copy(e[t]):this[`_${t}`]=e[t]);this._createConstraint()}onEnable(){this._createConstraint()}onDisable(){this._destroyConstraint()}_onSetEnabled(e,t,s){}_onBeforeRemove(){this.fire("remove")}}const iV={Damping:"setDamping",Equilibrium:"setEquilibriumPoint",Spring:"enableSpring",Stiffness:"setStiffness"};["linear","angular"].forEach(o=>{["Damping","Equilibrium","Spring","Stiffness"].forEach(e=>{["X","Y","Z"].forEach(t=>{const s=o+e+t,i=`_${s}`;let r=o==="linear"?0:3;t==="Y"&&(r+=1),t==="Z"&&(r+=2),Object.defineProperty(ng.prototype,s,{get:function(){return this[i]},set:function(a){this[i]!==a&&(this[i]=a,this._constraint[iV[e]](r,a))}})})})});class rV{constructor(){this.enabled=!0}}const Vp=["enabled"];class aV extends qe{constructor(e){super(e),this.id="joint",this.app=e,this.ComponentType=ng,this.DataType=rV,this.schema=Vp}initializeComponentData(e,t,s){e.initFromData(t),super.initializeComponentData(e,t,Vp)}}he._buildAccessors(ng.prototype,Vp);class iE extends he{set minWidth(e){e!==this._minWidth&&(this._minWidth=e,this.fire("resize"))}get minWidth(){return this._minWidth}set minHeight(e){e!==this._minHeight&&(this._minHeight=e,this.fire("resize"))}get minHeight(){return this._minHeight}set maxWidth(e){e!==this._maxWidth&&(this._maxWidth=e,this.fire("resize"))}get maxWidth(){return this._maxWidth}set maxHeight(e){e!==this._maxHeight&&(this._maxHeight=e,this.fire("resize"))}get maxHeight(){return this._maxHeight}set fitWidthProportion(e){e!==this._fitWidthProportion&&(this._fitWidthProportion=e,this.fire("resize"))}get fitWidthProportion(){return this._fitWidthProportion}set fitHeightProportion(e){e!==this._fitHeightProportion&&(this._fitHeightProportion=e,this.fire("resize"))}get fitHeightProportion(){return this._fitHeightProportion}set excludeFromLayout(e){e!==this._excludeFromLayout&&(this._excludeFromLayout=e,this.fire("resize"))}get excludeFromLayout(){return this._excludeFromLayout}constructor(...e){super(...e),this._minWidth=0,this._minHeight=0,this._maxWidth=null,this._maxHeight=null,this._fitWidthProportion=0,this._fitHeightProportion=0,this._excludeFromLayout=!1}}class nV{constructor(){this.enabled=!0}}const rE=["enabled"];class oV extends qe{constructor(e){super(e),this.id="layoutchild",this.ComponentType=iE,this.DataType=nV,this.schema=rE}initializeComponentData(e,t,s){t.enabled!==void 0&&(e.enabled=t.enabled),t.minWidth!==void 0&&(e.minWidth=t.minWidth),t.minHeight!==void 0&&(e.minHeight=t.minHeight),t.maxWidth!==void 0&&(e.maxWidth=t.maxWidth),t.maxHeight!==void 0&&(e.maxHeight=t.maxHeight),t.fitWidthProportion!==void 0&&(e.fitWidthProportion=t.fitWidthProportion),t.fitHeightProportion!==void 0&&(e.fitHeightProportion=t.fitHeightProportion),t.excludeFromLayout!==void 0&&(e.excludeFromLayout=t.excludeFromLayout),super.initializeComponentData(e,t,s)}cloneComponent(e,t){const s=e.layoutchild;return this.addComponent(t,{enabled:s.enabled,minWidth:s.minWidth,minHeight:s.minHeight,maxWidth:s.maxWidth,maxHeight:s.maxHeight,fitWidthProportion:s.fitWidthProportion,fitHeightProportion:s.fitHeightProportion,excludeFromLayout:s.excludeFromLayout})}}he._buildAccessors(iE.prototype,rE);const zp=0,lV=1,uy=2,hV=3,$c={};$c[ce]={axis:"x",size:"width",calculatedSize:"calculatedWidth",minSize:"minWidth",maxSize:"maxWidth",fitting:"widthFitting",fittingProportion:"fitWidthProportion"};$c[Pe]={axis:"y",size:"height",calculatedSize:"calculatedHeight",minSize:"minHeight",maxSize:"maxHeight",fitting:"heightFitting",fittingProportion:"fitHeightProportion"};const og={};og[ce]=Pe;og[Pe]=ce;const cV={minWidth:0,minHeight:0,maxWidth:Number.POSITIVE_INFINITY,maxHeight:Number.POSITIVE_INFINITY,width:null,height:null,fitWidthProportion:0,fitHeightProportion:0},It={NONE:"NONE",APPLY_STRETCHING:"APPLY_STRETCHING",APPLY_SHRINKING:"APPLY_SHRINKING"},Mt=new z;function aE(o){let e;const t=$c[o],s=$c[og[o]];function i(C,I){return-I[t.size]*C.pivot[t.axis]}function r(C,I){return-I[s.size]*C.pivot[s.axis]}function a(C,I){return I[t.size]*(1-C.pivot[t.axis])}function n(C,I){C=C.filter(l),e=I,Mt.x=e.containerSize.x-e.padding.x-e.padding.z,Mt.y=e.containerSize.y-e.padding.y-e.padding.w,h(C);const R=d(c(C)),O=u(R,f(R)),N=A(R,O);return v(R,O,N),S(R,O,N),b(R)}function l(C){const I=C.entity.layoutchild;return!I||!I.enabled||!I.excludeFromLayout}function h(C){for(let I=0;I<C.length;++I){const R=C[I],O=R.anchor;(O.x!==0||O.y!==0||O.z!==0||O.w!==0)&&(R.anchor=K.ZERO)}}function c(C){if(!e.wrap)return[C];const I=[[]],R=E(C);let O=0;const N=e[t.fitting]===uy;for(let F=0;F<C.length;++F){I[I.length-1].length>0&&(O+=e.spacing[t.axis]);const W=R[F][t.size];O+=W,!N&&O>Mt[t.axis]&&I[I.length-1].length!==0&&(O=W,I.push([])),I[I.length-1].push(C[F]),N&&O>Mt[t.axis]&&F!==C.length-1&&(O=0,I.push([]))}return I}function d(C){const I=e.orientation===ce&&e.reverseX||e.orientation===Pe&&e.reverseY,R=e.orientation===ce&&e.reverseY||e.orientation===Pe&&e.reverseX;if(I)for(let O=0;O<C.length;++O)I&&C[O].reverse();return R&&C.reverse(),C}function f(C){const I=[];for(let R=0;R<C.length;++R){const O=C[R],N=E(O),F=m(N,t),W=p(e[t.fitting],F,Mt[t.axis]);W===It.APPLY_STRETCHING?_(N,F,t):W===It.APPLY_SHRINKING&&g(N,F,t),I.push(N)}return I}function u(C,I){const R=[],O=[];for(let W=0;W<C.length;++W){const X=C[W];X.largestElement=null,X.largestSize={width:Number.NEGATIVE_INFINITY,height:Number.NEGATIVE_INFINITY};for(let V=0;V<X.length;++V){const Y=I[W][V];Y[s.size]>X.largestSize[s.size]&&(X.largestElement=X[V],X.largestSize=Y)}R.push(X.largestElement),O.push(X.largestSize)}const N=m(O,s),F=p(e[s.fitting],N,Mt[s.axis]);F===It.APPLY_STRETCHING?_(O,N,s):F===It.APPLY_SHRINKING&&g(O,N,s);for(let W=0;W<C.length;++W){const X=C[W];for(let V=0;V<X.length;++V){const Y=I[W][V],j=Y[s.size],re=C.length===1?Mt[s.axis]:X.largestSize[s.size],Ie=p(e[s.fitting],j,re);Ie===It.APPLY_STRETCHING?Y[s.size]=Math.min(re,Y[s.maxSize]):Ie===It.APPLY_SHRINKING&&(Y[s.size]=Math.max(re,Y[s.minSize]))}}return I}function p(C,I,R){switch(C){case zp:return It.NONE;case lV:return I<R?It.APPLY_STRETCHING:It.NONE;case uy:return I>=R?It.APPLY_SHRINKING:It.NONE;case hV:return I<R?It.APPLY_STRETCHING:It.APPLY_SHRINKING;default:throw new Error(`Unrecognized fitting mode: ${C}`)}}function m(C,I){const R=P(C,I.size),O=(C.length-1)*e.spacing[I.axis];return R+O}function _(C,I,R){const O=D(C,R.maxSize),N=M(C,R.fittingProportion),F=U(N,O);let W=Mt[R.axis]-I;for(let X=0;X<C.length;++X){const V=O[X],Y=y(V,W,N,F),j=C[V][R.size]+Y,re=C[V][R.maxSize],Ie=Math.min(j,re);C[V][R.size]=Ie;const Ge=Math.max(j-Ie,0),We=Y-Ge;W-=We}}function g(C,I,R){const O=D(C,R.minSize,!0),N=M(C,R.fittingProportion),F=L(N),W=U(F,O);let X=I-Mt[R.axis];for(let V=0;V<C.length;++V){const Y=O[V],j=y(Y,X,F,W),re=C[Y][R.size]-j,Ie=C[Y][R.minSize],Ge=Math.max(re,Ie);C[Y][R.size]=Ge;const We=Math.max(Ge-re,0),Cs=j-We;X-=Cs}}function y(C,I,R,O){const N=R[C],F=O[C];return Math.abs(N)<1e-5&&Math.abs(F)<1e-5?I:I*N/F}function A(C,I){const R={};R[t.axis]=0,R[s.axis]=0,C[t.size]=Number.NEGATIVE_INFINITY;const O=[];for(let N=0;N<C.length;++N){const F=C[N];if(F.length===0){O.push([]);continue}const W=[],X=I[N];for(let V=0;V<F.length;++V){const Y=F[V],j=X[V];R[s.axis]-=r(Y,j),R[t.axis]-=i(Y,j),W[V]={},W[V][t.axis]=R[t.axis],W[V][s.axis]=R[s.axis],R[s.axis]+=r(Y,j),R[t.axis]+=a(Y,j)+e.spacing[t.axis]}F[t.size]=R[t.axis]-e.spacing[t.axis],F[s.size]=F.largestSize[s.size],C[t.size]=Math.max(C[t.size],F[t.size]),R[t.axis]=0,R[s.axis]+=F[s.size]+e.spacing[s.axis],O.push(W)}return C[s.size]=R[s.axis]-e.spacing[s.axis],O}function v(C,I,R){const O=e.alignment[t.axis],N=e.alignment[s.axis],F=e.padding[t.axis],W=e.padding[s.axis];for(let X=0;X<C.length;++X){const V=C[X],Y=I[X],j=R[X],re=(Mt[t.axis]-V[t.size])*O+F,Ie=(Mt[s.axis]-C[s.size])*N+W;for(let Ge=0;Ge<V.length;++Ge){const We=(V[s.size]-Y[Ge][s.size])*e.alignment[s.axis];j[Ge][t.axis]+=re,j[Ge][s.axis]+=Ie+We}}}function S(C,I,R){for(let O=0;O<C.length;++O){const N=C[O],F=I[O],W=R[O];for(let X=0;X<N.length;++X){const V=N[X];V[t.calculatedSize]=F[X][t.size],V[s.calculatedSize]=F[X][s.size],e.orientation===ce?V.entity.setLocalPosition(W[X][t.axis],W[X][s.axis],V.entity.getLocalPosition().z):V.entity.setLocalPosition(W[X][s.axis],W[X][t.axis],V.entity.getLocalPosition().z)}}}function b(C){const I=C.width,R=C.height,O=(Mt.x-I)*e.alignment.x+e.padding.x,N=(Mt.y-R)*e.alignment.y+e.padding.y;return{bounds:new K(O,N,I,R)}}function E(C){const I=[];for(let R=0;R<C.length;++R){const O=C[R],N=Math.max(T(O,"minWidth"),0),F=Math.max(T(O,"minHeight"),0),W=Math.max(T(O,"maxWidth"),N),X=Math.max(T(O,"maxHeight"),F),V=w(T(O,"width"),N,W),Y=w(T(O,"height"),F,X),j=T(O,"fitWidthProportion"),re=T(O,"fitHeightProportion");I.push({minWidth:N,minHeight:F,maxWidth:W,maxHeight:X,width:V,height:Y,fitWidthProportion:j,fitHeightProportion:re})}return I}function T(C,I){const R=C.entity.layoutchild;return R&&R.enabled&&R[I]!==void 0&&R[I]!==null?R[I]:C[I]!==void 0?C[I]:cV[I]}function w(C,I,R){return Math.min(Math.max(C,I),R)}function P(C,I){return C.reduce((R,O)=>R+O[I],0)}function M(C,I){const R=P(C,I),O=[],N=C.length;if(R===0)for(let F=0;F<N;++F)O.push(1/N);else for(let F=0;F<N;++F)O.push(C[F][I]/R);return O}function L(C){if(C.length===1)return[1];const I=[],R=C.length;for(let O=0;O<R;++O)I.push((1-C[O])/(R-1));return I}function D(C,I,R){return C.forEach(k),C.slice().sort((O,N)=>R?N[I]-O[I]:O[I]-N[I]).map(G)}function k(C,I){C.index=I}function G(C){return C.index}function U(C,I){const R=[];R[I[C.length-1]]=C[I[C.length-1]];for(let O=C.length-2;O>=0;--O)R[I[O]]=R[I[O+1]]+C[I[O]];return R}return n}const lg={};lg[ce]=aE(ce);lg[Pe]=aE(Pe);class dV{calculateLayout(e,t){const s=lg[t.orientation];if(s)return s(e,t);throw new Error(`Unrecognized orientation value: ${t.orientation}`)}}function py(o){return o.element}function fV(o){return o.enabled&&o.element&&o.element.enabled}class nE extends he{constructor(e,t){super(e,t),this._orientation=ce,this._reverseX=!1,this._reverseY=!0,this._alignment=new z(0,1),this._padding=new K,this._spacing=new z,this._widthFitting=zp,this._heightFitting=zp,this._wrap=!1,this._layoutCalculator=new dV,this._listenForReflowEvents(this.entity,"on"),this.entity.children.forEach(s=>{this._listenForReflowEvents(s,"on")}),this.entity.on("childinsert",this._onChildInsert,this),this.entity.on("childremove",this._onChildRemove,this),e.app.systems.element.on("add",this._onElementOrLayoutComponentAdd,this),e.app.systems.element.on("beforeremove",this._onElementOrLayoutComponentRemove,this),e.app.systems.layoutchild.on("add",this._onElementOrLayoutComponentAdd,this),e.app.systems.layoutchild.on("beforeremove",this._onElementOrLayoutComponentRemove,this)}set orientation(e){e!==this._orientation&&(this._orientation=e,this._scheduleReflow())}get orientation(){return this._orientation}set reverseX(e){e!==this._reverseX&&(this._reverseX=e,this._scheduleReflow())}get reverseX(){return this._reverseX}set reverseY(e){e!==this._reverseY&&(this._reverseY=e,this._scheduleReflow())}get reverseY(){return this._reverseY}set alignment(e){e.equals(this._alignment)||(this._alignment.copy(e),this._scheduleReflow())}get alignment(){return this._alignment}set padding(e){e.equals(this._padding)||(this._padding.copy(e),this._scheduleReflow())}get padding(){return this._padding}set spacing(e){e.equals(this._spacing)||(this._spacing.copy(e),this._scheduleReflow())}get spacing(){return this._spacing}set widthFitting(e){e!==this._widthFitting&&(this._widthFitting=e,this._scheduleReflow())}get widthFitting(){return this._widthFitting}set heightFitting(e){e!==this._heightFitting&&(this._heightFitting=e,this._scheduleReflow())}get heightFitting(){return this._heightFitting}set wrap(e){e!==this._wrap&&(this._wrap=e,this._scheduleReflow())}get wrap(){return this._wrap}_isSelfOrChild(e){return e===this.entity||this.entity.children.indexOf(e)!==-1}_listenForReflowEvents(e,t){e.element&&(e.element[t]("enableelement",this._scheduleReflow,this),e.element[t]("disableelement",this._scheduleReflow,this),e.element[t]("resize",this._scheduleReflow,this),e.element[t]("set:pivot",this._scheduleReflow,this)),e.layoutchild&&(e.layoutchild[t]("set_enabled",this._scheduleReflow,this),e.layoutchild[t]("resize",this._scheduleReflow,this))}_onElementOrLayoutComponentAdd(e){this._isSelfOrChild(e)&&(this._listenForReflowEvents(e,"on"),this._scheduleReflow())}_onElementOrLayoutComponentRemove(e){this._isSelfOrChild(e)&&(this._listenForReflowEvents(e,"off"),this._scheduleReflow())}_onChildInsert(e){this._listenForReflowEvents(e,"on"),this._scheduleReflow()}_onChildRemove(e){this._listenForReflowEvents(e,"off"),this._scheduleReflow()}_scheduleReflow(){this.enabled&&this.entity&&this.entity.enabled&&!this._isPerformingReflow&&this.system.scheduleReflow(this)}reflow(){const e=py(this.entity),t=this.entity.children.filter(fV).map(py);if(!e||t.length===0)return;const s=Math.max(e.calculatedWidth,0),i=Math.max(e.calculatedHeight,0),r={orientation:this._orientation,reverseX:this._reverseX,reverseY:this._reverseY,alignment:this._alignment,padding:this._padding,spacing:this._spacing,widthFitting:this._widthFitting,heightFitting:this._heightFitting,wrap:this._wrap,containerSize:new z(s,i)};this._isPerformingReflow=!0;const a=this._layoutCalculator.calculateLayout(t,r);this._isPerformingReflow=!1,this.fire("reflow",a)}onEnable(){this._scheduleReflow()}onRemove(){this.entity.off("childinsert",this._onChildInsert,this),this.entity.off("childremove",this._onChildRemove,this),this._listenForReflowEvents(this.entity,"off"),this.entity.children.forEach(e=>{this._listenForReflowEvents(e,"off")}),this.system.app.systems.element.off("add",this._onElementOrLayoutComponentAdd,this),this.system.app.systems.element.off("beforeremove",this._onElementOrLayoutComponentRemove,this),this.system.app.systems.layoutchild.off("add",this._onElementOrLayoutComponentAdd,this),this.system.app.systems.layoutchild.off("beforeremove",this._onElementOrLayoutComponentRemove,this)}}class uV{constructor(){this.enabled=!0}}const oE=["enabled"],pV=100;class mV extends qe{constructor(e){super(e),this.id="layoutgroup",this.ComponentType=nE,this.DataType=uV,this.schema=oE,this._reflowQueue=[],this.on("beforeremove",this._onRemoveComponent,this),this.app.systems.on("postUpdate",this._onPostUpdate,this)}initializeComponentData(e,t,s){t.enabled!==void 0&&(e.enabled=t.enabled),t.orientation!==void 0&&(e.orientation=t.orientation),t.reverseX!==void 0&&(e.reverseX=t.reverseX),t.reverseY!==void 0&&(e.reverseY=t.reverseY),t.alignment!==void 0&&(e.alignment=Array.isArray(t.alignment)?new z(t.alignment):t.alignment),t.padding!==void 0&&(e.padding=Array.isArray(t.padding)?new K(t.padding):t.padding),t.spacing!==void 0&&(e.spacing=Array.isArray(t.spacing)?new z(t.spacing):t.spacing),t.widthFitting!==void 0&&(e.widthFitting=t.widthFitting),t.heightFitting!==void 0&&(e.heightFitting=t.heightFitting),t.wrap!==void 0&&(e.wrap=t.wrap),super.initializeComponentData(e,t,s)}cloneComponent(e,t){const s=e.layoutgroup;return this.addComponent(t,{enabled:s.enabled,orientation:s.orientation,reverseX:s.reverseX,reverseY:s.reverseY,alignment:s.alignment,padding:s.padding,spacing:s.spacing,widthFitting:s.widthFitting,heightFitting:s.heightFitting,wrap:s.wrap})}scheduleReflow(e){this._reflowQueue.indexOf(e)===-1&&this._reflowQueue.push(e)}_onPostUpdate(){this._processReflowQueue()}_processReflowQueue(){if(this._reflowQueue.length===0)return;let e=0;for(;this._reflowQueue.length>0;){const t=this._reflowQueue.slice();this._reflowQueue.length=0,t.sort((s,i)=>s.entity.graphDepth-i.entity.graphDepth);for(let s=0;s<t.length;++s)t[s].reflow();if(++e>=pV){console.warn("Max reflow iterations limit reached, bailing.");break}}}_onRemoveComponent(e,t){t.onRemove()}destroy(){super.destroy(),this.app.systems.off("postUpdate",this._onPostUpdate,this)}}he._buildAccessors(nE.prototype,oE);class _V{destroy(e){this.map.forEach(t=>t.mesh.destroy())}constructor(){this.map=new Map}}const gV=new Tt,lE=(o,e)=>{const t=gV.get(o,()=>new _V);let s=t.map.get(e);if(!s){let i,r;switch(e){case"box":i=De.fromGeometry(o,new mp),r={x:2,y:2,z:2,uv:2/3};break;case"capsule":i=De.fromGeometry(o,new ER({radius:.5,height:2})),r={x:Math.PI*2,y:Math.PI,z:Math.PI*2,uv:1/3+1/3/3*2};break;case"cone":i=De.fromGeometry(o,new AR({baseRadius:.5,peakRadius:0,height:1})),r={x:2.54,y:2.54,z:2.54,uv:1/3+1/3/3};break;case"cylinder":i=De.fromGeometry(o,new bR({radius:.5,height:1})),r={x:Math.PI,y:.79*2,z:Math.PI,uv:1/3+1/3/3*2};break;case"plane":i=De.fromGeometry(o,new wR({halfExtents:new z(.5,.5),widthSegments:1,lengthSegments:1})),r={x:0,y:1,z:0,uv:1};break;case"sphere":i=De.fromGeometry(o,new Ix({radius:.5})),r={x:Math.PI,y:Math.PI,z:Math.PI,uv:1};break;case"torus":i=De.fromGeometry(o,new CR({tubeRadius:.2,ringRadius:.3})),r={x:Math.PI*.5*.5-Math.PI*.1*.1,y:.4,z:.4,uv:1};break;default:throw new Error(`Invalid primitive type: ${e}`)}i.incRefCount(),s={mesh:i,area:r},t.map.set(e,s)}return s};class hE extends he{constructor(e,t){super(e,t),this._type="asset",this._asset=null,this._model=null,this._mapping={},this._castShadows=!0,this._receiveShadows=!0,this._materialAsset=null,this._castShadowsLightmap=!0,this._lightmapped=!1,this._lightmapSizeMultiplier=1,this.isStatic=!1,this._layers=[Ni],this._batchGroupId=-1,this._customAabb=null,this._area=null,this._materialEvents=null,this._clonedModel=!1,this._evtLayersChanged=null,this._evtLayerAdded=null,this._evtLayerRemoved=null,this._material=e.defaultMaterial,t.on("remove",this.onRemoveChild,this),t.on("removehierarchy",this.onRemoveChild,this),t.on("insert",this.onInsertChild,this),t.on("inserthierarchy",this.onInsertChild,this)}set meshInstances(e){this._model&&(this._model.meshInstances=e)}get meshInstances(){return this._model?this._model.meshInstances:null}set customAabb(e){if(this._customAabb=e,this._model){const t=this._model.meshInstances;if(t)for(let s=0;s<t.length;s++)t[s].setCustomAabb(this._customAabb)}}get customAabb(){return this._customAabb}set type(e){if(this._type!==e)if(this._area=null,this._type=e,e==="asset")this._asset!==null?this._bindModelAsset(this._asset):this.model=null;else{const t=lE(this.system.app.graphicsDevice,e);this._area=t.area;const s=t.mesh,i=new ze,r=new Fi;r.graph=i,r.meshInstances=[new Oe(s,this._material,i)],this.model=r,this._asset=null}}get type(){return this._type}set asset(e){const t=this.system.app.assets;let s=e;if(e instanceof ie&&(s=e.id),this._asset!==s){if(this._asset){t.off(`add:${this._asset}`,this._onModelAssetAdded,this);const i=t.get(this._asset);i&&this._unbindModelAsset(i)}if(this._asset=s,this._asset){const i=t.get(this._asset);i?this._bindModelAsset(i):(this.model=null,t.on(`add:${this._asset}`,this._onModelAssetAdded,this))}else this.model=null}}get asset(){return this._asset}set model(e){if(this._model!==e&&!(e&&e._immutable)&&(this._model&&(this._model._immutable=!1,this.removeModelFromLayers(),this._model.getGraph().destroy(),delete this._model._entity,this._clonedModel&&(this._model.destroy(),this._clonedModel=!1)),this._model=e,this._model)){this._model._immutable=!0;const t=this._model.meshInstances;for(let s=0;s<t.length;s++)t[s].castShadow=this._castShadows,t[s].receiveShadow=this._receiveShadows,t[s].setCustomAabb(this._customAabb);this.lightmapped=this._lightmapped,this.entity.addChild(this._model.graph),this.enabled&&this.entity.enabled&&this.addModelToLayers(),this._model._entity=this.entity,this.entity.animation&&this.entity.animation.setModel(this._model),this.entity.anim&&this.entity.anim.rebind(),this.type==="asset"?this.mapping=this._mapping:this._unsetMaterialEvents()}}get model(){return this._model}set lightmapped(e){if(e!==this._lightmapped&&(this._lightmapped=e,this._model)){const t=this._model.meshInstances;for(let s=0;s<t.length;s++)t[s].setLightmapped(e)}}get lightmapped(){return this._lightmapped}set castShadows(e){if(this._castShadows===e)return;const t=this._model;if(t){const s=this.layers,i=this.system.app.scene;if(this._castShadows&&!e)for(let a=0;a<s.length;a++){const n=this.system.app.scene.layers.getLayerById(this.layers[a]);n&&n.removeShadowCasters(t.meshInstances)}const r=t.meshInstances;for(let a=0;a<r.length;a++)r[a].castShadow=e;if(!this._castShadows&&e)for(let a=0;a<s.length;a++){const n=i.layers.getLayerById(s[a]);n&&n.addShadowCasters(t.meshInstances)}}this._castShadows=e}get castShadows(){return this._castShadows}set receiveShadows(e){if(this._receiveShadows!==e&&(this._receiveShadows=e,this._model)){const t=this._model.meshInstances;for(let s=0,i=t.length;s<i;s++)t[s].receiveShadow=e}}get receiveShadows(){return this._receiveShadows}set castShadowsLightmap(e){this._castShadowsLightmap=e}get castShadowsLightmap(){return this._castShadowsLightmap}set lightmapSizeMultiplier(e){this._lightmapSizeMultiplier=e}get lightmapSizeMultiplier(){return this._lightmapSizeMultiplier}set layers(e){const t=this.system.app.scene.layers;if(this.meshInstances)for(let s=0;s<this._layers.length;s++){const i=t.getLayerById(this._layers[s]);i&&i.removeMeshInstances(this.meshInstances)}this._layers.length=0;for(let s=0;s<e.length;s++)this._layers[s]=e[s];if(!(!this.enabled||!this.entity.enabled||!this.meshInstances))for(let s=0;s<this._layers.length;s++){const i=t.getLayerById(this._layers[s]);i&&i.addMeshInstances(this.meshInstances)}}get layers(){return this._layers}set batchGroupId(e){this._batchGroupId!==e&&(this.entity.enabled&&this._batchGroupId>=0&&this.system.app.batcher?.remove(nt.MODEL,this.batchGroupId,this.entity),this.entity.enabled&&e>=0&&this.system.app.batcher?.insert(nt.MODEL,e,this.entity),e<0&&this._batchGroupId>=0&&this.enabled&&this.entity.enabled&&this.addModelToLayers(),this._batchGroupId=e)}get batchGroupId(){return this._batchGroupId}set materialAsset(e){let t=e;e instanceof ie&&(t=e.id);const s=this.system.app.assets;if(t!==this._materialAsset){if(this._materialAsset){s.off(`add:${this._materialAsset}`,this._onMaterialAssetAdd,this);const i=s.get(this._materialAsset);i&&this._unbindMaterialAsset(i)}if(this._materialAsset=t,this._materialAsset){const i=s.get(this._materialAsset);i?this._bindMaterialAsset(i):(this._setMaterial(this.system.defaultMaterial),s.on(`add:${this._materialAsset}`,this._onMaterialAssetAdd,this))}else this._setMaterial(this.system.defaultMaterial)}}get materialAsset(){return this._materialAsset}set material(e){this._material!==e&&(this.materialAsset=null,this._setMaterial(e))}get material(){return this._material}set mapping(e){if(this._type!=="asset"||(this._unsetMaterialEvents(),e||(e={}),this._mapping=e,!this._model))return;const t=this._model.meshInstances,s=this.asset?this.system.app.assets.get(this.asset):null,i=s?s.data.mapping:null;let r=null;for(let a=0,n=t.length;a<n;a++)if(e[a]!==void 0)e[a]?(r=this.system.app.assets.get(e[a]),this._loadAndSetMeshInstanceMaterial(r,t[a],a)):t[a].material=this.system.defaultMaterial;else if(i)if(i[a]&&(i[a].material||i[a].path)){if(i[a].material!==void 0)r=this.system.app.assets.get(i[a].material);else if(i[a].path!==void 0){const l=this._getMaterialAssetUrl(i[a].path);l&&(r=this.system.app.assets.getByUrl(l))}this._loadAndSetMeshInstanceMaterial(r,t[a],a)}else t[a].material=this.system.defaultMaterial}get mapping(){return this._mapping}addModelToLayers(){const e=this.system.app.scene.layers;for(let t=0;t<this._layers.length;t++){const s=e.getLayerById(this._layers[t]);s&&s.addMeshInstances(this.meshInstances)}}removeModelFromLayers(){const e=this.system.app.scene.layers;for(let t=0;t<this._layers.length;t++){const s=e.getLayerById(this._layers[t]);s&&s.removeMeshInstances(this.meshInstances)}}onRemoveChild(){this._model&&this.removeModelFromLayers()}onInsertChild(){this._model&&this.enabled&&this.entity.enabled&&this.addModelToLayers()}onRemove(){this.asset=null,this.model=null,this.materialAsset=null,this._unsetMaterialEvents(),this.entity.off("remove",this.onRemoveChild,this),this.entity.off("insert",this.onInsertChild,this)}onLayersChanged(e,t){this.addModelToLayers(),e.off("add",this.onLayerAdded,this),e.off("remove",this.onLayerRemoved,this),t.on("add",this.onLayerAdded,this),t.on("remove",this.onLayerRemoved,this)}onLayerAdded(e){this.layers.indexOf(e.id)<0||e.addMeshInstances(this.meshInstances)}onLayerRemoved(e){this.layers.indexOf(e.id)<0||e.removeMeshInstances(this.meshInstances)}_setMaterialEvent(e,t,s,i){const r=`${t}:${s}`;this.system.app.assets.on(r,i,this),this._materialEvents||(this._materialEvents=[]),this._materialEvents[e]||(this._materialEvents[e]={}),this._materialEvents[e][r]={id:s,handler:i}}_unsetMaterialEvents(){const e=this.system.app.assets,t=this._materialEvents;if(t){for(let s=0,i=t.length;s<i;s++){if(!t[s])continue;const r=t[s];for(const a in r)e.off(a,r[a].handler,this)}this._materialEvents=null}}_getAssetByIdOrPath(e){let t=null;if(!isNaN(parseInt(e,10)))t=this.system.app.assets.get(e);else if(this.asset){const i=this._getMaterialAssetUrl(e);i&&(t=this.system.app.assets.getByUrl(i))}return t}_getMaterialAssetUrl(e){if(!this.asset)return null;const t=this.system.app.assets.get(this.asset);return t?t.getAbsoluteUrl(e):null}_loadAndSetMeshInstanceMaterial(e,t,s){const i=this.system.app.assets;e&&(e.resource?(t.material=e.resource,this._setMaterialEvent(s,"remove",e.id,function(){t.material=this.system.defaultMaterial})):(this._setMaterialEvent(s,"load",e.id,function(r){t.material=r.resource,this._setMaterialEvent(s,"remove",e.id,function(){t.material=this.system.defaultMaterial})}),this.enabled&&this.entity.enabled&&i.load(e)))}onEnable(){const e=this.system.app,t=e.scene,s=t?.layers;this._evtLayersChanged=t.on("set:layers",this.onLayersChanged,this),s&&(this._evtLayerAdded=s.on("add",this.onLayerAdded,this),this._evtLayerRemoved=s.on("remove",this.onLayerRemoved,this));const i=this._type==="asset";let r;if(this._model?this.addModelToLayers():i&&this._asset&&(r=e.assets.get(this._asset),r&&r.resource!==this._model&&this._bindModelAsset(r)),this._materialAsset&&(r=e.assets.get(this._materialAsset),r&&r.resource!==this._material&&this._bindMaterialAsset(r)),i&&this._mapping)for(const a in this._mapping)this._mapping[a]&&(r=this._getAssetByIdOrPath(this._mapping[a]),r&&!r.resource&&e.assets.load(r));this._batchGroupId>=0&&e.batcher?.insert(nt.MODEL,this.batchGroupId,this.entity)}onDisable(){const e=this.system.app,s=e.scene.layers;this._evtLayersChanged?.off(),this._evtLayersChanged=null,s&&(this._evtLayerAdded?.off(),this._evtLayerAdded=null,this._evtLayerRemoved?.off(),this._evtLayerRemoved=null),this._batchGroupId>=0&&e.batcher?.remove(nt.MODEL,this.batchGroupId,this.entity),this._model&&this.removeModelFromLayers()}hide(){if(this._model){const e=this._model.meshInstances;for(let t=0,s=e.length;t<s;t++)e[t].visible=!1}}show(){if(this._model){const e=this._model.meshInstances;for(let t=0,s=e.length;t<s;t++)e[t].visible=!0}}_bindMaterialAsset(e){if(e.on("load",this._onMaterialAssetLoad,this),e.on("unload",this._onMaterialAssetUnload,this),e.on("remove",this._onMaterialAssetRemove,this),e.on("change",this._onMaterialAssetChange,this),e.resource)this._onMaterialAssetLoad(e);else{if(!this.enabled||!this.entity.enabled)return;this.system.app.assets.load(e)}}_unbindMaterialAsset(e){e.off("load",this._onMaterialAssetLoad,this),e.off("unload",this._onMaterialAssetUnload,this),e.off("remove",this._onMaterialAssetRemove,this),e.off("change",this._onMaterialAssetChange,this)}_onMaterialAssetAdd(e){this.system.app.assets.off(`add:${e.id}`,this._onMaterialAssetAdd,this),this._materialAsset===e.id&&this._bindMaterialAsset(e)}_onMaterialAssetLoad(e){this._setMaterial(e.resource)}_onMaterialAssetUnload(e){this._setMaterial(this.system.defaultMaterial)}_onMaterialAssetRemove(e){this._onMaterialAssetUnload(e)}_onMaterialAssetChange(e){}_bindModelAsset(e){if(this._unbindModelAsset(e),e.on("load",this._onModelAssetLoad,this),e.on("unload",this._onModelAssetUnload,this),e.on("change",this._onModelAssetChange,this),e.on("remove",this._onModelAssetRemove,this),e.resource)this._onModelAssetLoad(e);else{if(!this.enabled||!this.entity.enabled)return;this.system.app.assets.load(e)}}_unbindModelAsset(e){e.off("load",this._onModelAssetLoad,this),e.off("unload",this._onModelAssetUnload,this),e.off("change",this._onModelAssetChange,this),e.off("remove",this._onModelAssetRemove,this)}_onModelAssetAdded(e){this.system.app.assets.off(`add:${e.id}`,this._onModelAssetAdded,this),e.id===this._asset&&this._bindModelAsset(e)}_onModelAssetLoad(e){this.model=e.resource.clone(),this._clonedModel=!0}_onModelAssetUnload(e){this.model=null}_onModelAssetChange(e,t,s,i){t==="data"&&(this.mapping=this._mapping)}_onModelAssetRemove(e){this.model=null}_setMaterial(e){if(this._material===e)return;this._material=e;const t=this._model;if(t&&this._type!=="asset"){const s=t.meshInstances;for(let i=0,r=s.length;i<r;i++)s[i].material=e}}}class vV{constructor(){this.enabled=!0}}const cE=["enabled"];class SV extends qe{constructor(e){super(e),this.id="model",this.ComponentType=hE,this.DataType=vV,this.schema=cE,this.defaultMaterial=$l(e.graphicsDevice),this.on("beforeremove",this.onRemove,this)}initializeComponentData(e,t,s){s=["material","materialAsset","asset","castShadows","receiveShadows","castShadowsLightmap","lightmapped","lightmapSizeMultiplier","type","mapping","layers","isStatic","batchGroupId"],(t.batchGroupId===null||t.batchGroupId===void 0)&&(t.batchGroupId=-1),t.layers&&t.layers.length&&(t.layers=t.layers.slice(0));for(let i=0;i<s.length;i++)t.hasOwnProperty(s[i])&&(e[s[i]]=t[s[i]]);t.aabbCenter&&t.aabbHalfExtents&&(e.customAabb=new fe(new x(t.aabbCenter),new x(t.aabbHalfExtents))),super.initializeComponentData(e,t,["enabled"])}cloneComponent(e,t){const s={type:e.model.type,asset:e.model.asset,castShadows:e.model.castShadows,receiveShadows:e.model.receiveShadows,castShadowsLightmap:e.model.castShadowsLightmap,lightmapped:e.model.lightmapped,lightmapSizeMultiplier:e.model.lightmapSizeMultiplier,isStatic:e.model.isStatic,enabled:e.model.enabled,layers:e.model.layers,batchGroupId:e.model.batchGroupId,mapping:_c({},e.model.mapping)};let i=e.model.materialAsset;!(i instanceof ie)&&i!=null&&(i=this.app.assets.get(i));const r=e.model.material;(!r||r===this.defaultMaterial||!i||r===i.resource)&&(s.materialAsset=i);const a=this.addComponent(t,s);if(e.model.model&&e.model.type==="asset"&&!e.model.asset&&(a.model=e.model.model.clone(),a._clonedModel=!0),s.materialAsset||(a.material=r),e.model.model){const n=e.model.model.meshInstances,l=a.model.meshInstances;for(let h=0;h<n.length;h++)l[h].mask=n[h].mask,l[h].material=n[h].material,l[h].layer=n[h].layer,l[h].receiveShadow=n[h].receiveShadow}return e.model.customAabb&&(a.customAabb=e.model.customAabb.clone()),a}onRemove(e,t){t.onRemove()}}he._buildAccessors(hE.prototype,cE);const yV=["emitterExtents","emitterRadius","emitterExtentsInner","emitterRadiusInner","loop","initialVelocity","animSpeed","normalMap","particleNormal"],TV=["numParticles","lifetime","rate","rate2","startAngle","startAngle2","lighting","halfLambert","intensity","wrap","wrapBounds","depthWrite","noFog","sort","stretch","alignToMotion","preWarm","emitterShape","animTilesX","animTilesY","animStartFrame","animNumFrames","animNumAnimations","animIndex","randomizeAnimIndex","animLoop","colorMap","localSpace","screenSpace","orientation"],xV=["scaleGraph","scaleGraph2","colorGraph","colorGraph2","alphaGraph","alphaGraph2","velocityGraph","velocityGraph2","localVelocityGraph","localVelocityGraph2","rotationSpeedGraph","rotationSpeedGraph2","radialSpeedGraph","radialSpeedGraph2"],Vh=["colorMapAsset","normalMapAsset","meshAsset","renderAsset"];let tn;class EV extends he{constructor(e,t){super(e,t),this._requestedDepth=!1,this._drawOrder=0,this._evtLayersChanged=null,this._evtLayerAdded=null,this._evtLayerRemoved=null,this._evtSetMeshes=null,this.on("set_colorMapAsset",this.onSetColorMapAsset,this),this.on("set_normalMapAsset",this.onSetNormalMapAsset,this),this.on("set_meshAsset",this.onSetMeshAsset,this),this.on("set_mesh",this.onSetMesh,this),this.on("set_renderAsset",this.onSetRenderAsset,this),this.on("set_loop",this.onSetLoop,this),this.on("set_blendType",this.onSetBlendType,this),this.on("set_depthSoftening",this.onSetDepthSoftening,this),this.on("set_layers",this.onSetLayers,this),yV.forEach(s=>{this.on(`set_${s}`,this.onSetSimpleProperty,this)}),TV.forEach(s=>{this.on(`set_${s}`,this.onSetComplexProperty,this)}),xV.forEach(s=>{this.on(`set_${s}`,this.onSetGraphProperty,this)})}get data(){const e=this.system.store[this.entity.getGuid()];return e?e.data:null}set enabled(e){this._setValue("enabled",e)}get enabled(){return this.data.enabled}set autoPlay(e){this._setValue("autoPlay",e)}get autoPlay(){return this.data.autoPlay}set numParticles(e){this._setValue("numParticles",e)}get numParticles(){return this.data.numParticles}set lifetime(e){this._setValue("lifetime",e)}get lifetime(){return this.data.lifetime}set rate(e){this._setValue("rate",e)}get rate(){return this.data.rate}set rate2(e){this._setValue("rate2",e)}get rate2(){return this.data.rate2}set startAngle(e){this._setValue("startAngle",e)}get startAngle(){return this.data.startAngle}set startAngle2(e){this._setValue("startAngle2",e)}get startAngle2(){return this.data.startAngle2}set loop(e){this._setValue("loop",e)}get loop(){return this.data.loop}set preWarm(e){this._setValue("preWarm",e)}get preWarm(){return this.data.preWarm}set lighting(e){this._setValue("lighting",e)}get lighting(){return this.data.lighting}set halfLambert(e){this._setValue("halfLambert",e)}get halfLambert(){return this.data.halfLambert}set intensity(e){this._setValue("intensity",e)}get intensity(){return this.data.intensity}set depthWrite(e){this._setValue("depthWrite",e)}get depthWrite(){return this.data.depthWrite}set noFog(e){this._setValue("noFog",e)}get noFog(){return this.data.noFog}set depthSoftening(e){this._setValue("depthSoftening",e)}get depthSoftening(){return this.data.depthSoftening}set sort(e){this._setValue("sort",e)}get sort(){return this.data.sort}set blendType(e){this._setValue("blendType",e)}get blendType(){return this.data.blendType}set stretch(e){this._setValue("stretch",e)}get stretch(){return this.data.stretch}set alignToMotion(e){this._setValue("alignToMotion",e)}get alignToMotion(){return this.data.alignToMotion}set emitterShape(e){this._setValue("emitterShape",e)}get emitterShape(){return this.data.emitterShape}set emitterExtents(e){this._setValue("emitterExtents",e)}get emitterExtents(){return this.data.emitterExtents}set emitterExtentsInner(e){this._setValue("emitterExtentsInner",e)}get emitterExtentsInner(){return this.data.emitterExtentsInner}set emitterRadius(e){this._setValue("emitterRadius",e)}get emitterRadius(){return this.data.emitterRadius}set emitterRadiusInner(e){this._setValue("emitterRadiusInner",e)}get emitterRadiusInner(){return this.data.emitterRadiusInner}set initialVelocity(e){this._setValue("initialVelocity",e)}get initialVelocity(){return this.data.initialVelocity}set wrap(e){this._setValue("wrap",e)}get wrap(){return this.data.wrap}set wrapBounds(e){this._setValue("wrapBounds",e)}get wrapBounds(){return this.data.wrapBounds}set localSpace(e){this._setValue("localSpace",e)}get localSpace(){return this.data.localSpace}set screenSpace(e){this._setValue("screenSpace",e)}get screenSpace(){return this.data.screenSpace}set colorMapAsset(e){this._setValue("colorMapAsset",e)}get colorMapAsset(){return this.data.colorMapAsset}set normalMapAsset(e){this._setValue("normalMapAsset",e)}get normalMapAsset(){return this.data.normalMapAsset}set mesh(e){this._setValue("mesh",e)}get mesh(){return this.data.mesh}set meshAsset(e){this._setValue("meshAsset",e)}get meshAsset(){return this.data.meshAsset}set renderAsset(e){this._setValue("renderAsset",e)}get renderAsset(){return this.data.renderAsset}set orientation(e){this._setValue("orientation",e)}get orientation(){return this.data.orientation}set particleNormal(e){this._setValue("particleNormal",e)}get particleNormal(){return this.data.particleNormal}set localVelocityGraph(e){this._setValue("localVelocityGraph",e)}get localVelocityGraph(){return this.data.localVelocityGraph}set localVelocityGraph2(e){this._setValue("localVelocityGraph2",e)}get localVelocityGraph2(){return this.data.localVelocityGraph2}set velocityGraph(e){this._setValue("velocityGraph",e)}get velocityGraph(){return this.data.velocityGraph}set velocityGraph2(e){this._setValue("velocityGraph2",e)}get velocityGraph2(){return this.data.velocityGraph2}set rotationSpeedGraph(e){this._setValue("rotationSpeedGraph",e)}get rotationSpeedGraph(){return this.data.rotationSpeedGraph}set rotationSpeedGraph2(e){this._setValue("rotationSpeedGraph2",e)}get rotationSpeedGraph2(){return this.data.rotationSpeedGraph2}set radialSpeedGraph(e){this._setValue("radialSpeedGraph",e)}get radialSpeedGraph(){return this.data.radialSpeedGraph}set radialSpeedGraph2(e){this._setValue("radialSpeedGraph2",e)}get radialSpeedGraph2(){return this.data.radialSpeedGraph2}set scaleGraph(e){this._setValue("scaleGraph",e)}get scaleGraph(){return this.data.scaleGraph}set scaleGraph2(e){this._setValue("scaleGraph2",e)}get scaleGraph2(){return this.data.scaleGraph2}set colorGraph(e){this._setValue("colorGraph",e)}get colorGraph(){return this.data.colorGraph}set colorGraph2(e){this._setValue("colorGraph2",e)}get colorGraph2(){return this.data.colorGraph2}set alphaGraph(e){this._setValue("alphaGraph",e)}get alphaGraph(){return this.data.alphaGraph}set alphaGraph2(e){this._setValue("alphaGraph2",e)}get alphaGraph2(){return this.data.alphaGraph2}set colorMap(e){this._setValue("colorMap",e)}get colorMap(){return this.data.colorMap}set normalMap(e){this._setValue("normalMap",e)}get normalMap(){return this.data.normalMap}set animTilesX(e){this._setValue("animTilesX",e)}get animTilesX(){return this.data.animTilesX}set animTilesY(e){this._setValue("animTilesY",e)}get animTilesY(){return this.data.animTilesY}set animStartFrame(e){this._setValue("animStartFrame",e)}get animStartFrame(){return this.data.animStartFrame}set animNumFrames(e){this._setValue("animNumFrames",e)}get animNumFrames(){return this.data.animNumFrames}set animNumAnimations(e){this._setValue("animNumAnimations",e)}get animNumAnimations(){return this.data.animNumAnimations}set animIndex(e){this._setValue("animIndex",e)}get animIndex(){return this.data.animIndex}set randomizeAnimIndex(e){this._setValue("randomizeAnimIndex",e)}get randomizeAnimIndex(){return this.data.randomizeAnimIndex}set animSpeed(e){this._setValue("animSpeed",e)}get animSpeed(){return this.data.animSpeed}set animLoop(e){this._setValue("animLoop",e)}get animLoop(){return this.data.animLoop}set layers(e){this._setValue("layers",e)}get layers(){return this.data.layers}set drawOrder(e){this._drawOrder=e,this.emitter&&(this.emitter.drawOrder=e)}get drawOrder(){return this._drawOrder}_setValue(e,t){const s=this.data,i=s[e];s[e]=t,this.fire("set",e,i,t)}addMeshInstanceToLayers(){if(this.emitter)for(let e=0;e<this.layers.length;e++){const t=this.system.app.scene.layers.getLayerById(this.layers[e]);t&&(t.addMeshInstances([this.emitter.meshInstance]),this.emitter._layer=t)}}removeMeshInstanceFromLayers(){if(this.emitter)for(let e=0;e<this.layers.length;e++){const t=this.system.app.scene.layers.getLayerById(this.layers[e]);t&&t.removeMeshInstances([this.emitter.meshInstance])}}onSetLayers(e,t,s){if(this.emitter){for(let i=0;i<t.length;i++){const r=this.system.app.scene.layers.getLayerById(t[i]);r&&r.removeMeshInstances([this.emitter.meshInstance])}if(!(!this.enabled||!this.entity.enabled))for(let i=0;i<s.length;i++){const r=this.system.app.scene.layers.getLayerById(s[i]);r&&r.addMeshInstances([this.emitter.meshInstance])}}}onLayersChanged(e,t){this.addMeshInstanceToLayers(),e.off("add",this.onLayerAdded,this),e.off("remove",this.onLayerRemoved,this),t.on("add",this.onLayerAdded,this),t.on("remove",this.onLayerRemoved,this)}onLayerAdded(e){!this.emitter||this.layers.indexOf(e.id)<0||e.addMeshInstances([this.emitter.meshInstance])}onLayerRemoved(e){!this.emitter||this.layers.indexOf(e.id)<0||e.removeMeshInstances([this.emitter.meshInstance])}_bindColorMapAsset(e){if(e.on("load",this._onColorMapAssetLoad,this),e.on("unload",this._onColorMapAssetUnload,this),e.on("remove",this._onColorMapAssetRemove,this),e.on("change",this._onColorMapAssetChange,this),e.resource)this._onColorMapAssetLoad(e);else{if(!this.enabled||!this.entity.enabled)return;this.system.app.assets.load(e)}}_unbindColorMapAsset(e){e.off("load",this._onColorMapAssetLoad,this),e.off("unload",this._onColorMapAssetUnload,this),e.off("remove",this._onColorMapAssetRemove,this),e.off("change",this._onColorMapAssetChange,this)}_onColorMapAssetLoad(e){this.colorMap=e.resource}_onColorMapAssetUnload(e){this.colorMap=null}_onColorMapAssetRemove(e){this._onColorMapAssetUnload(e)}_onColorMapAssetChange(e){}onSetColorMapAsset(e,t,s){const i=this.system.app.assets;if(t){const r=i.get(t);r&&this._unbindColorMapAsset(r)}if(s){s instanceof ie&&(this.data.colorMapAsset=s.id,s=s.id);const r=i.get(s);r?this._bindColorMapAsset(r):i.once(`add:${s}`,a=>{this._bindColorMapAsset(a)})}else this.colorMap=null}_bindNormalMapAsset(e){if(e.on("load",this._onNormalMapAssetLoad,this),e.on("unload",this._onNormalMapAssetUnload,this),e.on("remove",this._onNormalMapAssetRemove,this),e.on("change",this._onNormalMapAssetChange,this),e.resource)this._onNormalMapAssetLoad(e);else{if(!this.enabled||!this.entity.enabled)return;this.system.app.assets.load(e)}}_unbindNormalMapAsset(e){e.off("load",this._onNormalMapAssetLoad,this),e.off("unload",this._onNormalMapAssetUnload,this),e.off("remove",this._onNormalMapAssetRemove,this),e.off("change",this._onNormalMapAssetChange,this)}_onNormalMapAssetLoad(e){this.normalMap=e.resource}_onNormalMapAssetUnload(e){this.normalMap=null}_onNormalMapAssetRemove(e){this._onNormalMapAssetUnload(e)}_onNormalMapAssetChange(e){}onSetNormalMapAsset(e,t,s){const i=this.system.app.assets;if(t){const r=i.get(t);r&&this._unbindNormalMapAsset(r)}if(s){s instanceof ie&&(this.data.normalMapAsset=s.id,s=s.id);const r=i.get(s);r?this._bindNormalMapAsset(r):i.once(`add:${s}`,a=>{this._bindNormalMapAsset(a)})}else this.normalMap=null}_bindMeshAsset(e){if(e.on("load",this._onMeshAssetLoad,this),e.on("unload",this._onMeshAssetUnload,this),e.on("remove",this._onMeshAssetRemove,this),e.on("change",this._onMeshAssetChange,this),e.resource)this._onMeshAssetLoad(e);else{if(!this.enabled||!this.entity.enabled)return;this.system.app.assets.load(e)}}_unbindMeshAsset(e){e.off("load",this._onMeshAssetLoad,this),e.off("unload",this._onMeshAssetUnload,this),e.off("remove",this._onMeshAssetRemove,this),e.off("change",this._onMeshAssetChange,this)}_onMeshAssetLoad(e){this._onMeshChanged(e.resource)}_onMeshAssetUnload(e){this.mesh=null}_onMeshAssetRemove(e){this._onMeshAssetUnload(e)}_onMeshAssetChange(e){}onSetMeshAsset(e,t,s){const i=this.system.app.assets;if(t){const r=i.get(t);r&&this._unbindMeshAsset(r)}if(s){s instanceof ie&&(this.data.meshAsset=s.id,s=s.id);const r=i.get(s);r&&this._bindMeshAsset(r)}else this._onMeshChanged(null)}onSetMesh(e,t,s){!s||s instanceof ie||typeof s=="number"?this.meshAsset=s:this._onMeshChanged(s)}_onMeshChanged(e){e&&!(e instanceof De)&&(e.meshInstances[0]?e=e.meshInstances[0].mesh:e=null),this.data.mesh=e,this.emitter&&(this.emitter.mesh=e,this.emitter.resetMaterial(),this.rebuild())}onSetRenderAsset(e,t,s){const i=this.system.app.assets;if(t){const r=i.get(t);r&&this._unbindRenderAsset(r)}if(s){s instanceof ie&&(this.data.renderAsset=s.id,s=s.id);const r=i.get(s);r&&this._bindRenderAsset(r)}else this._onRenderChanged(null)}_bindRenderAsset(e){if(e.on("load",this._onRenderAssetLoad,this),e.on("unload",this._onRenderAssetUnload,this),e.on("remove",this._onRenderAssetRemove,this),e.resource)this._onRenderAssetLoad(e);else{if(!this.enabled||!this.entity.enabled)return;this.system.app.assets.load(e)}}_unbindRenderAsset(e){e.off("load",this._onRenderAssetLoad,this),e.off("unload",this._onRenderAssetUnload,this),e.off("remove",this._onRenderAssetRemove,this),this._evtSetMeshes?.off(),this._evtSetMeshes=null}_onRenderAssetLoad(e){this._onRenderChanged(e.resource)}_onRenderAssetUnload(e){this._onRenderChanged(null)}_onRenderAssetRemove(e){this._onRenderAssetUnload(e)}_onRenderChanged(e){if(!e){this._onMeshChanged(null);return}this._evtSetMeshes?.off(),this._evtSetMeshes=e.on("set:meshes",this._onRenderSetMeshes,this),e.meshes&&this._onRenderSetMeshes(e.meshes)}_onRenderSetMeshes(e){this._onMeshChanged(e&&e[0])}onSetLoop(e,t,s){this.emitter&&(this.emitter[e]=s,this.emitter.resetTime())}onSetBlendType(e,t,s){this.emitter&&(this.emitter[e]=s,this.emitter.material.blendType=s,this.emitter.resetMaterial(),this.rebuild())}_requestDepth(){this._requestedDepth||(tn||(tn=this.system.app.scene.layers.getLayerById(kt)),tn&&(tn.incrementCounter(),this._requestedDepth=!0))}_releaseDepth(){this._requestedDepth&&tn&&(tn.decrementCounter(),this._requestedDepth=!1)}onSetDepthSoftening(e,t,s){t!==s&&(s?(this.enabled&&this.entity.enabled&&this._requestDepth(),this.emitter&&(this.emitter[e]=s)):(this.enabled&&this.entity.enabled&&this._releaseDepth(),this.emitter&&(this.emitter[e]=s)),this.emitter&&(this.reset(),this.emitter.resetMaterial(),this.rebuild()))}onSetSimpleProperty(e,t,s){this.emitter&&(this.emitter[e]=s,this.emitter.resetMaterial())}onSetComplexProperty(e,t,s){this.emitter&&(this.emitter[e]=s,this.emitter.resetMaterial(),this.rebuild(),this.reset())}onSetGraphProperty(e,t,s){this.emitter&&(this.emitter[e]=s,this.emitter.rebuildGraphs(),this.emitter.resetMaterial())}onEnable(){const e=this.system.app.scene,t=e.layers,s=this.data;for(let i=0,r=Vh.length;i<r;i++){let a=s[Vh[i]];if(a){if(!(a instanceof ie))if(parseInt(a,10)>=0)a=this.system.app.assets.get(a);else continue;a&&!a.resource&&this.system.app.assets.load(a)}}if(!this.system.app.graphicsDevice.disableParticleSystem){if(!this.emitter){let i=s.mesh;i instanceof De||(i=null),this.emitter=new L1(this.system.app.graphicsDevice,{numParticles:s.numParticles,emitterExtents:s.emitterExtents,emitterExtentsInner:s.emitterExtentsInner,emitterRadius:s.emitterRadius,emitterRadiusInner:s.emitterRadiusInner,emitterShape:s.emitterShape,initialVelocity:s.initialVelocity,wrap:s.wrap,localSpace:s.localSpace,screenSpace:s.screenSpace,wrapBounds:s.wrapBounds,lifetime:s.lifetime,rate:s.rate,rate2:s.rate2,orientation:s.orientation,particleNormal:s.particleNormal,animTilesX:s.animTilesX,animTilesY:s.animTilesY,animStartFrame:s.animStartFrame,animNumFrames:s.animNumFrames,animNumAnimations:s.animNumAnimations,animIndex:s.animIndex,randomizeAnimIndex:s.randomizeAnimIndex,animSpeed:s.animSpeed,animLoop:s.animLoop,startAngle:s.startAngle,startAngle2:s.startAngle2,scaleGraph:s.scaleGraph,scaleGraph2:s.scaleGraph2,colorGraph:s.colorGraph,colorGraph2:s.colorGraph2,alphaGraph:s.alphaGraph,alphaGraph2:s.alphaGraph2,localVelocityGraph:s.localVelocityGraph,localVelocityGraph2:s.localVelocityGraph2,velocityGraph:s.velocityGraph,velocityGraph2:s.velocityGraph2,rotationSpeedGraph:s.rotationSpeedGraph,rotationSpeedGraph2:s.rotationSpeedGraph2,radialSpeedGraph:s.radialSpeedGraph,radialSpeedGraph2:s.radialSpeedGraph2,colorMap:s.colorMap,normalMap:s.normalMap,loop:s.loop,preWarm:s.preWarm,sort:s.sort,stretch:s.stretch,alignToMotion:s.alignToMotion,lighting:s.lighting,halfLambert:s.halfLambert,intensity:s.intensity,depthSoftening:s.depthSoftening,scene:this.system.app.scene,mesh:i,depthWrite:s.depthWrite,noFog:s.noFog,node:this.entity,blendType:s.blendType}),this.emitter.meshInstance.node=this.entity,this.emitter.drawOrder=this.drawOrder,s.autoPlay||(this.pause(),this.emitter.meshInstance.visible=!1)}this.emitter.colorMap&&this.addMeshInstanceToLayers(),this._evtLayersChanged=e.on("set:layers",this.onLayersChanged,this),t&&(this._evtLayerAdded=t.on("add",this.onLayerAdded,this),this._evtLayerRemoved=t.on("remove",this.onLayerRemoved,this)),this.enabled&&this.entity.enabled&&s.depthSoftening&&this._requestDepth()}}onDisable(){const t=this.system.app.scene.layers;this._evtLayersChanged?.off(),this._evtLayersChanged=null,t&&(this._evtLayerAdded?.off(),this._evtLayerAdded=null,this._evtLayerRemoved?.off(),this._evtLayerRemoved=null),this.emitter&&(this.removeMeshInstanceFromLayers(),this.data.depthSoftening&&this._releaseDepth(),this.emitter.camera=null)}onBeforeRemove(){this.enabled&&(this.enabled=!1),this.emitter&&(this.emitter.destroy(),this.emitter=null);for(let e=0;e<Vh.length;e++){const t=Vh[e];this.data[t]&&(this[t]=null)}this.off()}reset(){this.emitter&&this.emitter.reset()}stop(){this.emitter&&(this.emitter.loop=!1,this.emitter.resetTime(),this.emitter.addTime(0,!0))}pause(){this.data.paused=!0}unpause(){this.data.paused=!1}play(){this.data.paused=!1,this.emitter&&(this.emitter.meshInstance.visible=!0,this.emitter.loop=this.data.loop,this.emitter.resetTime())}isPlaying(){return this.data.paused?!1:this.emitter&&this.emitter.loop?!0:Date.now()<=this.emitter.endTime}setInTools(){const{emitter:e}=this;e&&!e.inTools&&(e.inTools=!0,this.rebuild())}rebuild(){const e=this.enabled;this.enabled=!1,this.emitter&&this.emitter.rebuild(),this.enabled=e}}class AV{constructor(){this.numParticles=1,this.rate=1,this.rate2=null,this.startAngle=0,this.startAngle2=null,this.lifetime=50,this.emitterExtents=new x,this.emitterExtentsInner=new x,this.emitterRadius=0,this.emitterRadiusInner=0,this.emitterShape=Vs,this.initialVelocity=0,this.wrap=!1,this.wrapBounds=new x,this.localSpace=!1,this.screenSpace=!1,this.colorMap=null,this.colorMapAsset=null,this.normalMap=null,this.normalMapAsset=null,this.loop=!0,this.preWarm=!1,this.sort=0,this.mode=ax,this.scene=null,this.lighting=!1,this.halfLambert=!1,this.intensity=1,this.stretch=0,this.alignToMotion=!1,this.depthSoftening=0,this.renderAsset=null,this.meshAsset=null,this.mesh=null,this.depthWrite=!1,this.noFog=!1,this.orientation=Lc,this.particleNormal=new x(0,1,0),this.animTilesX=1,this.animTilesY=1,this.animStartFrame=0,this.animNumFrames=1,this.animNumAnimations=1,this.animIndex=0,this.randomizeAnimIndex=!1,this.animSpeed=1,this.animLoop=!0,this.scaleGraph=null,this.scaleGraph2=null,this.colorGraph=null,this.colorGraph2=null,this.alphaGraph=null,this.alphaGraph2=null,this.localVelocityGraph=null,this.localVelocityGraph2=null,this.velocityGraph=null,this.velocityGraph2=null,this.rotationSpeedGraph=null,this.rotationSpeedGraph2=null,this.radialSpeedGraph=null,this.radialSpeedGraph2=null,this.blendType=ii,this.enabled=!0,this.paused=!1,this.autoPlay=!0,this.layers=[Ni]}}var bV=`
varying vec4 texCoordsAlphaLife;
uniform sampler2D colorMap;
uniform sampler2D colorParam;
uniform float graphSampleSize;
uniform float graphNumSamples;
#ifndef CAMERAPLANES
	#define CAMERAPLANES
	uniform vec4 camera_params;
#endif
uniform float softening;
uniform float colorMult;
float saturate(float x) {
	return clamp(x, 0.0, 1.0);
}
void main(void) {
	vec4 tex  = texture2D(colorMap, vec2(texCoordsAlphaLife.x, 1.0 - texCoordsAlphaLife.y));
	vec4 ramp = texture2D(colorParam, vec2(texCoordsAlphaLife.w, 0.0));
	ramp.rgb *= colorMult;
	ramp.a += texCoordsAlphaLife.z;
	vec3 rgb = tex.rgb * ramp.rgb;
	float a  = tex.a * ramp.a;
`,wV=`
vec3 unpack3NFloats(float src) {
	float r = fract(src);
	float g = fract(src * 256.0);
	float b = fract(src * 65536.0);
	return vec3(r, g, b);
}
float saturate(float x) {
	return clamp(x, 0.0, 1.0);
}
vec4 tex1Dlod_lerp(TEXTURE_ACCEPT_HIGHP(tex), vec2 tc) {
	return mix( texture2D(tex,tc), texture2D(tex,tc + graphSampleSize), fract(tc.x*graphNumSamples) );
}
vec4 tex1Dlod_lerp(TEXTURE_ACCEPT_HIGHP(tex), vec2 tc, out vec3 w) {
	vec4 a = texture2D(tex,tc);
	vec4 b = texture2D(tex,tc + graphSampleSize);
	float c = fract(tc.x*graphNumSamples);
	vec3 unpackedA = unpack3NFloats(a.w);
	vec3 unpackedB = unpack3NFloats(b.w);
	w = mix(unpackedA, unpackedB, c);
	return mix(a, b, c);
}
vec2 rotate(vec2 quadXY, float pRotation, out mat2 rotMatrix) {
	float c = cos(pRotation);
	float s = sin(pRotation);
	mat2 m = mat2(c, -s, s, c);
	rotMatrix = m;
	return m * quadXY;
}
vec3 billboard(vec3 InstanceCoords, vec2 quadXY) {
	#ifdef SCREEN_SPACE
		vec3 pos = vec3(-1, 0, 0) * quadXY.x + vec3(0, -1, 0) * quadXY.y;
	#else
		vec3 pos = -matrix_viewInverse[0].xyz * quadXY.x + -matrix_viewInverse[1].xyz * quadXY.y;
	#endif
	return pos;
}
vec3 customFace(vec3 InstanceCoords, vec2 quadXY) {
	vec3 pos = faceTangent * quadXY.x + faceBinorm * quadXY.y;
	return pos;
}
vec2 safeNormalize(vec2 v) {
	float l = length(v);
	return (l > 1e-06) ? v / l : v;
}
void main(void) {
	vec3 meshLocalPos = particle_vertexData.xyz;
	float id = floor(particle_vertexData.w);
	float rndFactor = fract(sin(id + 1.0 + seed));
	vec3 rndFactor3 = vec3(rndFactor, fract(rndFactor*10.0), fract(rndFactor*100.0));
	float uv = id / numParticlesPot;
	readInput(uv);
#ifdef LOCAL_SPACE
	inVel = mat3(matrix_model) * inVel;
#endif
	vec2 velocityV = safeNormalize((mat3(matrix_view) * inVel).xy);
	float particleLifetime = lifetime;
	if (inLife <= 0.0 || inLife > particleLifetime || !inShow)
		meshLocalPos = vec3(0.0);
	vec2 quadXY = meshLocalPos.xy;
	float nlife = clamp(inLife / particleLifetime, 0.0, 1.0);
	vec3 paramDiv;
	vec4 params = tex1Dlod_lerp(TEXTURE_PASS(internalTex2), vec2(nlife, 0), paramDiv);
	float scale = params.y;
	float scaleDiv = paramDiv.x;
	float alphaDiv = paramDiv.z;
	scale += (scaleDiv * 2.0 - 1.0) * scaleDivMult * fract(rndFactor*10000.0);
#ifndef USE_MESH
	texCoordsAlphaLife = vec4(quadXY * -0.5 + 0.5, (alphaDiv * 2.0 - 1.0) * alphaDivMult * fract(rndFactor*1000.0), nlife);
#else
	texCoordsAlphaLife = vec4(particle_uv, (alphaDiv * 2.0 - 1.0) * alphaDivMult * fract(rndFactor*1000.0), nlife);
#endif
	vec3 particlePos = inPos;
	vec3 particlePosMoved = vec3(0.0);
	mat2 rotMatrix;
`,CV=`
	float animFrame = min(floor(texCoordsAlphaLife.w * animTexParams.y) + animTexParams.x, animTexParams.z);
`,PV=`
	float animFrame = floor(mod(texCoordsAlphaLife.w * animTexParams.y + animTexParams.x, animTexParams.z + 1.0));
`,LV=`
	float animationIndex;
	if (animTexIndexParams.y == 1.0) {
		animationIndex = floor((animTexParams.w + 1.0) * rndFactor3.z) * (animTexParams.z + 1.0);
	} else {
		animationIndex = animTexIndexParams.x * (animTexParams.z + 1.0);
	}
	float atlasX = (animationIndex + animFrame) * animTexTilesParams.x;
	float atlasY = 1.0 - floor(atlasX + 1.0) * animTexTilesParams.y;
	atlasX = fract(atlasX);
	texCoordsAlphaLife.xy *= animTexTilesParams.xy;
	texCoordsAlphaLife.xy += vec2(atlasX, atlasY);
`,IV=`
void readInput(float uv) {
	vec4 tex = texture2D(particleTexIN, vec2(uv, 0.25));
	vec4 tex2 = texture2D(particleTexIN, vec2(uv, 0.75));
	inPos = tex.xyz;
	inVel = tex2.xyz;
	inAngle = (tex.w < 0.0? -tex.w : tex.w) - 1000.0;
	inShow = tex.w >= 0.0;
	inLife = tex2.w;
}
`,MV=`
#define PI2 6.283185307179586
uniform vec3 inBoundsSize;
uniform vec3 inBoundsCenter;
uniform float maxVel;
float decodeFloatRG(vec2 rg) {
	return rg.y * (1.0 / 255.0) + rg.x;
}
float decodeFloatRGBA( vec4 rgba ) {
	return dot(rgba, vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));
}
void readInput(float uv) {
	vec4 tex0 = texture2D(particleTexIN, vec2(uv, 0.125));
	vec4 tex1 = texture2D(particleTexIN, vec2(uv, 0.375));
	vec4 tex2 = texture2D(particleTexIN, vec2(uv, 0.625));
	vec4 tex3 = texture2D(particleTexIN, vec2(uv, 0.875));
	inPos = vec3(decodeFloatRG(tex0.rg), decodeFloatRG(tex0.ba), decodeFloatRG(tex1.rg));
	inPos = (inPos - vec3(0.5)) * inBoundsSize + inBoundsCenter;
	inVel = tex2.xyz;
	inVel = (inVel - vec3(0.5)) * maxVel;
	inAngle = decodeFloatRG(tex1.ba) * PI2;
	inShow = tex2.a > 0.5;
	inLife = decodeFloatRGBA(tex3);
	float maxNegLife = max(lifetime, (numParticles - 1.0) * (rate+rateDiv));
	float maxPosLife = lifetime+1.0;
	inLife = inLife * (maxNegLife + maxPosLife) - maxNegLife;
}
`,DV=`
void writeOutput() {
	if (gl_FragCoord.y<1.0) {
		gl_FragColor = vec4(outPos, (outAngle + 1000.0) * visMode);
	} else {
		gl_FragColor = vec4(outVel, outLife);
	}
}
`,RV=`
uniform vec3 outBoundsMul;
uniform vec3 outBoundsAdd;
vec2 encodeFloatRG( float v ) {
	vec2 enc = vec2(1.0, 255.0) * v;
	enc = fract(enc);
	enc -= enc.yy * vec2(1.0/255.0, 1.0/255.0);
	return enc;
}
vec4 encodeFloatRGBA( float v ) {
	vec4 enc = vec4(1.0, 255.0, 65025.0, 160581375.0) * v;
	enc = fract(enc);
	enc -= enc.yzww * vec4(1.0/255.0,1.0/255.0,1.0/255.0,0.0);
	return enc;
}
void writeOutput() {
	outPos = outPos * outBoundsMul + outBoundsAdd;
	outAngle = fract(outAngle / PI2);
	outVel = (outVel / maxVel) + vec3(0.5);
	float maxNegLife = max(lifetime, (numParticles - 1.0) * (rate+rateDiv));
	float maxPosLife = lifetime+1.0;
	outLife = (outLife + maxNegLife) / (maxNegLife + maxPosLife);
	if (gl_FragCoord.y < 1.0) {
		gl_FragColor = vec4(encodeFloatRG(outPos.x), encodeFloatRG(outPos.y));
	} else if (gl_FragCoord.y < 2.0) {
		gl_FragColor = vec4(encodeFloatRG(outPos.z), encodeFloatRG(outAngle));
	} else if (gl_FragCoord.y < 3.0) {
		gl_FragColor = vec4(outVel, visMode*0.5+0.5);
	} else {
		gl_FragColor = encodeFloatRGBA(outLife);
	}
}
`,OV=`
uniform mat3 spawnBounds;
uniform vec3 spawnPosInnerRatio;
vec3 calcSpawnPosition(vec3 inBounds, float rndFactor) {
	vec3 pos = inBounds - vec3(0.5);
	vec3 posAbs = abs(pos);
	vec3 maxPos = vec3(max(posAbs.x, max(posAbs.y, posAbs.z)));
	vec3 edge = maxPos + (vec3(0.5) - maxPos) * spawnPosInnerRatio;
	pos.x = edge.x * (maxPos.x == posAbs.x ? sign(pos.x) : 2.0 * pos.x);
	pos.y = edge.y * (maxPos.y == posAbs.y ? sign(pos.y) : 2.0 * pos.y);
	pos.z = edge.z * (maxPos.z == posAbs.z ? sign(pos.z) : 2.0 * pos.z);
#ifndef LOCAL_SPACE
	return emitterPos + spawnBounds * pos;
#else
	return spawnBounds * pos;
#endif
}
void addInitialVelocity(inout vec3 localVelocity, vec3 inBounds) {
	localVelocity -= vec3(0, 0, initialVelocity);
}
`,NV=`
	writeOutput();
}
`,FV=`
varying vec2 vUv0;
uniform highp sampler2D particleTexIN;
uniform highp sampler2D internalTex0;
uniform highp sampler2D internalTex1;
uniform highp sampler2D internalTex2;
uniform highp sampler2D internalTex3;
uniform mat3 emitterMatrix;
uniform mat3 emitterMatrixInv;
uniform vec3 emitterScale;
uniform vec3 emitterPos;
uniform vec3 frameRandom;
uniform vec3 localVelocityDivMult;
uniform vec3 velocityDivMult;
uniform float delta;
uniform float rate;
uniform float rateDiv;
uniform float lifetime;
uniform float numParticles;
uniform float rotSpeedDivMult;
uniform float radialSpeedDivMult;
uniform float seed;
uniform float startAngle;
uniform float startAngle2;
uniform float initialVelocity;
uniform float graphSampleSize;
uniform float graphNumSamples;
vec3 inPos;
vec3 inVel;
float inAngle;
bool inShow;
float inLife;
float visMode;
vec3 outPos;
vec3 outVel;
float outAngle;
bool outShow;
float outLife;
`,kV=`
	if (outLife >= lifetime) {
		outLife -= max(lifetime, (numParticles - 1.0) * particleRate);
		visMode = -1.0;
	}
`,UV=`
	visMode = outLife < 0.0? -1.0: visMode;
`,BV=`
	if (outLife >= lifetime) {
		outLife -= max(lifetime, (numParticles - 1.0) * particleRate);
		visMode = 1.0;
	}
	visMode = outLife < 0.0? 1.0: visMode;
`,VV=`
uniform float spawnBoundsSphere;
uniform float spawnBoundsSphereInnerRatio;
vec3 calcSpawnPosition(vec3 inBounds, float rndFactor) {
	float rnd4 = fract(rndFactor * 1000.0);
	vec3 norm = normalize(inBounds.xyz - vec3(0.5));
	float r = rnd4 * (1.0 - spawnBoundsSphereInnerRatio) + spawnBoundsSphereInnerRatio;
#ifndef LOCAL_SPACE
	return emitterPos + norm * r * spawnBoundsSphere;
#else
	return norm * r * spawnBoundsSphere;
#endif
}
void addInitialVelocity(inout vec3 localVelocity, vec3 inBounds) {
	localVelocity += normalize(inBounds - vec3(0.5)) * initialVelocity;
}
`,zV=`
float saturate(float x) {
	return clamp(x, 0.0, 1.0);
}
vec3 unpack3NFloats(float src) {
	float r = fract(src);
	float g = fract(src * 256.0);
	float b = fract(src * 65536.0);
	return vec3(r, g, b);
}
vec3 tex1Dlod_lerp(TEXTURE_ACCEPT_HIGHP(tex), vec2 tc, out vec3 w) {
	vec4 a = texture2D(tex, tc);
	vec4 b = texture2D(tex, tc + graphSampleSize);
	float c = fract(tc.x * graphNumSamples);
	vec3 unpackedA = unpack3NFloats(a.w);
	vec3 unpackedB = unpack3NFloats(b.w);
	w = mix(unpackedA, unpackedB, c);
	return mix(a.xyz, b.xyz, c);
}
#define HASHSCALE4 vec4(1031, .1030, .0973, .1099)
vec4 hash41(float p) {
	vec4 p4 = fract(vec4(p) * HASHSCALE4);
	p4 += dot(p4, p4.wzxy+19.19);
	return fract(vec4((p4.x + p4.y)*p4.z, (p4.x + p4.z)*p4.y, (p4.y + p4.z)*p4.w, (p4.z + p4.w)*p4.x));
}
void main(void) {
	if (gl_FragCoord.x > numParticles) discard;
	readInput(vUv0.x);
	visMode = inShow? 1.0 : -1.0;
	vec4 rndFactor = hash41(gl_FragCoord.x + seed);
	float particleRate = rate + rateDiv * rndFactor.x;
	outLife = inLife + delta;
	float nlife = clamp(outLife / lifetime, 0.0, 1.0);
	vec3 localVelocityDiv;
	vec3 velocityDiv;
	vec3 paramDiv;
	vec3 localVelocity = tex1Dlod_lerp(TEXTURE_PASS(internalTex0), vec2(nlife, 0), localVelocityDiv);
	vec3 velocity =	  tex1Dlod_lerp(TEXTURE_PASS(internalTex1), vec2(nlife, 0), velocityDiv);
	vec3 params =		tex1Dlod_lerp(TEXTURE_PASS(internalTex2), vec2(nlife, 0), paramDiv);
	float rotSpeed = params.x;
	float rotSpeedDiv = paramDiv.y;
	vec3 radialParams = tex1Dlod_lerp(TEXTURE_PASS(internalTex3), vec2(nlife, 0), paramDiv);
	float radialSpeed = radialParams.x;
	float radialSpeedDiv = radialParams.y;
	bool respawn = inLife <= 0.0 || outLife >= lifetime;
	inPos = respawn ? calcSpawnPosition(rndFactor.xyz, rndFactor.x) : inPos;
	inAngle = respawn ? mix(startAngle, startAngle2, rndFactor.x) : inAngle;
#ifndef LOCAL_SPACE
	vec3 radialVel = inPos - emitterPos;
#else
	vec3 radialVel = inPos;
#endif
	radialVel = (dot(radialVel, radialVel) > 1.0E-8) ? radialSpeed * normalize(radialVel) : vec3(0.0);
	radialVel += (radialSpeedDiv * vec3(2.0) - vec3(1.0)) * radialSpeedDivMult * rndFactor.xyz;
	localVelocity +=	(localVelocityDiv * vec3(2.0) - vec3(1.0)) * localVelocityDivMult * rndFactor.xyz;
	velocity +=		 (velocityDiv * vec3(2.0) - vec3(1.0)) * velocityDivMult * rndFactor.xyz;
	rotSpeed +=		 (rotSpeedDiv * 2.0 - 1.0) * rotSpeedDivMult * rndFactor.y;
	addInitialVelocity(localVelocity, rndFactor.xyz);
#ifndef LOCAL_SPACE
	outVel = emitterMatrix * localVelocity + (radialVel + velocity) * emitterScale;
#else
	outVel = (localVelocity + radialVel) / emitterScale + emitterMatrixInv * velocity;
#endif
	outPos = inPos + outVel * delta;
	outAngle = inAngle + rotSpeed * delta;
`,HV=`
	quadXY = rotate(quadXY, inAngle, rotMatrix);
	vec3 localPos = billboard(particlePos, quadXY);
`,GV=`
	dBlendModeFogFactor = 0.0;
	rgb *= saturate(gammaCorrectInput(max(a, 0.0)));
	if ((rgb.r + rgb.g + rgb.b) < 0.000001) discard;
`,WV=`
	rgb = mix(vec3(1.0), rgb, vec3(a));
	if (rgb.r + rgb.g + rgb.b > 2.99) discard;
`,$V=`
	if (a < 0.01) discard;
`,XV=`
attribute vec4 particle_vertexData;
attribute vec4 particle_vertexData2;
attribute vec4 particle_vertexData3;
attribute float particle_vertexData4;
#ifndef USE_MESH
	attribute vec2 particle_vertexData5;
#else
	attribute vec4 particle_vertexData5;
#endif
uniform mat4 matrix_viewProjection;
uniform mat4 matrix_model;
#ifndef VIEWMATRIX
	#define VIEWMATRIX
	uniform mat4 matrix_view;
#endif
uniform mat3 matrix_normal;
uniform mat4 matrix_viewInverse;
uniform float numParticles;
uniform float lifetime;
uniform float stretch;
uniform float seed;
uniform vec3 wrapBounds;
uniform vec3 emitterScale;
uniform vec3 faceTangent;
uniform vec3 faceBinorm;
#ifdef PARTICLE_GPU
	uniform highp sampler2D internalTex0;
	uniform highp sampler2D internalTex1;
	uniform highp sampler2D internalTex2;
#endif
uniform vec3 emitterPos;
varying vec4 texCoordsAlphaLife;
vec2 rotate(vec2 quadXY, float pRotation, out mat2 rotMatrix)
{
	float c = cos(pRotation);
	float s = sin(pRotation);
	mat2 m = mat2(c, -s, s, c);
	rotMatrix = m;
	return m * quadXY;
}
vec3 billboard(vec3 InstanceCoords, vec2 quadXY)
{
	vec3 pos = -matrix_viewInverse[0].xyz * quadXY.x + -matrix_viewInverse[1].xyz * quadXY.y;
	return pos;
}
vec3 customFace(vec3 InstanceCoords, vec2 quadXY)
{
	vec3 pos = faceTangent * quadXY.x + faceBinorm * quadXY.y;
	return pos;
}
void main(void)
{
	vec3 particlePos = particle_vertexData.xyz;
	vec3 inPos = particlePos;
	vec3 vertPos = particle_vertexData3.xyz;
	vec3 inVel = vec3(particle_vertexData2.w, particle_vertexData3.w, particle_vertexData5.x);
	float id = floor(particle_vertexData4);
	float rndFactor = fract(sin(id + 1.0 + seed));
	vec3 rndFactor3 = vec3(rndFactor, fract(rndFactor*10.0), fract(rndFactor*100.0));
#ifdef LOCAL_SPACE
	inVel = mat3(matrix_model) * inVel;
#endif
	vec2 velocityV = normalize((mat3(matrix_view) * inVel).xy);
	vec2 quadXY = vertPos.xy;
#ifdef USE_MESH
	texCoordsAlphaLife = vec4(particle_vertexData5.zw, particle_vertexData2.z, particle_vertexData.w);
#else
	texCoordsAlphaLife = vec4(quadXY * -0.5 + 0.5, particle_vertexData2.z, particle_vertexData.w);
#endif
	mat2 rotMatrix;
	float inAngle = particle_vertexData2.x;
	vec3 particlePosMoved = vec3(0.0);
	vec3 meshLocalPos = particle_vertexData3.xyz;
`,qV=`
	localPos *= particle_vertexData2.y * emitterScale;
	localPos += particlePos;
	gl_Position = matrix_viewProjection * vec4(localPos, 1.0);
`,YV=`
	quadXY = rotate(quadXY, inAngle, rotMatrix);
	vec3 localPos = customFace(particlePos, quadXY);
`,jV=`
	rgb = addFog(rgb);
	rgb = toneMap(rgb);
	rgb = gammaCorrectOutput(rgb);
	gl_FragColor = vec4(rgb, a);
}
`,KV=`
	localPos *= scale * emitterScale;
	localPos += particlePos;
	#ifdef SCREEN_SPACE
	gl_Position = vec4(localPos.x, localPos.y, 0.0, 1.0);
	#else
	gl_Position = matrix_viewProjection * vec4(localPos.xyz, 1.0);
	#endif
`,ZV=`
	vec3 negNormal = normal * 0.5 + 0.5;
	vec3 posNormal = -normal * 0.5 + 0.5;
	negNormal *= negNormal;
	posNormal *= posNormal;
`,QV=`
attribute vec4 particle_vertexData;
#if defined(USE_MESH)
	#if defined(USE_MESH_UV)
		attribute vec2 particle_uv;
	#else
		vec2 particle_uv = vec2(0.0, 0.0);
	#endif
#endif
uniform mat4 matrix_viewProjection;
uniform mat4 matrix_model;
uniform mat3 matrix_normal;
uniform mat4 matrix_viewInverse;
#ifndef VIEWMATRIX
	#define VIEWMATRIX
	uniform mat4 matrix_view;
#endif
uniform float numParticles;
uniform float numParticlesPot;
uniform float graphSampleSize;
uniform float graphNumSamples;
uniform float stretch;
uniform vec3 wrapBounds;
uniform vec3 emitterScale;
uniform vec3 emitterPos;
uniform vec3 faceTangent;
uniform vec3 faceBinorm;
uniform float rate;
uniform float rateDiv;
uniform float lifetime;
uniform float deltaRandomnessStatic;
uniform float scaleDivMult;
uniform float alphaDivMult;
uniform float seed;
uniform float delta;
uniform sampler2D particleTexOUT;
uniform sampler2D particleTexIN;
#ifdef PARTICLE_GPU
	uniform highp sampler2D internalTex0;
	uniform highp sampler2D internalTex1;
	uniform highp sampler2D internalTex2;
#endif
#ifndef CAMERAPLANES
	#define CAMERAPLANES
	uniform vec4 camera_params;
#endif
varying vec4 texCoordsAlphaLife;
vec3 inPos;
vec3 inVel;
float inAngle;
bool inShow;
float inLife;
`,JV=`
	vec3 negNormal = max(normal, vec3(0.0));
	vec3 posNormal = max(-normal, vec3(0.0));
`,ez=`
	vec3 light = negNormal.x*lightCube[0] + posNormal.x*lightCube[1] +
						negNormal.y*lightCube[2] + posNormal.y*lightCube[3] +
						negNormal.z*lightCube[4] + posNormal.z*lightCube[5];
	rgb *= light;
`,tz=`
	particlePos = (matrix_model * vec4(particlePos, 1.0)).xyz;
`,sz=`
	vec3 localPos = meshLocalPos;
	localPos.xy = rotate(localPos.xy, inAngle, rotMatrix);
	localPos.yz = rotate(localPos.yz, inAngle, rotMatrix);
	billboard(particlePos, quadXY);
`,iz=`
	Normal = normalize(localPos + matrix_viewInverse[2].xyz);
`,rz=`
	vec3 normalMap = normalize(texture2D(normalMap, vec2(texCoordsAlphaLife.x, 1.0 - texCoordsAlphaLife.y)).xyz * 2.0 - 1.0);
	vec3 normal = ParticleMat * normalMap;
`,az=`
	inAngle = atan(velocityV.x, velocityV.y);
`,nz=`
	#include "particleUpdaterInitPS"
	#ifdef PACK8
		#include "particleInputRgba8PS"
		#include "particleOutputRgba8PS"
	#else
		#include "particleInputFloatPS"
		#include "particleOutputFloatPS"
	#endif
	#ifdef EMITTERSHAPE_BOX
		#include "particleUpdaterAABBPS"
	#else
		#include "particleUpdaterSpherePS"
	#endif
	#include "particleUpdaterStartPS"
	#ifdef RESPAWN
		#include "particleUpdaterRespawnPS"
	#endif
	#ifdef NO_RESPAWN
		#include "particleUpdaterNoRespawnPS"
	#endif
	#ifdef ON_STOP
		#include "particleUpdaterOnStopPS"
	#endif
	#include "particleUpdaterEndPS"
`,oz=`
	#if NORMAL != NONE
		#if NORMAL == VERTEX
			varying vec3 Normal;
		#endif
		#if NORMAL == MAP
			varying mat3 ParticleMat;
		#endif
		uniform vec3 lightCube[6];
	#endif
	#ifdef SOFT
		varying float vDepth;
		#include "screenDepthPS"
	#endif
	#include "gammaPS"
	#include "tonemappingPS"
	#include "fogPS"
	#if NORMAL == MAP
		uniform sampler2D normalMap;
	#endif
	#include "particlePS"
	#ifdef SOFT
		#include "particle_softPS"
	#endif
	#if NORMAL == VERTEX
		vec3 normal = Normal;
	#endif
	#if NORMAL == MAP
		#include "particle_normalMapPS"
	#endif
	#if NORMAL != NONE
		#ifdef HALF_LAMBERT
			#include "particle_halflambertPS"
		#else
			#include "particle_lambertPS"
		#endif
		#include "particle_lightingPS"
	#endif
	#if BLEND == NORMAL
		#include "particle_blendNormalPS"
	#elif BLEND == ADDITIVE
		#include "particle_blendAddPS"
	#elif BLEND == MULTIPLICATIVE
		#include "particle_blendMultiplyPS"
	#endif
	#include "particle_endPS"
`,lz=`
	#ifdef ANIMTEX
		uniform vec2 animTexTilesParams;
		uniform vec4 animTexParams;
		uniform vec2 animTexIndexParams;
	#endif
	#if NORMAL == MAP
		varying mat3 ParticleMat;
	#endif
	#if NORMAL == VERTEX
		varying vec3 Normal;
	#endif
	#ifdef SOFT
		varying float vDepth;
	#endif
	#ifdef PARTICLE_GPU
		#include "particle_initVS"
		#ifdef PACK8
			#include "particleInputRgba8PS"
		#else
			#include  "particleInputFloatPS"
		#endif
		#ifdef SOFT
			#include "screenDepthPS"
		#endif
		#include "particleVS"
	#else
		#ifdef SOFT
			#include "screenDepthPS"
		#endif
		#include "particle_cpuVS"
	#endif
	#ifdef LOCAL_SPACE
		#include "particle_localShiftVS"
	#endif
	#ifdef ANIMTEX
		#ifdef ANIMTEX_LOOP
			#include "particleAnimFrameLoopVS"
		#else
			#include "particleAnimFrameClampVS"
		#endif
		#include "particleAnimTexVS"
	#endif
	#ifdef PARTICLE_GPU
		#ifdef WRAP
			#include "particle_wrapVS"
		#endif
	#endif
	#ifdef ALIGN_TO_MOTION
		#include "particle_pointAlongVS"
	#endif
	#ifdef USE_MESH
		#include "particle_meshVS"
	#else
		#ifdef CUSTOM_FACE
			#include "particle_customFaceVS"
		#else
			#include "particle_billboardVS"
		#endif
	#endif
	#if NORMAL == VERTEX
		#include "particle_normalVS"
	#endif
	#if NORMAL == MAP
		#include "particle_TBNVS"
	#endif
	#ifdef STRETCH
		#include "particle_stretchVS"
	#endif
	#ifdef PARTICLE_GPU
		#include "particle_endVS"
	#else
		#include "particle_cpu_endVS"
	#endif
	#ifdef SOFT
		#include "particle_softVS"
	#endif
	}
`,hz=`
	float depth = getLinearScreenDepth();
	float particleDepth = vDepth;
	float depthDiff = saturate(abs(particleDepth - depth) * softening);
	a *= depthDiff;
`,cz=`
	vDepth = getLinearDepth(localPos);
`,dz=`
	vec3 moveDir = inVel * stretch;
	vec3 posPrev = particlePos - moveDir;
	posPrev += particlePosMoved;
	vec2 centerToVertexV = normalize((mat3(matrix_view) * localPos).xy);
	float interpolation = dot(-velocityV, centerToVertexV) * 0.5 + 0.5;
	particlePos = mix(particlePos, posPrev, interpolation);
`,fz=`
	mat3 rot3 = mat3(rotMatrix[0][0], rotMatrix[0][1], 0.0, rotMatrix[1][0], rotMatrix[1][1], 0.0, 0.0, 0.0, 1.0);
	ParticleMat = mat3(-matrix_viewInverse[0].xyz, -matrix_viewInverse[1].xyz, matrix_viewInverse[2].xyz) * rot3;
`,uz=`
	vec3 origParticlePos = particlePos;
	particlePos -= matrix_model[3].xyz;
	particlePos = mod(particlePos, wrapBounds) - wrapBounds * 0.5;
	particlePos += matrix_model[3].xyz;
	particlePosMoved = particlePos - origParticlePos;
`;const pz={particlePS:bV,particleVS:wV,particleAnimFrameClampVS:CV,particleAnimFrameLoopVS:PV,particleAnimTexVS:LV,particleInputFloatPS:IV,particleInputRgba8PS:MV,particleOutputFloatPS:DV,particleOutputRgba8PS:RV,particleUpdaterAABBPS:OV,particleUpdaterEndPS:NV,particleUpdaterInitPS:FV,particleUpdaterNoRespawnPS:kV,particleUpdaterOnStopPS:UV,particleUpdaterRespawnPS:BV,particleUpdaterSpherePS:VV,particleUpdaterStartPS:zV,particle_billboardVS:HV,particle_blendAddPS:GV,particle_blendMultiplyPS:WV,particle_blendNormalPS:$V,particle_cpuVS:XV,particle_cpu_endVS:qV,particle_customFaceVS:YV,particle_endPS:jV,particle_endVS:KV,particle_halflambertPS:ZV,particle_initVS:QV,particle_lambertPS:JV,particle_lightingPS:ez,particle_localShiftVS:tz,particle_meshVS:sz,particle_normalVS:iz,particle_normalMapPS:rz,particle_pointAlongVS:az,particle_simulationPS:nz,particle_shaderPS:oz,particle_shaderVS:lz,particle_softPS:hz,particle_softVS:cz,particle_stretchVS:dz,particle_TBNVS:fz,particle_wrapVS:uz};var mz=`
varying texCoordsAlphaLife: vec4f;
var colorMap: texture_2d<f32>;
var colorMapSampler: sampler;
var colorParam: texture_2d<f32>;
var colorParamSampler: sampler;
uniform graphSampleSize: f32;
uniform graphNumSamples: f32;
#ifndef CAMERAPLANES
	#define CAMERAPLANES
	uniform camera_params: vec4f;
#endif
uniform softening: f32;
uniform colorMult: f32;
fn saturate(x: f32) -> f32 {
	return clamp(x, 0.0, 1.0);
}
@fragment
fn fragmentMain(input: FragmentInput) -> FragmentOutput {
	var output: FragmentOutput;
	let tex: vec4f  = textureSample(colorMap, colorMapSampler, vec2f(input.texCoordsAlphaLife.x, 1.0 - input.texCoordsAlphaLife.y));
	var ramp: vec4f = textureSample(colorParam, colorParamSampler, vec2f(input.texCoordsAlphaLife.w, 0.0));
	ramp = vec4f(ramp.rgb * uniform.colorMult, ramp.a);
	ramp.a = ramp.a + input.texCoordsAlphaLife.z;
	var rgb: vec3f = tex.rgb * ramp.rgb;
	var a: f32 = tex.a * ramp.a;
`,_z=`
fn unpack3NFloats(src: f32) -> vec3f {
	let r = fract(src);
	let g = fract(src * 256.0);
	let b = fract(src * 65536.0);
	return vec3f(r, g, b);
}
fn saturate(x: f32) -> f32 {
	return clamp(x, 0.0, 1.0);
}
struct TexLerpUnpackResult {
	result: vec4f,
	unpacked: vec3f
}
fn tex1Dlod_lerp_simple(tex: texture_2d<f32>, texSampler: sampler, tc: vec2f) -> vec4f {
	let tc_next = tc + vec2f(uniform.graphSampleSize);
	return mix( textureSample(tex, texSampler, tc), textureSample(tex, texSampler, tc_next), fract(tc.x * uniform.graphNumSamples) );
}
fn tex1Dlod_lerp_unpack(tex: texture_2d<f32>, texSampler: sampler, tc: vec2f) -> TexLerpUnpackResult {
	let tc_next = tc + vec2f(uniform.graphSampleSize);
	let a = textureSampleLevel(tex, texSampler, tc, 0.0);
	let b = textureSampleLevel(tex, texSampler, tc_next, 0.0);
	let c = fract(tc.x * uniform.graphNumSamples);
	let unpackedA = unpack3NFloats(a.w);
	let unpackedB = unpack3NFloats(b.w);
	let w_out = mix(unpackedA, unpackedB, c);
	return TexLerpUnpackResult(mix(a, b, c), w_out);
}
struct RotateResult {
	rotatedVec: vec2f,
	matrix: mat2x2f
}
fn rotateWithMatrix(quadXY: vec2f, pRotation: f32) -> RotateResult {
	let c = cos(pRotation);
	let s = sin(pRotation);
	let m = mat2x2f(vec2f(c, s), vec2f(-s, c));
	return RotateResult(m * quadXY, m);
}
fn billboard(InstanceCoords: vec3f, quadXY: vec2f) -> vec3f {
	var pos: vec3f;
	#ifdef SCREEN_SPACE
		pos = vec3f(-1.0, 0.0, 0.0) * quadXY.x + vec3f(0.0, -1.0, 0.0) * quadXY.y;
	#else
		pos = -uniform.matrix_viewInverse[0].xyz * quadXY.x + -uniform.matrix_viewInverse[1].xyz * quadXY.y;
	#endif
	return pos;
}
fn customFace(InstanceCoords: vec3f, quadXY: vec2f) -> vec3f {
	let pos = uniform.faceTangent * quadXY.x + uniform.faceBinorm * quadXY.y;
	return pos;
}
fn safeNormalize(v: vec2f) -> vec2f {
	let l = length(v);
	return select(v, v / l, l > 1e-06);
}
@vertex
fn vertexMain(input: VertexInput) -> VertexOutput {
	var output: VertexOutput;
	let meshLocalPos_in = input.particle_vertexData.xyz;
	let id = floor(input.particle_vertexData.w);
	let rndFactor = fract(sin(id + 1.0 + uniform.seed));
	let rndFactor3 = vec3f(rndFactor, fract(rndFactor*10.0), fract(rndFactor*100.0));
	let uv = id / uniform.numParticlesPot;
	readInput(uv);
	#ifdef LOCAL_SPACE
		let modelRotation = mat3x3f(uniform.matrix_model[0].xyz, uniform.matrix_model[1].xyz, uniform.matrix_model[2].xyz);
		inVel = modelRotation * inVel;
	#endif
	let viewRotation = mat3x3f(uniform.matrix_view[0].xyz, uniform.matrix_view[1].xyz, uniform.matrix_view[2].xyz);
	let velocityV = safeNormalize((viewRotation * inVel).xy);
	let particleLifetime = uniform.lifetime;
	var meshLocalPos = meshLocalPos_in;
	if (inLife <= 0.0 || inLife > particleLifetime || !inShow) {
		 meshLocalPos = vec3f(0.0);
	}
	let quadXY = meshLocalPos.xy;
	let nlife = clamp(inLife / particleLifetime, 0.0, 1.0);
	let lerp_result = tex1Dlod_lerp_unpack(internalTex2, internalTex2Sampler, vec2f(nlife, 0.0));
	let params = lerp_result.result;
	let paramDiv = lerp_result.unpacked;
	var scale = params.y;
	let scaleDiv = paramDiv.x;
	let alphaDiv = paramDiv.z;
	scale = scale + (scaleDiv * 2.0 - 1.0) * uniform.scaleDivMult * fract(rndFactor*10000.0);
	#ifndef USE_MESH
		output.texCoordsAlphaLife = vec4f(quadXY * -0.5 + 0.5, (alphaDiv * 2.0 - 1.0) * uniform.alphaDivMult * fract(rndFactor*1000.0), nlife);
	#else
		output.texCoordsAlphaLife = vec4f(particle_uv, (alphaDiv * 2.0 - 1.0) * uniform.alphaDivMult * fract(rndFactor*1000.0), nlife);
	#endif
	var particlePos = inPos;
	var particlePosMoved = vec3f(0.0);
	var rotMatrix: mat2x2f;
`,gz=`
	let animFrame: f32 = min(floor(input.texCoordsAlphaLife.w * uniform.animTexParams.y) + uniform.animTexParams.x, uniform.animTexParams.z);
`,vz=`
	let animFrame: f32 = floor((output.texCoordsAlphaLife.w * uniform.animTexParams.y + uniform.animTexParams.x) % (uniform.animTexParams.z + 1.0));	
`,Sz=`
	var animationIndex: f32;
	if (uniform.animTexIndexParams.y == 1.0) {
		animationIndex = floor((uniform.animTexParams.w + 1.0) * rndFactor3.z) * (uniform.animTexParams.z + 1.0);
	} else {
		animationIndex = uniform.animTexIndexParams.x * (uniform.animTexParams.z + 1.0);
	}
	var atlasX: f32 = (animationIndex + animFrame) * uniform.animTexTilesParams.x;
	let atlasY: f32 = 1.0 - floor(atlasX + 1.0) * uniform.animTexTilesParams.y;
	atlasX = fract(atlasX);
	let current_tcal_xy = output.texCoordsAlphaLife.xy;
	let scaled_tcal_xy = current_tcal_xy * uniform.animTexTilesParams.xy;
	let final_tcal_xy = scaled_tcal_xy + vec2f(atlasX, atlasY);
	output.texCoordsAlphaLife = vec4f(final_tcal_xy, output.texCoordsAlphaLife.z, output.texCoordsAlphaLife.w);
`,yz=`
fn readInput(uv: f32) {
	let tex: vec4f = textureSampleLevel(particleTexIN, particleTexINSampler, vec2f(uv, 0.25), 0.0);
	let tex2: vec4f = textureSampleLevel(particleTexIN, particleTexINSampler, vec2f(uv, 0.75), 0.0);
	inPos = tex.xyz;
	inVel = tex2.xyz;
	inAngle = abs(tex.w) - 1000.0;
	inShow = tex.w >= 0.0;
	inLife = tex2.w;
}
`,Tz=`
const PI2: f32 = 6.283185307179586;
uniform inBoundsSize: vec3f;
uniform inBoundsCenter: vec3f;
uniform maxVel: f32;
fn decodeFloatRG(rg: vec2f) -> f32 {
	return rg.y * (1.0 / 255.0) + rg.x;
}
fn decodeFloatRGBA( rgba: vec4f ) -> f32 {
	return dot(rgba, vec4f(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));
}
fn readInput(uv: f32) {
	let tex0 = textureSampleLevel(particleTexIN, particleTexINSampler, vec2f(uv, 0.125), 0.0);
	let tex1 = textureSampleLevel(particleTexIN, particleTexINSampler, vec2f(uv, 0.375), 0.0);
	let tex2 = textureSampleLevel(particleTexIN, particleTexINSampler, vec2f(uv, 0.625), 0.0);
	let tex3 = textureSampleLevel(particleTexIN, particleTexINSampler, vec2f(uv, 0.875), 0.0);
	inPos = vec3f(decodeFloatRG(tex0.rg), decodeFloatRG(tex0.ba), decodeFloatRG(tex1.rg));
	inPos = (inPos - vec3f(0.5)) * uniform.inBoundsSize + uniform.inBoundsCenter;
	inVel = tex2.xyz;
	inVel = (inVel - vec3f(0.5)) * uniform.maxVel;
	inAngle = decodeFloatRG(tex1.ba) * PI2;
	inShow = tex2.a > 0.5;
	let life_decoded = decodeFloatRGBA(tex3);
	let maxNegLife = max(uniform.lifetime, (uniform.numParticles - 1.0) * (uniform.rate + uniform.rateDiv));
	let maxPosLife = uniform.lifetime + 1.0;
	inLife = life_decoded * (maxNegLife + maxPosLife) - maxNegLife;
}`,xz=`
fn getOutput() -> vec4f {
	if (pcPosition.y < 1.0) {
		return vec4f(outPos, (outAngle + 1000.0) * visMode);
	} else {
		return vec4f(outVel, outLife);
	}
}
`,Ez=`
uniform outBoundsMul: vec3f;
uniform outBoundsAdd: vec3f;
fn encodeFloatRG( v: f32 ) -> vec2f {
	var enc: vec2f = vec2f(1.0, 255.0) * v;
	enc = fract(enc);
	enc = enc - enc.yy * (1.0 / 255.0);
	return enc;
}
fn encodeFloatRGBA( v: f32 ) -> vec4f {
	let factors = vec4f(1.0, 255.0, 65025.0, 160581375.0);
	var enc: vec4f = factors * v;
	enc = fract(enc);
	enc = enc - enc.yzww * vec4f(1.0 / 255.0, 1.0 / 255.0, 1.0 / 255.0, 0.0);
	return enc;
}
fn getOutput() -> vec4f {
	outPos = outPos * uniform.outBoundsMul + uniform.outBoundsAdd;
	outAngle = fract(outAngle / PI2);
	outVel = (outVel / uniform.maxVel) + vec3f(0.5);
	let maxNegLife = max(uniform.lifetime, (uniform.numParticles - 1.0) * (uniform.rate + uniform.rateDiv));
	let maxPosLife = uniform.lifetime + 1.0;
	outLife = (outLife + maxNegLife) / (maxNegLife + maxPosLife);
	if (pcPosition.y < 1.0) {
		return vec4f(encodeFloatRG(outPos.x), encodeFloatRG(outPos.y));
	} else if (pcPosition.y < 2.0) {
		return vec4f(encodeFloatRG(outPos.z), encodeFloatRG(outAngle));
	} else if (pcPosition.y < 3.0) {
		return vec4f(outVel, visMode * 0.5 + 0.5);
	} else {
		return encodeFloatRGBA(outLife);
	}
}
`,Az=`
uniform spawnBounds: mat3x3f;
uniform spawnPosInnerRatio: vec3f;
fn calcSpawnPosition(inBounds: vec3f, rndFactor: f32) -> vec3f {
	var pos = inBounds - vec3f(0.5);
	let posAbs = abs(pos);
	let maxComp = max(posAbs.x, max(posAbs.y, posAbs.z));
	let maxPos = vec3f(maxComp);
	let edge = maxPos + (vec3f(0.5) - maxPos) * uniform.spawnPosInnerRatio;
	pos.x = edge.x * select(2.0 * pos.x, sign(pos.x), maxPos.x == posAbs.x);
	pos.y = edge.y * select(2.0 * pos.y, sign(pos.y), maxPos.y == posAbs.y);
	pos.z = edge.z * select(2.0 * pos.z, sign(pos.z), maxPos.z == posAbs.z);
	#ifndef LOCAL_SPACE
		return uniform.emitterPos + uniform.spawnBounds * pos;
	#else
		return uniform.spawnBounds * pos;
	#endif
}
fn addInitialVelocity(localVelocity: ptr<function, vec3f>, inBounds: vec3f) {
	*localVelocity = *localVelocity - vec3f(0.0, 0.0, uniform.initialVelocity);
}
`,bz=`
	output.color = getOutput();
	return output;
}
`,wz=`
varying vUv0: vec2f;
var particleTexIN: texture_2d<f32>;
var particleTexINSampler: sampler;
var internalTex0: texture_2d<f32>;
var internalTex0Sampler: sampler;
var internalTex1: texture_2d<f32>;
var internalTex1Sampler: sampler;
var internalTex2: texture_2d<f32>;
var internalTex2Sampler: sampler;
var internalTex3: texture_2d<f32>;
var internalTex3Sampler: sampler;
uniform emitterMatrix: mat3x3f;
uniform emitterMatrixInv: mat3x3f;
uniform emitterScale: vec3f;
uniform emitterPos: vec3f;
uniform frameRandom: vec3f;
uniform localVelocityDivMult: vec3f;
uniform velocityDivMult: vec3f;
uniform delta: f32;
uniform rate: f32;
uniform rateDiv: f32;
uniform lifetime: f32;
uniform numParticles: f32;
uniform rotSpeedDivMult: f32;
uniform radialSpeedDivMult: f32;
uniform seed: f32;
uniform startAngle: f32;
uniform startAngle2: f32;
uniform initialVelocity: f32;
uniform graphSampleSize: f32;
uniform graphNumSamples: f32;
var<private> inPos: vec3f;
var<private> inVel: vec3f;
var<private> inAngle: f32;
var<private> inShow: bool;
var<private> inLife: f32;
var<private> visMode: f32;
var<private> outPos: vec3f;
var<private> outVel: vec3f;
var<private> outAngle: f32;
var<private> outShow: bool;
var<private> outLife: f32;
`,Cz=`
	if (outLife >= uniform.lifetime) {
		outLife = outLife - max(uniform.lifetime, (uniform.numParticles - 1.0) * particleRate);
		visMode = -1.0;
	}
`,Pz=`
	visMode = select(visMode, -1.0, outLife < 0.0);
`,Lz=`
	if (outLife >= uniform.lifetime) {
		let subtractAmount = max(uniform.lifetime, (uniform.numParticles - 1.0) * particleRate);
		outLife = outLife - subtractAmount;
		visMode = 1.0;
	}
	visMode = select(visMode, 1.0, outLife < 0.0);
`,Iz=`
uniform spawnBoundsSphere: f32;
uniform spawnBoundsSphereInnerRatio: f32;
fn calcSpawnPosition(inBounds: vec3f, rndFactor: f32) -> vec3f {
	let rnd4: f32 = fract(rndFactor * 1000.0);
	let norm: vec3f = normalize(inBounds.xyz - vec3f(0.5));
	let r: f32 = rnd4 * (1.0 - uniform.spawnBoundsSphereInnerRatio) + uniform.spawnBoundsSphereInnerRatio;
	#ifndef LOCAL_SPACE
		return uniform.emitterPos + norm * r * uniform.spawnBoundsSphere;
	#else
		return norm * r * uniform.spawnBoundsSphere;
	#endif
}
fn addInitialVelocity(localVelocity: ptr<function, vec3f>, inBounds: vec3f) {
	let initialVelOffset: vec3f = normalize(inBounds - vec3f(0.5)) * uniform.initialVelocity;
	*localVelocity = *localVelocity + initialVelOffset;
}
`,Mz=`
fn saturate(x: f32) -> f32 {
	return clamp(x, 0.0, 1.0);
}
fn unpack3NFloats(src: f32) -> vec3f {
	let r = fract(src);
	let g = fract(src * 256.0);
	let b = fract(src * 65536.0);
	return vec3f(r, g, b);
}
struct TexLerpUnpackResult {
	result: vec3f,
	unpacked: vec3f
}
fn tex1Dlod_lerp(tex: texture_2d<f32>, texSampler: sampler, tc: vec2f) -> TexLerpUnpackResult {
	let tc_next = tc + vec2f(uniform.graphSampleSize);
	let a = textureSampleLevel(tex, texSampler, tc, 0.0);
	let b = textureSampleLevel(tex, texSampler, tc_next, 0.0);
	let c = fract(tc.x * uniform.graphNumSamples);
	let unpackedA = unpack3NFloats(a.w);
	let unpackedB = unpack3NFloats(b.w);
	let w_out = mix(unpackedA, unpackedB, c);
	return TexLerpUnpackResult(mix(a.xyz, b.xyz, c), w_out);
}
const HASHSCALE4: vec4f = vec4f(1031.0, 0.1030, 0.0973, 0.1099);
fn hash41(p: f32) -> vec4f {
	var p4 = fract(vec4f(p) * HASHSCALE4);
	p4 = p4 + dot(p4, p4.wzxy + 19.19);
	return fract(vec4f((p4.x + p4.y)*p4.z, (p4.x + p4.z)*p4.y, (p4.y + p4.z)*p4.w, (p4.z + p4.w)*p4.x));
}
@fragment
fn fragmentMain(input : FragmentInput) -> FragmentOutput {
	var output: FragmentOutput;
	if (pcPosition.x > uniform.numParticles) {
		discard;
		return output;
	}
	readInput(input.vUv0.x);
	visMode = select(-1.0, 1.0, inShow);
	let rndFactor = hash41(pcPosition.x + uniform.seed);
	let particleRate = uniform.rate + uniform.rateDiv * rndFactor.x;
	outLife = inLife + uniform.delta;
	let nlife = clamp(outLife / uniform.lifetime, 0.0, 1.0);
	let lerpResult0 = tex1Dlod_lerp(internalTex0, internalTex0Sampler, vec2f(nlife, 0.0));
	var localVelocity = lerpResult0.result;
	let localVelocityDiv = lerpResult0.unpacked;
	let lerpResult1 = tex1Dlod_lerp(internalTex1, internalTex1Sampler, vec2f(nlife, 0.0));
	var velocity = lerpResult1.result;
	let velocityDiv = lerpResult1.unpacked;
	let lerpResult2 = tex1Dlod_lerp(internalTex2, internalTex2Sampler, vec2f(nlife, 0.0));
	let params = lerpResult2.result;
	let paramDiv = lerpResult2.unpacked;
	var rotSpeed = params.x;
	let rotSpeedDiv = paramDiv.y;
	let lerpResult3 = tex1Dlod_lerp(internalTex3, internalTex3Sampler, vec2f(nlife, 0.0));
	let radialParams = lerpResult3.result;
	let radialParamDiv = lerpResult3.unpacked;
	let radialSpeed = radialParams.x;
	let radialSpeedDiv = radialParamDiv.y;
	let respawn = inLife <= 0.0 || outLife >= uniform.lifetime;
	inPos = select(inPos, calcSpawnPosition(rndFactor.xyz, rndFactor.x), respawn);
	inAngle = select(inAngle, mix(uniform.startAngle, uniform.startAngle2, rndFactor.x), respawn);
	#ifndef LOCAL_SPACE
		var radialVel: vec3f = inPos - uniform.emitterPos;
	#else
		var radialVel: vec3f = inPos;
	#endif
	radialVel = select(vec3f(0.0), radialSpeed * normalize(radialVel), dot(radialVel, radialVel) > 1.0E-8);
	radialVel = radialVel + (radialSpeedDiv * vec3f(2.0) - vec3f(1.0)) * uniform.radialSpeedDivMult * rndFactor.xyz;
	localVelocity = localVelocity + (localVelocityDiv * vec3f(2.0) - vec3f(1.0)) * uniform.localVelocityDivMult * rndFactor.xyz;
	velocity = velocity + (velocityDiv * vec3f(2.0) - vec3f(1.0)) * uniform.velocityDivMult * rndFactor.xyz;
	rotSpeed = rotSpeed + (rotSpeedDiv * 2.0 - 1.0) * uniform.rotSpeedDivMult * rndFactor.y;
	addInitialVelocity(&localVelocity, rndFactor.xyz);
	#ifndef LOCAL_SPACE
		outVel = uniform.emitterMatrix * localVelocity + (radialVel + velocity) * uniform.emitterScale;
	#else
		outVel = (localVelocity + radialVel) / uniform.emitterScale + uniform.emitterMatrixInv * velocity;
	#endif
	outPos = inPos + outVel * uniform.delta;
	outAngle = inAngle + rotSpeed * uniform.delta;
`,Dz=`
	let rotationResult = rotateWithMatrix(quadXY, inAngle);
	let rotatedQuadXY = rotationResult.rotatedVec;
	rotMatrix = rotationResult.matrix;
	var localPos = billboard(particlePos, rotatedQuadXY);
`,Rz=`
	dBlendModeFogFactor = 0.0;
	rgb = rgb * saturate(gammaCorrectInput(max(a, 0.0)));
	if ((rgb.r + rgb.g + rgb.b) < 0.000001) {
		discard;
	}	
`,Oz=`
	rgb = mix(vec3f(1.0), rgb, a);
	if ((rgb.r + rgb.g + rgb.b) > 2.99) {
		discard;
	}
`,Nz=`
	if (a < 0.01) {
		discard;
	}
`,Fz=`
attribute particle_vertexData: vec4f;
attribute particle_vertexData2: vec4f;
attribute particle_vertexData3: vec4f;
attribute particle_vertexData4: f32;
#ifndef USE_MESH
	attribute particle_vertexData5: vec2f;
#else
	attribute particle_vertexData5: vec4f;
#endif
uniform matrix_viewProjection: mat4x4f;
uniform matrix_model: mat4x4f;
#ifndef VIEWMATRIX
	#define VIEWMATRIX
	uniform matrix_view: mat4x4f;
#endif
uniform matrix_normal: mat3x3f;
uniform matrix_viewInverse: mat4x4f;
uniform numParticles: f32;
uniform lifetime: f32;
uniform stretch: f32;
uniform seed: f32;
uniform wrapBounds: vec3f;
uniform emitterScale: vec3f;
uniform faceTangent: vec3f;
uniform faceBinorm: vec3f;
#ifdef PARTICLE_GPU
	var internalTex0: texture_2d<f32>;
	var internalTex0Sampler: sampler;
	var internalTex1: texture_2d<f32>;
	var internalTex1Sampler: sampler;
	var internalTex2: texture_2d<f32>;
	var internalTex2Sampler: sampler;
#endif
uniform emitterPos: vec3f;
varying texCoordsAlphaLife: vec4f;
struct RotateResult {
	rotatedVec: vec2f,
	matrix: mat2x2f
}
fn rotateWithMatrix(quadXY: vec2f, pRotation: f32) -> RotateResult {
	let c = cos(pRotation);
	let s = sin(pRotation);
	let m = mat2x2f(vec2f(c, s), vec2f(-s, c));
	return RotateResult(m * quadXY, m);
}
fn billboard(InstanceCoords: vec3f, quadXY: vec2f) -> vec3f {
	let pos = -uniform.matrix_viewInverse[0].xyz * quadXY.x + -uniform.matrix_viewInverse[1].xyz * quadXY.y;
	return pos;
}
fn customFace(InstanceCoords: vec3f, quadXY: vec2f) -> vec3f {
	let pos = uniform.faceTangent * quadXY.x + uniform.faceBinorm * quadXY.y;
	return pos;
}
fn safeNormalize(v: vec2f) -> vec2f {
	let l = length(v);
	return select(v, v / l, l > 1e-06);
}
@vertex
fn vertexMain(input: VertexInput) -> VertexOutput {
	var output: VertexOutput;
	var particlePos = input.particle_vertexData.xyz;
	let inPos = particlePos;
	let vertPos = input.particle_vertexData3.xyz;
	var inVel = vec3f(input.particle_vertexData2.w, input.particle_vertexData3.w, input.particle_vertexData5.x);
	let id = floor(input.particle_vertexData4);
	let rndFactor = fract(sin(id + 1.0 + uniform.seed));
	let rndFactor3 = vec3f(rndFactor, fract(rndFactor*10.0), fract(rndFactor*100.0));
	#ifdef LOCAL_SPACE
		let modelRotation = mat3x3f(uniform.matrix_model[0].xyz, uniform.matrix_model[1].xyz, uniform.matrix_model[2].xyz);
		inVel = modelRotation * inVel;
	#endif
	let velocityV = safeNormalize((mat3x3f(uniform.matrix_view[0].xyz, uniform.matrix_view[1].xyz, uniform.matrix_view[2].xyz) * inVel).xy);
	let quadXY = vertPos.xy;
	#ifdef USE_MESH
		output.texCoordsAlphaLife = vec4f(input.particle_vertexData5.zw, input.particle_vertexData2.z, input.particle_vertexData.w);
	#else
		output.texCoordsAlphaLife = vec4f(quadXY * -0.5 + 0.5, input.particle_vertexData2.z, input.particle_vertexData.w);
	#endif
	var rotMatrix: mat2x2f;
	var inAngle = input.particle_vertexData2.x;
	var particlePosMoved = vec3f(0.0);
	let meshLocalPos = input.particle_vertexData3.xyz;
`,kz=`
	localPos = localPos * input.particle_vertexData2.y * uniform.emitterScale;
	localPos = localPos + particlePos;
	output.position = uniform.matrix_viewProjection * vec4f(localPos, 1.0);
`,Uz=`
	let rotationResult = rotateWithMatrix(quadXY, inAngle);
	let rotatedQuadXY = rotationResult.rotatedVec;
	rotMatrix = rotationResult.matrix;
	var localPos = customFace(particlePos, rotatedQuadXY);
`,Bz=`
	rgb = addFog(rgb);
	rgb = toneMap(rgb);
	rgb = gammaCorrectOutput(rgb);
	output.color = vec4f(rgb, a);
	return output;
}
`,Vz=`
	localPos = localPos * scale * uniform.emitterScale;
	localPos = localPos + particlePos;
	#ifdef SCREEN_SPACE
		output.position = vec4f(localPos.x, localPos.y, 0.0, 1.0);
	#else
		output.position = uniform.matrix_viewProjection * vec4f(localPos.xyz, 1.0);
	#endif
`,zz=`
	var negNormal: vec3f = normal * 0.5 + 0.5;
	var posNormal: vec3f = -normal * 0.5 + 0.5;
	negNormal = negNormal * negNormal;
	posNormal = posNormal * posNormal;
`,Hz=`
attribute particle_vertexData: vec4f;
#if defined(USE_MESH)
	#if defined(USE_MESH_UV)
		attribute particle_uv: vec2f;
	#else
		var<private> particle_uv: vec2f = vec2f(0.0, 0.0);
	#endif
#endif
uniform matrix_viewProjection: mat4x4f;
uniform matrix_model: mat4x4f;
uniform matrix_normal: mat3x3f;
uniform matrix_viewInverse: mat4x4f;
#ifndef VIEWMATRIX
	#define VIEWMATRIX
	uniform matrix_view: mat4x4f;
#endif
uniform numParticles: f32;
uniform numParticlesPot: f32;
uniform graphSampleSize: f32;
uniform graphNumSamples: f32;
uniform stretch: f32;
uniform wrapBounds: vec3f;
uniform emitterScale: vec3f;
uniform emitterPos: vec3f;
uniform faceTangent: vec3f;
uniform faceBinorm: vec3f;
uniform rate: f32;
uniform rateDiv: f32;
uniform lifetime: f32;
uniform deltaRandomnessStatic: f32;
uniform scaleDivMult: f32;
uniform alphaDivMult: f32;
uniform seed: f32;
uniform delta: f32;
var particleTexOUT: texture_2d<f32>;
var particleTexOUTSampler: sampler;
var particleTexIN: texture_2d<f32>;
var particleTexINSampler: sampler;
#ifdef PARTICLE_GPU
	var internalTex0: texture_2d<f32>;
	var internalTex0Sampler: sampler;
	var internalTex1: texture_2d<f32>;
	var internalTex1Sampler: sampler;
	var internalTex2: texture_2d<f32>;
	var internalTex2Sampler: sampler;
#endif
#ifndef CAMERAPLANES
	#define CAMERAPLANES
	uniform camera_params: vec4f;
#endif
varying texCoordsAlphaLife: vec4f;
var<private> inPos: vec3f;
var<private> inVel: vec3f;
var<private> inAngle: f32;
var<private> inShow: bool;
var<private> inLife: f32;
`,Gz=`
	var negNormal: vec3f = max(normal, vec3(0.0));
	var posNormal: vec3f = max(-normal, vec3(0.0));
`,Wz=`
	let light: vec3f = negNormal.x * uniform.lightCube[0] + posNormal.x * uniform.lightCube[1] +
					   negNormal.y * uniform.lightCube[2] + posNormal.y * uniform.lightCube[3] +
					   negNormal.z * uniform.lightCube[4] + posNormal.z * uniform.lightCube[5];
	rgb = rgb * light;
`,$z=`
particlePos = (uniform.matrix_model * vec4f(particlePos, 1.0)).xyz;
`,Xz=`
var localPos = meshLocalPos;
let rotResultXY = rotateWithMatrix(localPos.xy, inAngle);
localPos = vec3f(rotResultXY.rotatedVec, localPos.z);
rotMatrix = rotResultXY.matrix;
let rotResultYZ = rotateWithMatrix(localPos.yz, inAngle);
localPos = vec3f(localPos.x, rotResultYZ.rotatedVec);
rotMatrix = rotResultYZ.matrix;
billboard(particlePos, quadXY);
`,qz=`
output.Normal = normalize(localPos + uniform.matrix_viewInverse[2].xyz);
`,Yz=`
	let sampledNormal: vec4f = textureSample(normalMap, normalMapSampler, vec2f(input.texCoordsAlphaLife.x, 1.0 - input.texCoordsAlphaLife.y));
	let normalMap: vec3f = normalize(sampledNormal.xyz * 2.0 - 1.0);
	let ParticleMat = mat3x3<f32>(ParticleMat0, ParticleMat1, ParticleMat2);
	let normal: vec3f = ParticleMat * normalMap;
`,jz=`
	inAngle = atan2(velocityV.x, velocityV.y);
`,Kz=`
	#include "particleUpdaterInitPS"
	#ifdef PACK8
		#include "particleInputRgba8PS"
		#include "particleOutputRgba8PS"
	#else
		#include "particleInputFloatPS"
		#include "particleOutputFloatPS"
	#endif
	#ifdef EMITTERSHAPE_BOX
		#include "particleUpdaterAABBPS"
	#else
		#include "particleUpdaterSpherePS"
	#endif
	#include "particleUpdaterStartPS"
	#ifdef RESPAWN
		#include "particleUpdaterRespawnPS"
	#endif
	#ifdef NO_RESPAWN
		#include "particleUpdaterNoRespawnPS"
	#endif
	#ifdef ON_STOP
		#include "particleUpdaterOnStopPS"
	#endif
	#include "particleUpdaterEndPS"
`,Zz=`
	#if NORMAL != NONE
		#if NORMAL == VERTEX
			varying Normal: vec3f;
		#endif
		#if NORMAL == MAP
			varying ParticleMat0: vec3f;
			varying ParticleMat1: vec3f;
			varying ParticleMat2: vec3f;
		#endif
		uniform lightCube: array<vec3f, 6>;
	#endif
	#ifdef SOFT
		varying vDepth: f32;
		#include "screenDepthPS"
	#endif
	#include "gammaPS"
	#include "tonemappingPS"
	#include "fogPS"
	#if NORMAL == MAP
		var normalMap: texture_2d<f32>;
		var normalMapSampler: sampler;
	#endif
	#include "particlePS"
	#ifdef SOFT
		#include "particle_softPS"
	#endif
	#if NORMAL == VERTEX
		var normal: vec3f = Normal;
	#endif
	#if NORMAL == MAP
		#include "particle_normalMapPS"
	#endif
	#if NORMAL != NONE
		#ifdef HALF_LAMBERT
			#include "particle_halflambertPS"
		#else
			#include "particle_lambertPS"
		#endif
		#include "particle_lightingPS"
	#endif
	#if BLEND == NORMAL
		#include "particle_blendNormalPS"
	#elif BLEND == ADDITIVE
		#include "particle_blendAddPS"
	#elif BLEND == MULTIPLICATIVE
		#include "particle_blendMultiplyPS"
	#endif
	#include "particle_endPS"
`,Qz=`
	#ifdef ANIMTEX
		uniform animTexTilesParams: vec2f;
		uniform animTexParams: vec4f;
		uniform animTexIndexParams: vec2f;
	#endif
	#if NORMAL == MAP
		varying ParticleMat0: vec3f;
		varying ParticleMat1: vec3f;
		varying ParticleMat2: vec3f;
	#endif
	#if NORMAL == VERTEX
		varying Normal: vec3f;
	#endif
	#ifdef SOFT
		varying vDepth: f32;
	#endif
	#ifdef PARTICLE_GPU
		#include "particle_initVS"
		#ifdef PACK8
			#include "particleInputRgba8PS"
		#else
			#include  "particleInputFloatPS"
		#endif
		#ifdef SOFT
			#include "screenDepthPS"
		#endif
		#include "particleVS"
	#else
		#ifdef SOFT
			#include "screenDepthPS"
		#endif
		#include "particle_cpuVS"
	#endif
	#ifdef LOCAL_SPACE
		#include "particle_localShiftVS"
	#endif
	#ifdef ANIMTEX
		#ifdef ANIMTEX_LOOP
			#include "particleAnimFrameLoopVS"
		#else
			#include "particleAnimFrameClampVS"
		#endif
		#include "particleAnimTexVS"
	#endif
	#ifdef PARTICLE_GPU
		#ifdef WRAP
			#include "particle_wrapVS"
		#endif
	#endif
	#ifdef ALIGN_TO_MOTION
		#include "particle_pointAlongVS"
	#endif
	#ifdef USE_MESH
		#include "particle_meshVS"
	#else
		#ifdef CUSTOM_FACE
			#include "particle_customFaceVS"
		#else
			#include "particle_billboardVS"
		#endif
	#endif
	#if NORMAL == VERTEX
		#include "particle_normalVS"
	#endif
	#if NORMAL == MAP
		#include "particle_TBNVS"
	#endif
	#ifdef STRETCH
		#include "particle_stretchVS"
	#endif
	#ifdef PARTICLE_GPU
		#include "particle_endVS"
	#else
		#include "particle_cpu_endVS"
	#endif
	#ifdef SOFT
		#include "particle_softVS"
	#endif
	return output;
}
`,Jz=`
	var depth: f32 = getLinearScreenDepthFrag();
	var particleDepth: f32 = vDepth;
	var depthDiff: f32 = saturate(abs(particleDepth - depth) * uniform.softening);
	a = a * depthDiff;
`,eH=`
	output.vDepth = getLinearDepth(localPos);
`,tH=`
	let moveDir: vec3f = inVel * uniform.stretch;
	var posPrev: vec3f = particlePos - moveDir;
	posPrev = posPrev + particlePosMoved;
	let viewRotationTemp: mat3x3f = mat3x3f(uniform.matrix_view[0].xyz, uniform.matrix_view[1].xyz, uniform.matrix_view[2].xyz);
	let centerToVertexV: vec2f = normalize((viewRotationTemp * localPos).xy);
	let interpolation: f32 = dot(-velocityV, centerToVertexV) * 0.5 + 0.5;
	particlePos = mix(particlePos, posPrev, interpolation);
`,sH=`
	let rot3 = mat3x3f(
		vec3f(rotMatrix[0][0], rotMatrix[1][0], 0.0),
		vec3f(rotMatrix[0][1], rotMatrix[1][1], 0.0),
		vec3f(0.0, 0.0, 1.0)
	);
	let viewBasis = mat3x3f(
		-uniform.matrix_viewInverse[0].xyz,
		-uniform.matrix_viewInverse[1].xyz,
		uniform.matrix_viewInverse[2].xyz
	);
	let tempMat = viewBasis * rot3;
	output.ParticleMat0 = tempMat[0];
	output.ParticleMat1 = tempMat[1];
	output.ParticleMat2 = tempMat[2];
`,iH=`
	let origParticlePos: vec3f = particlePos;
	particlePos = particlePos - uniform.matrix_model[3].xyz;
	particlePos = (particlePos % uniform.wrapBounds) - uniform.wrapBounds * 0.5;
	particlePos = particlePos + uniform.matrix_model[3].xyz;
	particlePosMoved = particlePos - origParticlePos;
`;const rH={particlePS:mz,particleVS:_z,particleAnimFrameClampVS:gz,particleAnimFrameLoopVS:vz,particleAnimTexVS:Sz,particleInputFloatPS:yz,particleInputRgba8PS:Tz,particleOutputFloatPS:xz,particleOutputRgba8PS:Ez,particleUpdaterAABBPS:Az,particleUpdaterEndPS:bz,particleUpdaterInitPS:wz,particleUpdaterNoRespawnPS:Cz,particleUpdaterOnStopPS:Pz,particleUpdaterRespawnPS:Lz,particleUpdaterSpherePS:Iz,particleUpdaterStartPS:Mz,particle_billboardVS:Dz,particle_blendAddPS:Rz,particle_blendMultiplyPS:Oz,particle_blendNormalPS:Nz,particle_cpuVS:Fz,particle_cpu_endVS:kz,particle_customFaceVS:Uz,particle_endPS:Bz,particle_endVS:Vz,particle_halflambertPS:zz,particle_initVS:Hz,particle_lambertPS:Gz,particle_lightingPS:Wz,particle_localShiftVS:$z,particle_meshVS:Xz,particle_normalVS:qz,particle_normalMapPS:Yz,particle_pointAlongVS:jz,particle_simulationPS:Kz,particle_shaderPS:Zz,particle_shaderVS:Qz,particle_softPS:Jz,particle_softVS:eH,particle_stretchVS:tH,particle_TBNVS:sH,particle_wrapVS:iH},aH=["enabled","autoPlay","numParticles","lifetime","rate","rate2","startAngle","startAngle2","loop","preWarm","lighting","halfLambert","intensity","depthWrite","noFog","depthSoftening","sort","blendType","stretch","alignToMotion","emitterShape","emitterExtents","emitterExtentsInner","emitterRadius","emitterRadiusInner","initialVelocity","wrap","wrapBounds","localSpace","screenSpace","colorMapAsset","normalMapAsset","mesh","meshAsset","renderAsset","orientation","particleNormal","localVelocityGraph","localVelocityGraph2","velocityGraph","velocityGraph2","rotationSpeedGraph","rotationSpeedGraph2","radialSpeedGraph","radialSpeedGraph2","scaleGraph","scaleGraph2","colorGraph","colorGraph2","alphaGraph","alphaGraph2","colorMap","normalMap","animTilesX","animTilesY","animStartFrame","animNumFrames","animNumAnimations","animIndex","randomizeAnimIndex","animSpeed","animLoop","layers"];class nH extends qe{constructor(e){super(e),this.id="particlesystem",this.ComponentType=EV,this.DataType=AV,this.schema=aH,this.propertyTypes={emitterExtents:"vec3",emitterExtentsInner:"vec3",particleNormal:"vec3",wrapBounds:"vec3",localVelocityGraph:"curveset",localVelocityGraph2:"curveset",velocityGraph:"curveset",velocityGraph2:"curveset",colorGraph:"curveset",colorGraph2:"curveset",alphaGraph:"curve",alphaGraph2:"curve",rotationSpeedGraph:"curve",rotationSpeedGraph2:"curve",radialSpeedGraph:"curve",radialSpeedGraph2:"curve",scaleGraph:"curve",scaleGraph2:"curve"},this.on("beforeremove",this.onBeforeRemove,this),this.app.systems.on("update",this.onUpdate,this),de.get(e.graphicsDevice,Ee).add(pz),de.get(e.graphicsDevice,Be).add(rH)}initializeComponentData(e,t,s){const i={};s=[];const r=this.propertyTypes;(t.mesh instanceof ie||typeof t.mesh=="number")&&(t.meshAsset=t.mesh,delete t.mesh);for(const a in t){if(t.hasOwnProperty(a)&&(s.push(a),i[a]=t[a]),r[a]==="vec3")Array.isArray(i[a])&&(i[a]=new x(i[a][0],i[a][1],i[a][2]));else if(r[a]==="curve"){if(!(i[a]instanceof ys)){const n=i[a].type;i[a]=new ys(i[a].keys),i[a].type=n}}else if(r[a]==="curveset"&&!(i[a]instanceof jr)){const n=i[a].type;i[a]=new jr(i[a].keys),i[a].type=n}i.layers&&Array.isArray(i.layers)&&(i.layers=i.layers.slice(0))}super.initializeComponentData(e,i,s)}cloneComponent(e,t){const s=e.particlesystem.data,i=this.schema,r={};for(let a=0,n=i.length;a<n;a++){const l=i[a];let h=s[l];h instanceof x||h instanceof ys||h instanceof jr?(h=h.clone(),r[l]=h):l==="layers"?r.layers=s.layers.slice(0):h!=null&&(r[l]=h)}return this.addComponent(t,r)}onUpdate(e){const t=this.store,s=this.app.stats.particles,i=this.app.scene.layers;for(let r=0;r<i.layerList.length;r++)i.layerList[r].requiresLightCube=!1;for(const r in t)if(t.hasOwnProperty(r)){const a=t[r],n=a.entity,l=a.data;if(l.enabled&&n.enabled){const h=n.particlesystem.emitter;if(!h?.meshInstance.visible)continue;if(h.lighting){const c=l.layers;for(let d=0;d<c.length;d++){const f=i.getLayerById(c[d]);f&&(f.requiresLightCube=!0)}}if(!l.paused){let c=0;if(h.simTime+=e,h.simTime>=h.fixedTimeStep&&(c=Math.floor(h.simTime/h.fixedTimeStep),h.simTime-=c*h.fixedTimeStep),c){c=Math.min(c,h.maxSubSteps);for(let d=0;d<c;d++)h.addTime(h.fixedTimeStep,!1);s._updatesPerFrame+=c,s._frameTime+=h._addTimeTime,h._addTimeTime=0}h.finishFrame()}}}}onBeforeRemove(e,t){t.onBeforeRemove()}destroy(){super.destroy(),this.app.systems.off("update",this.onUpdate,this)}}class oH extends tf{constructor(e,t){super(),this.skin=e,this.skinInstance=t}}const Fs=class Fs{static createCachedSkinInstance(e,t,s){let i=Fs.getCachedSkinInstance(e,t);return i||(i=new Wl(e),i.resolve(t,s),Fs.addCachedSkinInstance(e,t,i)),i}static getCachedSkinInstance(e,t){let s=null;const i=Fs._skinInstanceCache.get(t);if(i){const r=i.find(a=>a.skin===e);r&&(r.incRefCount(),s=r.skinInstance)}return s}static addCachedSkinInstance(e,t,s){let i=Fs._skinInstanceCache.get(t);i||(i=[],Fs._skinInstanceCache.set(t,i));let r=i.find(a=>a.skin===e);r||(r=new oH(e,s),i.push(r)),r.incRefCount()}static removeCachedSkinInstance(e){if(e){const t=e.rootBone;if(t){const s=Fs._skinInstanceCache.get(t);if(s){const i=s.findIndex(r=>r.skinInstance===e);if(i>=0){const r=s[i];r.decRefCount(),r.refCount===0&&(s.splice(i,1),s.length||Fs._skinInstanceCache.delete(t),e&&(e.destroy(),r.skinInstance=null))}}}}}};Fs._skinInstanceCache=new Map;let xl=Fs;class El{constructor(e,t,s,i,r){this._evtLoadById=null,this._evtUnloadById=null,this._evtAddById=null,this._evtRemoveById=null,this._evtLoadByUrl=null,this._evtAddByUrl=null,this._evtRemoveByUrl=null,this.propertyName=e,this.parent=t,this._scope=r,this._registry=s,this.id=null,this.url=null,this.asset=null,this._onAssetLoad=i.load,this._onAssetAdd=i.add,this._onAssetRemove=i.remove,this._onAssetUnload=i.unload}set id(e){if(this.url)throw Error("Can't set id and url");this._unbind(),this._id=e,this.asset=this._registry.get(this._id),this._bind()}get id(){return this._id}set url(e){if(this.id)throw Error("Can't set id and url");this._unbind(),this._url=e,this.asset=this._registry.getByUrl(this._url),this._bind()}get url(){return this._url}_bind(){this.id&&(this._onAssetLoad&&(this._evtLoadById=this._registry.on(`load:${this.id}`,this._onLoad,this)),this._onAssetAdd&&(this._evtAddById=this._registry.once(`add:${this.id}`,this._onAdd,this)),this._onAssetRemove&&(this._evtRemoveById=this._registry.on(`remove:${this.id}`,this._onRemove,this)),this._onAssetUnload&&(this._evtUnloadById=this._registry.on(`unload:${this.id}`,this._onUnload,this))),this.url&&(this._onAssetLoad&&(this._evtLoadByUrl=this._registry.on(`load:url:${this.url}`,this._onLoad,this)),this._onAssetAdd&&(this._evtAddByUrl=this._registry.once(`add:url:${this.url}`,this._onAdd,this)),this._onAssetRemove&&(this._evtRemoveByUrl=this._registry.on(`remove:url:${this.url}`,this._onRemove,this)))}_unbind(){this.id&&(this._evtLoadById?.off(),this._evtLoadById=null,this._evtAddById?.off(),this._evtAddById=null,this._evtRemoveById?.off(),this._evtRemoveById=null,this._evtUnloadById?.off(),this._evtUnloadById=null),this.url&&(this._evtLoadByUrl?.off(),this._evtLoadByUrl=null,this._evtAddByUrl?.off(),this._evtAddByUrl=null,this._evtRemoveByUrl?.off(),this._evtRemoveByUrl=null)}_onLoad(e){this._onAssetLoad.call(this._scope,this.propertyName,this.parent,e)}_onAdd(e){this.asset=e,this._onAssetAdd.call(this._scope,this.propertyName,this.parent,e)}_onRemove(e){this._onAssetRemove.call(this._scope,this.propertyName,this.parent,e),this.asset=null}_onUnload(e){this._onAssetUnload.call(this._scope,this.propertyName,this.parent,e)}}class dE extends he{constructor(e,t){super(e,t),this._type="asset",this._castShadows=!0,this._receiveShadows=!0,this._castShadowsLightmap=!0,this._lightmapped=!1,this._lightmapSizeMultiplier=1,this.isStatic=!1,this._batchGroupId=-1,this._layers=[Ni],this._renderStyle=_n,this._meshInstances=[],this._customAabb=null,this._area=null,this._materialReferences=[],this._rootBone=null,this._evtLayersChanged=null,this._evtLayerAdded=null,this._evtLayerRemoved=null,this._evtSetMeshes=null,this._assetReference=new El("asset",this,e.app.assets,{add:this._onRenderAssetAdded,load:this._onRenderAssetLoad,remove:this._onRenderAssetRemove,unload:this._onRenderAssetUnload},this),this._material=e.defaultMaterial,t.on("remove",this.onRemoveChild,this),t.on("removehierarchy",this.onRemoveChild,this),t.on("insert",this.onInsertChild,this),t.on("inserthierarchy",this.onInsertChild,this)}set renderStyle(e){this._renderStyle!==e&&(this._renderStyle=e,Oe._prepareRenderStyleForArray(this._meshInstances,e))}get renderStyle(){return this._renderStyle}set customAabb(e){this._customAabb=e;const t=this._meshInstances;if(t)for(let s=0;s<t.length;s++)t[s].setCustomAabb(this._customAabb)}get customAabb(){return this._customAabb}set type(e){if(this._type!==e&&(this._area=null,this._type=e,this.destroyMeshInstances(),e!=="asset")){let t=this._material;(!t||t===this.system.defaultMaterial)&&(t=this._materialReferences[0]&&this._materialReferences[0].asset&&this._materialReferences[0].asset.resource);const s=lE(this.system.app.graphicsDevice,e);this._area=s.area,this.meshInstances=[new Oe(s.mesh,t||this.system.defaultMaterial,this.entity)]}}get type(){return this._type}set meshInstances(e){if(this.destroyMeshInstances(),this._meshInstances=e,this._meshInstances){const t=this._meshInstances;for(let s=0;s<t.length;s++)t[s].node||(t[s].node=this.entity),t[s].castShadow=this._castShadows,t[s].receiveShadow=this._receiveShadows,t[s].renderStyle=this._renderStyle,t[s].setLightmapped(this._lightmapped),t[s].setCustomAabb(this._customAabb);this.enabled&&this.entity.enabled&&this.addToLayers()}}get meshInstances(){return this._meshInstances}set lightmapped(e){if(e!==this._lightmapped){this._lightmapped=e;const t=this._meshInstances;if(t)for(let s=0;s<t.length;s++)t[s].setLightmapped(e)}}get lightmapped(){return this._lightmapped}set castShadows(e){if(this._castShadows!==e){const t=this._meshInstances;if(t){const s=this.layers,i=this.system.app.scene;if(this._castShadows&&!e)for(let r=0;r<s.length;r++){const a=i.layers.getLayerById(this.layers[r]);a&&a.removeShadowCasters(t)}for(let r=0;r<t.length;r++)t[r].castShadow=e;if(!this._castShadows&&e)for(let r=0;r<s.length;r++){const a=i.layers.getLayerById(s[r]);a&&a.addShadowCasters(t)}}this._castShadows=e}}get castShadows(){return this._castShadows}set receiveShadows(e){if(this._receiveShadows!==e){this._receiveShadows=e;const t=this._meshInstances;if(t)for(let s=0;s<t.length;s++)t[s].receiveShadow=e}}get receiveShadows(){return this._receiveShadows}set castShadowsLightmap(e){this._castShadowsLightmap=e}get castShadowsLightmap(){return this._castShadowsLightmap}set lightmapSizeMultiplier(e){this._lightmapSizeMultiplier=e}get lightmapSizeMultiplier(){return this._lightmapSizeMultiplier}set layers(e){const t=this.system.app.scene.layers;let s;if(this._meshInstances)for(let i=0;i<this._layers.length;i++)s=t.getLayerById(this._layers[i]),s&&s.removeMeshInstances(this._meshInstances);this._layers.length=0;for(let i=0;i<e.length;i++)this._layers[i]=e[i];if(!(!this.enabled||!this.entity.enabled||!this._meshInstances))for(let i=0;i<this._layers.length;i++)s=t.getLayerById(this._layers[i]),s&&s.addMeshInstances(this._meshInstances)}get layers(){return this._layers}set batchGroupId(e){this._batchGroupId!==e&&(this.entity.enabled&&this._batchGroupId>=0&&this.system.app.batcher?.remove(nt.RENDER,this.batchGroupId,this.entity),this.entity.enabled&&e>=0&&this.system.app.batcher?.insert(nt.RENDER,e,this.entity),e<0&&this._batchGroupId>=0&&this.enabled&&this.entity.enabled&&this.addToLayers(),this._batchGroupId=e)}get batchGroupId(){return this._batchGroupId}set material(e){if(this._material!==e&&(this._material=e,this._meshInstances&&this._type!=="asset"))for(let t=0;t<this._meshInstances.length;t++)this._meshInstances[t].material=e}get material(){return this._material}set materialAssets(e=[]){if(this._materialReferences.length>e.length){for(let t=e.length;t<this._materialReferences.length;t++)this._materialReferences[t].id=null;this._materialReferences.length=e.length}for(let t=0;t<e.length;t++)if(this._materialReferences[t]||this._materialReferences.push(new El(t,this,this.system.app.assets,{add:this._onMaterialAdded,load:this._onMaterialLoad,remove:this._onMaterialRemove,unload:this._onMaterialUnload},this)),e[t]){const s=e[t]instanceof ie?e[t].id:e[t];this._materialReferences[t].id!==s&&(this._materialReferences[t].id=s),this._materialReferences[t].asset&&this._onMaterialAdded(t,this,this._materialReferences[t].asset)}else this._materialReferences[t].id=null,this._meshInstances[t]&&(this._meshInstances[t].material=this.system.defaultMaterial)}get materialAssets(){return this._materialReferences.map(e=>e.id)}set asset(e){const t=e instanceof ie?e.id:e;this._assetReference.id!==t&&(this._assetReference.asset&&this._assetReference.asset.resource&&this._onRenderAssetRemove(),this._assetReference.id=t,this._assetReference.asset&&this._onRenderAssetAdded())}get asset(){return this._assetReference.id}assignAsset(e){const t=e instanceof ie?e.id:e;this._assetReference.id=t}set rootBone(e){if(this._rootBone!==e){const t=typeof e=="string";if(this._rootBone&&t&&this._rootBone.getGuid()===e)return;this._rootBone&&this._clearSkinInstances(),e instanceof ze?this._rootBone=e:t?(this._rootBone=this.system.app.getEntityFromIndex(e)||null,this._rootBone):this._rootBone=null,this._rootBone&&this._cloneSkinInstances()}}get rootBone(){return this._rootBone}destroyMeshInstances(){const e=this._meshInstances;if(e){this.removeFromLayers(),this._clearSkinInstances();for(let t=0;t<e.length;t++)e[t].destroy();this._meshInstances.length=0}}addToLayers(){const e=this.system.app.scene.layers;for(let t=0;t<this._layers.length;t++){const s=e.getLayerById(this._layers[t]);s&&s.addMeshInstances(this._meshInstances)}}removeFromLayers(){if(this._meshInstances&&this._meshInstances.length){const e=this.system.app.scene.layers;for(let t=0;t<this._layers.length;t++){const s=e.getLayerById(this._layers[t]);s&&s.removeMeshInstances(this._meshInstances)}}}onRemoveChild(){this.removeFromLayers()}onInsertChild(){this._meshInstances&&this.enabled&&this.entity.enabled&&this.addToLayers()}onRemove(){this.destroyMeshInstances(),this.asset=null,this.materialAsset=null,this._assetReference.id=null;for(let e=0;e<this._materialReferences.length;e++)this._materialReferences[e].id=null;this.entity.off("remove",this.onRemoveChild,this),this.entity.off("insert",this.onInsertChild,this)}onLayersChanged(e,t){this.addToLayers(),e.off("add",this.onLayerAdded,this),e.off("remove",this.onLayerRemoved,this),t.on("add",this.onLayerAdded,this),t.on("remove",this.onLayerRemoved,this)}onLayerAdded(e){this.layers.indexOf(e.id)<0||e.addMeshInstances(this._meshInstances)}onLayerRemoved(e){this.layers.indexOf(e.id)<0||e.removeMeshInstances(this._meshInstances)}onEnable(){const e=this.system.app,t=e.scene,s=t.layers;this._rootBone&&this._cloneSkinInstances(),this._evtLayersChanged=t.on("set:layers",this.onLayersChanged,this),s&&(this._evtLayerAdded=s.on("add",this.onLayerAdded,this),this._evtLayerRemoved=s.on("remove",this.onLayerRemoved,this));const i=this._type==="asset";this._meshInstances&&this._meshInstances.length?this.addToLayers():i&&this.asset&&this._onRenderAssetAdded();for(let r=0;r<this._materialReferences.length;r++)this._materialReferences[r].asset&&this.system.app.assets.load(this._materialReferences[r].asset);this._batchGroupId>=0&&e.batcher?.insert(nt.RENDER,this.batchGroupId,this.entity)}onDisable(){const e=this.system.app,s=e.scene.layers;this._evtLayersChanged?.off(),this._evtLayersChanged=null,this._rootBone&&this._clearSkinInstances(),s&&(this._evtLayerAdded?.off(),this._evtLayerAdded=null,this._evtLayerRemoved?.off(),this._evtLayerRemoved=null),this._batchGroupId>=0&&e.batcher?.remove(nt.RENDER,this.batchGroupId,this.entity),this.removeFromLayers()}hide(){if(this._meshInstances)for(let e=0;e<this._meshInstances.length;e++)this._meshInstances[e].visible=!1}show(){if(this._meshInstances)for(let e=0;e<this._meshInstances.length;e++)this._meshInstances[e].visible=!0}_onRenderAssetAdded(){this._assetReference.asset&&(this._assetReference.asset.resource?this._onRenderAssetLoad():this.enabled&&this.entity.enabled&&this.system.app.assets.load(this._assetReference.asset))}_onRenderAssetLoad(){if(this.destroyMeshInstances(),this._assetReference.asset){const e=this._assetReference.asset.resource;this._evtSetMeshes?.off(),this._evtSetMeshes=e.on("set:meshes",this._onSetMeshes,this),e.meshes&&this._onSetMeshes(e.meshes)}}_onSetMeshes(e){this._cloneMeshes(e)}_clearSkinInstances(){for(let e=0;e<this._meshInstances.length;e++){const t=this._meshInstances[e];xl.removeCachedSkinInstance(t.skinInstance),t.skinInstance=null}}_cloneSkinInstances(){if(this._meshInstances.length&&this._rootBone instanceof ze)for(let e=0;e<this._meshInstances.length;e++){const t=this._meshInstances[e],s=t.mesh;s.skin&&!t.skinInstance&&(t.skinInstance=xl.createCachedSkinInstance(s.skin,this._rootBone,this.entity))}}_cloneMeshes(e){if(e&&e.length){const t=[];for(let s=0;s<e.length;s++){const i=e[s],r=this._materialReferences[s]&&this._materialReferences[s].asset&&this._materialReferences[s].asset.resource,a=new Oe(i,r||this.system.defaultMaterial,this.entity);t.push(a),i.morph&&(a.morphInstance=new Sa(i.morph))}this.meshInstances=t,this._cloneSkinInstances()}}_onRenderAssetUnload(){this._type==="asset"&&this.destroyMeshInstances()}_onRenderAssetRemove(){this._evtSetMeshes?.off(),this._evtSetMeshes=null,this._onRenderAssetUnload()}_onMaterialAdded(e,t,s){s.resource?this._onMaterialLoad(e,t,s):this.enabled&&this.entity.enabled&&this.system.app.assets.load(s)}_updateMainMaterial(e,t){e===0&&(this.material=t)}_onMaterialLoad(e,t,s){this._meshInstances[e]&&(this._meshInstances[e].material=s.resource),this._updateMainMaterial(e,s.resource)}_onMaterialRemove(e,t,s){this._meshInstances[e]&&(this._meshInstances[e].material=this.system.defaultMaterial),this._updateMainMaterial(e,this.system.defaultMaterial)}_onMaterialUnload(e,t,s){this._meshInstances[e]&&(this._meshInstances[e].material=this.system.defaultMaterial),this._updateMainMaterial(e,this.system.defaultMaterial)}resolveDuplicatedEntityReferenceProperties(e,t){e.rootBone&&(this.rootBone=t[e.rootBone.getGuid()])}}class lH{constructor(){this.enabled=!0}}const Hp=["enabled"],Lr=["material","meshInstances","asset","materialAssets","castShadows","receiveShadows","castShadowsLightmap","lightmapped","lightmapSizeMultiplier","renderStyle","type","layers","isStatic","batchGroupId","rootBone"];class hH extends qe{constructor(e){super(e),this.id="render",this.ComponentType=dE,this.DataType=lH,this.schema=Hp,this.defaultMaterial=$l(e.graphicsDevice),this.on("beforeremove",this.onRemove,this)}initializeComponentData(e,t,s){(t.batchGroupId===null||t.batchGroupId===void 0)&&(t.batchGroupId=-1),t.layers&&t.layers.length&&(t.layers=t.layers.slice(0));for(let i=0;i<Lr.length;i++)t.hasOwnProperty(Lr[i])&&(e[Lr[i]]=t[Lr[i]]);t.aabbCenter&&t.aabbHalfExtents&&(e.customAabb=new fe(new x(t.aabbCenter),new x(t.aabbHalfExtents))),super.initializeComponentData(e,t,Hp)}cloneComponent(e,t){const s={};for(let n=0;n<Lr.length;n++)s[Lr[n]]=e.render[Lr[n]];s.enabled=e.render.enabled,delete s.meshInstances;const i=this.addComponent(t,s),r=e.render.meshInstances,a=r.map(n=>n.mesh);i._onSetMeshes(a);for(let n=0;n<r.length;n++)i.meshInstances[n].material=r[n].material;return e.render.customAabb&&(i.customAabb=e.render.customAabb.clone()),i}onRemove(e,t){t.onRemove()}}he._buildAccessors(dE.prototype,Hp);class Eu{constructor(e,t){this._pool=[],this._count=0,this._constructor=e,this._resize(t)}_resize(e){if(e>this._pool.length)for(let t=this._pool.length;t<e;t++)this._pool[t]=new this._constructor}allocate(){return this._count>=this._pool.length&&this._resize(this._pool.length*2),this._pool[this._count++]}freeAll(){this._count=0}}let Dt,_e,ps,sn;const cH=new Q,dH=new Q,zh=new x,Ki=class Ki extends he{static onLibraryLoaded(){typeof Ammo<"u"&&(Dt=new Ammo.btTransform,_e=new Ammo.btVector3,ps=new Ammo.btVector3,sn=new Ammo.btQuaternion)}static onAppDestroy(){Ammo.destroy(Dt),Ammo.destroy(_e),Ammo.destroy(ps),Ammo.destroy(sn),Dt=null,_e=null,ps=null,sn=null}set angularDamping(e){this._angularDamping!==e&&(this._angularDamping=e,this._body&&this._body.setDamping(this._linearDamping,e))}get angularDamping(){return this._angularDamping}set angularFactor(e){this._angularFactor.equals(e)||(this._angularFactor.copy(e),this._body&&this._type===fs&&(_e.setValue(e.x,e.y,e.z),this._body.setAngularFactor(_e)))}get angularFactor(){return this._angularFactor}set angularVelocity(e){this._body&&this._type===fs&&(this._body.activate(),_e.setValue(e.x,e.y,e.z),this._body.setAngularVelocity(_e),this._angularVelocity.copy(e))}get angularVelocity(){if(this._body&&this._type===fs){const e=this._body.getAngularVelocity();this._angularVelocity.set(e.x(),e.y(),e.z())}return this._angularVelocity}set body(e){this._body!==e&&(this._body=e,e&&this._simulationEnabled&&e.activate())}get body(){return this._body}set friction(e){this._friction!==e&&(this._friction=e,this._body&&this._body.setFriction(e))}get friction(){return this._friction}set group(e){this._group!==e&&(this._group=e,this.enabled&&this.entity.enabled&&(this.disableSimulation(),this.enableSimulation()))}get group(){return this._group}set linearDamping(e){this._linearDamping!==e&&(this._linearDamping=e,this._body&&this._body.setDamping(e,this._angularDamping))}get linearDamping(){return this._linearDamping}set linearFactor(e){this._linearFactor.equals(e)||(this._linearFactor.copy(e),this._body&&this._type===fs&&(_e.setValue(e.x,e.y,e.z),this._body.setLinearFactor(_e)))}get linearFactor(){return this._linearFactor}set linearVelocity(e){this._body&&this._type===fs&&(this._body.activate(),_e.setValue(e.x,e.y,e.z),this._body.setLinearVelocity(_e),this._linearVelocity.copy(e))}get linearVelocity(){if(this._body&&this._type===fs){const e=this._body.getLinearVelocity();this._linearVelocity.set(e.x(),e.y(),e.z())}return this._linearVelocity}set mask(e){this._mask!==e&&(this._mask=e,this.enabled&&this.entity.enabled&&(this.disableSimulation(),this.enableSimulation()))}get mask(){return this._mask}set mass(e){if(this._mass!==e&&(this._mass=e,this._body&&this._type===fs)){const t=this.enabled&&this.entity.enabled;t&&this.disableSimulation(),this._body.getCollisionShape().calculateLocalInertia(e,_e),this._body.setMassProps(e,_e),this._body.updateInertiaTensor(),t&&this.enableSimulation()}}get mass(){return this._mass}set restitution(e){this._restitution!==e&&(this._restitution=e,this._body&&this._body.setRestitution(e))}get restitution(){return this._restitution}set rollingFriction(e){this._rollingFriction!==e&&(this._rollingFriction=e,this._body&&this._body.setRollingFriction(e))}get rollingFriction(){return this._rollingFriction}set type(e){if(this._type!==e){switch(this._type=e,this.disableSimulation(),e){case fs:this._group=gB,this._mask=ay;break;case ja:this._group=vB,this._mask=ay;break;case ko:default:this._group=iy,this._mask=Op;break}this.createBody()}}get type(){return this._type}createBody(){const e=this.entity;let t;if(e.collision&&(t=e.collision.shape,e.trigger&&(e.trigger.destroy(),delete e.trigger)),t){this._body&&(this.system.removeBody(this._body),this.system.destroyBody(this._body),this._body=null);const s=this._type===fs?this._mass:0;this._getEntityTransform(Dt);const i=this.system.createBody(s,t,Dt);if(i.setRestitution(this._restitution),i.setFriction(this._friction),i.setRollingFriction(this._rollingFriction),i.setDamping(this._linearDamping,this._angularDamping),this._type===fs){const r=this._linearFactor;_e.setValue(r.x,r.y,r.z),i.setLinearFactor(_e);const a=this._angularFactor;_e.setValue(a.x,a.y,a.z),i.setAngularFactor(_e)}else this._type===ja&&(i.setCollisionFlags(i.getCollisionFlags()|_B),i.setActivationState(sy));i.entity=e,this.body=i,this.enabled&&e.enabled&&this.enableSimulation()}}isActive(){return this._body?this._body.isActive():!1}activate(){this._body&&this._body.activate()}enableSimulation(){const e=this.entity;if(e.collision&&e.collision.enabled&&!this._simulationEnabled){const t=this._body;if(t){switch(this.system.addBody(t,this._group,this._mask),this._type){case fs:this.system._dynamic.push(this),t.forceActivationState(Rp),this.syncEntityToBody();break;case ja:this.system._kinematic.push(this),t.forceActivationState(sy);break;case ko:t.forceActivationState(Rp),this.syncEntityToBody();break}e.collision.type==="compound"&&this.system._compounds.push(e.collision),t.activate(),this._simulationEnabled=!0}}}disableSimulation(){const e=this._body;if(e&&this._simulationEnabled){const t=this.system;let s=t._compounds.indexOf(this.entity.collision);s>-1&&t._compounds.splice(s,1),s=t._dynamic.indexOf(this),s>-1&&t._dynamic.splice(s,1),s=t._kinematic.indexOf(this),s>-1&&t._kinematic.splice(s,1),t.removeBody(e),e.forceActivationState(Jx),this._simulationEnabled=!1}}applyForce(e,t,s,i,r,a){const n=this._body;n&&(n.activate(),e instanceof x?_e.setValue(e.x,e.y,e.z):_e.setValue(e,t,s),t instanceof x?ps.setValue(t.x,t.y,t.z):i!==void 0?ps.setValue(i,r,a):ps.setValue(0,0,0),n.applyForce(_e,ps))}applyTorque(e,t,s){const i=this._body;i&&(i.activate(),e instanceof x?_e.setValue(e.x,e.y,e.z):_e.setValue(e,t,s),i.applyTorque(_e))}applyImpulse(e,t,s,i,r,a){const n=this._body;n&&(n.activate(),e instanceof x?_e.setValue(e.x,e.y,e.z):_e.setValue(e,t,s),t instanceof x?ps.setValue(t.x,t.y,t.z):i!==void 0?ps.setValue(i,r,a):ps.setValue(0,0,0),n.applyImpulse(_e,ps))}applyTorqueImpulse(e,t,s){const i=this._body;i&&(i.activate(),e instanceof x?_e.setValue(e.x,e.y,e.z):_e.setValue(e,t,s),i.applyTorqueImpulse(_e))}isStatic(){return this._type===ko}isStaticOrKinematic(){return this._type===ko||this._type===ja}isKinematic(){return this._type===ja}_getEntityTransform(e){const t=this.entity,s=t.collision;if(s){const i=s.getShapePosition(),r=s.getShapeRotation();_e.setValue(i.x,i.y,i.z),sn.setValue(r.x,r.y,r.z,r.w)}else{const i=t.getPosition(),r=t.getRotation();_e.setValue(i.x,i.y,i.z),sn.setValue(r.x,r.y,r.z,r.w)}e.setOrigin(_e),e.setRotation(sn)}syncEntityToBody(){const e=this._body;if(e){if(this._getEntityTransform(Dt),e.setWorldTransform(Dt),this._type===ja){const t=e.getMotionState();t&&t.setWorldTransform(Dt)}e.activate()}}_updateDynamic(){const e=this._body;if(e.isActive()){const t=e.getMotionState();if(t){const s=this.entity;t.getWorldTransform(Dt);const i=Dt.getOrigin(),r=Dt.getRotation(),a=s.collision;if(a&&a._hasOffset){const n=a.data.linearOffset,l=a.data.angularOffset,h=dH.copy(l).invert(),c=cH.set(r.x(),r.y(),r.z(),r.w()).mul(h);c.transformVector(n,zh),s.setPosition(i.x()-zh.x,i.y()-zh.y,i.z()-zh.z),s.setRotation(c)}else s.setPosition(i.x(),i.y(),i.z()),s.setRotation(r.x(),r.y(),r.z(),r.w())}}}_updateKinematic(){const e=this._body.getMotionState();e&&(this._getEntityTransform(Dt),e.setWorldTransform(Dt))}teleport(e,t,s,i,r,a){e instanceof x?this.entity.setPosition(e):this.entity.setPosition(e,t,s),t instanceof Q?this.entity.setRotation(t):t instanceof x?this.entity.setEulerAngles(t):i!==void 0&&this.entity.setEulerAngles(i,r,a),this.syncEntityToBody()}onEnable(){this._body||this.createBody(),this.enableSimulation()}onDisable(){this.disableSimulation()}constructor(...e){super(...e),this._angularDamping=0,this._angularFactor=new x(1,1,1),this._angularVelocity=new x,this._body=null,this._friction=.5,this._group=iy,this._linearDamping=0,this._linearFactor=new x(1,1,1),this._linearVelocity=new x,this._mask=Op,this._mass=1,this._restitution=0,this._rollingFriction=0,this._simulationEnabled=!1,this._type=ko}};Ki.EVENT_CONTACT="contact",Ki.EVENT_COLLISIONSTART="collisionstart",Ki.EVENT_COLLISIONEND="collisionend",Ki.EVENT_TRIGGERENTER="triggerenter",Ki.EVENT_TRIGGERLEAVE="triggerleave",Ki.order=-1;let kn=Ki;class fH{constructor(){this.enabled=!0}}let pi,mi;class my{constructor(e,t,s,i){this.entity=e,this.point=t,this.normal=s,this.hitFraction=i}}class uH{constructor(e,t,s){arguments.length!==0?(this.a=e,this.b=t,this.impulse=s.impulse,this.localPointA=s.localPoint,this.localPointB=s.localPointOther,this.pointA=s.point,this.pointB=s.pointOther,this.normal=s.normal):(this.a=null,this.b=null,this.impulse=0,this.localPointA=new x,this.localPointB=new x,this.pointA=new x,this.pointB=new x,this.normal=new x)}}class pH{constructor(e=new x,t=new x,s=new x,i=new x,r=new x,a=0){this.localPoint=e,this.localPointOther=t,this.point=s,this.pointOther=i,this.normal=r,this.impulse=a}}class mH{constructor(e,t){this.other=e,this.contacts=t}}const fE=["enabled"],dg=class dg extends qe{constructor(e){super(e),this.maxSubSteps=10,this.fixedTimeStep=1/60,this.gravity=new x(0,-9.81,0),this._gravityFloat32=new Float32Array(3),this._dynamic=[],this._kinematic=[],this._triggers=[],this._compounds=[],this.id="rigidbody",this._stats=e.stats.frame,this.ComponentType=kn,this.DataType=fH,this.contactPointPool=null,this.contactResultPool=null,this.singleContactResultPool=null,this.schema=fE,this.collisions={},this.frameCollisions={},this.on("beforeremove",this.onBeforeRemove,this)}onLibraryLoaded(){if(typeof Ammo<"u"){if(this.collisionConfiguration=new Ammo.btDefaultCollisionConfiguration,this.dispatcher=new Ammo.btCollisionDispatcher(this.collisionConfiguration),this.overlappingPairCache=new Ammo.btDbvtBroadphase,this.solver=new Ammo.btSequentialImpulseConstraintSolver,this.dynamicsWorld=new Ammo.btDiscreteDynamicsWorld(this.dispatcher,this.overlappingPairCache,this.solver,this.collisionConfiguration),this.dynamicsWorld.setInternalTickCallback){const e=Ammo.addFunction(this._checkForCollisions.bind(this),"vif");this.dynamicsWorld.setInternalTickCallback(e)}pi=new Ammo.btVector3,mi=new Ammo.btVector3,kn.onLibraryLoaded(),this.contactPointPool=new Eu(pH,1),this.contactResultPool=new Eu(mH,1),this.singleContactResultPool=new Eu(uH,1),this.app.systems.on("update",this.onUpdate,this)}else this.app.systems.off("update",this.onUpdate,this)}initializeComponentData(e,t,s){const i=["mass","linearDamping","angularDamping","linearFactor","angularFactor","friction","rollingFriction","restitution","type","group","mask"];for(const r of i)if(t.hasOwnProperty(r)){const a=t[r];Array.isArray(a)?e[r]=new x(a[0],a[1],a[2]):e[r]=a}super.initializeComponentData(e,t,["enabled"])}cloneComponent(e,t){const s=e.rigidbody,i={enabled:s.enabled,mass:s.mass,linearDamping:s.linearDamping,angularDamping:s.angularDamping,linearFactor:[s.linearFactor.x,s.linearFactor.y,s.linearFactor.z],angularFactor:[s.angularFactor.x,s.angularFactor.y,s.angularFactor.z],friction:s.friction,rollingFriction:s.rollingFriction,restitution:s.restitution,type:s.type,group:s.group,mask:s.mask};return this.addComponent(t,i)}onBeforeRemove(e,t){t.enabled&&(t.enabled=!1),t.body&&(this.destroyBody(t.body),t.body=null)}addBody(e,t,s){t!==void 0&&s!==void 0?this.dynamicsWorld.addRigidBody(e,t,s):this.dynamicsWorld.addRigidBody(e)}removeBody(e){this.dynamicsWorld.removeRigidBody(e)}createBody(e,t,s){const i=new Ammo.btVector3(0,0,0);e!==0&&t.calculateLocalInertia(e,i);const r=new Ammo.btDefaultMotionState(s),a=new Ammo.btRigidBodyConstructionInfo(e,r,t,i),n=new Ammo.btRigidBody(a);return Ammo.destroy(a),Ammo.destroy(i),n}destroyBody(e){const t=e.getMotionState();t&&Ammo.destroy(t),Ammo.destroy(e)}raycastFirst(e,t,s={}){if(s.filterTags||s.filterCallback)return s.sort=!0,this.raycastAll(e,t,s)[0]||null;let i=null;pi.setValue(e.x,e.y,e.z),mi.setValue(t.x,t.y,t.z);const r=new Ammo.ClosestRayResultCallback(pi,mi);if(typeof s.filterCollisionGroup=="number"&&r.set_m_collisionFilterGroup(s.filterCollisionGroup),typeof s.filterCollisionMask=="number"&&r.set_m_collisionFilterMask(s.filterCollisionMask),this.dynamicsWorld.rayTest(pi,mi,r),r.hasHit()){const a=r.get_m_collisionObject(),n=Ammo.castObject(a,Ammo.btRigidBody);if(n){const l=r.get_m_hitPointWorld(),h=r.get_m_hitNormalWorld();i=new my(n.entity,new x(l.x(),l.y(),l.z()),new x(h.x(),h.y(),h.z()),r.get_m_closestHitFraction())}}return Ammo.destroy(r),i}raycastAll(e,t,s={}){const i=[];pi.setValue(e.x,e.y,e.z),mi.setValue(t.x,t.y,t.z);const r=new Ammo.AllHitsRayResultCallback(pi,mi);if(typeof s.filterCollisionGroup=="number"&&r.set_m_collisionFilterGroup(s.filterCollisionGroup),typeof s.filterCollisionMask=="number"&&r.set_m_collisionFilterMask(s.filterCollisionMask),this.dynamicsWorld.rayTest(pi,mi,r),r.hasHit()){const a=r.get_m_collisionObjects(),n=r.get_m_hitPointWorld(),l=r.get_m_hitNormalWorld(),h=r.get_m_hitFractions(),c=a.size();for(let d=0;d<c;d++){const f=Ammo.castObject(a.at(d),Ammo.btRigidBody);if(f&&f.entity){if(s.filterTags&&!f.entity.tags.has(...s.filterTags)||s.filterCallback&&!s.filterCallback(f.entity))continue;const u=n.at(d),p=l.at(d),m=new my(f.entity,new x(u.x(),u.y(),u.z()),new x(p.x(),p.y(),p.z()),h.at(d));i.push(m)}}s.sort&&i.sort((d,f)=>d.hitFraction-f.hitFraction)}return Ammo.destroy(r),i}_storeCollision(e,t){let s=!1;const i=e.getGuid();return this.collisions[i]=this.collisions[i]||{others:[],entity:e},this.collisions[i].others.indexOf(t)<0&&(this.collisions[i].others.push(t),s=!0),this.frameCollisions[i]=this.frameCollisions[i]||{others:[],entity:e},this.frameCollisions[i].others.push(t),s}_createContactPointFromAmmo(e){const t=e.get_m_localPointA(),s=e.get_m_localPointB(),i=e.getPositionWorldOnA(),r=e.getPositionWorldOnB(),a=e.get_m_normalWorldOnB(),n=this.contactPointPool.allocate();return n.localPoint.set(t.x(),t.y(),t.z()),n.localPointOther.set(s.x(),s.y(),s.z()),n.point.set(i.x(),i.y(),i.z()),n.pointOther.set(r.x(),r.y(),r.z()),n.normal.set(a.x(),a.y(),a.z()),n.impulse=e.getAppliedImpulse(),n}_createReverseContactPointFromAmmo(e){const t=e.get_m_localPointA(),s=e.get_m_localPointB(),i=e.getPositionWorldOnA(),r=e.getPositionWorldOnB(),a=e.get_m_normalWorldOnB(),n=this.contactPointPool.allocate();return n.localPointOther.set(t.x(),t.y(),t.z()),n.localPoint.set(s.x(),s.y(),s.z()),n.pointOther.set(i.x(),i.y(),i.z()),n.point.set(r.x(),r.y(),r.z()),n.normal.set(a.x(),a.y(),a.z()),n.impulse=e.getAppliedImpulse(),n}_createSingleContactResult(e,t,s){const i=this.singleContactResultPool.allocate();return i.a=e,i.b=t,i.localPointA=s.localPoint,i.localPointB=s.localPointOther,i.pointA=s.point,i.pointB=s.pointOther,i.normal=s.normal,i.impulse=s.impulse,i}_createContactResult(e,t){const s=this.contactResultPool.allocate();return s.other=e,s.contacts=t,s}_cleanOldCollisions(){for(const e in this.collisions)if(this.collisions.hasOwnProperty(e)){const t=this.frameCollisions[e],s=this.collisions[e],i=s.entity,r=i.collision,a=i.rigidbody,n=s.others;let h=n.length;for(;h--;){const c=n[h];(!t||t.others.indexOf(c)<0)&&(n.splice(h,1),i.trigger?(r&&r.fire("triggerleave",c),c.rigidbody&&c.rigidbody.fire("triggerleave",i)):c.trigger||(a&&a.fire("collisionend",c),r&&r.fire("collisionend",c)))}n.length===0&&delete this.collisions[e]}}_hasContactEvent(e){const t=e.collision;if(t&&(t.hasEvent("collisionstart")||t.hasEvent("collisionend")||t.hasEvent("contact")))return!0;const s=e.rigidbody;return s&&(s.hasEvent("collisionstart")||s.hasEvent("collisionend")||s.hasEvent("contact"))}_checkForCollisions(e,t){const i=Ammo.wrapPointer(e,Ammo.btDynamicsWorld).getDispatcher(),r=i.getNumManifolds();this.frameCollisions={};for(let a=0;a<r;a++){const n=i.getManifoldByIndexInternal(a),l=n.getBody0(),h=n.getBody1(),c=Ammo.castObject(l,Ammo.btRigidBody),d=Ammo.castObject(h,Ammo.btRigidBody),f=c.entity,u=d.entity;if(!f||!u)continue;const p=c.getCollisionFlags(),m=d.getCollisionFlags(),_=n.getNumContacts(),g=[],y=[];let A;if(_>0)if(p&Ho||m&Ho){const v=f.collision&&(f.collision.hasEvent("triggerenter")||f.collision.hasEvent("triggerleave")),S=u.collision&&(u.collision.hasEvent("triggerenter")||u.collision.hasEvent("triggerleave")),b=f.rigidbody&&(f.rigidbody.hasEvent("triggerenter")||f.rigidbody.hasEvent("triggerleave")),E=u.rigidbody&&(u.rigidbody.hasEvent("triggerenter")||u.rigidbody.hasEvent("triggerleave"));v&&(A=this._storeCollision(f,u),A&&!(m&Ho)&&f.collision.fire("triggerenter",u)),S&&(A=this._storeCollision(u,f),A&&!(p&Ho)&&u.collision.fire("triggerenter",f)),b&&(A||(A=this._storeCollision(u,f)),A&&f.rigidbody.fire("triggerenter",u)),E&&(A||(A=this._storeCollision(f,u)),A&&u.rigidbody.fire("triggerenter",f))}else{const v=this._hasContactEvent(f),S=this._hasContactEvent(u),b=this.hasEvent("contact");if(b||v||S){for(let E=0;E<_;E++){const T=n.getContactPoint(E),w=this._createContactPointFromAmmo(T);if(v||S){g.push(w);const P=this._createReverseContactPointFromAmmo(T);y.push(P)}if(b){const P=this._createSingleContactResult(f,u,w);this.fire("contact",P)}}if(v){const E=this._createContactResult(u,g);A=this._storeCollision(f,u),f.collision&&(f.collision.fire("contact",E),A&&f.collision.fire("collisionstart",E)),f.rigidbody&&(f.rigidbody.fire("contact",E),A&&f.rigidbody.fire("collisionstart",E))}if(S){const E=this._createContactResult(f,y);A=this._storeCollision(u,f),u.collision&&(u.collision.fire("contact",E),A&&u.collision.fire("collisionstart",E)),u.rigidbody&&(u.rigidbody.fire("contact",E),A&&u.rigidbody.fire("collisionstart",E))}}}}this._cleanOldCollisions(),this.contactPointPool.freeAll(),this.contactResultPool.freeAll(),this.singleContactResultPool.freeAll()}onUpdate(e){let t,s;this._gravityFloat32[0]=this.gravity.x,this._gravityFloat32[1]=this.gravity.y,this._gravityFloat32[2]=this.gravity.z;const i=this.dynamicsWorld.getGravity();(i.x()!==this._gravityFloat32[0]||i.y()!==this._gravityFloat32[1]||i.z()!==this._gravityFloat32[2])&&(i.setValue(this.gravity.x,this.gravity.y,this.gravity.z),this.dynamicsWorld.setGravity(i));const r=this._triggers;for(t=0,s=r.length;t<s;t++)r[t].updateTransform();const a=this._compounds;for(t=0,s=a.length;t<s;t++)a[t]._updateCompound();const n=this._kinematic;for(t=0,s=n.length;t<s;t++)n[t]._updateKinematic();this.dynamicsWorld.stepSimulation(e,this.maxSubSteps,this.fixedTimeStep);const l=this._dynamic;for(t=0,s=l.length;t<s;t++)l[t]._updateDynamic();this.dynamicsWorld.setInternalTickCallback||this._checkForCollisions(Ammo.getPointer(this.dynamicsWorld),e)}destroy(){super.destroy(),this.app.systems.off("update",this.onUpdate,this),typeof Ammo<"u"&&(Ammo.destroy(this.dynamicsWorld),Ammo.destroy(this.solver),Ammo.destroy(this.overlappingPairCache),Ammo.destroy(this.dispatcher),Ammo.destroy(this.collisionConfiguration),Ammo.destroy(pi),Ammo.destroy(mi),this.dynamicsWorld=null,this.solver=null,this.overlappingPairCache=null,this.dispatcher=null,this.collisionConfiguration=null,pi=null,mi=null,kn.onAppDestroy())}};dg.EVENT_CONTACT="contact";let Gp=dg;he._buildAccessors(kn.prototype,fE);const rn="none",_H="blend",_y=new $;class uE extends he{constructor(e,t){super(e,t),this._resolution=new z(640,320),this._referenceResolution=new z(640,320),this._scaleMode=rn,this.scale=1,this._scaleBlend=.5,this._priority=0,this._screenSpace=!1,this.cull=this._screenSpace,this._screenMatrix=new $,this._elements=new Set,e.app.graphicsDevice.on("resizecanvas",this._onResize,this)}syncDrawOrder(){this.system.queueDrawOrderSync(this.entity.getGuid(),this._processDrawOrderSync,this)}_recurseDrawOrderSync(e,t){if(!(e instanceof Ve))return t;if(e.element){const i=e.element.drawOrder;e.element.drawOrder=t++,e.element._batchGroupId>=0&&i!==e.element.drawOrder&&this.system.app.batcher?.markGroupDirty(e.element._batchGroupId)}e.particlesystem&&(e.particlesystem.drawOrder=t++);const s=e.children;for(let i=0;i<s.length;i++)t=this._recurseDrawOrderSync(s[i],t);return t}_processDrawOrderSync(){this._recurseDrawOrderSync(this.entity,1),this.fire("syncdraworder")}_calcProjectionMatrix(){const e=this._resolution.x/this.scale,t=this._resolution.y/this.scale,s=0,i=e,r=-t;this._screenMatrix.setOrtho(s,i,r,0,1,-1),this._screenSpace||(_y.setScale(.5*e,.5*t,1),this._screenMatrix.mul2(_y,this._screenMatrix))}_updateScale(){this.scale=this._calcScale(this._resolution,this.referenceResolution)}_calcScale(e,t){const s=Math.log2((e.x||1)/t.x),i=Math.log2((e.y||1)/t.y);return Math.pow(2,s*(1-this._scaleBlend)+i*this._scaleBlend)}_onResize(e,t){this._screenSpace&&(this._resolution.set(e,t),this.resolution=this._resolution)}_bindElement(e){this._elements.add(e)}_unbindElement(e){this._elements.delete(e)}onRemove(){this.system.app.graphicsDevice.off("resizecanvas",this._onResize,this),this.fire("remove"),this._elements.forEach(e=>e._onScreenRemove()),this._elements.clear(),this.off()}set resolution(e){this._screenSpace?this._resolution.set(this.system.app.graphicsDevice.width,this.system.app.graphicsDevice.height):this._resolution.set(e.x,e.y),this._updateScale(),this._calcProjectionMatrix(),this.entity._dirtyLocal||this.entity._dirtifyLocal(),this.fire("set:resolution",this._resolution),this._elements.forEach(t=>t._onScreenResize(this._resolution))}get resolution(){return this._resolution}set referenceResolution(e){this._referenceResolution.set(e.x,e.y),this._updateScale(),this._calcProjectionMatrix(),this.entity._dirtyLocal||this.entity._dirtifyLocal(),this.fire("set:referenceresolution",this._resolution),this._elements.forEach(t=>t._onScreenResize(this._resolution))}get referenceResolution(){return this._scaleMode===rn?this._resolution:this._referenceResolution}set screenSpace(e){this._screenSpace=e,this._screenSpace&&this._resolution.set(this.system.app.graphicsDevice.width,this.system.app.graphicsDevice.height),this.resolution=this._resolution,this.entity._dirtyLocal||this.entity._dirtifyLocal(),this.fire("set:screenspace",this._screenSpace),this._elements.forEach(t=>t._onScreenSpaceChange())}get screenSpace(){return this._screenSpace}set scaleMode(e){e!==rn&&e!==_H&&(e=rn),!this._screenSpace&&e!==rn&&(e=rn),this._scaleMode=e,this.resolution=this._resolution,this.fire("set:scalemode",this._scaleMode)}get scaleMode(){return this._scaleMode}set scaleBlend(e){this._scaleBlend=e,this._updateScale(),this._calcProjectionMatrix(),this.entity._dirtyLocal||this.entity._dirtifyLocal(),this.fire("set:scaleblend",this._scaleBlend),this._elements.forEach(t=>t._onScreenResize(this._resolution))}get scaleBlend(){return this._scaleBlend}set priority(e){e>255&&(e=255),this._priority!==e&&(this._priority=e,this.syncDrawOrder())}get priority(){return this._priority}}class gH{constructor(){this.enabled=!0}}const Wp=["enabled"];class vH extends qe{constructor(e){super(e),this.id="screen",this.ComponentType=uE,this.DataType=gH,this.schema=Wp,this.windowResolution=new z,this._drawOrderSyncQueue=new KP,this.app.graphicsDevice.on("resizecanvas",this._onResize,this),this.app.systems.on("update",this._onUpdate,this),this.on("beforeremove",this.onRemoveComponent,this)}initializeComponentData(e,t,s){t.priority!==void 0&&(e.priority=t.priority),t.screenSpace!==void 0&&(e.screenSpace=t.screenSpace),e.cull=e.screenSpace,t.scaleMode!==void 0&&(e.scaleMode=t.scaleMode),t.scaleBlend!==void 0&&(e.scaleBlend=t.scaleBlend),t.resolution!==void 0&&(t.resolution instanceof z?e._resolution.copy(t.resolution):e._resolution.set(t.resolution[0],t.resolution[1]),e.resolution=e._resolution),t.referenceResolution!==void 0&&(t.referenceResolution instanceof z?e._referenceResolution.copy(t.referenceResolution):e._referenceResolution.set(t.referenceResolution[0],t.referenceResolution[1]),e.referenceResolution=e._referenceResolution),e.syncDrawOrder(),super.initializeComponentData(e,t,Wp)}destroy(){super.destroy(),this.app.graphicsDevice.off("resizecanvas",this._onResize,this),this.app.systems.off("update",this._onUpdate,this)}_onUpdate(e){const t=this.store;for(const s in t)t[s].entity.screen.update&&t[s].entity.screen.update(e)}_onResize(e,t){this.windowResolution.x=e,this.windowResolution.y=t}cloneComponent(e,t){const s=e.screen;return this.addComponent(t,{enabled:s.enabled,screenSpace:s.screenSpace,scaleMode:s.scaleMode,resolution:s.resolution.clone(),referenceResolution:s.referenceResolution.clone()})}onRemoveComponent(e,t){t.onRemove()}processDrawOrderSyncQueue(){const e=this._drawOrderSyncQueue.list();for(let t=0;t<e.length;t++){const s=e[t];s.callback.call(s.scope)}this._drawOrderSyncQueue.clear()}queueDrawOrderSync(e,t,s){this._drawOrderSyncQueue.list().length||this.app.once("prerender",this.processDrawOrderSyncQueue,this),this._drawOrderSyncQueue.has(e)||this._drawOrderSyncQueue.push(e,{callback:t,scope:s})}}he._buildAccessors(uE.prototype,Wp);const Wi=new z,gy=new x,Ir=new $u,vy=new iT,Sy=new x,Uo=new x,SH=new Q,yH={x:"y",y:"x"},nl=class nl extends ne{constructor(e,t){if(super(),!e||!(e instanceof Wc))throw new Error("Element was null or not an ElementComponent");if(t&&t!=="x"&&t!=="y")throw new Error(`Unrecognized axis: ${t}`);this._element=e,this._app=e.system.app,this._axis=t||null,this._enabled=!0,this._dragScale=new x,this._dragStartMousePosition=new x,this._dragStartHandlePosition=new x,this._deltaMousePosition=new x,this._deltaHandlePosition=new x,this._isDragging=!1,this._toggleLifecycleListeners("on")}_toggleLifecycleListeners(e){this._element[e]("mousedown",this._onMouseDownOrTouchStart,this),this._element[e]("touchstart",this._onMouseDownOrTouchStart,this),this._element[e]("selectstart",this._onMouseDownOrTouchStart,this)}_toggleDragListeners(e){const t=e==="on";this._hasDragListeners&&t||(this._app.mouse&&(this._element[e]("mousemove",this._onMove,this),this._element[e]("mouseup",this._onMouseUpOrTouchEnd,this)),Se.touch&&(this._element[e]("touchmove",this._onMove,this),this._element[e]("touchend",this._onMouseUpOrTouchEnd,this),this._element[e]("touchcancel",this._onMouseUpOrTouchEnd,this)),this._element[e]("selectmove",this._onMove,this),this._element[e]("selectend",this._onMouseUpOrTouchEnd,this),this._hasDragListeners=t)}_onMouseDownOrTouchStart(e){if(this._element&&!this._isDragging&&this.enabled){this._dragCamera=e.camera,this._calculateDragScale();const t=this._screenToLocal(e);t&&(this._toggleDragListeners("on"),this._isDragging=!0,this._dragStartMousePosition.copy(t),this._dragStartHandlePosition.copy(this._element.entity.getLocalPosition()),this.fire("drag:start"))}}_onMouseUpOrTouchEnd(){this._isDragging&&(this._isDragging=!1,this._toggleDragListeners("off"),this.fire("drag:end"))}_screenToLocal(e){return e.inputSource?Ir.set(e.inputSource.getOrigin(),e.inputSource.getDirection()):(this._determineInputPosition(e),this._chooseRayOriginAndDirection()),Sy.copy(this._element.entity.forward).mulScalar(-1),vy.setFromPointNormal(this._element.entity.getPosition(),Sy),vy.intersectsRay(Ir,Uo)?(SH.copy(this._element.entity.getRotation()).invert().transformVector(Uo,Uo),Uo.mul(this._dragScale),Uo):null}_determineInputPosition(e){const t=this._app.graphicsDevice.maxPixelRatio;typeof e.x<"u"&&typeof e.y<"u"?(Wi.x=e.x*t,Wi.y=e.y*t):e.changedTouches?(Wi.x=e.changedTouches[0].x*t,Wi.y=e.changedTouches[0].y*t):console.warn("Could not determine position from input event")}_chooseRayOriginAndDirection(){this._element.screen&&this._element.screen.screen.screenSpace?(Ir.origin.set(Wi.x,-Wi.y,0),Ir.direction.copy(x.FORWARD)):(gy.copy(this._dragCamera.screenToWorld(Wi.x,Wi.y,1)),Ir.origin.copy(this._dragCamera.entity.getPosition()),Ir.direction.copy(gy).sub(Ir.origin).normalize())}_calculateDragScale(){let e=this._element.entity.parent;const t=this._element.screen&&this._element.screen.screen,s=t&&t.screenSpace,i=s?t.scale:1,r=this._dragScale;for(r.set(i,i,i);e&&(r.mul(e.getLocalScale()),e=e.parent,!(s&&e.screen)););r.x=1/r.x,r.y=1/r.y,r.z=0}_onMove(e){const{_element:t,_deltaMousePosition:s,_deltaHandlePosition:i,_axis:r}=this;if(t&&this._isDragging&&this.enabled&&t.enabled&&t.entity.enabled){const a=this._screenToLocal(e);if(a){if(s.sub2(a,this._dragStartMousePosition),i.add2(this._dragStartHandlePosition,s),r){const n=t.entity.getLocalPosition(),l=yH[r];i[l]=n[l]}t.entity.setLocalPosition(i),this.fire("drag:move",i)}}}destroy(){this._toggleLifecycleListeners("off"),this._toggleDragListeners("off")}set enabled(e){this._enabled=e}get enabled(){return this._enabled}get isDragging(){return this._isDragging}};nl.EVENT_DRAGSTART="drag:start",nl.EVENT_DRAGEND="drag:end",nl.EVENT_DRAGMOVE="drag:move";let Xc=nl;const TH=0,yy=1,xH=2,EH=0,AH=1,Bo=new z,fg=class fg extends he{constructor(e,t){super(e,t),this._viewportEntity=null,this._contentEntity=null,this._horizontalScrollbarEntity=null,this._verticalScrollbarEntity=null,this._evtElementRemove=null,this._evtViewportElementRemove=null,this._evtViewportResize=null,this._evtContentEntityElementAdd=null,this._evtContentElementRemove=null,this._evtContentResize=null,this._evtHorizontalScrollbarAdd=null,this._evtHorizontalScrollbarRemove=null,this._evtHorizontalScrollbarValue=null,this._evtVerticalScrollbarAdd=null,this._evtVerticalScrollbarRemove=null,this._evtVerticalScrollbarValue=null,this._scrollbarUpdateFlags={},this._scrollbarEntities={},this._prevContentSizes={},this._prevContentSizes[ce]=null,this._prevContentSizes[Pe]=null,this._scroll=new z,this._velocity=new x,this._dragStartPosition=new x,this._disabledContentInput=!1,this._disabledContentInputEntities=[],this._toggleLifecycleListeners("on"),this._toggleElementListeners("on")}get data(){const e=this.system.store[this.entity.getGuid()];return e?e.data:null}set enabled(e){this._setValue("enabled",e)}get enabled(){return this.data.enabled}set horizontal(e){this._setValue("horizontal",e)}get horizontal(){return this.data.horizontal}set vertical(e){this._setValue("vertical",e)}get vertical(){return this.data.vertical}set scrollMode(e){this._setValue("scrollMode",e)}get scrollMode(){return this.data.scrollMode}set bounceAmount(e){this._setValue("bounceAmount",e)}get bounceAmount(){return this.data.bounceAmount}set friction(e){this._setValue("friction",e)}get friction(){return this.data.friction}set dragThreshold(e){this._setValue("dragThreshold",e)}get dragThreshold(){return this.data.dragThreshold}set useMouseWheel(e){this._setValue("useMouseWheel",e)}get useMouseWheel(){return this.data.useMouseWheel}set mouseWheelSensitivity(e){this._setValue("mouseWheelSensitivity",e)}get mouseWheelSensitivity(){return this.data.mouseWheelSensitivity}set horizontalScrollbarVisibility(e){this._setValue("horizontalScrollbarVisibility",e)}get horizontalScrollbarVisibility(){return this.data.horizontalScrollbarVisibility}set verticalScrollbarVisibility(e){this._setValue("verticalScrollbarVisibility",e)}get verticalScrollbarVisibility(){return this.data.verticalScrollbarVisibility}set viewportEntity(e){if(this._viewportEntity===e)return;const t=typeof e=="string";this._viewportEntity&&t&&this._viewportEntity.getGuid()===e||(this._viewportEntity&&this._viewportEntityUnsubscribe(),e instanceof ze?this._viewportEntity=e:t?this._viewportEntity=this.system.app.getEntityFromIndex(e)||null:this._viewportEntity=null,this._viewportEntity&&this._viewportEntitySubscribe(),this._viewportEntity?this.data.viewportEntity=this._viewportEntity.getGuid():t&&e&&(this.data.viewportEntity=e))}get viewportEntity(){return this._viewportEntity}set contentEntity(e){if(this._contentEntity===e)return;const t=typeof e=="string";this._contentEntity&&t&&this._contentEntity.getGuid()===e||(this._contentEntity&&this._contentEntityUnsubscribe(),e instanceof ze?this._contentEntity=e:t?this._contentEntity=this.system.app.getEntityFromIndex(e)||null:this._contentEntity=null,this._contentEntity&&this._contentEntitySubscribe(),this._contentEntity?this.data.contentEntity=this._contentEntity.getGuid():t&&e&&(this.data.contentEntity=e))}get contentEntity(){return this._contentEntity}set horizontalScrollbarEntity(e){if(this._horizontalScrollbarEntity===e)return;const t=typeof e=="string";this._horizontalScrollbarEntity&&t&&this._horizontalScrollbarEntity.getGuid()===e||(this._horizontalScrollbarEntity&&this._horizontalScrollbarEntityUnsubscribe(),e instanceof ze?this._horizontalScrollbarEntity=e:t?this._horizontalScrollbarEntity=this.system.app.getEntityFromIndex(e)||null:this._horizontalScrollbarEntity=null,this._scrollbarEntities[ce]=this._horizontalScrollbarEntity,this._horizontalScrollbarEntity&&this._horizontalScrollbarEntitySubscribe(),this._horizontalScrollbarEntity?this.data.horizontalScrollbarEntity=this._horizontalScrollbarEntity.getGuid():t&&e&&(this.data.horizontalScrollbarEntity=e))}get horizontalScrollbarEntity(){return this._horizontalScrollbarEntity}set verticalScrollbarEntity(e){if(this._verticalScrollbarEntity===e)return;const t=typeof e=="string";this._verticalScrollbarEntity&&t&&this._verticalScrollbarEntity.getGuid()===e||(this._verticalScrollbarEntity&&this._verticalScrollbarEntityUnsubscribe(),e instanceof ze?this._verticalScrollbarEntity=e:t?this._verticalScrollbarEntity=this.system.app.getEntityFromIndex(e)||null:this._verticalScrollbarEntity=null,this._scrollbarEntities[Pe]=this._verticalScrollbarEntity,this._verticalScrollbarEntity&&this._verticalScrollbarEntitySubscribe(),this._verticalScrollbarEntity?this.data.verticalScrollbarEntity=this._verticalScrollbarEntity.getGuid():t&&e&&(this.data.verticalScrollbarEntity=e))}get verticalScrollbarEntity(){return this._verticalScrollbarEntity}set scroll(e){this._onSetScroll(e.x,e.y)}get scroll(){return this._scroll}_setValue(e,t){const s=this.data,i=s[e];s[e]=t,this.fire("set",e,i,t)}_toggleLifecycleListeners(e){this[e]("set_horizontal",this._onSetHorizontalScrollingEnabled,this),this[e]("set_vertical",this._onSetVerticalScrollingEnabled,this),this.entity[e]("element:add",this._onElementComponentAdd,this)}_toggleElementListeners(e){if(this.entity.element){if(e==="on"&&this._hasElementListeners)return;this.entity.element[e]("resize",this._syncAll,this),this.entity.element[e]("mousewheel",this._onMouseWheel,this),this._hasElementListeners=e==="on"}}_onElementComponentAdd(e){this._evtElementRemove=this.entity.element.once("beforeremove",this._onElementComponentRemove,this),this._toggleElementListeners("on")}_onElementComponentRemove(e){this._evtElementRemove?.off(),this._evtElementRemove=null,this._toggleElementListeners("off")}_viewportEntitySubscribe(){this._evtViewportEntityElementAdd=this._viewportEntity.on("element:add",this._onViewportElementGain,this),this._viewportEntity.element&&this._onViewportElementGain()}_viewportEntityUnsubscribe(){this._evtViewportEntityElementAdd?.off(),this._evtViewportEntityElementAdd=null,this._viewportEntity?.element&&this._onViewportElementLose()}_viewportEntityElementSubscribe(){const e=this._viewportEntity.element;this._evtViewportElementRemove=e.once("beforeremove",this._onViewportElementLose,this),this._evtViewportResize=e.on("resize",this._syncAll,this)}_viewportEntityElementUnsubscribe(){this._evtViewportElementRemove?.off(),this._evtViewportElementRemove=null,this._evtViewportResize?.off(),this._evtViewportResize=null}_onViewportElementGain(){this._viewportEntityElementSubscribe(),this._syncAll()}_onViewportElementLose(){this._viewportEntityElementUnsubscribe()}_contentEntitySubscribe(){this._evtContentEntityElementAdd=this._contentEntity.on("element:add",this._onContentElementGain,this),this._contentEntity.element&&this._onContentElementGain()}_contentEntityUnsubscribe(){this._evtContentEntityElementAdd?.off(),this._evtContentEntityElementAdd=null,this._contentEntity?.element&&this._onContentElementLose()}_contentEntityElementSubscribe(){const e=this._contentEntity.element;this._evtContentElementRemove=e.once("beforeremove",this._onContentElementLose,this),this._evtContentResize=e.on("resize",this._syncAll,this)}_contentEntityElementUnsubscribe(){this._evtContentElementRemove?.off(),this._evtContentElementRemove=null,this._evtContentResize?.off(),this._evtContentResize=null}_onContentElementGain(){this._contentEntityElementSubscribe(),this._destroyDragHelper(),this._contentDragHelper=new Xc(this._contentEntity.element),this._contentDragHelper.on("drag:start",this._onContentDragStart,this),this._contentDragHelper.on("drag:end",this._onContentDragEnd,this),this._contentDragHelper.on("drag:move",this._onContentDragMove,this),this._prevContentSizes[ce]=null,this._prevContentSizes[Pe]=null,this._syncAll()}_onContentElementLose(){this._contentEntityElementUnsubscribe(),this._destroyDragHelper()}_onContentDragStart(){this._contentEntity&&this.enabled&&this.entity.enabled&&this._dragStartPosition.copy(this._contentEntity.getLocalPosition())}_onContentDragEnd(){this._prevContentDragPosition=null,this._enableContentInput()}_onContentDragMove(e){if(this._contentEntity&&this.enabled&&this.entity.enabled&&(this._wasDragged=!0,this._setScrollFromContentPosition(e),this._setVelocityFromContentPositionDelta(e),!this._disabledContentInput)){const t=e.x-this._dragStartPosition.x,s=e.y-this._dragStartPosition.y;(Math.abs(t)>this.dragThreshold||Math.abs(s)>this.dragThreshold)&&this._disableContentInput()}}_horizontalScrollbarEntitySubscribe(){this._evtHorizontalScrollbarAdd=this._horizontalScrollbarEntity.on("scrollbar:add",this._onHorizontalScrollbarGain,this),this._horizontalScrollbarEntity.scrollbar&&this._onHorizontalScrollbarGain()}_verticalScrollbarEntitySubscribe(){this._evtVerticalScrollbarAdd=this._verticalScrollbarEntity.on("scrollbar:add",this._onVerticalScrollbarGain,this),this._verticalScrollbarEntity.scrollbar&&this._onVerticalScrollbarGain()}_horizontalScrollbarEntityUnsubscribe(){this._evtHorizontalScrollbarAdd?.off(),this._evtHorizontalScrollbarAdd=null,this._horizontalScrollbarEntity.scrollbar&&this._onHorizontalScrollbarLose()}_verticalScrollbarEntityUnsubscribe(){this._evtVerticalScrollbarAdd?.off(),this._evtVerticalScrollbarAdd=null,this._verticalScrollbarEntity.scrollbar&&this._onVerticalScrollbarLose()}_onSetHorizontalScrollbarValue(e){!this._scrollbarUpdateFlags[ce]&&this.enabled&&this.entity.enabled&&this._onSetScroll(e,null)}_onSetVerticalScrollbarValue(e){!this._scrollbarUpdateFlags[Pe]&&this.enabled&&this.entity.enabled&&this._onSetScroll(null,e)}_onHorizontalScrollbarGain(){const e=this._horizontalScrollbarEntity?.scrollbar;this._evtHorizontalScrollbarRemove=e.on("beforeremove",this._onHorizontalScrollbarLose,this),this._evtHorizontalScrollbarValue=e.on("set:value",this._onSetHorizontalScrollbarValue,this),this._syncScrollbarEnabledState(ce),this._syncScrollbarPosition(ce)}_onVerticalScrollbarGain(){const e=this._verticalScrollbarEntity?.scrollbar;this._evtVerticalScrollbarRemove=e.on("beforeremove",this._onVerticalScrollbarLose,this),this._evtVerticalScrollbarValue=e.on("set:value",this._onSetVerticalScrollbarValue,this),this._syncScrollbarEnabledState(Pe),this._syncScrollbarPosition(Pe)}_onHorizontalScrollbarLose(){this._evtHorizontalScrollbarRemove?.off(),this._evtHorizontalScrollbarRemove=null,this._evtHorizontalScrollbarValue?.off(),this._evtHorizontalScrollbarValue=null}_onVerticalScrollbarLose(){this._evtVerticalScrollbarRemove?.off(),this._evtVerticalScrollbarRemove=null,this._evtVerticalScrollbarValue?.off(),this._evtVerticalScrollbarValue=null}_onSetHorizontalScrollingEnabled(){this._syncScrollbarEnabledState(ce)}_onSetVerticalScrollingEnabled(){this._syncScrollbarEnabledState(Pe)}_onSetScroll(e,t,s){s!==!1&&this._velocity.set(0,0,0);const i=this._updateAxis(e,"x",ce),r=this._updateAxis(t,"y",Pe);(i||r)&&this.fire("set:scroll",this._scroll)}_updateAxis(e,t,s){const i=e!==null&&Math.abs(e-this._scroll[t])>1e-5;return(i||this._isDragging()||e===0)&&(this._scroll[t]=this._determineNewScrollValue(e,t,s),this._syncContentPosition(s),this._syncScrollbarPosition(s)),i}_determineNewScrollValue(e,t,s){if(!this._getScrollingEnabled(s))return this._scroll[t];switch(this.scrollMode){case TH:return B.clamp(e,0,this._getMaxScrollValue(s));case yy:return this._setVelocityFromOvershoot(e,t,s),e;case xH:return e;default:return console.warn(`Unhandled scroll mode:${this.scrollMode}`),e}}_syncAll(){this._syncContentPosition(ce),this._syncContentPosition(Pe),this._syncScrollbarPosition(ce),this._syncScrollbarPosition(Pe),this._syncScrollbarEnabledState(ce),this._syncScrollbarEnabledState(Pe)}_syncContentPosition(e){if(!this._contentEntity)return;const t=this._getAxis(e),s=this._getSign(e),i=this._prevContentSizes[e],r=this._getContentSize(e);if(i!==null&&Math.abs(i-r)>1e-4){const l=this._getMaxOffset(e,i),h=this._getMaxOffset(e,r);h===0?this._scroll[t]=1:this._scroll[t]=B.clamp(this._scroll[t]*l/h,0,1)}const a=this._scroll[t]*this._getMaxOffset(e),n=this._contentEntity.getLocalPosition();n[t]=a*s,this._contentEntity.setLocalPosition(n),this._prevContentSizes[e]=r}_syncScrollbarPosition(e){const t=this._scrollbarEntities[e];if(!t?.scrollbar)return;const s=this._getAxis(e);this._scrollbarUpdateFlags[e]=!0,t.scrollbar.value=this._scroll[s],t.scrollbar.handleSize=this._getScrollbarHandleSize(s,e),this._scrollbarUpdateFlags[e]=!1}_syncScrollbarEnabledState(e){const t=this._scrollbarEntities[e];if(!t)return;const s=this._getScrollingEnabled(e),i=this._getScrollbarVisibility(e);switch(i){case EH:t.enabled=s;return;case AH:t.enabled=s&&this._contentIsLargerThanViewport(e);return;default:console.warn(`Unhandled scrollbar visibility:${i}`),t.enabled=s}}_contentIsLargerThanViewport(e){return this._getContentSize(e)>this._getViewportSize(e)}_contentPositionToScrollValue(e){const t=this._getMaxOffset(ce),s=this._getMaxOffset(Pe);return t===0?Bo.x=0:Bo.x=e.x/t,s===0?Bo.y=0:Bo.y=e.y/-s,Bo}_getMaxOffset(e,t){t=t===void 0?this._getContentSize(e):t;const s=this._getViewportSize(e);return t<s?-this._getViewportSize(e):s-t}_getMaxScrollValue(e){return this._contentIsLargerThanViewport(e)?1:0}_getScrollbarHandleSize(e,t){const s=this._getViewportSize(t),i=this._getContentSize(t);if(Math.abs(i)<.001)return 1;const r=Math.min(s/i,1),a=this._toOvershoot(this._scroll[e],t);return a===0?r:r/(1+Math.abs(a))}_getViewportSize(e){return this._getSize(e,this._viewportEntity)}_getContentSize(e){return this._getSize(e,this._contentEntity)}_getSize(e,t){return t?.element?t.element[this._getCalculatedDimension(e)]:0}_getScrollingEnabled(e){if(e===ce)return this.horizontal;if(e===Pe)return this.vertical}_getScrollbarVisibility(e){if(e===ce)return this.horizontalScrollbarVisibility;if(e===Pe)return this.verticalScrollbarVisibility}_getSign(e){return e===ce?1:-1}_getAxis(e){return e===ce?"x":"y"}_getCalculatedDimension(e){return e===ce?"calculatedWidth":"calculatedHeight"}_destroyDragHelper(){this._contentDragHelper&&this._contentDragHelper.destroy()}onUpdate(){this._contentEntity&&(this._updateVelocity(),this._syncScrollbarEnabledState(ce),this._syncScrollbarEnabledState(Pe))}_updateVelocity(){if(!this._isDragging()){if(this.scrollMode===yy&&(this._hasOvershoot("x",ce)&&this._setVelocityFromOvershoot(this.scroll.x,"x",ce),this._hasOvershoot("y",Pe)&&this._setVelocityFromOvershoot(this.scroll.y,"y",Pe)),Math.abs(this._velocity.x)>1e-4||Math.abs(this._velocity.y)>1e-4){const e=this._contentEntity.getLocalPosition();e.x+=this._velocity.x,e.y+=this._velocity.y,this._contentEntity.setLocalPosition(e),this._setScrollFromContentPosition(e)}this._velocity.x*=1-this.friction,this._velocity.y*=1-this.friction}}_hasOvershoot(e,t){return Math.abs(this._toOvershoot(this.scroll[e],t))>.001}_toOvershoot(e,t){const s=this._getMaxScrollValue(t);return e<0?e:e>s?e-s:0}_setVelocityFromOvershoot(e,t,s){const r=this._toOvershoot(e,s)*this._getMaxOffset(s)*this._getSign(s);Math.abs(r)>0&&(this._velocity[t]=-r/(this.bounceAmount*50+1))}_setVelocityFromContentPositionDelta(e){this._prevContentDragPosition?(this._velocity.sub2(e,this._prevContentDragPosition),this._prevContentDragPosition.copy(e)):(this._velocity.set(0,0,0),this._prevContentDragPosition=e.clone())}_setScrollFromContentPosition(e){let t=this._contentPositionToScrollValue(e);this._isDragging()&&(t=this._applyScrollValueTension(t)),this._onSetScroll(t.x,t.y,!1)}_applyScrollValueTension(e){let s=this._getMaxScrollValue(ce),i=this._toOvershoot(e.x,ce);return i>0?e.x=s+1*Math.log10(1+i):i<0&&(e.x=-1*Math.log10(1-i)),s=this._getMaxScrollValue(Pe),i=this._toOvershoot(e.y,Pe),i>0?e.y=s+1*Math.log10(1+i):i<0&&(e.y=-1*Math.log10(1-i)),e}_isDragging(){return this._contentDragHelper&&this._contentDragHelper.isDragging}_setScrollbarComponentsEnabled(e){this._horizontalScrollbarEntity?.scrollbar&&(this._horizontalScrollbarEntity.scrollbar.enabled=e),this._verticalScrollbarEntity?.scrollbar&&(this._verticalScrollbarEntity.scrollbar.enabled=e)}_setContentDraggingEnabled(e){this._contentDragHelper&&(this._contentDragHelper.enabled=e)}_onMouseWheel(e){if(!this.useMouseWheel||!this._contentEntity?.element)return;const t=e.event,s=t.deltaX/this._contentEntity.element.calculatedWidth*this.mouseWheelSensitivity.x,i=t.deltaY/this._contentEntity.element.calculatedHeight*this.mouseWheelSensitivity.y,r=B.clamp(this._scroll.x+s,0,this._getMaxScrollValue(ce)),a=B.clamp(this._scroll.y+i,0,this._getMaxScrollValue(Pe));this.scroll=new z(r,a)}_enableContentInput(){for(;this._disabledContentInputEntities.length;){const e=this._disabledContentInputEntities.pop();e.element&&(e.element.useInput=!0)}this._disabledContentInput=!1}_disableContentInput(){const e=t=>{t.element&&t.element.useInput&&(this._disabledContentInputEntities.push(t),t.element.useInput=!1);const s=t.children;for(let i=0,r=s.length;i<r;i++)e(s[i])};if(this._contentEntity){const t=this._contentEntity.children;for(let s=0,i=t.length;s<i;s++)e(t[s])}this._disabledContentInput=!0}onEnable(){this._setScrollbarComponentsEnabled(!0),this._setContentDraggingEnabled(!0),this._syncAll()}onDisable(){this._setScrollbarComponentsEnabled(!1),this._setContentDraggingEnabled(!1)}onRemove(){this._toggleLifecycleListeners("off"),this._toggleElementListeners("off"),this._destroyDragHelper()}resolveDuplicatedEntityReferenceProperties(e,t){e.viewportEntity&&(this.viewportEntity=t[e.viewportEntity.getGuid()]),e.contentEntity&&(this.contentEntity=t[e.contentEntity.getGuid()]),e.horizontalScrollbarEntity&&(this.horizontalScrollbarEntity=t[e.horizontalScrollbarEntity.getGuid()]),e.verticalScrollbarEntity&&(this.verticalScrollbarEntity=t[e.verticalScrollbarEntity.getGuid()])}};fg.EVENT_SETSCROLL="set:scroll";let $p=fg;const bH=10;class wH{constructor(){this.enabled=!0,this.dragThreshold=bH,this.useMouseWheel=!0,this.mouseWheelSensitivity=new z(1,1),this.horizontalScrollbarVisibility=0,this.verticalScrollbarVisibility=0,this.viewportEntity=null,this.contentEntity=null,this.horizontalScrollbarEntity=null,this.verticalScrollbarEntity=null}}const Ty=[{name:"enabled",type:"boolean"},{name:"horizontal",type:"boolean"},{name:"vertical",type:"boolean"},{name:"scrollMode",type:"number"},{name:"bounceAmount",type:"number"},{name:"friction",type:"number"},{name:"dragThreshold",type:"number"},{name:"useMouseWheel",type:"boolean"},{name:"mouseWheelSensitivity",type:"vec2"},{name:"horizontalScrollbarVisibility",type:"number"},{name:"verticalScrollbarVisibility",type:"number"}],CH=10;class PH extends qe{constructor(e){super(e),this.id="scrollview",this.ComponentType=$p,this.DataType=wH,this.schema=Ty,this.on("beforeremove",this._onRemoveComponent,this),this.app.systems.on("update",this.onUpdate,this)}initializeComponentData(e,t,s){t.dragThreshold===void 0&&(t.dragThreshold=CH),t.useMouseWheel===void 0&&(t.useMouseWheel=!0),t.mouseWheelSensitivity===void 0&&(t.mouseWheelSensitivity=new z(1,1)),super.initializeComponentData(e,t,Ty),e.viewportEntity=t.viewportEntity,e.contentEntity=t.contentEntity,e.horizontalScrollbarEntity=t.horizontalScrollbarEntity,e.verticalScrollbarEntity=t.verticalScrollbarEntity}onUpdate(e){const t=this.store;for(const s in t){const i=t[s].entity,r=i.scrollview;r.enabled&&i.enabled&&r.onUpdate()}}_onRemoveComponent(e,t){t.onRemove()}destroy(){super.destroy(),this.app.systems.off("update",this.onUpdate,this)}}const ug=class ug extends he{constructor(e,t){super(e,t),this._handleEntity=null,this._evtHandleEntityElementAdd=null,this._evtHandleEntityChanges=[],this._toggleLifecycleListeners("on")}get data(){const e=this.system.store[this.entity.getGuid()];return e?e.data:null}set enabled(e){this._setValue("enabled",e)}get enabled(){return this.data.enabled}set orientation(e){this._setValue("orientation",e)}get orientation(){return this.data.orientation}set value(e){this._setValue("value",e)}get value(){return this.data.value}set handleSize(e){this._setValue("handleSize",e)}get handleSize(){return this.data.handleSize}set handleEntity(e){if(this._handleEntity===e)return;const t=typeof e=="string";this._handleEntity&&t&&this._handleEntity.getGuid()===e||(this._handleEntity&&this._handleEntityUnsubscribe(),e instanceof ze?this._handleEntity=e:t?this._handleEntity=this.system.app.getEntityFromIndex(e)||null:this._handleEntity=null,this._handleEntity&&this._handleEntitySubscribe(),this._handleEntity?this.data.handleEntity=this._handleEntity.getGuid():t&&e&&(this.data.handleEntity=e))}get handleEntity(){return this._handleEntity}_setValue(e,t){const s=this.data,i=s[e];s[e]=t,this.fire("set",e,i,t)}_toggleLifecycleListeners(e){this[e]("set_value",this._onSetValue,this),this[e]("set_handleSize",this._onSetHandleSize,this),this[e]("set_orientation",this._onSetOrientation,this)}_handleEntitySubscribe(){this._evtHandleEntityElementAdd=this._handleEntity.on("element:add",this._onHandleElementGain,this),this._handleEntity.element&&this._onHandleElementGain()}_handleEntityUnsubscribe(){this._evtHandleEntityElementAdd?.off(),this._evtHandleEntityElementAdd=null,this._handleEntity?.element&&this._onHandleElementLose()}_handleEntityElementSubscribe(){const e=this._handleEntity.element,t=this._evtHandleEntityChanges;t.push(e.once("beforeremove",this._onHandleElementLose,this)),t.push(e.on("set:anchor",this._onSetHandleAlignment,this)),t.push(e.on("set:margin",this._onSetHandleAlignment,this)),t.push(e.on("set:pivot",this._onSetHandleAlignment,this))}_handleEntityElementUnsubscribe(){for(let e=0;e<this._evtHandleEntityChanges.length;e++)this._evtHandleEntityChanges[e].off();this._evtHandleEntityChanges.length=0}_onHandleElementGain(){this._handleEntityElementSubscribe(),this._destroyDragHelper(),this._handleDragHelper=new Xc(this._handleEntity.element,this._getAxis()),this._handleDragHelper.on("drag:move",this._onHandleDrag,this),this._updateHandlePositionAndSize()}_onHandleElementLose(){this._handleEntityElementUnsubscribe(),this._destroyDragHelper()}_onHandleDrag(e){this._handleEntity&&this.enabled&&this.entity.enabled&&(this.value=this._handlePositionToScrollValue(e[this._getAxis()]))}_onSetValue(e,t,s){Math.abs(s-t)>1e-5&&(this.data.value=B.clamp(s,0,1),this._updateHandlePositionAndSize(),this.fire("set:value",this.data.value))}_onSetHandleSize(e,t,s){Math.abs(s-t)>1e-5&&(this.data.handleSize=B.clamp(s,0,1),this._updateHandlePositionAndSize())}_onSetHandleAlignment(){this._updateHandlePositionAndSize()}_onSetOrientation(e,t,s){s!==t&&this._handleEntity?.element&&(this._handleEntity.element[this._getOppositeDimension()]=0)}_updateHandlePositionAndSize(){const e=this._handleEntity,t=e?.element;if(e){const s=e.getLocalPosition();s[this._getAxis()]=this._getHandlePosition(),e.setLocalPosition(s)}t&&(t[this._getDimension()]=this._getHandleLength())}_handlePositionToScrollValue(e){return e*this._getSign()/this._getUsableTrackLength()}_scrollValueToHandlePosition(e){return e*this._getSign()*this._getUsableTrackLength()}_getUsableTrackLength(){return Math.max(this._getTrackLength()-this._getHandleLength(),.001)}_getTrackLength(){return this.entity.element?this.orientation===ce?this.entity.element.calculatedWidth:this.entity.element.calculatedHeight:0}_getHandleLength(){return this._getTrackLength()*this.handleSize}_getHandlePosition(){return this._scrollValueToHandlePosition(this.value)}_getSign(){return this.orientation===ce?1:-1}_getAxis(){return this.orientation===ce?"x":"y"}_getDimension(){return this.orientation===ce?"width":"height"}_getOppositeDimension(){return this.orientation===ce?"height":"width"}_destroyDragHelper(){this._handleDragHelper&&this._handleDragHelper.destroy()}_setHandleDraggingEnabled(e){this._handleDragHelper&&(this._handleDragHelper.enabled=e)}onEnable(){this._setHandleDraggingEnabled(!0)}onDisable(){this._setHandleDraggingEnabled(!1)}onRemove(){this._destroyDragHelper(),this._toggleLifecycleListeners("off")}resolveDuplicatedEntityReferenceProperties(e,t){e.handleEntity&&(this.handleEntity=t[e.handleEntity.getGuid()])}};ug.EVENT_SETVALUE="set:value";let Xp=ug;class LH{constructor(){this.enabled=!0,this.orientation=ce,this.value=0,this.handleSize=0,this.handleEntity=null}}const xy=[{name:"enabled",type:"boolean"},{name:"orientation",type:"number"},{name:"value",type:"number"},{name:"handleSize",type:"number"}];class IH extends qe{constructor(e){super(e),this.id="scrollbar",this.ComponentType=Xp,this.DataType=LH,this.schema=xy,this.on("add",this._onAddComponent,this),this.on("beforeremove",this._onRemoveComponent,this)}initializeComponentData(e,t,s){super.initializeComponentData(e,t,xy),e.handleEntity=t.handleEntity}_onAddComponent(e){e.fire("scrollbar:add")}_onRemoveComponent(e,t){t.onRemove()}}const MH={volume:0,pitch:0,loop:!1,startTime:0,duration:0,position:new x,maxDistance:0,refDistance:0,rollOffFactor:0,distanceModel:0,onPlay:null,onPause:null,onResume:null,onStop:null,onEnd:null},Zi=class Zi extends ne{constructor(e,t="Untitled",s={}){super(),this.instances=[],this._component=e,this._assets=e.system.app.assets,this._manager=e.system.manager,this.name=t,this._volume=s.volume!==void 0?B.clamp(Number(s.volume)||0,0,1):1,this._pitch=s.pitch!==void 0?Math.max(.01,Number(s.pitch)||0):1,this._loop=!!(s.loop!==void 0&&s.loop),this._duration=s.duration>0?s.duration:null,this._startTime=Math.max(0,Number(s.startTime)||0),this._overlap=!!s.overlap,this._autoPlay=!!s.autoPlay,this._firstNode=null,this._lastNode=null,this._asset=s.asset,this._asset instanceof ie&&(this._asset=this._asset.id),this._onInstancePlayHandler=this._onInstancePlay.bind(this),this._onInstancePauseHandler=this._onInstancePause.bind(this),this._onInstanceResumeHandler=this._onInstanceResume.bind(this),this._onInstanceStopHandler=this._onInstanceStop.bind(this),this._onInstanceEndHandler=this._onInstanceEnd.bind(this)}play(){if(this.overlap||this.stop(),!this.isLoaded&&!this._hasAsset())return;const e=this._createInstance();if(this.instances.push(e),this.isLoaded)e.play();else{const t=function(s){const i=e._playWhenLoaded;e.sound=s,i&&e.play()};this.off("load",t),this.once("load",t),this.load()}return e}pause(){let e=!1;const t=this.instances;for(let s=0,i=t.length;s<i;s++)t[s].pause()&&(e=!0);return e}resume(){let e=!1;const t=this.instances;for(let s=0,i=t.length;s<i;s++)t[s].resume()&&(e=!0);return e}stop(){let e=!1;const t=this.instances;let s=t.length;for(;s--;)t[s].stop(),e=!0;return t.length=0,e}load(){if(!this._hasAsset())return;const e=this._assets.get(this._asset);if(!e){this._assets.off(`add:${this._asset}`,this._onAssetAdd,this),this._assets.once(`add:${this._asset}`,this._onAssetAdd,this);return}if(e.off("remove",this._onAssetRemoved,this),e.on("remove",this._onAssetRemoved,this),!e.resource){e.off("load",this._onAssetLoad,this),e.once("load",this._onAssetLoad,this),this._assets.load(e);return}this.fire("load",e.resource)}setExternalNodes(e,t){if(!e){console.error("The firstNode must have a valid AudioNode");return}if(t||(t=e),this._firstNode=e,this._lastNode=t,!this._overlap){const s=this.instances;for(let i=0,r=s.length;i<r;i++)s[i].setExternalNodes(e,t)}}clearExternalNodes(){if(this._firstNode=null,this._lastNode=null,!this._overlap){const e=this.instances;for(let t=0,s=e.length;t<s;t++)e[t].clearExternalNodes()}}getExternalNodes(){return[this._firstNode,this._lastNode]}_hasAsset(){return this._asset!=null}_createInstance(){let e=null;const t=this._component;let s=null;if(this._hasAsset()){const r=this._assets.get(this._asset);r&&(s=r.resource)}const i=MH;return i.volume=this._volume*t.volume,i.pitch=this._pitch*t.pitch,i.loop=this._loop,i.startTime=this._startTime,i.duration=this._duration,i.onPlay=this._onInstancePlayHandler,i.onPause=this._onInstancePauseHandler,i.onResume=this._onInstanceResumeHandler,i.onStop=this._onInstanceStopHandler,i.onEnd=this._onInstanceEndHandler,t.positional?(i.position.copy(t.entity.getPosition()),i.maxDistance=t.maxDistance,i.refDistance=t.refDistance,i.rollOffFactor=t.rollOffFactor,i.distanceModel=t.distanceModel,e=new cn(this._manager,s,i)):e=new xi(this._manager,s,i),this._firstNode&&e.setExternalNodes(this._firstNode,this._lastNode),e}_onInstancePlay(e){this.fire("play",e),this._component.fire("play",this,e)}_onInstancePause(e){this.fire("pause",e),this._component.fire("pause",this,e)}_onInstanceResume(e){this.fire("resume",e),this._component.fire("resume",this,e)}_onInstanceStop(e){const t=this.instances.indexOf(e);t!==-1&&this.instances.splice(t,1),this.fire("stop",e),this._component.fire("stop",this,e)}_onInstanceEnd(e){const t=this.instances.indexOf(e);t!==-1&&this.instances.splice(t,1),this.fire("end",e),this._component.fire("end",this,e)}_onAssetAdd(e){this.load()}_onAssetLoad(e){this.load()}_onAssetRemoved(e){e.off("remove",this._onAssetRemoved,this),this._assets.off(`add:${e.id}`,this._onAssetAdd,this),this.stop()}updatePosition(e){const t=this.instances;for(let s=0,i=t.length;s<i;s++)t[s].position=e}set asset(e){const t=this._asset;if(t){this._assets.off(`add:${t}`,this._onAssetAdd,this);const s=this._assets.get(t);s&&s.off("remove",this._onAssetRemoved,this)}this._asset=e,this._asset instanceof ie&&(this._asset=this._asset.id),this._hasAsset()&&this._component.enabled&&this._component.entity.enabled&&this.load()}get asset(){return this._asset}set autoPlay(e){this._autoPlay=!!e}get autoPlay(){return this._autoPlay}set duration(e){if(this._duration=Math.max(0,Number(e)||0)||null,!this._overlap){const t=this.instances;for(let s=0,i=t.length;s<i;s++)t[s].duration=this._duration}}get duration(){let e=0;if(this._hasAsset()){const t=this._assets.get(this._asset);e=t?.resource?t.resource.duration:0}return this._duration!=null?this._duration%(e||1):e}get isLoaded(){if(this._hasAsset()){const e=this._assets.get(this._asset);if(e)return!!e.resource}return!1}get isPaused(){const e=this.instances,t=e.length;if(t===0)return!1;for(let s=0;s<t;s++)if(!e[s].isPaused)return!1;return!0}get isPlaying(){const e=this.instances;for(let t=0,s=e.length;t<s;t++)if(e[t].isPlaying)return!0;return!1}get isStopped(){const e=this.instances;for(let t=0,s=e.length;t<s;t++)if(!e[t].isStopped)return!1;return!0}set loop(e){this._loop=!!e;const t=this.instances;for(let s=0,i=t.length;s<i;s++)t[s].loop=this._loop}get loop(){return this._loop}set overlap(e){this._overlap=!!e}get overlap(){return this._overlap}set pitch(e){if(this._pitch=Math.max(Number(e)||0,.01),!this._overlap){const t=this.instances;for(let s=0,i=t.length;s<i;s++)t[s].pitch=this.pitch*this._component.pitch}}get pitch(){return this._pitch}set startTime(e){if(this._startTime=Math.max(0,Number(e)||0),!this._overlap){const t=this.instances;for(let s=0,i=t.length;s<i;s++)t[s].startTime=this._startTime}}get startTime(){return this._startTime}set volume(e){if(this._volume=B.clamp(Number(e)||0,0,1),!this._overlap){const t=this.instances;for(let s=0,i=t.length;s<i;s++)t[s].volume=this._volume*this._component.volume}}get volume(){return this._volume}};Zi.EVENT_PLAY="play",Zi.EVENT_PAUSE="pause",Zi.EVENT_RESUME="resume",Zi.EVENT_STOP="stop",Zi.EVENT_END="end",Zi.EVENT_LOAD="load";let Qo=Zi;const zr=class zr extends he{_updateSoundInstances(e,t,s){const i=this._slots;for(const r in i){const a=i[r];if(!a.overlap){const n=a.instances;for(let l=0,h=n.length;l<h;l++)n[l][e]=s?a[e]*t:t}}}set distanceModel(e){this._distanceModel=e,this._updateSoundInstances("distanceModel",e,!1)}get distanceModel(){return this._distanceModel}set maxDistance(e){this._maxDistance=e,this._updateSoundInstances("maxDistance",e,!1)}get maxDistance(){return this._maxDistance}set refDistance(e){this._refDistance=e,this._updateSoundInstances("refDistance",e,!1)}get refDistance(){return this._refDistance}set rollOffFactor(e){this._rollOffFactor=e,this._updateSoundInstances("rollOffFactor",e,!1)}get rollOffFactor(){return this._rollOffFactor}set pitch(e){this._pitch=e,this._updateSoundInstances("pitch",e,!0)}get pitch(){return this._pitch}set volume(e){this._volume=e,this._updateSoundInstances("volume",e,!0)}get volume(){return this._volume}set positional(e){this._positional=e;const t=this._slots;for(const s in t){const i=t[s];if(!i.overlap){const r=i.instances,a=r.length;for(let n=a-1;n>=0;n--){const l=r[n].isPlaying||r[n].isSuspended,h=r[n].currentTime;l&&r[n].stop();const c=i._createInstance();l&&(c.play(),c.currentTime=h),r.push(c)}}}}get positional(){return this._positional}set slots(e){const t=this._slots;if(t)for(const i in t)t[i].stop();const s={};for(const i in e)e[i]instanceof Qo?s[e[i].name]=e[i]:e[i].name&&(s[e[i].name]=new Qo(this,e[i].name,e[i]));this._slots=s,this.enabled&&this.entity.enabled&&this.onEnable()}get slots(){return this._slots}onEnable(){if(this.system._inTools)return;const e=this._slots,t=this._playingBeforeDisable;for(const s in e){const i=e[s];i.autoPlay&&i.isStopped?i.play():t[s]?i.resume():i.isLoaded||i.load()}}onDisable(){const e=this._slots,t={};for(const s in e)e[s].overlap||e[s].isPlaying&&(e[s].pause(),t[s]=!0);this._playingBeforeDisable=t}onRemove(){this.off()}addSlot(e,t){const s=this._slots;if(s[e])return null;const i=new Qo(this,e,t);return s[e]=i,i.autoPlay&&this.enabled&&this.entity.enabled&&i.play(),i}removeSlot(e){const t=this._slots;t[e]&&(t[e].stop(),delete t[e])}slot(e){return this._slots[e]}_getSlotProperty(e,t){if(!this.enabled||!this.entity.enabled)return;const s=this._slots[e];if(s)return s[t]}isPlaying(e){return this._getSlotProperty(e,"isPlaying")||!1}isLoaded(e){return this._getSlotProperty(e,"isLoaded")||!1}isPaused(e){return this._getSlotProperty(e,"isPaused")||!1}isStopped(e){return this._getSlotProperty(e,"isStopped")||!1}play(e){if(!this.enabled||!this.entity.enabled)return null;const t=this._slots[e];return t?t.play():null}pause(e){const t=this._slots;if(e){const s=t[e];if(!s)return;s.pause()}else for(const s in t)t[s].pause()}resume(e){const t=this._slots;if(e){const s=t[e];if(!s)return;s.isPaused&&s.resume()}else for(const s in t)t[s].resume()}stop(e){const t=this._slots;if(e){const s=t[e];if(!s)return;s.stop()}else for(const s in t)t[s].stop()}constructor(...e){super(...e),this._volume=1,this._pitch=1,this._positional=!0,this._refDistance=1,this._maxDistance=1e4,this._rollOffFactor=1,this._distanceModel=C_,this._slots={},this._playingBeforeDisable={}}};zr.EVENT_PLAY="play",zr.EVENT_PAUSE="pause",zr.EVENT_RESUME="resume",zr.EVENT_STOP="stop",zr.EVENT_END="end";let qc=zr;class DH{constructor(){this.enabled=!0}}const pE=["enabled"];class RH extends qe{constructor(e){super(e),this.id="sound",this.ComponentType=qc,this.DataType=DH,this.schema=pE,this.manager=e.soundManager,this.app.systems.on("update",this.onUpdate,this),this.on("beforeremove",this.onBeforeRemove,this)}set volume(e){this.manager.volume=e}get volume(){return this.manager.volume}get context(){return Hl()?this.manager.context:null}initializeComponentData(e,t,s){s=["volume","pitch","positional","refDistance","maxDistance","rollOffFactor","distanceModel","slots"];for(let i=0;i<s.length;i++)t.hasOwnProperty(s[i])&&(e[s[i]]=t[s[i]]);super.initializeComponentData(e,t,["enabled"])}cloneComponent(e,t){const s=e.sound,i=s.slots,r={};for(const n in i){const l=i[n];r[n]={name:l.name,volume:l.volume,pitch:l.pitch,loop:l.loop,duration:l.duration,startTime:l.startTime,overlap:l.overlap,autoPlay:l.autoPlay,asset:l.asset}}const a={distanceModel:s.distanceModel,enabled:s.enabled,maxDistance:s.maxDistance,pitch:s.pitch,positional:s.positional,refDistance:s.refDistance,rollOffFactor:s.rollOffFactor,slots:r,volume:s.volume};return this.addComponent(t,a)}onUpdate(e){const t=this.store;for(const s in t)if(t.hasOwnProperty(s)){const r=t[s].entity;if(r.enabled){const a=r.sound;if(a.enabled&&a.positional){const n=r.getPosition(),l=a.slots;for(const h in l)l[h].updatePosition(n)}}}}onBeforeRemove(e,t){const s=t.slots;for(const i in s)s[i].overlap||s[i].stop();t.onRemove()}destroy(){super.destroy(),this.app.systems.off("update",this.onUpdate,this)}}he._buildAccessors(qc.prototype,pE);const Ey="simple",Ay="animated",Qi=class Qi extends ne{constructor(e,t){super(),this._evtSetMeshes=null,this._component=e,this._frame=0,this._sprite=null,this._spriteAsset=null,this.spriteAsset=t.spriteAsset,this.name=t.name,this.fps=t.fps||0,this.loop=t.loop||!1,this._playing=!1,this._paused=!1,this._time=0}get duration(){if(this._sprite){const e=this.fps||Number.MIN_VALUE;return this._sprite.frameKeys.length/Math.abs(e)}return 0}set frame(e){this._setFrame(e);const t=this.fps||Number.MIN_VALUE;this._setTime(this._frame/t)}get frame(){return this._frame}get isPaused(){return this._paused}get isPlaying(){return this._playing}set sprite(e){if(this._sprite&&(this._evtSetMeshes?.off(),this._evtSetMeshes=null,this._sprite.off("set:pixelsPerUnit",this._onSpritePpuChanged,this),this._sprite.off("set:atlas",this._onSpriteMeshesChange,this),this._sprite.atlas&&this._sprite.atlas.off("set:texture",this._onSpriteMeshesChange,this)),this._sprite=e,this._sprite&&(this._evtSetMeshes=this._sprite.on("set:meshes",this._onSpriteMeshesChange,this),this._sprite.on("set:pixelsPerUnit",this._onSpritePpuChanged,this),this._sprite.on("set:atlas",this._onSpriteMeshesChange,this),this._sprite.atlas&&this._sprite.atlas.on("set:texture",this._onSpriteMeshesChange,this)),this._component.currentClip===this){let t;!e||!e.atlas?(t=this._component._meshInstance,t&&(t.deleteParameter("texture_emissiveMap"),t.deleteParameter("texture_opacityMap")),this._component._hideModel()):(e.atlas.texture&&(t=this._component._meshInstance,t&&(t.setParameter("texture_emissiveMap",e.atlas.texture),t.setParameter("texture_opacityMap",e.atlas.texture)),this._component.enabled&&this._component.entity.enabled&&this._component._showModel()),this.time&&this.fps?this.time=this.time:this.frame=this.frame)}}get sprite(){return this._sprite}set spriteAsset(e){const t=this._component.system.app.assets;let s=e;if(e instanceof ie&&(s=e.id),this._spriteAsset!==s){if(this._spriteAsset){const i=t.get(this._spriteAsset);i&&this._unbindSpriteAsset(i)}if(this._spriteAsset=s,this._spriteAsset){const i=t.get(this._spriteAsset);i?this._bindSpriteAsset(i):(this.sprite=null,t.on(`add:${this._spriteAsset}`,this._onSpriteAssetAdded,this))}else this.sprite=null}}get spriteAsset(){return this._spriteAsset}set time(e){this._setTime(e),this._sprite?this.frame=Math.min(this._sprite.frameKeys.length-1,Math.floor(this._time*Math.abs(this.fps))):this.frame=0}get time(){return this._time}_onSpriteAssetAdded(e){this._component.system.app.assets.off(`add:${e.id}`,this._onSpriteAssetAdded,this),this._spriteAsset===e.id&&this._bindSpriteAsset(e)}_bindSpriteAsset(e){e.on("load",this._onSpriteAssetLoad,this),e.on("remove",this._onSpriteAssetRemove,this),e.resource?this._onSpriteAssetLoad(e):this._component.system.app.assets.load(e)}_unbindSpriteAsset(e){e&&(e.off("load",this._onSpriteAssetLoad,this),e.off("remove",this._onSpriteAssetRemove,this),e.resource&&!e.resource.atlas&&this._component.system.app.assets.off(`load:${e.data.textureAtlasAsset}`,this._onTextureAtlasLoad,this))}_onSpriteAssetLoad(e){if(!e.resource)this.sprite=null;else if(e.resource.atlas)this.sprite=e.resource;else{const t=e.data.textureAtlasAsset,s=this._component.system.app.assets;s.off(`load:${t}`,this._onTextureAtlasLoad,this),s.once(`load:${t}`,this._onTextureAtlasLoad,this)}}_onTextureAtlasLoad(e){const t=this._spriteAsset;t instanceof ie?this._onSpriteAssetLoad(t):this._onSpriteAssetLoad(this._component.system.app.assets.get(t))}_onSpriteAssetRemove(e){this.sprite=null}_onSpriteMeshesChange(){this._component.currentClip===this&&this._component._showFrame(this.frame)}_onSpritePpuChanged(){this._component.currentClip===this&&this.sprite.renderMode!==Ws&&this._component._showFrame(this.frame)}_update(e){if(this.fps===0||!this._playing||this._paused||!this._sprite)return;const t=this.fps<0?-1:1,s=this._time+e*this._component.speed*t,i=this.duration,r=s>i||s<0;this._setTime(s);let a=this.frame;this._sprite?a=Math.floor(this._sprite.frameKeys.length*this._time/i):a=0,a!==this._frame&&this._setFrame(a),r&&(this.loop?(this.fire("loop"),this._component.fire("loop",this)):(this._playing=!1,this._paused=!1,this.fire("end"),this._component.fire("end",this)))}_setTime(e){this._time=e;const t=this.duration;this._time<0?this.loop?this._time=this._time%t+t:this._time=0:this._time>t&&(this.loop?this._time%=t:this._time=t)}_setFrame(e){this._sprite?this._frame=B.clamp(e,0,this._sprite.frameKeys.length-1):this._frame=e,this._component.currentClip===this&&this._component._showFrame(this._frame)}_destroy(){if(this._spriteAsset){const e=this._component.system.app.assets;this._unbindSpriteAsset(e.get(this._spriteAsset))}this._sprite&&(this.sprite=null),this._spriteAsset&&(this.spriteAsset=null)}play(){this._playing||(this._playing=!0,this._paused=!1,this.frame=0,this.fire("play"),this._component.fire("play",this))}pause(){!this._playing||this._paused||(this._paused=!0,this.fire("pause"),this._component.fire("pause",this))}resume(){this._paused&&(this._paused=!1,this.fire("resume"),this._component.fire("resume",this))}stop(){this._playing&&(this._playing=!1,this._paused=!1,this._time=0,this.frame=0,this.fire("stop"),this._component.fire("stop",this))}};Qi.EVENT_PLAY="play",Qi.EVENT_PAUSE="pause",Qi.EVENT_RESUME="resume",Qi.EVENT_STOP="stop",Qi.EVENT_END="end",Qi.EVENT_LOOP="loop";let Jo=Qi;const by="texture_emissiveMap",wy="texture_opacityMap",Cy="material_emissive",Py="material_opacity",OH="innerOffset",NH="outerScale",FH="atlasRect",Ji=class Ji extends he{constructor(e,t){super(e,t),this._evtLayersChanged=null,this._evtLayerAdded=null,this._evtLayerRemoved=null,this._type=Ey,this._material=e.defaultMaterial,this._color=new q(1,1,1,1),this._colorUniform=new Float32Array(3),this._speed=1,this._flipX=!1,this._flipY=!1,this._width=1,this._height=1,this._drawOrder=0,this._layers=[Ni],this._outerScale=new z(1,1),this._outerScaleUniform=new Float32Array(2),this._innerOffset=new K,this._innerOffsetUniform=new Float32Array(4),this._atlasRect=new K,this._atlasRectUniform=new Float32Array(4),this._batchGroupId=-1,this._batchGroup=null,this._node=new ze,this._model=new Fi,this._model.graph=this._node,this._meshInstance=null,t.addChild(this._model.graph),this._model._entity=t,this._updateAabbFunc=this._updateAabb.bind(this),this._addedModel=!1,this._autoPlayClip=null,this._clips={},this._defaultClip=new Jo(this,{name:this.entity.name,fps:0,loop:!1,spriteAsset:null}),this._currentClip=this._defaultClip}set type(e){this._type!==e&&(this._type=e,this._type===Ey?(this.stop(),this._currentClip=this._defaultClip,this.enabled&&this.entity.enabled&&(this._currentClip.frame=this.frame,this._currentClip.sprite?this._showModel():this._hideModel())):this._type===Ay&&(this.stop(),this._autoPlayClip&&this._tryAutoPlay(),this._currentClip&&this._currentClip.isPlaying&&this.enabled&&this.entity.enabled?this._showModel():this._hideModel()))}get type(){return this._type}set frame(e){this._currentClip.frame=e}get frame(){return this._currentClip.frame}set spriteAsset(e){this._defaultClip.spriteAsset=e}get spriteAsset(){return this._defaultClip._spriteAsset}set sprite(e){this._currentClip.sprite=e}get sprite(){return this._currentClip.sprite}set material(e){this._material=e,this._meshInstance&&(this._meshInstance.material=e)}get material(){return this._material}set color(e){this._color.r=e.r,this._color.g=e.g,this._color.b=e.b,this._meshInstance&&(this._colorUniform[0]=this._color.r,this._colorUniform[1]=this._color.g,this._colorUniform[2]=this._color.b,this._meshInstance.setParameter(Cy,this._colorUniform))}get color(){return this._color}set opacity(e){this._color.a=e,this._meshInstance&&this._meshInstance.setParameter(Py,e)}get opacity(){return this._color.a}set clips(e){if(!e){for(const t in this._clips)this.removeClip(t);return}for(const t in this._clips){let s=!1;for(const i in e)if(e[i].name===t){s=!0,this._clips[t].fps=e[i].fps,this._clips[t].loop=e[i].loop,e[i].hasOwnProperty("sprite")?this._clips[t].sprite=e[i].sprite:e[i].hasOwnProperty("spriteAsset")&&(this._clips[t].spriteAsset=e[i].spriteAsset);break}s||this.removeClip(t)}for(const t in e)this._clips[e[t].name]||this.addClip(e[t]);this._autoPlayClip&&this._tryAutoPlay(),(!this._currentClip||!this._currentClip.sprite)&&this._hideModel()}get clips(){return this._clips}get currentClip(){return this._currentClip}set speed(e){this._speed=e}get speed(){return this._speed}set flipX(e){this._flipX!==e&&(this._flipX=e,this._updateTransform())}get flipX(){return this._flipX}set flipY(e){this._flipY!==e&&(this._flipY=e,this._updateTransform())}get flipY(){return this._flipY}set width(e){e!==this._width&&(this._width=e,this._outerScale.x=this._width,this.sprite&&(this.sprite.renderMode===rt||this.sprite.renderMode===it)&&this._updateTransform())}get width(){return this._width}set height(e){e!==this._height&&(this._height=e,this._outerScale.y=this.height,this.sprite&&(this.sprite.renderMode===rt||this.sprite.renderMode===it)&&this._updateTransform())}get height(){return this._height}set batchGroupId(e){if(this._batchGroupId===e)return;const t=this._batchGroupId;this._batchGroupId=e,this.entity.enabled&&t>=0&&this.system.app.batcher?.remove(nt.SPRITE,t,this.entity),this.entity.enabled&&e>=0?this.system.app.batcher?.insert(nt.SPRITE,e,this.entity):t>=0&&this._currentClip&&this._currentClip.sprite&&this.enabled&&this.entity.enabled&&this._showModel()}get batchGroupId(){return this._batchGroupId}set autoPlayClip(e){this._autoPlayClip=e instanceof Jo?e.name:e,this._tryAutoPlay()}get autoPlayClip(){return this._autoPlayClip}set drawOrder(e){this._drawOrder=e,this._meshInstance&&(this._meshInstance.drawOrder=e)}get drawOrder(){return this._drawOrder}set layers(e){this._addedModel&&this._hideModel(),this._layers=e,this._meshInstance&&this.enabled&&this.entity.enabled&&this._showModel()}get layers(){return this._layers}get aabb(){return this._meshInstance?this._meshInstance.aabb:null}onEnable(){const e=this.system.app,t=e.scene,s=t.layers;this._evtLayersChanged=t.on("set:layers",this._onLayersChanged,this),s&&(this._evtLayerAdded=s.on("add",this._onLayerAdded,this),this._evtLayerRemoved=s.on("remove",this._onLayerRemoved,this)),this._showModel(),this._autoPlayClip&&this._tryAutoPlay(),this._batchGroupId>=0&&e.batcher?.insert(nt.SPRITE,this._batchGroupId,this.entity)}onDisable(){const e=this.system.app,s=e.scene.layers;this._evtLayersChanged?.off(),this._evtLayersChanged=null,s&&(this._evtLayerAdded?.off(),this._evtLayerAdded=null,this._evtLayerRemoved?.off(),this._evtLayerRemoved=null),this.stop(),this._hideModel(),this._batchGroupId>=0&&e.batcher?.remove(nt.SPRITE,this._batchGroupId,this.entity)}onDestroy(){this._currentClip=null,this._defaultClip&&(this._defaultClip._destroy(),this._defaultClip=null);for(const e in this._clips)this._clips[e]._destroy();this._clips=null,this._hideModel(),this._model=null,this._node?.remove(),this._node=null,this._meshInstance&&(this._meshInstance.material=null,this._meshInstance.mesh=null,this._meshInstance=null)}_showModel(){if(this._addedModel||!this._meshInstance)return;const e=[this._meshInstance];for(let t=0,s=this._layers.length;t<s;t++){const i=this.system.app.scene.layers.getLayerById(this._layers[t]);i&&i.addMeshInstances(e)}this._addedModel=!0}_hideModel(){if(!this._addedModel||!this._meshInstance)return;const e=[this._meshInstance];for(let t=0,s=this._layers.length;t<s;t++){const i=this.system.app.scene.layers.getLayerById(this._layers[t]);i&&i.removeMeshInstances(e)}this._addedModel=!1}_showFrame(e){if(!this.sprite)return;const t=this.sprite.meshes[e];if(!t){this._meshInstance&&(this._meshInstance.mesh=null,this._meshInstance.visible=!1);return}let s;if(this.sprite.renderMode===it?s=this.system.default9SlicedMaterialSlicedMode:this.sprite.renderMode===rt?s=this.system.default9SlicedMaterialTiledMode:s=this.system.defaultMaterial,this._meshInstance||(this._meshInstance=new Oe(t,this._material,this._node),this._meshInstance.castShadow=!1,this._meshInstance.receiveShadow=!1,this._meshInstance.drawOrder=this._drawOrder,this._model.meshInstances.push(this._meshInstance),this._colorUniform[0]=this._color.r,this._colorUniform[1]=this._color.g,this._colorUniform[2]=this._color.b,this._meshInstance.setParameter(Cy,this._colorUniform),this._meshInstance.setParameter(Py,this._color.a),this.enabled&&this.entity.enabled&&this._showModel()),this._meshInstance.material!==s&&(this._meshInstance.material=s),this._meshInstance.mesh!==t&&(this._meshInstance.mesh=t,this._meshInstance.visible=!0,this._meshInstance._aabbVer=-1),this.sprite.atlas&&this.sprite.atlas.texture?(this._meshInstance.setParameter(by,this.sprite.atlas.texture),this._meshInstance.setParameter(wy,this.sprite.atlas.texture)):(this._meshInstance.deleteParameter(by),this._meshInstance.deleteParameter(wy)),this.sprite.atlas&&(this.sprite.renderMode===it||this.sprite.renderMode===rt)){this._meshInstance._updateAabbFunc=this._updateAabbFunc;const i=this.sprite.atlas.frames[this.sprite.frameKeys[e]];if(i){const r=2/i.rect.z,a=2/i.rect.w;this._innerOffset.set(i.border.x*r,i.border.y*a,i.border.z*r,i.border.w*a);const n=this.sprite.atlas.texture;this._atlasRect.set(i.rect.x/n.width,i.rect.y/n.height,i.rect.z/n.width,i.rect.w/n.height)}else this._innerOffset.set(0,0,0,0);this._innerOffsetUniform[0]=this._innerOffset.x,this._innerOffsetUniform[1]=this._innerOffset.y,this._innerOffsetUniform[2]=this._innerOffset.z,this._innerOffsetUniform[3]=this._innerOffset.w,this._meshInstance.setParameter(OH,this._innerOffsetUniform),this._atlasRectUniform[0]=this._atlasRect.x,this._atlasRectUniform[1]=this._atlasRect.y,this._atlasRectUniform[2]=this._atlasRect.z,this._atlasRectUniform[3]=this._atlasRect.w,this._meshInstance.setParameter(FH,this._atlasRectUniform)}else this._meshInstance._updateAabbFunc=null;this._updateTransform()}_updateTransform(){let e=this.flipX?-1:1,t=this.flipY?-1:1,s=0,i=0;if(this.sprite&&(this.sprite.renderMode===it||this.sprite.renderMode===rt)){let r=1,a=1;if(this.sprite.atlas){const h=this.sprite.atlas.frames[this.sprite.frameKeys[this.frame]];h&&(r=h.rect.z,a=h.rect.w,s=(.5-h.pivot.x)*this._width,i=(.5-h.pivot.y)*this._height)}const n=r/this.sprite.pixelsPerUnit,l=a/this.sprite.pixelsPerUnit;this._outerScale.set(Math.max(this._width,this._innerOffset.x*n),Math.max(this._height,this._innerOffset.y*l)),e*=n,t*=l,this._outerScale.x/=n,this._outerScale.y/=l,e*=B.clamp(this._width/(this._innerOffset.x*n),1e-4,1),t*=B.clamp(this._height/(this._innerOffset.y*l),1e-4,1),this._meshInstance&&(this._outerScaleUniform[0]=this._outerScale.x,this._outerScaleUniform[1]=this._outerScale.y,this._meshInstance.setParameter(NH,this._outerScaleUniform))}this._node.setLocalScale(e,t,1),this._node.setLocalPosition(s,i,0)}_updateAabb(e){return e.center.set(0,0,0),e.halfExtents.set(this._outerScale.x*.5,this._outerScale.y*.5,.001),e.setFromTransformedAabb(e,this._node.getWorldTransform()),e}_tryAutoPlay(){if(!this._autoPlayClip||this.type!==Ay)return;const e=this._clips[this._autoPlayClip];e&&!e.isPlaying&&(!this._currentClip||!this._currentClip.isPlaying)&&this.enabled&&this.entity.enabled&&this.play(e.name)}_onLayersChanged(e,t){e.off("add",this.onLayerAdded,this),e.off("remove",this.onLayerRemoved,this),t.on("add",this.onLayerAdded,this),t.on("remove",this.onLayerRemoved,this),this.enabled&&this.entity.enabled&&this._showModel()}_onLayerAdded(e){this.layers.indexOf(e.id)<0||this._addedModel&&this.enabled&&this.entity.enabled&&this._meshInstance&&e.addMeshInstances([this._meshInstance])}_onLayerRemoved(e){!this._meshInstance||this.layers.indexOf(e.id)<0||e.removeMeshInstances([this._meshInstance])}removeModelFromLayers(){for(let e=0;e<this.layers.length;e++){const t=this.system.app.scene.layers.getLayerById(this.layers[e]);t&&t.removeMeshInstances([this._meshInstance])}}addClip(e){const t=new Jo(this,{name:e.name,fps:e.fps,loop:e.loop,spriteAsset:e.spriteAsset});return this._clips[e.name]=t,t.name&&t.name===this._autoPlayClip&&this._tryAutoPlay(),t}removeClip(e){delete this._clips[e]}clip(e){return this._clips[e]}play(e){const t=this._clips[e],s=this._currentClip;return s&&s!==t&&(s._playing=!1),this._currentClip=t,this._currentClip&&(this._currentClip=t,this._currentClip.play()),t}pause(){this._currentClip!==this._defaultClip&&this._currentClip.isPlaying&&this._currentClip.pause()}resume(){this._currentClip!==this._defaultClip&&this._currentClip.isPaused&&this._currentClip.resume()}stop(){this._currentClip!==this._defaultClip&&this._currentClip.stop()}};Ji.EVENT_PLAY="play",Ji.EVENT_PAUSE="pause",Ji.EVENT_RESUME="resume",Ji.EVENT_STOP="stop",Ji.EVENT_END="end",Ji.EVENT_LOOP="loop";let Yc=Ji;class kH{constructor(){this.enabled=!0}}const mE=["enabled"];class UH extends qe{constructor(e){super(e),this.id="sprite",this.ComponentType=Yc,this.DataType=kH,this.schema=mE,this._defaultTexture=null,this._defaultMaterial=null,this._default9SlicedMaterialSlicedMode=null,this._default9SlicedMaterialTiledMode=null,this.app.systems.on("update",this.onUpdate,this),this.on("beforeremove",this.onBeforeRemove,this)}set defaultMaterial(e){this._defaultMaterial=e}get defaultMaterial(){if(!this._defaultMaterial){const e=new ae(this.app.graphicsDevice,{width:1,height:1,format:zt,name:"sprite"}),t=new Uint8Array(e.lock());t[0]=t[1]=t[2]=t[3]=255,e.unlock();const s=new bs;s.diffuse.set(0,0,0),s.emissive.set(1,1,1),s.emissiveMap=e,s.opacityMap=e,s.opacityMapChannel="a",s.useLighting=!1,s.useTonemap=!1,s.useFog=!1,s.useSkybox=!1,s.blendType=pa,s.depthWrite=!1,s.pixelSnap=!1,s.cull=lt,s.update(),this._defaultTexture=e,this._defaultMaterial=s}return this._defaultMaterial}set default9SlicedMaterialSlicedMode(e){this._default9SlicedMaterialSlicedMode=e}get default9SlicedMaterialSlicedMode(){if(!this._default9SlicedMaterialSlicedMode){const e=this.defaultMaterial.clone();e.nineSlicedMode=it,e.update(),this._default9SlicedMaterialSlicedMode=e}return this._default9SlicedMaterialSlicedMode}set default9SlicedMaterialTiledMode(e){this._default9SlicedMaterialTiledMode=e}get default9SlicedMaterialTiledMode(){if(!this._default9SlicedMaterialTiledMode){const e=this.defaultMaterial.clone();e.nineSlicedMode=rt,e.update(),this._default9SlicedMaterialTiledMode=e}return this._default9SlicedMaterialTiledMode}destroy(){super.destroy(),this.app.systems.off("update",this.onUpdate,this),this._defaultTexture&&(this._defaultTexture.destroy(),this._defaultTexture=null)}initializeComponentData(e,t,s){if(t.enabled!==void 0&&(e.enabled=t.enabled),e.type=t.type,t.layers&&Array.isArray(t.layers)&&(e.layers=t.layers.slice(0)),t.drawOrder!==void 0&&(e.drawOrder=t.drawOrder),t.color!==void 0&&(t.color instanceof q?e.color.set(t.color.r,t.color.g,t.color.b,t.opacity??1):e.color.set(t.color[0],t.color[1],t.color[2],t.opacity??1),e.color=e.color),t.opacity!==void 0&&(e.opacity=t.opacity),t.flipX!==void 0&&(e.flipX=t.flipX),t.flipY!==void 0&&(e.flipY=t.flipY),t.width!==void 0&&(e.width=t.width),t.height!==void 0&&(e.height=t.height),t.spriteAsset!==void 0&&(e.spriteAsset=t.spriteAsset),t.sprite&&(e.sprite=t.sprite),t.frame!==void 0&&(e.frame=t.frame),t.clips)for(const i in t.clips)e.addClip(t.clips[i]);t.speed!==void 0&&(e.speed=t.speed),t.autoPlayClip&&(e.autoPlayClip=t.autoPlayClip),e.batchGroupId=t.batchGroupId===void 0||t.batchGroupId===null?-1:t.batchGroupId,super.initializeComponentData(e,t,s)}cloneComponent(e,t){const s=e.sprite;return this.addComponent(t,{enabled:s.enabled,type:s.type,spriteAsset:s.spriteAsset,sprite:s.sprite,width:s.width,height:s.height,frame:s.frame,color:s.color.clone(),opacity:s.opacity,flipX:s.flipX,flipY:s.flipY,speed:s.speed,clips:s.clips,autoPlayClip:s.autoPlayClip,batchGroupId:s.batchGroupId,drawOrder:s.drawOrder,layers:s.layers.slice(0)})}onUpdate(e){const t=this.store;for(const s in t)if(t.hasOwnProperty(s)){const i=t[s];if(i.data.enabled&&i.entity.enabled){const r=i.entity.sprite;r._currentClip&&r._currentClip._update(e)}}}onBeforeRemove(e,t){t.onDestroy()}}he._buildAccessors(Yc.prototype,mE);const An=class An extends he{constructor(e,t){super(e,t),this._oldState=!0,this._size=new x,this.on("set_enabled",this._onSetEnabled,this)}set size(e){e instanceof x?this._size.copy(e):e instanceof Array&&e.length>=3&&this.size.set(e[0],e[1],e[2])}get size(){return this._size}onEnable(){this._checkState()}onDisable(){this._checkState()}_onSetEnabled(e,t,s){this._checkState()}_checkState(){const e=this.enabled&&this.entity.enabled;e!==this._oldState&&(this._oldState=e,this.fire("enable"),this.fire("state",this.enabled))}_onBeforeRemove(){this.fire("remove")}};An.EVENT_ENABLE="enable",An.EVENT_DISABLE="disable",An.EVENT_STATE="state",An.EVENT_REMOVE="remove";let jc=An;class BH{constructor(){this.enabled=!0}}const _E=["enabled"];class VH extends qe{constructor(e){super(e),this.id="zone",this.ComponentType=jc,this.DataType=BH,this.schema=_E,this.on("beforeremove",this._onBeforeRemove,this)}initializeComponentData(e,t,s){e.enabled=t.hasOwnProperty("enabled")?!!t.enabled:!0,t.size&&(t.size instanceof x?e.size.copy(t.size):t.size instanceof Array&&t.size.length>=3&&e.size.set(t.size[0],t.size[1],t.size[2]))}cloneComponent(e,t){const s={enabled:e.zone.enabled,size:e.zone.size};return this.addComponent(t,s)}_onBeforeRemove(e,t){t._onBeforeRemove()}}he._buildAccessors(jc.prototype,_E);class zH{constructor(e,t){this.effect=e,this.inputTarget=t,this.outputTarget=null,this.name=e.constructor.name}}class HH{constructor(e,t){this.app=e,this.camera=t,this.destinationRenderTarget=null,this.effects=[],this.enabled=!1,this.depthTarget=null,t.on("set:rect",this.onCameraRectChanged,this)}_allocateColorBuffer(e,t){const s=this.camera.rect,i=this.destinationRenderTarget,r=this.app.graphicsDevice,a=Math.floor(s.z*(i?.width??r.width)),n=Math.floor(s.w*(i?.height??r.height));return new ae(r,{name:t,format:e,width:a,height:n,mipmaps:!1,minFilter:pe,magFilter:pe,addressU:te,addressV:te})}_createOffscreenTarget(e,t){const s=this.app.graphicsDevice,r=(this.destinationRenderTarget??s.backBuffer).isColorBufferSrgb(0),a=(t&&s.getRenderableHdrFormat([et,ft],!0))??(r?zt:Ae),n=`${this.camera.entity.name}-posteffect-${this.effects.length}`,l=this._allocateColorBuffer(a,n);return new ct({colorBuffer:l,depth:e,stencil:e&&this.app.graphicsDevice.supportsStencil,samples:e?s.samples:1})}_resizeOffscreenTarget(e){const t=e.colorBuffer.format,s=e.colorBuffer.name;e.destroyFrameBuffers(),e.destroyTextureBuffers(),e._colorBuffer=this._allocateColorBuffer(t,s),e._colorBuffers=[e._colorBuffer]}_destroyOffscreenTarget(e){e.destroyTextureBuffers(),e.destroy()}addEffect(e){const t=this.effects,s=t.length===0,i=this._createOffscreenTarget(s,e.hdr),r=new zH(e,i);t.push(r),this._sourceTarget=r.inputTarget,t.length>1&&(t[t.length-2].outputTarget=r.inputTarget),this._newPostEffect=e,e.needsDepthBuffer&&this._requestDepthMap(),this.enable(),this._newPostEffect=void 0}removeEffect(e){let t=-1;for(let s=0,i=this.effects.length;s<i;s++)if(this.effects[s].effect===e){t=s;break}t>=0&&(t>0?this.effects[t-1].outputTarget=t+1<this.effects.length?this.effects[t+1].inputTarget:null:this.effects.length>1&&(this.effects[1].inputTarget._depth||(this._destroyOffscreenTarget(this.effects[1].inputTarget),this.effects[1].inputTarget=this._createOffscreenTarget(!0,this.effects[1].hdr),this._sourceTarget=this.effects[1].inputTarget),this.camera.renderTarget=this.effects[1].inputTarget),this._destroyOffscreenTarget(this.effects[t].inputTarget),this.effects.splice(t,1)),this.enabled&&e.needsDepthBuffer&&this._releaseDepthMap(),this.effects.length===0&&this.disable()}_requestDepthMaps(){for(let e=0,t=this.effects.length;e<t;e++){const s=this.effects[e].effect;this._newPostEffect!==s&&s.needsDepthBuffer&&this._requestDepthMap()}}_releaseDepthMaps(){for(let e=0,t=this.effects.length;e<t;e++)this.effects[e].effect.needsDepthBuffer&&this._releaseDepthMap()}_requestDepthMap(){const e=this.app.scene.layers.getLayerById(kt);e&&(e.incrementCounter(),this.camera.requestSceneDepthMap(!0))}_releaseDepthMap(){const e=this.app.scene.layers.getLayerById(kt);e&&(e.decrementCounter(),this.camera.requestSceneDepthMap(!1))}destroy(){for(let e=0,t=this.effects.length;e<t;e++)this.effects[e].inputTarget.destroy();this.effects.length=0,this.disable()}enable(){!this.enabled&&this.effects.length&&(this.enabled=!0,this._requestDepthMaps(),this.app.graphicsDevice.on("resizecanvas",this._onCanvasResized,this),this.destinationRenderTarget=this.camera.renderTarget,this.camera.renderTarget=this.effects[0].inputTarget,this.camera.onPostprocessing=()=>{if(this.enabled){let e=null;const t=this.effects.length;if(t)for(let s=0;s<t;s++){const i=this.effects[s];let r=i.outputTarget;s===t-1&&(e=this.camera.rect,this.destinationRenderTarget&&(r=this.destinationRenderTarget)),i.effect.render(i.inputTarget,r,e)}}})}disable(){this.enabled&&(this.enabled=!1,this.app.graphicsDevice.off("resizecanvas",this._onCanvasResized,this),this._releaseDepthMaps(),this._destroyOffscreenTarget(this._sourceTarget),this.camera.renderTarget=this.destinationRenderTarget,this.camera.onPostprocessing=null)}_onCanvasResized(e,t){const s=this.camera.rect,i=this.destinationRenderTarget;e=i?.width??e,t=i?.height??t,this.camera.camera.aspectRatio=e*s.z/(t*s.w),this.resizeRenderTargets()}resizeRenderTargets(){const e=this.app.graphicsDevice,t=this.destinationRenderTarget,s=t?.width??e.width,i=t?.height??e.height,r=this.camera.rect,a=Math.floor(r.z*s),n=Math.floor(r.w*i),l=this.effects;for(let h=0,c=l.length;h<c;h++){const d=l[h];(d.inputTarget.width!==a||d.inputTarget.height!==n)&&this._resizeOffscreenTarget(d.inputTarget)}}onCameraRectChanged(e,t,s){this.enabled&&this.resizeRenderTargets()}}class gE extends he{constructor(e,t){super(e,t),this.onPostprocessing=null,this._renderSceneDepthMap=0,this._renderSceneColorMap=0,this._sceneDepthMapRequested=!1,this._sceneColorMapRequested=!1,this._priority=0,this._disablePostEffectsLayer=sf,this._camera=new Xl,this._evtLayersChanged=null,this._evtLayerAdded=null,this._evtLayerRemoved=null,this._camera.node=t,this._postEffects=new HH(e.app,this)}setShaderPass(e){const t=Js.get(this.system.app.graphicsDevice),s=e?t.allocate(e,{isForward:!0}):null;return this._camera.shaderPassInfo=s,s.index}getShaderPass(){return this._camera.shaderPassInfo?.name}set renderPasses(e){this._camera.renderPasses=e||[],this.dirtyLayerCompositionCameras(),this.system.app.scene.updateShaders=!0}get renderPasses(){return this._camera.renderPasses}get shaderParams(){return this._camera.shaderParams}set gammaCorrection(e){this.camera.shaderParams.gammaCorrection=e}get gammaCorrection(){return this.camera.shaderParams.gammaCorrection}set toneMapping(e){this.camera.shaderParams.toneMapping=e}get toneMapping(){return this.camera.shaderParams.toneMapping}set fog(e){this._camera.fogParams=e}get fog(){return this._camera.fogParams}set aperture(e){this._camera.aperture=e}get aperture(){return this._camera.aperture}set aspectRatio(e){this._camera.aspectRatio=e}get aspectRatio(){return this._camera.aspectRatio}set aspectRatioMode(e){this._camera.aspectRatioMode=e}get aspectRatioMode(){return this._camera.aspectRatioMode}set calculateProjection(e){this._camera.calculateProjection=e}get calculateProjection(){return this._camera.calculateProjection}set calculateTransform(e){this._camera.calculateTransform=e}get calculateTransform(){return this._camera.calculateTransform}get camera(){return this._camera}set clearColor(e){this._camera.clearColor=e}get clearColor(){return this._camera.clearColor}set clearColorBuffer(e){this._camera.clearColorBuffer=e,this.dirtyLayerCompositionCameras()}get clearColorBuffer(){return this._camera.clearColorBuffer}set clearDepthBuffer(e){this._camera.clearDepthBuffer=e,this.dirtyLayerCompositionCameras()}get clearDepthBuffer(){return this._camera.clearDepthBuffer}set clearStencilBuffer(e){this._camera.clearStencilBuffer=e,this.dirtyLayerCompositionCameras()}get clearStencilBuffer(){return this._camera.clearStencilBuffer}set cullFaces(e){this._camera.cullFaces=e}get cullFaces(){return this._camera.cullFaces}set disablePostEffectsLayer(e){this._disablePostEffectsLayer=e,this.dirtyLayerCompositionCameras()}get disablePostEffectsLayer(){return this._disablePostEffectsLayer}set farClip(e){this._camera.farClip=e}get farClip(){return this._camera.farClip}set flipFaces(e){this._camera.flipFaces=e}get flipFaces(){return this._camera.flipFaces}set fov(e){this._camera.fov=e}get fov(){return this._camera.fov}get frustum(){return this._camera.frustum}set frustumCulling(e){this._camera.frustumCulling=e}get frustumCulling(){return this._camera.frustumCulling}set horizontalFov(e){this._camera.horizontalFov=e}get horizontalFov(){return this._camera.horizontalFov}set layers(e){const t=this._camera.layers,s=this.system.app.scene;t.forEach(i=>{s.layers.getLayerById(i)?.removeCamera(this)}),this._camera.layers=e,this.enabled&&this.entity.enabled&&e.forEach(i=>{s.layers.getLayerById(i)?.addCamera(this)}),this.fire("set:layers")}get layers(){return this._camera.layers}get layersSet(){return this._camera.layersSet}set jitter(e){this._camera.jitter=e}get jitter(){return this._camera.jitter}set nearClip(e){this._camera.nearClip=e}get nearClip(){return this._camera.nearClip}set orthoHeight(e){this._camera.orthoHeight=e}get orthoHeight(){return this._camera.orthoHeight}get postEffects(){return this._postEffects}get postEffectsEnabled(){return this._postEffects.enabled}set priority(e){this._priority=e,this.dirtyLayerCompositionCameras()}get priority(){return this._priority}set projection(e){this._camera.projection=e}get projection(){return this._camera.projection}get projectionMatrix(){return this._camera.projectionMatrix}set rect(e){this._camera.rect=e,this.fire("set:rect",this._camera.rect)}get rect(){return this._camera.rect}set renderSceneColorMap(e){e&&!this._sceneColorMapRequested?(this.requestSceneColorMap(!0),this._sceneColorMapRequested=!0):this._sceneColorMapRequested&&(this.requestSceneColorMap(!1),this._sceneColorMapRequested=!1)}get renderSceneColorMap(){return this._renderSceneColorMap>0}set renderSceneDepthMap(e){e&&!this._sceneDepthMapRequested?(this.requestSceneDepthMap(!0),this._sceneDepthMapRequested=!0):this._sceneDepthMapRequested&&(this.requestSceneDepthMap(!1),this._sceneDepthMapRequested=!1)}get renderSceneDepthMap(){return this._renderSceneDepthMap>0}set renderTarget(e){this._camera.renderTarget=e,this.dirtyLayerCompositionCameras()}get renderTarget(){return this._camera.renderTarget}set scissorRect(e){this._camera.scissorRect=e}get scissorRect(){return this._camera.scissorRect}set sensitivity(e){this._camera.sensitivity=e}get sensitivity(){return this._camera.sensitivity}set shutter(e){this._camera.shutter=e}get shutter(){return this._camera.shutter}get viewMatrix(){return this._camera.viewMatrix}_enableDepthLayer(e){if(this.layers.find(s=>s===kt)){const s=this.system.app.scene.layers.getLayerById(kt);e?s?.incrementCounter():s?.decrementCounter()}else if(e)return!1;return!0}requestSceneColorMap(e){this._renderSceneColorMap+=e?1:-1,this._enableDepthLayer(e),this.camera._enableRenderPassColorGrab(this.system.app.graphicsDevice,this.renderSceneColorMap),this.system.app.scene.layers.markDirty()}requestSceneDepthMap(e){this._renderSceneDepthMap+=e?1:-1,this._enableDepthLayer(e),this.camera._enableRenderPassDepthGrab(this.system.app.graphicsDevice,this.system.app.renderer,this.renderSceneDepthMap),this.system.app.scene.layers.markDirty()}dirtyLayerCompositionCameras(){const e=this.system.app.scene.layers;e._dirty=!0}screenToWorld(e,t,s,i){const r=this.system.app.graphicsDevice,{width:a,height:n}=r.clientRect;return this._camera.screenToWorld(e,t,s,a,n,i)}worldToScreen(e,t){const s=this.system.app.graphicsDevice,{width:i,height:r}=s.clientRect;return this._camera.worldToScreen(e,i,r,t)}onAppPrerender(){this._camera._viewMatDirty=!0,this._camera._viewProjMatDirty=!0}addCameraToLayers(){const e=this.layers;for(let t=0;t<e.length;t++){const s=this.system.app.scene.layers.getLayerById(e[t]);s&&s.addCamera(this)}}removeCameraFromLayers(){const e=this.layers;for(let t=0;t<e.length;t++){const s=this.system.app.scene.layers.getLayerById(e[t]);s&&s.removeCamera(this)}}onLayersChanged(e,t){this.addCameraToLayers(),e.off("add",this.onLayerAdded,this),e.off("remove",this.onLayerRemoved,this),t.on("add",this.onLayerAdded,this),t.on("remove",this.onLayerRemoved,this)}onLayerAdded(e){this.layers.indexOf(e.id)<0||e.addCamera(this)}onLayerRemoved(e){this.layers.indexOf(e.id)<0||e.removeCamera(this)}onEnable(){const e=this.system.app.scene,t=e.layers;this.system.addCamera(this),this._evtLayersChanged?.off(),this._evtLayersChanged=e.on("set:layers",this.onLayersChanged,this),t&&(this._evtLayerAdded?.off(),this._evtLayerAdded=t.on("add",this.onLayerAdded,this),this._evtLayerRemoved?.off(),this._evtLayerRemoved=t.on("remove",this.onLayerRemoved,this)),this.enabled&&this.entity.enabled&&this.addCameraToLayers(),this.postEffects.enable()}onDisable(){const t=this.system.app.scene.layers;this.postEffects.disable(),this.removeCameraFromLayers(),this._evtLayersChanged?.off(),this._evtLayersChanged=null,t&&(this._evtLayerAdded?.off(),this._evtLayerAdded=null,this._evtLayerRemoved?.off(),this._evtLayerRemoved=null),this.system.removeCamera(this)}onRemove(){this.onDisable(),this.off(),this.camera.destroy()}calculateAspectRatio(e){const t=this.system.app.graphicsDevice,s=e?e.width:t.width,i=e?e.height:t.height;return s*this.rect.z/(i*this.rect.w)}frameUpdate(e){this.aspectRatioMode===Q_&&(this.aspectRatio=this.calculateAspectRatio(e))}startXr(e,t,s){this.system.app.xr.start(this,e,t,s)}endXr(e){if(!this._camera.xr){e&&e(new Error("Camera is not in XR"));return}this._camera.xr.end(e)}copy(e){this.aperture=e.aperture,this.aspectRatio=e.aspectRatio,this.aspectRatioMode=e.aspectRatioMode,this.calculateProjection=e.calculateProjection,this.calculateTransform=e.calculateTransform,this.clearColor=e.clearColor,this.clearColorBuffer=e.clearColorBuffer,this.clearDepthBuffer=e.clearDepthBuffer,this.clearStencilBuffer=e.clearStencilBuffer,this.cullFaces=e.cullFaces,this.disablePostEffectsLayer=e.disablePostEffectsLayer,this.farClip=e.farClip,this.flipFaces=e.flipFaces,this.fov=e.fov,this.frustumCulling=e.frustumCulling,this.horizontalFov=e.horizontalFov,this.layers=e.layers,this.nearClip=e.nearClip,this.orthoHeight=e.orthoHeight,this.priority=e.priority,this.projection=e.projection,this.rect=e.rect,this.renderTarget=e.renderTarget,this.scissorRect=e.scissorRect,this.sensitivity=e.sensitivity,this.shutter=e.shutter}}class GH{constructor(){this.enabled=!0}}const vE=["enabled"];class WH extends qe{constructor(e){super(e),this.cameras=[],this.id="camera",this.ComponentType=gE,this.DataType=GH,this.schema=vE,this.on("beforeremove",this.onBeforeRemove,this),this.app.on("prerender",this.onAppPrerender,this)}initializeComponentData(e,t,s){s=["aspectRatio","aspectRatioMode","calculateProjection","calculateTransform","clearColor","clearColorBuffer","clearDepthBuffer","clearStencilBuffer","renderSceneColorMap","renderSceneDepthMap","cullFaces","farClip","flipFaces","fog","fov","frustumCulling","horizontalFov","layers","renderTarget","nearClip","orthoHeight","projection","priority","rect","scissorRect","aperture","shutter","sensitivity","gammaCorrection","toneMapping"];for(let i=0;i<s.length;i++){const r=s[i];if(t.hasOwnProperty(r)){const a=t[r];switch(r){case"rect":case"scissorRect":Array.isArray(a)?e[r]=new K(a[0],a[1],a[2],a[3]):e[r]=a;break;case"clearColor":Array.isArray(a)?e[r]=new q(a[0],a[1],a[2],a[3]):e[r]=a;break;default:e[r]=a;break}}}super.initializeComponentData(e,t,["enabled"])}cloneComponent(e,t){const s=e.camera;return this.addComponent(t,{aspectRatio:s.aspectRatio,aspectRatioMode:s.aspectRatioMode,calculateProjection:s.calculateProjection,calculateTransform:s.calculateTransform,clearColor:s.clearColor,clearColorBuffer:s.clearColorBuffer,clearDepthBuffer:s.clearDepthBuffer,clearStencilBuffer:s.clearStencilBuffer,renderSceneDepthMap:s.renderSceneDepthMap,renderSceneColorMap:s.renderSceneColorMap,cullFaces:s.cullFaces,enabled:s.enabled,farClip:s.farClip,flipFaces:s.flipFaces,fov:s.fov,frustumCulling:s.frustumCulling,horizontalFov:s.horizontalFov,layers:s.layers,renderTarget:s.renderTarget,nearClip:s.nearClip,orthoHeight:s.orthoHeight,projection:s.projection,priority:s.priority,rect:s.rect,scissorRect:s.scissorRect,aperture:s.aperture,sensitivity:s.sensitivity,shutter:s.shutter,gammaCorrection:s.gammaCorrection,toneMapping:s.toneMapping})}onBeforeRemove(e,t){this.removeCamera(t),t.onRemove()}onAppPrerender(){for(let e=0,t=this.cameras.length;e<t;e++)this.cameras[e].onAppPrerender()}addCamera(e){this.cameras.push(e),vl(this.cameras)}removeCamera(e){const t=this.cameras.indexOf(e);t>=0&&(this.cameras.splice(t,1),vl(this.cameras))}destroy(){this.app.off("prerender",this.onAppPrerender,this),super.destroy()}}he._buildAccessors(gE.prototype,vE);class SE{constructor(){this.enabled=!0,this.type="directional",this.color=new q(1,1,1),this.intensity=1,this.luminance=0,this.shape=xs,this.affectSpecularity=!0,this.castShadows=!1,this.shadowDistance=40,this.shadowIntensity=1,this.shadowResolution=1024,this.shadowBias=.05,this.numCascades=1,this.cascadeBlend=0,this.bakeNumSamples=1,this.bakeArea=0,this.cascadeDistribution=.5,this.normalOffsetBias=0,this.range=10,this.innerConeAngle=40,this.outerConeAngle=45,this.falloffMode=B_,this.shadowType=vs,this.vsmBlurSize=11,this.vsmBlurMode=z_,this.vsmBias=.01*.25,this.cookieAsset=null,this.cookie=null,this.cookieIntensity=1,this.cookieFalloff=!0,this.cookieChannel="rgb",this.cookieAngle=0,this.cookieScale=null,this.cookieOffset=null,this.shadowUpdateMode=Z_,this.mask=1,this.affectDynamic=!0,this.affectLightmapped=!1,this.bake=!1,this.bakeDir=!0,this.isStatic=!1,this.layers=[Ni],this.penumbraSize=1,this.penumbraFalloff=1,this.shadowSamples=16,this.shadowBlockerSamples=16}}const el=Object.keys(new SE);class $H extends he{get data(){const e=this.system.store[this.entity.getGuid()];return e?e.data:null}set enabled(e){this._setValue("enabled",e,function(t,s){this.onSetEnabled(null,s,t)})}get enabled(){return this.data.enabled}set light(e){this._setValue("light",e)}get light(){return this.data.light}set type(e){this._setValue("type",e,function(t,s){this.system.changeType(this,s,t),this.refreshProperties()})}get type(){return this.data.type}set color(e){this._setValue("color",e,function(t,s){this.light.setColor(t)},!0)}get color(){return this.data.color}set intensity(e){this._setValue("intensity",e,function(t,s){this.light.intensity=t})}get intensity(){return this.data.intensity}set luminance(e){this._setValue("luminance",e,function(t,s){this.light.luminance=t})}get luminance(){return this.data.luminance}set shape(e){this._setValue("shape",e,function(t,s){this.light.shape=t})}get shape(){return this.data.shape}set affectSpecularity(e){this._setValue("affectSpecularity",e,function(t,s){this.light.affectSpecularity=t})}get affectSpecularity(){return this.data.affectSpecularity}set castShadows(e){this._setValue("castShadows",e,function(t,s){this.light.castShadows=t})}get castShadows(){return this.data.castShadows}set shadowDistance(e){this._setValue("shadowDistance",e,function(t,s){this.light.shadowDistance=t})}get shadowDistance(){return this.data.shadowDistance}set shadowIntensity(e){this._setValue("shadowIntensity",e,function(t,s){this.light.shadowIntensity=t})}get shadowIntensity(){return this.data.shadowIntensity}set shadowResolution(e){this._setValue("shadowResolution",e,function(t,s){this.light.shadowResolution=t})}get shadowResolution(){return this.data.shadowResolution}set shadowBias(e){this._setValue("shadowBias",e,function(t,s){this.light.shadowBias=-.01*B.clamp(t,0,1)})}get shadowBias(){return this.data.shadowBias}set numCascades(e){this._setValue("numCascades",e,function(t,s){this.light.numCascades=B.clamp(Math.floor(t),1,4)})}get numCascades(){return this.data.numCascades}set cascadeBlend(e){this._setValue("cascadeBlend",e,function(t,s){this.light.cascadeBlend=B.clamp(t,0,1)})}get cascadeBlend(){return this.data.cascadeBlend}set bakeNumSamples(e){this._setValue("bakeNumSamples",e,function(t,s){this.light.bakeNumSamples=B.clamp(Math.floor(t),1,255)})}get bakeNumSamples(){return this.data.bakeNumSamples}set bakeArea(e){this._setValue("bakeArea",e,function(t,s){this.light.bakeArea=B.clamp(t,0,180)})}get bakeArea(){return this.data.bakeArea}set cascadeDistribution(e){this._setValue("cascadeDistribution",e,function(t,s){this.light.cascadeDistribution=B.clamp(t,0,1)})}get cascadeDistribution(){return this.data.cascadeDistribution}set normalOffsetBias(e){this._setValue("normalOffsetBias",e,function(t,s){this.light.normalOffsetBias=B.clamp(t,0,1)})}get normalOffsetBias(){return this.data.normalOffsetBias}set range(e){this._setValue("range",e,function(t,s){this.light.attenuationEnd=t})}get range(){return this.data.range}set innerConeAngle(e){this._setValue("innerConeAngle",e,function(t,s){this.light.innerConeAngle=t})}get innerConeAngle(){return this.data.innerConeAngle}set outerConeAngle(e){this._setValue("outerConeAngle",e,function(t,s){this.light.outerConeAngle=t})}get outerConeAngle(){return this.data.outerConeAngle}set falloffMode(e){this._setValue("falloffMode",e,function(t,s){this.light.falloffMode=t})}get falloffMode(){return this.data.falloffMode}set shadowType(e){this._setValue("shadowType",e,function(t,s){this.light.shadowType=t})}get shadowType(){return this.data.shadowType}set vsmBlurSize(e){this._setValue("vsmBlurSize",e,function(t,s){this.light.vsmBlurSize=t})}get vsmBlurSize(){return this.data.vsmBlurSize}set vsmBlurMode(e){this._setValue("vsmBlurMode",e,function(t,s){this.light.vsmBlurMode=t})}get vsmBlurMode(){return this.data.vsmBlurMode}set vsmBias(e){this._setValue("vsmBias",e,function(t,s){this.light.vsmBias=B.clamp(t,0,1)})}get vsmBias(){return this.data.vsmBias}set cookieAsset(e){this._setValue("cookieAsset",e,function(t,s){if(!(this._cookieAssetId&&(t instanceof ie&&t.id===this._cookieAssetId||t===this._cookieAssetId))){if(this.onCookieAssetRemove(),this._cookieAssetId=null,t instanceof ie)this.data.cookieAsset=t.id,this._cookieAssetId=t.id,this.onCookieAssetAdd(t);else if(typeof t=="number"){this._cookieAssetId=t;const i=this.system.app.assets.get(t);i?this.onCookieAssetAdd(i):(this._cookieAssetAdd=!0,this.system.app.assets.on(`add:${this._cookieAssetId}`,this.onCookieAssetAdd,this))}}})}get cookieAsset(){return this.data.cookieAsset}set cookie(e){this._setValue("cookie",e,function(t,s){this.light.cookie=t})}get cookie(){return this.data.cookie}set cookieIntensity(e){this._setValue("cookieIntensity",e,function(t,s){this.light.cookieIntensity=B.clamp(t,0,1)})}get cookieIntensity(){return this.data.cookieIntensity}set cookieFalloff(e){this._setValue("cookieFalloff",e,function(t,s){this.light.cookieFalloff=t})}get cookieFalloff(){return this.data.cookieFalloff}set cookieChannel(e){this._setValue("cookieChannel",e,function(t,s){this.light.cookieChannel=t})}get cookieChannel(){return this.data.cookieChannel}set cookieAngle(e){this._setValue("cookieAngle",e,function(t,s){if(t!==0||this.cookieScale!==null){this._cookieMatrix||(this._cookieMatrix=new K);let i=1,r=1;this.cookieScale&&(i=this.cookieScale.x,r=this.cookieScale.y);const a=Math.cos(t*B.DEG_TO_RAD),n=Math.sin(t*B.DEG_TO_RAD);this._cookieMatrix.set(a/i,-n/i,n/r,a/r),this.light.cookieTransform=this._cookieMatrix}else this.light.cookieTransform=null})}get cookieAngle(){return this.data.cookieAngle}set cookieScale(e){this._setValue("cookieScale",e,function(t,s){if(t!==null||this.cookieAngle!==0){this._cookieMatrix||(this._cookieMatrix=new K);const i=t.x,r=t.y,a=Math.cos(this.cookieAngle*B.DEG_TO_RAD),n=Math.sin(this.cookieAngle*B.DEG_TO_RAD);this._cookieMatrix.set(a/i,-n/i,n/r,a/r),this.light.cookieTransform=this._cookieMatrix}else this.light.cookieTransform=null},!0)}get cookieScale(){return this.data.cookieScale}set cookieOffset(e){this._setValue("cookieOffset",e,function(t,s){this.light.cookieOffset=t},!0)}get cookieOffset(){return this.data.cookieOffset}set shadowUpdateMode(e){this._setValue("shadowUpdateMode",e,function(t,s){this.light.shadowUpdateMode=t},!0)}get shadowUpdateMode(){return this.data.shadowUpdateMode}set mask(e){this._setValue("mask",e,function(t,s){this.light.mask=t})}get mask(){return this.data.mask}set affectDynamic(e){this._setValue("affectDynamic",e,function(t,s){t?this.light.mask|=As:this.light.mask&=-2,this.light.layersDirty()})}get affectDynamic(){return this.data.affectDynamic}set affectLightmapped(e){this._setValue("affectLightmapped",e,function(t,s){t?(this.light.mask|=ma,this.bake&&(this.light.mask&=-5)):(this.light.mask&=-3,this.bake&&(this.light.mask|=sa))})}get affectLightmapped(){return this.data.affectLightmapped}set bake(e){this._setValue("bake",e,function(t,s){t?(this.light.mask|=sa,this.affectLightmapped&&(this.light.mask&=-3)):(this.light.mask&=-5,this.affectLightmapped&&(this.light.mask|=ma)),this.light.layersDirty()})}get bake(){return this.data.bake}set bakeDir(e){this._setValue("bakeDir",e,function(t,s){this.light.bakeDir=t})}get bakeDir(){return this.data.bakeDir}set isStatic(e){this._setValue("isStatic",e,function(t,s){this.light.isStatic=t})}get isStatic(){return this.data.isStatic}set layers(e){this._setValue("layers",e,function(t,s){for(let i=0;i<s.length;i++){const r=this.system.app.scene.layers.getLayerById(s[i]);r&&(r.removeLight(this),this.light.removeLayer(r))}for(let i=0;i<t.length;i++){const r=this.system.app.scene.layers.getLayerById(t[i]);r&&this.enabled&&this.entity.enabled&&(r.addLight(this),this.light.addLayer(r))}})}get layers(){return this.data.layers}set shadowUpdateOverrides(e){this.light.shadowUpdateOverrides=e}get shadowUpdateOverrides(){return this.light.shadowUpdateOverrides}set shadowSamples(e){this.light.shadowSamples=e}get shadowSamples(){return this.light.shadowSamples}set shadowBlockerSamples(e){this.light.shadowBlockerSamples=e}get shadowBlockerSamples(){return this.light.shadowBlockerSamples}set penumbraSize(e){this.light.penumbraSize=e}get penumbraSize(){return this.light.penumbraSize}set penumbraFalloff(e){this.light.penumbraFalloff=e}get penumbraFalloff(){return this.light.penumbraFalloff}_setValue(e,t,s,i){const r=this.data,a=r[e];!i&&a===t||(r[e]=t,s&&s.call(this,t,a))}addLightToLayers(){for(let e=0;e<this.layers.length;e++){const t=this.system.app.scene.layers.getLayerById(this.layers[e]);t&&(t.addLight(this),this.light.addLayer(t))}}removeLightFromLayers(){for(let e=0;e<this.layers.length;e++){const t=this.system.app.scene.layers.getLayerById(this.layers[e]);t&&(t.removeLight(this),this.light.removeLayer(t))}}onLayersChanged(e,t){this.enabled&&this.entity.enabled&&this.addLightToLayers(),e.off("add",this.onLayerAdded,this),e.off("remove",this.onLayerRemoved,this),t.on("add",this.onLayerAdded,this),t.on("remove",this.onLayerRemoved,this)}onLayerAdded(e){this.layers.indexOf(e.id)>=0&&this.enabled&&this.entity.enabled&&(e.addLight(this),this.light.addLayer(e))}onLayerRemoved(e){this.layers.indexOf(e.id)>=0&&(e.removeLight(this),this.light.removeLayer(e))}refreshProperties(){for(let e=0;e<el.length;e++){const t=el[e];this[t]=this[t]}this.enabled&&this.entity.enabled&&this.onEnable()}onCookieAssetSet(){let e=!1;this._cookieAsset.type==="cubemap"&&!this._cookieAsset.loadFaces&&(this._cookieAsset.loadFaces=!0,e=!0),(!this._cookieAsset.resource||e)&&this.system.app.assets.load(this._cookieAsset),this._cookieAsset.resource&&this.onCookieAssetLoad()}onCookieAssetAdd(e){this._cookieAssetId===e.id&&(this._cookieAsset=e,this.light.enabled&&this.onCookieAssetSet(),this._cookieAsset.on("load",this.onCookieAssetLoad,this),this._cookieAsset.on("remove",this.onCookieAssetRemove,this))}onCookieAssetLoad(){!this._cookieAsset||!this._cookieAsset.resource||(this.cookie=this._cookieAsset.resource)}onCookieAssetRemove(){this._cookieAssetId&&(this._cookieAssetAdd&&(this.system.app.assets.off(`add:${this._cookieAssetId}`,this.onCookieAssetAdd,this),this._cookieAssetAdd=!1),this._cookieAsset&&(this._cookieAsset.off("load",this.onCookieAssetLoad,this),this._cookieAsset.off("remove",this.onCookieAssetRemove,this),this._cookieAsset=null),this.cookie=null)}onEnable(){const e=this.system.app.scene,t=e.layers;this.light.enabled=!0,this._evtLayersChanged=e.on("set:layers",this.onLayersChanged,this),t&&(this._evtLayerAdded=t.on("add",this.onLayerAdded,this),this._evtLayerRemoved=t.on("remove",this.onLayerRemoved,this)),this.enabled&&this.entity.enabled&&this.addLightToLayers(),this._cookieAsset&&!this.cookie&&this.onCookieAssetSet()}onDisable(){const t=this.system.app.scene.layers;this.light.enabled=!1,this._evtLayersChanged?.off(),this._evtLayersChanged=null,t&&(this._evtLayerAdded?.off(),this._evtLayerAdded=null,this._evtLayerRemoved?.off(),this._evtLayerRemoved=null),this.removeLightFromLayers()}onRemove(){this.onDisable(),this.light.destroy(),this.cookieAsset=null}constructor(...e){super(...e),this._evtLayersChanged=null,this._evtLayerAdded=null,this._evtLayerRemoved=null,this._cookieAsset=null,this._cookieAssetId=null,this._cookieAssetAdd=!1,this._cookieMatrix=null}}class XH extends qe{constructor(e){super(e),this.id="light",this.ComponentType=$H,this.DataType=SE,this.on("beforeremove",this._onRemoveComponent,this)}initializeComponentData(e,t){const s={...t};s.type||(s.type=e.data.type),e.data.type=s.type,s.layers&&Array.isArray(s.layers)&&(s.layers=s.layers.slice(0)),s.color&&Array.isArray(s.color)&&(s.color=new q(s.color[0],s.color[1],s.color[2])),s.cookieOffset&&s.cookieOffset instanceof Array&&(s.cookieOffset=new z(s.cookieOffset[0],s.cookieOffset[1])),s.cookieScale&&s.cookieScale instanceof Array&&(s.cookieScale=new z(s.cookieScale[0],s.cookieScale[1])),s.enable&&(console.warn("WARNING: enable: Property is deprecated. Set enabled property instead."),s.enabled=s.enable),s.shape||(s.shape=xs);const i=new Sl(this.app.graphicsDevice,this.app.scene.clusteredLightingEnabled);i.type=fp[s.type],i._node=e.entity,e.data.light=i,super.initializeComponentData(e,s,el)}_onRemoveComponent(e,t){t.onRemove()}cloneComponent(e,t){const s=e.light,i=[];let r;for(let a=0;a<el.length;a++)r=el[a],r!=="light"&&(s[r]&&s[r].clone?i[r]=s[r].clone():i[r]=s[r]);return this.addComponent(t,i)}changeType(e,t,s){t!==s&&(e.light.type=fp[s])}}const qH=["x","y","z","w"],YH=[void 0,void 0,z,x,K];function oo(o,e,t,s){switch(e.type){case"boolean":return!!t;case"number":if(typeof t=="number")return t;if(typeof t=="string"){const i=parseInt(t,10);return isNaN(i)?null:i}else if(typeof t=="boolean")return 0+t;return null;case"json":{const i={};if(Array.isArray(e.schema)){(!t||typeof t!="object")&&(t={});for(let r=0;r<e.schema.length;r++){const a=e.schema[r];if(a.name)if(a.array){i[a.name]=[];const n=Array.isArray(t[a.name])?t[a.name]:[];for(let l=0;l<n.length;l++)i[a.name].push(oo(o,a,n[l]))}else{const n=t.hasOwnProperty(a.name)?t[a.name]:a.default;i[a.name]=oo(o,a,n)}}}return i}case"asset":return t instanceof ie?t:typeof t=="number"?o.assets.get(t)||null:typeof t=="string"&&o.assets.get(parseInt(t,10))||null;case"entity":return t instanceof ze?t:typeof t=="string"?o.getEntityFromIndex(t):null;case"rgb":case"rgba":if(t instanceof q)return s instanceof q?(s.copy(t),s):t.clone();if(t instanceof Array&&t.length>=3&&t.length<=4){for(let i=0;i<t.length;i++)if(typeof t[i]!="number")return null;return s||(s=new q),s.r=t[0],s.g=t[1],s.b=t[2],s.a=t.length===3?1:t[3],s}else if(typeof t=="string"&&/#(?:[0-9a-f]{2}){3,4}/i.test(t))return s||(s=new q),s.fromString(t),s;return null;case"vec2":case"vec3":case"vec4":{const i=parseInt(e.type.slice(3),10),r=YH[i];if(t instanceof r)return s instanceof r?(s.copy(t),s):t.clone();if(t instanceof Array&&t.length===i){for(let a=0;a<t.length;a++)if(typeof t[a]!="number")return null;s||(s=new r);for(let a=0;a<i;a++)s[qH[a]]=t[a];return s}return null}case"curve":if(t){let i;if(t instanceof ys||t instanceof jr)i=t.clone();else{const r=t.keys[0]instanceof Array?jr:ys;i=new r(t.keys),i.type=t.type}return i}break}return t}function yE(o,e,t,s){return e.array?t.map((i,r)=>oo(o,e,i,s?s[r]:null)):oo(o,e,t,s)}function TE(o,e,t,s){if(t)for(const i in e){const r=e[i],a=t[i];a!==void 0&&(s[i]=yE(o,r,a,s[i]))}}const bn=class bn{constructor(e){this.scriptType=e,this.index={}}add(e,t){this.index[e]||bn.reservedNames.has(e)||(this.index[e]=t,Object.defineProperty(this.scriptType.prototype,e,{get:function(){return this.__attributes[e]},set:function(s){const i="attr",r=`attr:${e}`,a=this.__attributes[e];let n=a;if(a&&t.type!=="json"&&t.type!=="entity"&&a.clone&&(this.hasEvent(i)||this.hasEvent(r))&&(n=a.clone()),t.array){if(this.__attributes[e]=[],s)for(let l=0,h=s.length;l<h;l++)this.__attributes[e].push(oo(this.app,t,s[l],a?a[l]:null))}else this.__attributes[e]=oo(this.app,t,s,a);this.fire(i,e,this.__attributes[e],n),this.fire(r,this.__attributes[e],n)}}))}remove(e){return this.index[e]?(delete this.index[e],delete this.scriptType.prototype[e],!0):!1}has(e){return!!this.index[e]}get(e){return this.index[e]||null}};bn.assignAttributesToScript=TE,bn.attributeToValue=yE,bn.reservedNames=new Set(["app","entity","enabled","_enabled","_enabledOld","_destroyed","__attributes","__attributesRaw","__scriptType","__executionOrder","_callbacks","_callbackActive","has","get","on","off","fire","once","hasEvent"]);let Al=bn;const qp="initialize",Yp="postInitialize",jH="update",KH="postUpdate",ZH="swap",ks=class ks extends ne{constructor(e){super(),this.initScript(e)}set enabled(e){this._enabled=!!e,this.enabled!==this._enabledOld&&(this._enabledOld=this.enabled,this.fire(this.enabled?"enable":"disable"),this.fire("state",this.enabled),!this._initialized&&this.enabled&&(this._initialized=!0,this.fire("preInitialize"),this.initialize&&this.entity.script._scriptMethod(this,qp)),this._initialized&&!this._postInitialized&&this.enabled&&!this.entity.script._beingEnabled&&(this._postInitialized=!0,this.postInitialize&&this.entity.script._scriptMethod(this,Yp)))}get enabled(){return this._enabled&&!this._destroyed&&this.entity.script.enabled&&this.entity.enabled}initScript(e){const t=this.constructor;this.app=e.app,this.entity=e.entity,this._enabled=typeof e.enabled=="boolean"?e.enabled:!0,this._enabledOld=this.enabled,this.__destroyed=!1,this.__scriptType=t,this.__executionOrder=-1}static get scriptName(){return this.__name}};ks.EVENT_ENABLE="enable",ks.EVENT_DISABLE="disable",ks.EVENT_STATE="state",ks.EVENT_DESTROY="destroy",ks.EVENT_ATTR="attr",ks.EVENT_ERROR="error",ks.__name=null,ks.__getScriptName=xE;let lo=ks;const QH=/^\s*function(?:\s|\s*\/\*.*\*\/\s*)+([^(\s\/]*)\s*/;function xE(o){if(typeof o!="function")return;if(o.scriptName)return o.scriptName;if("name"in Function.prototype)return o.name;if(o===Function||o===Function.prototype.constructor)return"Function";const e=`${o}`.match(QH);return e?e[1]:void 0}class tl extends lo{constructor(e){super(e),this.initScriptType(e)}static get attributes(){return this.hasOwnProperty("__attributes")||(this.__attributes=new Al(this)),this.__attributes}initScript(e){lo.prototype.initScript.call(this,e),this.__attributes={},this.__attributesRaw=e.attributes||{}}initScriptType(e){this.initScript(e)}__initializeAttributes(e){if(!(!e&&!this.__attributesRaw)){for(const t in this.__scriptType.attributes.index)this.__attributesRaw&&this.__attributesRaw.hasOwnProperty(t)?this[t]=this.__attributesRaw[t]:this.__attributes.hasOwnProperty(t)||(this.__scriptType.attributes.index[t].hasOwnProperty("default")?this[t]=this.__scriptType.attributes.index[t].default:this[t]=null);this.__attributesRaw=null}}static extend(e){for(const t in e)e.hasOwnProperty(t)&&(this.prototype[t]=e[t])}}const JH=o=>o[0].toLowerCase()+o.substring(1),Us=class Us extends he{constructor(e,t){super(e,t),this._attributeDataMap=new Map,this._scripts=[],this._updateList=new gc({sortBy:"__executionOrder"}),this._postUpdateList=new gc({sortBy:"__executionOrder"}),this._scriptsIndex={},this._destroyedScripts=[],this._destroyed=!1,this._scriptsData=null,this._oldState=!0,this._enabled=!0,this._beingEnabled=!1,this._isLoopingThroughScripts=!1,this._executionOrder=-1,this.on("set_enabled",this._onSetEnabled,this)}set scripts(e){this._scriptsData=e;for(const t in e){if(!e.hasOwnProperty(t))continue;const s=this._scriptsIndex[t];if(s){if(typeof e[t].enabled=="boolean"&&(s.once("preInitialize",()=>{this.initializeAttributes(s)}),s.enabled=!!e[t].enabled),typeof e[t].attributes=="object"){for(const i in e[t].attributes)if(!Al.reservedNames.has(i)){if(!s.__attributes.hasOwnProperty(i)){const r=this.system.app.scripts.get(t);r&&r.attributes.add(i,{})}s[i]=e[t].attributes[i]}}}else console.log(this.order)}}get scripts(){return this._scripts}set enabled(e){const t=this._enabled;this._enabled=e,this.fire("set","enabled",t,e)}get enabled(){return this._enabled}onEnable(){this._beingEnabled=!0,this._checkState(),this.entity._beingEnabled||this.onPostStateChange(),this._beingEnabled=!1}onDisable(){this._checkState()}onPostStateChange(){const e=this._beginLooping();for(let t=0,s=this.scripts.length;t<s;t++){const i=this.scripts[t];i._initialized&&!i._postInitialized&&i.enabled&&(i._postInitialized=!0,i.postInitialize&&this._scriptMethod(i,Yp))}this._endLooping(e)}_beginLooping(){const e=this._isLoopingThroughScripts;return this._isLoopingThroughScripts=!0,e}_endLooping(e){this._isLoopingThroughScripts=e,this._isLoopingThroughScripts||this._removeDestroyedScripts()}_onSetEnabled(e,t,s){this._beingEnabled=!0,this._checkState(),this._beingEnabled=!1}_checkState(){const e=this.enabled&&this.entity.enabled;if(e===this._oldState)return;this._oldState=e,this.fire(e?"enable":"disable"),this.fire("state",e),e?this.system._addComponentToEnabled(this):this.system._removeComponentFromEnabled(this);const t=this._beginLooping();for(let s=0,i=this.scripts.length;s<i;s++){const r=this.scripts[s];r.once("preInitialize",()=>{this.initializeAttributes(r)}),r.enabled=r._enabled}this._endLooping(t)}_onBeforeRemove(){this.fire("remove");const e=this._beginLooping();for(let t=0;t<this.scripts.length;t++){const s=this.scripts[t];s&&this.destroy(s.__scriptType.__name)}this._endLooping(e)}_removeDestroyedScripts(){const e=this._destroyedScripts.length;if(e){for(let t=0;t<e;t++){const s=this._destroyedScripts[t];this._removeScriptInstance(s)}this._destroyedScripts.length=0,this._resetExecutionOrder(0,this._scripts.length)}}_onInitializeAttributes(){for(let e=0,t=this.scripts.length;e<t;e++){const s=this.scripts[e];this.initializeAttributes(s)}}initializeAttributes(e){if(e instanceof tl)e.__initializeAttributes();else{const t=e.__scriptType.__name,s=this._attributeDataMap.get(t);if(!s)return;const i=this.system.app.scripts?.getSchema(t);TE(this.system.app,i.attributes,s,e)}}_scriptMethod(e,t,s){e[t](s)}_onInitialize(){const e=this._scripts,t=this._beginLooping();for(let s=0,i=e.length;s<i;s++){const r=e[s];!r._initialized&&r.enabled&&(r._initialized=!0,r.initialize&&this._scriptMethod(r,qp))}this._endLooping(t)}_onPostInitialize(){this.onPostStateChange()}_onUpdate(e){const t=this._updateList;if(!t.length)return;const s=this._beginLooping();for(t.loopIndex=0;t.loopIndex<t.length;t.loopIndex++){const i=t.items[t.loopIndex];i.enabled&&this._scriptMethod(i,jH,e)}this._endLooping(s)}_onPostUpdate(e){const t=this._postUpdateList;if(!t.length)return;const s=this._beginLooping();for(t.loopIndex=0;t.loopIndex<t.length;t.loopIndex++){const i=t.items[t.loopIndex];i.enabled&&this._scriptMethod(i,KH,e)}this._endLooping(s)}_insertScriptInstance(e,t,s){t===-1?(this._scripts.push(e),e.__executionOrder=s,e.update&&this._updateList.append(e),e.postUpdate&&this._postUpdateList.append(e)):(this._scripts.splice(t,0,e),e.__executionOrder=t,this._resetExecutionOrder(t+1,s+1),e.update&&this._updateList.insert(e),e.postUpdate&&this._postUpdateList.insert(e))}_removeScriptInstance(e){const t=this._scripts.indexOf(e);return t===-1||(this._scripts.splice(t,1),e.update&&this._updateList.remove(e),e.postUpdate&&this._postUpdateList.remove(e)),t}_resetExecutionOrder(e,t){for(let s=e;s<t;s++)this._scripts[s].__executionOrder=s}_resolveEntityScriptAttribute(e,t,s,i,r,a){if(e.array){const n=s.length;if(!n)return;const l=s.slice();for(let h=0;h<n;h++){const c=l[h]instanceof Ve?l[h].getGuid():l[h];a[c]&&(l[h]=i?a[c].getGuid():a[c])}r[t]=l}else{if(s instanceof Ve)s=s.getGuid();else if(typeof s!="string")return;a[s]&&(r[t]=a[s])}}has(e){if(typeof e=="string")return!!this._scriptsIndex[e];if(!e)return!1;const t=e,s=t.__name,i=this._scriptsIndex[s];return(i&&i.instance)instanceof t}get(e){if(typeof e=="string"){const a=this._scriptsIndex[e];return a?a.instance:null}if(!e)return null;const t=e,s=t.__name,i=this._scriptsIndex[s],r=i&&i.instance;return r instanceof t?r:null}create(e,t={}){const s=this;let i=e,r=e;if(typeof i=="string")i=this.system.app.scripts.get(i);else if(i){const a=xE(i),n=JH(a);!(i.prototype instanceof tl)&&i.scriptName,i.__name??=i.scriptName??n,r=i.__name}if(i){if(!this._scriptsIndex[r]||!this._scriptsIndex[r].instance){const a=new i({app:this.system.app,entity:this.entity,enabled:t.hasOwnProperty("enabled")?t.enabled:!0,attributes:t.attributes||{}});t.properties&&typeof t.properties=="object"&&Object.assign(a,t.properties),a instanceof tl||this._attributeDataMap.set(r,t.attributes);const n=this._scripts.length;let l=-1;return typeof t.ind=="number"&&t.ind!==-1&&n>t.ind&&(l=t.ind),this._insertScriptInstance(a,l,n),this._scriptsIndex[r]={instance:a,onSwap:function(){s.swap(r)}},this[r]=a,t.preloading||this.initializeAttributes(a),this.fire("create",r,a),this.fire(`create:${r}`,a),this.system.app.scripts.on(`swap:${r}`,this._scriptsIndex[r].onSwap),t.preloading||(a.enabled&&!a._initialized&&(a._initialized=!0,a.initialize&&this._scriptMethod(a,qp)),a.enabled&&!a._postInitialized&&(a._postInitialized=!0,a.postInitialize&&this._scriptMethod(a,Yp))),a}}else this._scriptsIndex[r]={awaiting:!0,ind:this._scripts.length};return null}destroy(e){let t=e,s=e;typeof s=="string"?s=this.system.app.scripts.get(s):s&&(t=s.__name);const i=this._scriptsIndex[t];if(delete this._scriptsIndex[t],!i)return!1;this._attributeDataMap.delete(t);const r=i.instance;if(r&&!r._destroyed)if(r.enabled=!1,r._destroyed=!0,this._isLoopingThroughScripts)this._destroyedScripts.push(r);else{const a=this._removeScriptInstance(r);a>=0&&this._resetExecutionOrder(a,this._scripts.length)}return this.system.app.scripts.off(`swap:${t}`,i.onSwap),delete this[t],this.fire("destroy",t,r||null),this.fire(`destroy:${t}`,r||null),r&&r.fire("destroy"),!0}swap(e){let t=e,s=e;typeof s=="string"?s=this.system.app.scripts.get(s):s&&(t=s.__name);const i=this._scriptsIndex[t];if(!i||!i.instance)return!1;const r=i.instance,a=this._scripts.indexOf(r),n=new s({app:this.system.app,entity:this.entity,enabled:r.enabled,attributes:r.__attributes});return n.swap?(this.initializeAttributes(n),this._scripts[a]=n,this._scriptsIndex[t].instance=n,this[t]=n,n.__executionOrder=a,r.update&&this._updateList.remove(r),r.postUpdate&&this._postUpdateList.remove(r),n.update&&this._updateList.insert(n),n.postUpdate&&this._postUpdateList.insert(n),this._scriptMethod(n,ZH,r),this.fire("swap",t,n),this.fire(`swap:${t}`,n),!0):!1}resolveDuplicatedEntityReferenceProperties(e,t){const s=this.entity.script;for(const i in e._scriptsIndex){const r=this.system.app.scripts.get(i);if(!r)continue;const a=e._scriptsIndex[i];if(!a||!a.instance)continue;const n=s[i].__attributesRaw??s._attributeDataMap.get(i),l=s[i].__attributes;if(!n&&!l)continue;const h=!!n,c=a.instance.__attributes??s._attributeDataMap.get(i);for(const d in c){if(!c[d])continue;const f=r.attributes?.get(d)??this.system.app.scripts.getSchema(i)?.attributes?.[d];if(f){if(f.type==="entity")this._resolveEntityScriptAttribute(f,d,c[d],h,n||l,t);else if(f.type==="json"&&Array.isArray(f.schema)){const u=c[d],p=n?n[d]:l[d];for(let m=0;m<f.schema.length;m++){const _=f.schema[m];if(_.type==="entity")if(f.array)for(let g=0;g<u.length;g++)this._resolveEntityScriptAttribute(_,_.name,u[g][_.name],h,p[g],t);else this._resolveEntityScriptAttribute(_,_.name,u[_.name],h,p,t)}}}}}}move(e,t){const s=this._scripts.length;if(t>=s||t<0)return!1;let i=e,r=e;typeof r!="string"?r=e.__name:i=null;const a=this._scriptsIndex[r];if(!a||!a.instance)return!1;const n=a.instance;if(i&&!(n instanceof i))return!1;const l=this._scripts.indexOf(n);return l===-1||l===t?!1:(this._scripts.splice(t,0,this._scripts.splice(l,1)[0]),this._resetExecutionOrder(0,s),this._updateList.sort(),this._postUpdateList.sort(),this.fire("move",r,n,t,l),this.fire(`move:${r}`,n,t,l),!0)}};Us.EVENT_CREATE="create",Us.EVENT_DESTROY="destroy",Us.EVENT_ENABLE="enable",Us.EVENT_DISABLE="disable",Us.EVENT_REMOVE="remove",Us.EVENT_STATE="state",Us.EVENT_MOVE="move",Us.EVENT_ERROR="error";let jp=Us;class eG{constructor(){this.enabled=!0}}const tG="_onInitializeAttributes",sG="_onInitialize",iG="_onPostInitialize",rG="_onUpdate",aG="_onPostUpdate";let Hh=0;class nG extends qe{constructor(e){super(e),this.id="script",this.ComponentType=jp,this.DataType=eG,this._components=new gc({sortBy:"_executionOrder"}),this._enabledComponents=new gc({sortBy:"_executionOrder"}),this.preloading=!0,this.on("beforeremove",this._onBeforeRemove,this),this.app.systems.on("initialize",this._onInitialize,this),this.app.systems.on("postInitialize",this._onPostInitialize,this),this.app.systems.on("update",this._onUpdate,this),this.app.systems.on("postUpdate",this._onPostUpdate,this)}initializeComponentData(e,t){if(e._executionOrder=Hh++,this._components.append(e),Hh>Number.MAX_SAFE_INTEGER&&this._resetExecutionOrder(),e.enabled=t.hasOwnProperty("enabled")?!!t.enabled:!0,e.enabled&&e.entity.enabled&&this._enabledComponents.append(e),t.hasOwnProperty("order")&&t.hasOwnProperty("scripts")){e._scriptsData=t.scripts;for(let s=0;s<t.order.length;s++)e.create(t.order[s],{enabled:t.scripts[t.order[s]].enabled,attributes:t.scripts[t.order[s]].attributes,preloading:this.preloading})}}cloneComponent(e,t){const s=[],i={};for(let a=0;a<e.script._scripts.length;a++){const n=e.script._scripts[a],l=n.__scriptType.__name;s.push(l);const h=e.script._attributeDataMap?.get(l)||{};for(const c in n.__attributes)h[c]=n.__attributes[c];i[l]={enabled:n._enabled,attributes:h}}for(const a in e.script._scriptsIndex)a.awaiting&&s.splice(a.ind,0,a);const r={enabled:e.script.enabled,order:s,scripts:i};return this.addComponent(t,r)}_resetExecutionOrder(){Hh=0;for(let e=0,t=this._components.length;e<t;e++)this._components.items[e]._executionOrder=Hh++}_callComponentMethod(e,t,s){for(e.loopIndex=0;e.loopIndex<e.length;e.loopIndex++)e.items[e.loopIndex][t](s)}_onInitialize(){this.preloading=!1,this._callComponentMethod(this._components,tG),this._callComponentMethod(this._enabledComponents,sG)}_onPostInitialize(){this._callComponentMethod(this._enabledComponents,iG)}_onUpdate(e){this._callComponentMethod(this._enabledComponents,rG,e)}_onPostUpdate(e){this._callComponentMethod(this._enabledComponents,aG,e)}_addComponentToEnabled(e){this._enabledComponents.insert(e)}_removeComponentFromEnabled(e){this._enabledComponents.remove(e)}_onBeforeRemove(e,t){this._components.items.indexOf(t)>=0&&t._onBeforeRemove(),this._removeComponentFromEnabled(t),this._components.remove(t)}destroy(){super.destroy(),this.app.systems.off("initialize",this._onInitialize,this),this.app.systems.off("postInitialize",this._onPostInitialize,this),this.app.systems.off("update",this._onUpdate,this),this.app.systems.off("postUpdate",this._onPostUpdate,this)}}class EE extends he{constructor(e,t){super(e,t),this._layers=[Ni],this._instance=null,this._materialTmp=null,this._highQualitySH=!0,this._customAabb=null,this._evtLayersChanged=null,this._evtLayerAdded=null,this._evtLayerRemoved=null,this._castShadows=!1,this._assetReference=new El("asset",this,e.app.assets,{add:this._onGSplatAssetAdded,load:this._onGSplatAssetLoad,remove:this._onGSplatAssetRemove,unload:this._onGSplatAssetUnload},this),t.on("remove",this.onRemoveChild,this),t.on("removehierarchy",this.onRemoveChild,this),t.on("insert",this.onInsertChild,this),t.on("inserthierarchy",this.onInsertChild,this)}set customAabb(e){this._customAabb=e,this._instance?.meshInstance?.setCustomAabb(this._customAabb)}get customAabb(){return this._customAabb}set instance(e){if(this.destroyInstance(),this._instance=e,this._instance){const t=this._instance.meshInstance;t.node||(t.node=this.entity),t.castShadow=this._castShadows,t.setCustomAabb(this._customAabb),this.enabled&&this.entity.enabled&&this.addToLayers()}}get instance(){return this._instance}set material(e){this._instance?this._instance.material=e:this._materialTmp=e}get material(){return this._instance?.material??this._materialTmp??null}set highQualitySH(e){e!==this._highQualitySH&&(this._highQualitySH=e,this._instance&&this._instance.setHighQualitySH(e))}get highQualitySH(){return this._highQualitySH}set castShadows(e){if(this._castShadows!==e){const t=this.instance?.meshInstance;if(t){const s=this.layers,i=this.system.app.scene;if(this._castShadows&&!e)for(let r=0;r<s.length;r++){const a=i.layers.getLayerById(this.layers[r]);a&&a.removeShadowCasters([t])}if(t.castShadow=e,!this._castShadows&&e)for(let r=0;r<s.length;r++){const a=i.layers.getLayerById(s[r]);a&&a.addShadowCasters([t])}}this._castShadows=e}}get castShadows(){return this._castShadows}set layers(e){this.removeFromLayers(),this._layers.length=0;for(let t=0;t<e.length;t++)this._layers[t]=e[t];!this.enabled||!this.entity.enabled||this.addToLayers()}get layers(){return this._layers}set asset(e){const t=e instanceof ie?e.id:e;this._assetReference.id!==t&&(this._assetReference.asset&&this._assetReference.asset.resource&&this._onGSplatAssetRemove(),this._assetReference.id=t,this._assetReference.asset&&this._onGSplatAssetAdded())}get asset(){return this._assetReference.id}destroyInstance(){this._instance&&(this.removeFromLayers(),this._instance?.destroy(),this._instance=null)}addToLayers(){const e=this.instance?.meshInstance;if(e){const t=this.system.app.scene.layers;for(let s=0;s<this._layers.length;s++)t.getLayerById(this._layers[s])?.addMeshInstances([e])}}removeFromLayers(){const e=this.instance?.meshInstance;if(e){const t=this.system.app.scene.layers;for(let s=0;s<this._layers.length;s++)t.getLayerById(this._layers[s])?.removeMeshInstances([e])}}onRemoveChild(){this.removeFromLayers()}onInsertChild(){this._instance&&this.enabled&&this.entity.enabled&&this.addToLayers()}onRemove(){this.destroyInstance(),this.asset=null,this._assetReference.id=null,this.entity.off("remove",this.onRemoveChild,this),this.entity.off("insert",this.onInsertChild,this)}onLayersChanged(e,t){this.addToLayers(),e.off("add",this.onLayerAdded,this),e.off("remove",this.onLayerRemoved,this),t.on("add",this.onLayerAdded,this),t.on("remove",this.onLayerRemoved,this)}onLayerAdded(e){this.layers.indexOf(e.id)<0||this._instance&&e.addMeshInstances(this._instance.meshInstance)}onLayerRemoved(e){this.layers.indexOf(e.id)<0||this._instance&&e.removeMeshInstances(this._instance.meshInstance)}onEnable(){const e=this.system.app.scene,t=e.layers;this._evtLayersChanged=e.on("set:layers",this.onLayersChanged,this),t&&(this._evtLayerAdded=t.on("add",this.onLayerAdded,this),this._evtLayerRemoved=t.on("remove",this.onLayerRemoved,this)),this._instance?this.addToLayers():this.asset&&this._onGSplatAssetAdded()}onDisable(){const t=this.system.app.scene.layers;this._evtLayersChanged?.off(),this._evtLayersChanged=null,t&&(this._evtLayerAdded?.off(),this._evtLayerAdded=null,this._evtLayerRemoved?.off(),this._evtLayerRemoved=null),this.removeFromLayers()}hide(){this._instance&&(this._instance.meshInstance.visible=!1)}show(){this._instance&&(this._instance.meshInstance.visible=!0)}_onGSplatAssetAdded(){this._assetReference.asset&&(this._assetReference.asset.resource?this._onGSplatAssetLoad():this.enabled&&this.entity.enabled&&this.system.app.assets.load(this._assetReference.asset))}_onGSplatAssetLoad(){this.destroyInstance();const e=this._assetReference.asset;e&&(this.instance=new YR(e.resource,{material:this._materialTmp,highQualitySH:this._highQualitySH}),this._materialTmp=null,this.customAabb=this.instance.resource.aabb.clone())}_onGSplatAssetUnload(){this.destroyInstance()}_onGSplatAssetRemove(){this._onGSplatAssetUnload()}}class oG{constructor(){this.enabled=!0}}const Kp=["enabled"],Vo=["castShadows","material","highQualitySH","asset","layers"];class lG extends qe{constructor(e){super(e),this.id="gsplat",this.ComponentType=EE,this.DataType=oG,this.schema=Kp,this.on("beforeremove",this.onRemove,this)}initializeComponentData(e,t,s){t.layers&&t.layers.length&&(t.layers=t.layers.slice(0));for(let i=0;i<Vo.length;i++)t.hasOwnProperty(Vo[i])&&(e[Vo[i]]=t[Vo[i]]);t.aabbCenter&&t.aabbHalfExtents&&(e.customAabb=new fe(new x(t.aabbCenter),new x(t.aabbHalfExtents))),super.initializeComponentData(e,t,Kp)}cloneComponent(e,t){const s=e.gsplat,i={};Vo.forEach(a=>{a==="material"?i[a]=s[a].clone():i[a]=s[a]}),i.enabled=s.enabled;const r=this.addComponent(t,i);return s.customAabb&&(r.customAabb=s.customAabb.clone()),r}onRemove(e,t){t.onRemove()}}he._buildAccessors(EE.prototype,Kp);const pg=class pg extends ne{set meshes(e){this.decRefMeshes(),this._meshes=e,this.incRefMeshes(),this.fire("set:meshes",e)}get meshes(){return this._meshes}destroy(){this.meshes=null}decRefMeshes(){this._meshes?.forEach((e,t)=>{e&&(e.decRefCount(),e.refCount<1&&(e.destroy(),this._meshes[t]=null))})}incRefMeshes(){this._meshes?.forEach(e=>{e?.incRefCount()})}constructor(...e){super(...e),this._meshes=null}};pg.EVENT_SETMESHES="set:meshes";let Kc=pg;function hc(o){const e=this;if(!e.resource)return;const t=o.resource,s=t.renders&&t.renders[e.data.renderIndex];s&&(e.resource.meshes=s.resource.meshes)}function Ly(o){const e=this;e.registry.off(`load:${o.id}`,hc,e),e.registry.on(`load:${o.id}`,hc,e),e.registry.off(`remove:${o.id}`,Iy,e),e.registry.once(`remove:${o.id}`,Iy,e),o.resource?hc.call(e,o):e.registry.load(o)}function Iy(o){const e=this;e.registry.off(`load:${o.id}`,hc,e),e.resource&&e.resource.destroy()}class hG extends Ne{constructor(e){super(e,"render"),this._registry=e.assets}open(e,t){return new Kc}patch(e,t){if(!e.data.containerAsset)return;const s=t.get(e.data.containerAsset);if(!s){t.once(`add:${e.data.containerAsset}`,Ly,e);return}Ly.call(e,s)}}class AE{constructor(e,t,s,i){this._paths=e,this._input=t,this._output=s,this._interpolation=i}get paths(){return this._paths}get input(){return this._input}get output(){return this._output}get interpolation(){return this._interpolation}}class Zc{constructor(e,t){this._components=e,this._data=t}get components(){return this._components}get data(){return this._data}}function cG(o,e){let t;const r=(u,p)=>{switch(p){case t.DT_INT8:return new Int8Array(u.buffer,u.byteOffset,u.byteLength);case t.DT_INT16:return new Int16Array(u.buffer,u.byteOffset,u.byteLength/2);case t.DT_INT32:return new Int32Array(u.buffer,u.byteOffset,u.byteLength/4);case t.DT_UINT8:return new Uint8Array(u.buffer,u.byteOffset,u.byteLength);case t.DT_UINT16:return new Uint16Array(u.buffer,u.byteOffset,u.byteLength/2);case t.DT_UINT32:return new Uint32Array(u.buffer,u.byteOffset,u.byteLength/4);case t.DT_FLOAT32:return new Float32Array(u.buffer,u.byteOffset,u.byteLength/4)}return null},a=u=>{switch(u){case t.DT_INT8:return 1;case t.DT_INT16:return 2;case t.DT_INT32:return 4;case t.DT_UINT8:return 1;case t.DT_UINT16:return 2;case t.DT_UINT32:return 4;case t.DT_FLOAT32:return 4}return 1},n=u=>u.num_components()*a(u.data_type()),l={0:0,1:1,5:2,2:3,7:4,8:5,4:6,3:7},h=(u,p)=>{const m=(L,D,k)=>{L[0]=D[0]-k[0],L[1]=D[1]-k[1],L[2]=D[2]-k[2]},_=(L,D,k)=>{L[0]=D[1]*k[2]-k[1]*D[2],L[1]=D[2]*k[0]-k[2]*D[0],L[2]=D[0]*k[1]-k[0]*D[1]},g=(L,D)=>{const k=L[D+0],G=L[D+1],U=L[D+2],C=1/Math.sqrt(k*k+G*G+U*U);L[D+0]*=C,L[D+1]*=C,L[D+2]*=C},y=(L,D,k)=>{for(let G=0;G<3;++G)L[G]=D[k+G]},A=p.length/3,v=u.length/3,S=new Float32Array(u.length),b=[0,0,0],E=[0,0,0],T=[0,0,0],w=[0,0,0],P=[0,0,0],M=[0,0,0];for(let L=0;L<A;++L){const D=p[L*3+0]*3,k=p[L*3+1]*3,G=p[L*3+2]*3;y(b,u,D),y(E,u,k),y(T,u,G),m(w,E,b),m(P,T,b),_(M,w,P),g(M,0);for(let U=0;U<3;++U)S[D+U]+=M[U],S[k+U]+=M[U],S[G+U]+=M[U]}for(let L=0;L<v;++L)g(S,L*3);return new Uint8Array(S.buffer)},c=u=>{const p={},m=new t.DecoderBuffer;m.Init(u,u.length);const _=new t.Decoder;if(_.GetEncodedGeometryType(m)!==t.TRIANGULAR_MESH)return p.error="Failed to decode draco mesh: not a mesh",p;const g=new t.Mesh,y=_.DecodeBufferToMesh(m,g);if(!y||!y.ok()||t.getPointer(g)===0)return p.error="Failed to decode draco asset",p;const A=g.num_faces()*3,v=g.num_points()<=65535,S=A*(v?2:4),b=t._malloc(S);v?(_.GetTrianglesUInt16Array(g,S,b),p.indices=new Uint16Array(t.HEAPU16.buffer,b,A).slice().buffer):(_.GetTrianglesUInt32Array(g,S,b),p.indices=new Uint32Array(t.HEAPU32.buffer,b,A).slice().buffer),t._free(b);const E=[];for(let D=0;D<g.num_attributes();++D)E.push(_.GetAttribute(g,D));E.sort((D,k)=>(l[D.attribute_type()]??l.length)-(l[k.attribute_type()]??l.length)),p.attributes=E.map(D=>D.unique_id());let T=0;const w=E.map(D=>{const k=T;return T+=Math.ceil(n(D)/4)*4,k}),P=E.some(D=>D.attribute_type()===1),M=w[1];if(!P){for(let D=1;D<w.length;++D)w[D]+=12;T+=12}p.vertices=new ArrayBuffer(g.num_points()*T);const L=new Uint8Array(p.vertices);for(let D=0;D<g.num_attributes();++D){const k=E[D],G=n(k),U=g.num_points()*G,C=t._malloc(U);_.GetAttributeDataArrayForAllPoints(g,k,k.data_type(),U,C);const I=new Uint8Array(t.HEAPU8.buffer,C,U);for(let R=0;R<g.num_points();++R)for(let O=0;O<G;++O)L[R*T+w[D]+O]=I[R*G+O];if(!P&&k.attribute_type()===0){const R=h(r(I,k.data_type()),v?new Uint16Array(p.indices):new Uint32Array(p.indices));for(let O=0;O<g.num_points();++O)for(let N=0;N<12;++N)L[O*T+M+N]=R[O*12+N]}t._free(C)}return t.destroy(g),t.destroy(_),t.destroy(m),p},d=u=>{const p=c(new Uint8Array(u.buffer));self.postMessage({jobId:u.jobId,error:p.error,indices:p.indices,vertices:p.vertices,attributes:p.attributes},[p.indices,p.vertices].filter(m=>m!=null))},f=[];self.onmessage=u=>{const p=u.data;switch(p.type){case"init":self.DracoDecoderModule({instantiateWasm:(m,_)=>(WebAssembly.instantiate(p.module,m).then(g=>_(g)).catch(g=>console.error(`instantiate failed + ${g}`)),{})}).then(m=>{t=m,f.forEach(_=>d(_))});break;case"decodeMesh":t?d(p):f.push(p);break}}}const My=3;class dG{constructor(){this.workers=[[],[],[]],this.jobId=0,this.jobQueue=[],this.jobCallbacks=new Map,this.run=(e,t)=>{e.postMessage({type:"decodeMesh",jobId:t.jobId,buffer:t.buffer},[t.buffer])}}init(e){for(e.forEach(t=>{t.addEventListener("message",s=>{const i=s.data,r=this.jobCallbacks.get(i.jobId);if(r&&r(i.error,{indices:i.indices,vertices:i.vertices,attributes:i.attributes}),this.jobCallbacks.delete(i.jobId),this.jobQueue.length>0){const a=this.jobQueue.shift();this.run(t,a)}else{const a=this.workers[2].indexOf(t);if(a!==-1)this.workers[2].splice(a,1),this.workers[1].push(t);else{const n=this.workers[1].indexOf(t);n!==-1&&(this.workers[1].splice(n,1),this.workers[0].push(t))}}})}),this.workers[0]=e;this.jobQueue.length&&(this.workers[0].length||this.workers[1].length);){const t=this.jobQueue.shift();if(this.workers[0].length>0){const s=this.workers[0].shift();this.workers[1].push(s),this.run(s,t)}else{const s=this.workers[1].shift();this.workers[2].push(s),this.run(s,t)}}}enqueueJob(e,t){const s={jobId:this.jobId++,buffer:e};if(this.jobCallbacks.set(s.jobId,t),this.workers[0].length>0){const i=this.workers[0].shift();this.workers[1].push(i),this.run(i,s)}else if(this.workers[1].length>0){const i=this.workers[1].shift();this.workers[2].push(i),this.run(i,s)}else this.jobQueue.push(s)}}const fG=o=>new Promise((e,t)=>{const s={cache:!0,responseType:"text",retry:My>0,maxRetries:My};He.get(o,s,(i,r)=>{i?t(i):e(r)})}),uG=o=>{const e=()=>fetch(o).then(s=>s.arrayBuffer()).then(s=>WebAssembly.compile(s)),t=()=>WebAssembly.compileStreaming(fetch(o)).catch(s=>e());return WebAssembly.compileStreaming?t():e()},Dy=1;let cc;const pG=o=>{if(cc)return!0;if(!o){const e=eT.getConfig("DracoDecoderModule");e?o={jsUrl:e.glueUrl,wasmUrl:e.wasmUrl,numWorkers:e.numWorkers}:o={jsUrl:"draco.wasm.js",wasmUrl:"draco.wasm.wasm",numWorkers:Dy}}return!o.jsUrl||!o.wasmUrl?!1:(cc=new dG,Promise.all([fG(o.jsUrl),uG(o.wasmUrl)]).then(([e,t])=>{const s=["/* draco */",e,"/* worker */",`(
${cG.toString()}
)()

`].join(`
`),i=new Blob([s],{type:"application/javascript"}),r=URL.createObjectURL(i),a=Math.max(1,Math.min(16,o.numWorkers||Dy)),n=[];for(let l=0;l<a;++l){const h=new Worker(r);h.postMessage({type:"init",module:t}),n.push(h)}cc.init(n)}),!0)},mG=(o,e)=>pG()?(cc.enqueueJob(o,e),!0):!1;class _G{destroy(){this.renders&&this.renders.forEach(e=>{e.meshes=null})}}const bE=o=>/^data:[^\n\r,\u2028\u2029]*,.*$/i.test(o),gG=o=>o.substring(o.indexOf(":")+1,o.indexOf(";")),bl=o=>{switch(o){case"SCALAR":return 1;case"VEC2":return 2;case"VEC3":return 3;case"VEC4":return 4;case"MAT2":return 4;case"MAT3":return 9;case"MAT4":return 16;default:return 3}},_f=o=>{switch(o){case 5120:return Hd;case 5121:return Zr;case 5122:return Gd;case 5123:return zl;case 5124:return ET;case 5125:return Wd;case 5126:return Le;default:return 0}},vG=o=>{switch(o){case 5120:return 1;case 5121:return 1;case 5122:return 2;case 5123:return 2;case 5124:return 4;case 5125:return 4;case 5126:return 4;default:return 0}},SG=o=>{switch(o){case 5120:return Int8Array;case 5121:return Uint8Array;case 5122:return Int16Array;case 5123:return Uint16Array;case 5124:return Int32Array;case 5125:return Uint32Array;case 5126:return Float32Array;default:return null}},Qc={POSITION:ue,NORMAL:Ht,TANGENT:ei,COLOR_0:gt,JOINTS_0:Ft,WEIGHTS_0:Qs,TEXCOORD_0:as,TEXCOORD_1:ba,TEXCOORD_2:Nl,TEXCOORD_3:Fl,TEXCOORD_4:kl,TEXCOORD_5:Ul,TEXCOORD_6:Bl,TEXCOORD_7:Vl},Ry={[ue]:0,[Ht]:1,[ei]:2,[gt]:3,[Ft]:4,[Qs]:5,[as]:6,[ba]:7,[Nl]:8,[Fl]:9,[kl]:10,[Ul]:11,[Bl]:12,[Vl]:13},yG=o=>{switch(o){case Hd:return e=>Math.max(e/127,-1);case Zr:return e=>e/255;case Gd:return e=>Math.max(e/32767,-1);case zl:return e=>e/65535;default:return e=>e}},Zp=(o,e,t)=>{const s=yG(t),i=e.length;for(let r=0;r<i;++r)o[r]=s(e[r]);return o},ra=(o,e,t=!1)=>{const s=bl(o.type),i=SG(o.componentType);if(!i)return null;let r;if(o.sparse){const a=o.sparse,n={count:a.count,type:"SCALAR"},l=ra(Object.assign(n,a.indices),e,!0),h={count:a.count,type:o.type,componentType:o.componentType},c=ra(Object.assign(h,a.values),e,!0);if(o.hasOwnProperty("bufferView")){const d={bufferView:o.bufferView,byteOffset:o.byteOffset,componentType:o.componentType,count:o.count,type:o.type};r=ra(d,e,!0).slice()}else r=new i(o.count*s);for(let d=0;d<a.count;++d){const f=l[d];for(let u=0;u<s;++u)r[f*s+u]=c[d*s+u]}}else if(o.hasOwnProperty("bufferView")){const a=e[o.bufferView];if(t&&a.hasOwnProperty("byteStride")){const n=s*i.BYTES_PER_ELEMENT,l=new ArrayBuffer(o.count*n),h=new Uint8Array(l);let c=0;for(let d=0;d<o.count;++d){let f=(o.byteOffset||0)+d*a.byteStride;for(let u=0;u<n;++u)h[c++]=a[f++]}r=new i(l)}else r=new i(a.buffer,a.byteOffset+(o.byteOffset||0),o.count*s)}else r=new i(o.count*s);return r},Un=(o,e)=>{const t=ra(o,e,!0);if(t instanceof Float32Array||!o.normalized)return t;const s=new Float32Array(t.length);return Zp(s,t,_f(o.componentType)),s},Qp=o=>{let e=o.min,t=o.max;if(!e||!t)return null;if(o.normalized){const s=_f(o.componentType);e=Zp([],e,s),t=Zp([],t,s)}return new fe(new x((t[0]+e[0])*.5,(t[1]+e[1])*.5,(t[2]+e[2])*.5),new x((t[0]-e[0])*.5,(t[1]-e[1])*.5,(t[2]-e[2])*.5))},wE=o=>{if(!o.hasOwnProperty("mode"))return Ci;switch(o.mode){case 0:return Vd;case 1:return zd;case 2:return ST;case 3:return yT;case 4:return Ci;case 5:return dr;case 6:return Kr;default:return Ci}},TG=o=>{const e=new Uint16Array(o);for(let t=0;t<o;t++)e[t]=t;return e},xG=(o,e)=>{const t=o[ue];if(!t||t.components!==3)return;let s;if(t.size!==t.stride){const n=t.stride/Yo[t.type],l=new Dn[t.type](t.buffer,t.offset,t.count*n);s=new Dn[t.type](t.count*3);for(let h=0;h<t.count;++h)s[h*3+0]=l[h*n+0],s[h*3+1]=l[h*n+1],s[h*3+2]=l[h*n+2]}else s=new Dn[t.type](t.buffer,t.offset,t.count*3);const i=t.count;e||(e=TG(i));const r=Lx(s,e),a=new Float32Array(r.length);a.set(r),o[Ht]={buffer:a.buffer,size:12,offset:0,stride:12,count:i,components:3,type:Le}},EG=o=>{const e=s=>{const i=[];for(let r=0;r<s._levels.length;++r){let a=[];if(s.cubemap)for(let n=0;n<6;++n)a.push(s._levels[r][n]);else a=s._levels[r];i.push(a)}return i},t=new ae(o.device,o);return t._levels=e(o),t},AG=o=>{const e=new ie(`${o.name}_clone`,o.type,o.file,o.data,o.options);return e.loaded=!0,e.resource=EG(o.resource),o.registry.add(e),e},bG=(o,e)=>{const t=e[ue];if(!t)return null;const s=t.count,i=[];for(const g in e)if(e.hasOwnProperty(g)){const y={semantic:g,components:e[g].components,type:e[g].type,normalize:!!e[g].normalize};Wt.isElementValid(o,y)||y.components++,i.push(y)}i.sort((g,y)=>Ry[g.semantic]-Ry[y.semantic]);let r,a,n,l,h,c;const d=new Wt(o,i);let f=!0;for(r=0;r<d.elements.length;++r)if(h=d.elements[r],l=e[h.name],c=l.offset-t.offset,l.buffer!==t.buffer||l.stride!==h.stride||l.size!==h.size||c!==h.offset){f=!1;break}const u=new si(o,d,s),p=u.lock(),m=new Uint32Array(p);let _;if(f)_=new Uint32Array(t.buffer,t.offset,s*u.format.size/4),m.set(_);else{let g,y;for(r=0;r<u.format.elements.length;++r){h=u.format.elements[r],g=h.stride/4,l=e[h.name],y=l.stride/4,_=new Uint32Array(l.buffer,l.offset,(l.count-1)*y+(l.size+3)/4);let A=0,v=h.offset/4;const S=Math.floor((l.size+3)/4);for(a=0;a<s;++a){for(n=0;n<S;++n)m[v+n]=_[A+n];A+=y,v+=g}}}return u.unlock(),u},wG=(o,e,t,s,i,r)=>{const a={},n=[];for(const c in e)e.hasOwnProperty(c)&&Qc.hasOwnProperty(c)&&(a[c]=e[c],n.push(`${c}:${e[c]}`));n.sort();const l=n.join();let h=r[l];if(!h){const c={};for(const d in a){const f=s[e[d]],u=ra(f,i),p=i[f.bufferView],m=Qc[d],_=bl(f.type)*vG(f.componentType),g=p&&p.hasOwnProperty("byteStride")?p.byteStride:_;c[m]={buffer:u.buffer,size:_,offset:u.byteOffset,stride:g,count:f.count,components:bl(f.type),type:_f(f.componentType),normalize:f.normalized}}c.hasOwnProperty(Ht)||xG(c,t),h=bG(o,c),r[l]=h}return h},CG=(o,e,t,s,i,r)=>{let a,n,l;const h=e.joints,c=h.length,d=[];if(e.hasOwnProperty("inverseBindMatrices")){const m=e.inverseBindMatrices,_=ra(t[m],s,!0),g=[];for(a=0;a<c;a++){for(n=0;n<16;n++)g[n]=_[a*16+n];l=new $,l.set(g),d.push(l)}}else for(a=0;a<c;a++)l=new $,d.push(l);const f=[];for(a=0;a<c;a++)f[a]=i[h[a]].name;const u=f.join("#");let p=r.get(u);return p||(p=new Rx(o,d,f),r.set(u,p)),p},PG=(o,e,t,s,i,r,a)=>{const n=new De(o);n.aabb=Qp(t[e.attributes.POSITION]);const l=[];for(const[h,c]of Object.entries(e.attributes)){const d=t[c],f=Qc[h],u=_f(d.componentType);l.push({semantic:f,components:bl(d.type),type:u,normalize:d.normalized??(f===gt&&(u===Zr||u===zl))})}if(a.push(new Promise((h,c)=>{const d=e.extensions.KHR_draco_mesh_compression;mG(s[d.bufferView].slice().buffer,(f,u)=>{if(f)console.log(f),c(f);else{const p={};for(const[S,b]of Object.entries(d.attributes))p[Qc[S]]=u.attributes.indexOf(b);l.sort((S,b)=>p[S.semantic]-p[b.semantic]),e.attributes?.NORMAL||l.splice(1,0,{semantic:"NORMAL",components:3,type:Le});const m=new Wt(o,l),_=u.vertices.byteLength/m.size,g=_<=65535?hr:cr,y=u.indices.byteLength/(_<=65535?2:4),A=new si(o,m,_,{data:u.vertices}),v=new ua(o,g,y,Es,u.indices);n.vertexBuffer=A,n.indexBuffer[0]=v,n.primitive[0].type=wE(e),n.primitive[0].base=0,n.primitive[0].count=v?y:_,n.primitive[0].indexed=!!v,h()}})})),e?.extensions?.KHR_materials_variants){const h=e.extensions.KHR_materials_variants,c={};h.mappings.forEach(d=>{d.variants.forEach(f=>{c[f]=d.material})}),i[n.id]=c}return r[n.id]=e.material,n},LG=(o,e,t,s,i,r,a,n,l)=>{const h=[];return e.primitives.forEach(c=>{if(c.extensions?.KHR_draco_mesh_compression)h.push(PG(o,c,t,s,r,a,l));else{let d=c.hasOwnProperty("indices")?ra(t[c.indices],s,!0):null;const f=wG(o,c.attributes,d,t,s,i),u=wE(c),p=new De(o);if(p.vertexBuffer=f,p.primitive[0].type=u,p.primitive[0].base=0,p.primitive[0].indexed=d!==null,d!==null){let _;d instanceof Uint8Array?_=qu:d instanceof Uint16Array?_=hr:_=cr,_===qu&&o.isWebGPU&&(_=hr,d=new Uint16Array(d));const g=new ua(o,_,d.length,Es,d);p.indexBuffer[0]=g,p.primitive[0].count=d.length}else p.primitive[0].count=f.numVertices;if(c.hasOwnProperty("extensions")&&c.extensions.hasOwnProperty("KHR_materials_variants")){const _=c.extensions.KHR_materials_variants,g={};_.mappings.forEach(y=>{y.variants.forEach(A=>{g[A]=y.material})}),r[p.id]=g}a[p.id]=c.material;let m=t[c.attributes.POSITION];if(p.aabb=Qp(m),c.hasOwnProperty("targets")){const _=[];c.targets.forEach((g,y)=>{const A={};g.hasOwnProperty("POSITION")&&(m=t[g.POSITION],A.deltaPositions=Un(m,s),A.aabb=Qp(m)),g.hasOwnProperty("NORMAL")&&(m=t[g.NORMAL],A.deltaNormals=Un(m,s)),e.hasOwnProperty("extras")&&e.extras.hasOwnProperty("targetNames")?A.name=e.extras.targetNames[y]:A.name=y.toString(10),e.hasOwnProperty("weights")&&(A.defaultWeight=e.weights[y]),A.preserveData=n.morphPreserveData,_.push(new uf(A))}),p.morph=new Cx(_,o,{preferHighPrecision:n.morphPreferHighPrecision})}h.push(p)}}),h},at=(o,e,t)=>{let s;const i=o.texCoord;if(i)for(s=0;s<t.length;++s)e[`${t[s]}MapUv`]=i;const r=[0,0],a=[1,1],n=o.extensions?.KHR_texture_transform;if(n){const l=n.offset||r,h=n.scale||a,c=n.rotation?-n.rotation*B.RAD_TO_DEG:0,d=new z(h[0],h[1]),f=new z(l[0],1-h[1]-l[1]);for(s=0;s<t.length;++s)e[`${t[s]}MapTiling`]=d,e[`${t[s]}MapOffset`]=f,e[`${t[s]}MapRotation`]=c}},IG=(o,e,t)=>{let s,i;if(o.hasOwnProperty("diffuseFactor")?(s=o.diffuseFactor,e.diffuse.set(Math.pow(s[0],1/2.2),Math.pow(s[1],1/2.2),Math.pow(s[2],1/2.2)),e.opacity=s[3]):(e.diffuse.set(1,1,1),e.opacity=1),o.hasOwnProperty("diffuseTexture")){const r=o.diffuseTexture;i=t[r.index],e.diffuseMap=i,e.diffuseMapChannel="rgb",e.opacityMap=i,e.opacityMapChannel="a",at(r,e,["diffuse","opacity"])}if(e.useMetalness=!1,o.hasOwnProperty("specularFactor")?(s=o.specularFactor,e.specular.set(Math.pow(s[0],1/2.2),Math.pow(s[1],1/2.2),Math.pow(s[2],1/2.2))):e.specular.set(1,1,1),o.hasOwnProperty("glossinessFactor")?e.gloss=o.glossinessFactor:e.gloss=1,o.hasOwnProperty("specularGlossinessTexture")){const r=o.specularGlossinessTexture;e.specularMap=e.glossMap=t[r.index],e.specularMapChannel="rgb",e.glossMapChannel="a",at(r,e,["gloss","metalness"])}},MG=(o,e,t)=>{if(o.hasOwnProperty("clearcoatFactor")?e.clearCoat=o.clearcoatFactor*.25:e.clearCoat=0,o.hasOwnProperty("clearcoatTexture")){const s=o.clearcoatTexture;e.clearCoatMap=t[s.index],e.clearCoatMapChannel="r",at(s,e,["clearCoat"])}if(o.hasOwnProperty("clearcoatRoughnessFactor")?e.clearCoatGloss=o.clearcoatRoughnessFactor:e.clearCoatGloss=0,o.hasOwnProperty("clearcoatRoughnessTexture")){const s=o.clearcoatRoughnessTexture;e.clearCoatGlossMap=t[s.index],e.clearCoatGlossMapChannel="g",at(s,e,["clearCoatGloss"])}if(o.hasOwnProperty("clearcoatNormalTexture")){const s=o.clearcoatNormalTexture;e.clearCoatNormalMap=t[s.index],at(s,e,["clearCoatNormal"]),s.hasOwnProperty("scale")?e.clearCoatBumpiness=s.scale:e.clearCoatBumpiness=1}e.clearCoatGlossInvert=!0},DG=(o,e,t)=>{e.useLighting=!1,e.emissive.copy(e.diffuse),e.emissiveMap=e.diffuseMap,e.emissiveMapUv=e.diffuseMapUv,e.emissiveMapTiling.copy(e.diffuseMapTiling),e.emissiveMapOffset.copy(e.diffuseMapOffset),e.emissiveMapRotation=e.diffuseMapRotation,e.emissiveMapChannel=e.diffuseMapChannel,e.emissiveVertexColor=e.diffuseVertexColor,e.emissiveVertexColorChannel=e.diffuseVertexColorChannel,e.useLighting=!1,e.useSkybox=!1,e.diffuse.set(1,1,1),e.diffuseMap=null,e.diffuseVertexColor=!1},RG=(o,e,t)=>{if(e.useMetalnessSpecularColor=!0,o.hasOwnProperty("specularColorTexture")&&(e.specularMap=t[o.specularColorTexture.index],e.specularMapChannel="rgb",at(o.specularColorTexture,e,["specular"])),o.hasOwnProperty("specularColorFactor")){const s=o.specularColorFactor;e.specular.set(Math.pow(s[0],1/2.2),Math.pow(s[1],1/2.2),Math.pow(s[2],1/2.2))}else e.specular.set(1,1,1);o.hasOwnProperty("specularFactor")?e.specularityFactor=o.specularFactor:e.specularityFactor=1,o.hasOwnProperty("specularTexture")&&(e.specularityFactorMapChannel="a",e.specularityFactorMap=t[o.specularTexture.index],at(o.specularTexture,e,["specularityFactor"]))},OG=(o,e,t)=>{o.hasOwnProperty("ior")&&(e.refractionIndex=1/o.ior)},NG=(o,e,t)=>{o.hasOwnProperty("dispersion")&&(e.dispersion=o.dispersion)},FG=(o,e,t)=>{e.blendType=ii,e.useDynamicRefraction=!0,o.hasOwnProperty("transmissionFactor")&&(e.refraction=o.transmissionFactor),o.hasOwnProperty("transmissionTexture")&&(e.refractionMapChannel="r",e.refractionMap=t[o.transmissionTexture.index],at(o.transmissionTexture,e,["refraction"]))},kG=(o,e,t)=>{if(e.useSheen=!0,o.hasOwnProperty("sheenColorFactor")){const s=o.sheenColorFactor;e.sheen.set(Math.pow(s[0],1/2.2),Math.pow(s[1],1/2.2),Math.pow(s[2],1/2.2))}else e.sheen.set(1,1,1);o.hasOwnProperty("sheenColorTexture")&&(e.sheenMap=t[o.sheenColorTexture.index],at(o.sheenColorTexture,e,["sheen"])),e.sheenGloss=o.hasOwnProperty("sheenRoughnessFactor")?o.sheenRoughnessFactor:0,o.hasOwnProperty("sheenRoughnessTexture")&&(e.sheenGlossMap=t[o.sheenRoughnessTexture.index],e.sheenGlossMapChannel="a",at(o.sheenRoughnessTexture,e,["sheenGloss"])),e.sheenGlossInvert=!0},UG=(o,e,t)=>{if(e.blendType=ii,e.useDynamicRefraction=!0,o.hasOwnProperty("thicknessFactor")&&(e.thickness=o.thicknessFactor),o.hasOwnProperty("thicknessTexture")&&(e.thicknessMap=t[o.thicknessTexture.index],e.thicknessMapChannel="g",at(o.thicknessTexture,e,["thickness"])),o.hasOwnProperty("attenuationDistance")&&(e.attenuationDistance=o.attenuationDistance),o.hasOwnProperty("attenuationColor")){const s=o.attenuationColor;e.attenuation.set(Math.pow(s[0],1/2.2),Math.pow(s[1],1/2.2),Math.pow(s[2],1/2.2))}},BG=(o,e,t)=>{o.hasOwnProperty("emissiveStrength")&&(e.emissiveIntensity=o.emissiveStrength)},VG=(o,e,t)=>{e.useIridescence=!0,o.hasOwnProperty("iridescenceFactor")&&(e.iridescence=o.iridescenceFactor),o.hasOwnProperty("iridescenceTexture")&&(e.iridescenceMapChannel="r",e.iridescenceMap=t[o.iridescenceTexture.index],at(o.iridescenceTexture,e,["iridescence"])),o.hasOwnProperty("iridescenceIor")&&(e.iridescenceRefractionIndex=o.iridescenceIor),o.hasOwnProperty("iridescenceThicknessMinimum")&&(e.iridescenceThicknessMin=o.iridescenceThicknessMinimum),o.hasOwnProperty("iridescenceThicknessMaximum")&&(e.iridescenceThicknessMax=o.iridescenceThicknessMaximum),o.hasOwnProperty("iridescenceThicknessTexture")&&(e.iridescenceThicknessMapChannel="g",e.iridescenceThicknessMap=t[o.iridescenceThicknessTexture.index],at(o.iridescenceThicknessTexture,e,["iridescenceThickness"]))},zG=(o,e,t)=>{if(e.enableGGXSpecular=!0,o.hasOwnProperty("anisotropyStrength")?e.anisotropyIntensity=o.anisotropyStrength:e.anisotropyIntensity=0,o.hasOwnProperty("anisotropyTexture")){const s=o.anisotropyTexture;e.anisotropyMap=t[s.index],at(s,e,["anisotropy"])}o.hasOwnProperty("anisotropyRotation")?e.anisotropyRotation=o.anisotropyRotation*B.RAD_TO_DEG:e.anisotropyRotation=0},CE=(o,e)=>{const t=new bs;o.hasOwnProperty("name")&&(t.name=o.name),t.occludeSpecular=rf,t.diffuseVertexColor=!0,t.specularTint=!0,t.specularVertexColor=!0,t.specular.set(1,1,1),t.gloss=1,t.glossInvert=!0,t.useMetalness=!0;let s,i;if(o.hasOwnProperty("pbrMetallicRoughness")){const a=o.pbrMetallicRoughness;if(a.hasOwnProperty("baseColorFactor")&&(s=a.baseColorFactor,t.diffuse.set(Math.pow(s[0],1/2.2),Math.pow(s[1],1/2.2),Math.pow(s[2],1/2.2)),t.opacity=s[3]),a.hasOwnProperty("baseColorTexture")){const n=a.baseColorTexture;i=e[n.index],t.diffuseMap=i,t.diffuseMapChannel="rgb",t.opacityMap=i,t.opacityMapChannel="a",at(n,t,["diffuse","opacity"])}if(a.hasOwnProperty("metallicFactor")&&(t.metalness=a.metallicFactor),a.hasOwnProperty("roughnessFactor")&&(t.gloss=a.roughnessFactor),a.hasOwnProperty("metallicRoughnessTexture")){const n=a.metallicRoughnessTexture;t.metalnessMap=t.glossMap=e[n.index],t.metalnessMapChannel="b",t.glossMapChannel="g",at(n,t,["gloss","metalness"])}}if(o.hasOwnProperty("normalTexture")){const a=o.normalTexture;t.normalMap=e[a.index],at(a,t,["normal"]),a.hasOwnProperty("scale")&&(t.bumpiness=a.scale)}if(o.hasOwnProperty("occlusionTexture")){const a=o.occlusionTexture;t.aoMap=e[a.index],t.aoMapChannel="r",at(a,t,["ao"])}if(o.hasOwnProperty("emissiveFactor")&&(s=o.emissiveFactor,t.emissive.set(Math.pow(s[0],1/2.2),Math.pow(s[1],1/2.2),Math.pow(s[2],1/2.2))),o.hasOwnProperty("emissiveTexture")){const a=o.emissiveTexture;t.emissiveMap=e[a.index],at(a,t,["emissive"])}if(o.hasOwnProperty("alphaMode"))switch(o.alphaMode){case"MASK":t.blendType=ts,o.hasOwnProperty("alphaCutoff")?t.alphaTest=o.alphaCutoff:t.alphaTest=.5;break;case"BLEND":t.blendType=ii,t.depthWrite=!1;break;default:case"OPAQUE":t.blendType=ts;break}else t.blendType=ts;o.hasOwnProperty("doubleSided")?(t.twoSidedLighting=o.doubleSided,t.cull=o.doubleSided?lt:la):(t.twoSidedLighting=!1,t.cull=la);const r={KHR_materials_clearcoat:MG,KHR_materials_emissive_strength:BG,KHR_materials_ior:OG,KHR_materials_dispersion:NG,KHR_materials_iridescence:VG,KHR_materials_pbrSpecularGlossiness:IG,KHR_materials_sheen:kG,KHR_materials_specular:RG,KHR_materials_transmission:FG,KHR_materials_unlit:DG,KHR_materials_volume:UG,KHR_materials_anisotropy:zG};if(o.hasOwnProperty("extensions"))for(const a in o.extensions){const n=r[a];n!==void 0&&n(o.extensions[a],t,e)}return t.update(),t},HG=(o,e,t,s,i,r,a)=>{const n=T=>new Zc(bl(T.type),Un(T,s)),l={STEP:Gx,LINEAR:Tp,CUBICSPLINE:xp},h={},c={},d={};let f=1,u;for(u=0;u<o.samplers.length;++u){const T=o.samplers[u];h.hasOwnProperty(T.input)||(h[T.input]=n(t[T.input])),c.hasOwnProperty(T.output)||(c[T.output]=n(t[T.output]));const w=T.hasOwnProperty("interpolation")&&l.hasOwnProperty(T.interpolation)?l[T.interpolation]:Tp,P={paths:[],input:T.input,output:T.output,interpolation:w};d[u]=P}const p=[],m={translation:"localPosition",rotation:"localRotation",scale:"localScale"},_=T=>{const w=[];for(;T;)w.unshift(T.name),T=T.parent;return w},g=(T,w,P)=>{const M=c[T.output];if(!M)return;let L;if(r&&r[w.mesh]){const I=r[w.mesh];I.hasOwnProperty("extras")&&I.extras.hasOwnProperty("targetNames")&&(L=I.extras.targetNames)}const D=M.data,k=D.length/h[T.input].data.length,G=D.length/k,U=G*4,C=new ArrayBuffer(U*k);for(let I=0;I<k;I++){const R=new Float32Array(C,U*I,G);for(let W=0;W<G;W++)R[W]=D[W*k+I];const O=new Zc(1,R),N=L?.[I]?`name.${L[I]}`:I;c[-f]=O;const F={paths:[{entityPath:P,component:"graph",propertyPath:[`weight.${N}`]}],input:T.input,output:-f,interpolation:T.interpolation};f++,d[`morphCurve-${u}-${I}`]=F}};for(u=0;u<o.channels.length;++u){const T=o.channels[u],w=T.target,P=d[T.sampler],M=i[w.node],L=a[w.node],D=_(M);w.path.startsWith("weights")?(g(P,L,D),d[T.sampler].morphCurve=!0):P.paths.push({entityPath:D,component:"graph",propertyPath:[m[w.path]]})}const y=[],A=[],v=[];for(const T in h)y.push(h[T]),h[T]=y.length-1;for(const T in c)A.push(c[T]),c[T]=A.length-1;for(const T in d){const w=d[T];w.morphCurve||(v.push(new AE(w.paths,h[w.input],c[w.output],w.interpolation)),w.paths.length>0&&w.paths[0].propertyPath[0]==="localRotation"&&w.interpolation!==xp&&p.push(v[v.length-1].output))}p.sort();let S=null,b;for(u=0;u<p.length;++u){const T=p[u];if(u===0||T!==S){if(b=A[T],b.components===4){const w=b.data,P=w.length-4;for(let M=0;M<P;M+=4)w[M+0]*w[M+4]+w[M+1]*w[M+5]+w[M+2]*w[M+6]+w[M+3]*w[M+7]<0&&(w[M+4]*=-1,w[M+5]*=-1,w[M+6]*=-1,w[M+7]*=-1)}S=T}}let E=0;for(u=0;u<y.length;u++)b=y[u]._data,E=Math.max(E,b.length===0?0:b[b.length-1]);return new Di(o.hasOwnProperty("name")?o.name:`animation_${e}`,E,y,A,v)},Gh=new $,an=new x,GG=(o,e,t)=>{const s=new ze;if(o.hasOwnProperty("name")&&o.name.length>0?s.name=o.name:s.name=`node_${e}`,o.hasOwnProperty("matrix")&&(Gh.data.set(o.matrix),Gh.getTranslation(an),s.setLocalPosition(an),Gh.getEulerAngles(an),s.setLocalEulerAngles(an),Gh.getScale(an),s.setLocalScale(an)),o.hasOwnProperty("rotation")){const i=o.rotation;s.setLocalRotation(i[0],i[1],i[2],i[3])}if(o.hasOwnProperty("translation")){const i=o.translation;s.setLocalPosition(i[0],i[1],i[2])}if(o.hasOwnProperty("scale")){const i=o.scale;s.setLocalScale(i[0],i[1],i[2])}return o.hasOwnProperty("extensions")&&o.extensions.EXT_mesh_gpu_instancing&&t.set(o,{ext:o.extensions.EXT_mesh_gpu_instancing}),s},WG=(o,e)=>{const t=o.type==="orthographic"?Rn:zs,s=t===Rn?o.orthographic:o.perspective,i={enabled:!1,projection:t,nearClip:s.znear,aspectRatioMode:Q_};s.zfar&&(i.farClip=s.zfar),t===Rn?(i.orthoHeight=.5*s.ymag,s.ymag&&(i.aspectRatioMode=cp,i.aspectRatio=s.xmag/s.ymag)):(i.fov=s.yfov*B.RAD_TO_DEG,s.aspectRatio&&(i.aspectRatioMode=cp,i.aspectRatio=s.aspectRatio));const r=new Ve(o.name);return r.addComponent("camera",i),r},$G=(o,e)=>{const t={enabled:!1,type:o.type==="point"?"omni":o.type,color:o.hasOwnProperty("color")?new q(o.color):q.WHITE,range:o.hasOwnProperty("range")?o.range:9999,falloffMode:tx,intensity:o.hasOwnProperty("intensity")?B.clamp(o.intensity,0,2):1};o.hasOwnProperty("spot")&&(t.innerConeAngle=o.spot.hasOwnProperty("innerConeAngle")?o.spot.innerConeAngle*B.RAD_TO_DEG:0,t.outerConeAngle=o.spot.hasOwnProperty("outerConeAngle")?o.spot.outerConeAngle*B.RAD_TO_DEG:Math.PI/4),o.hasOwnProperty("intensity")&&(t.luminance=o.intensity*Sl.getLightUnitConversion(fp[t.type],t.outerConeAngle,t.innerConeAngle));const s=new Ve(e.name);return s.rotateLocal(90,0,0),s.addComponent("light",t),s},XG=(o,e,t,s)=>{if(!e.hasOwnProperty("skins")||e.skins.length===0)return[];const i=new Map;return e.skins.map(r=>CG(o,r,e.accessors,s,t,i))},qG=(o,e,t,s)=>{const i={},r={},a={},n=[];return{meshes:!s.skipMeshes&&e?.meshes?.length&&e?.accessors?.length&&e?.bufferViews?.length?e.meshes.map(c=>LG(o,c,e.accessors,t,i,r,a,s,n)):[],meshVariants:r,meshDefaultMaterials:a,promises:n}},YG=(o,e,t)=>{if(!o.hasOwnProperty("materials")||o.materials.length===0)return[];const s=t?.material?.preprocess,i=t?.material?.process??CE,r=t?.material?.postprocess;return o.materials.map(a=>{s&&s(a);const n=i(a,e);return r&&r(a,n),n})},jG=o=>{if(!o.hasOwnProperty("extensions")||!o.extensions.hasOwnProperty("KHR_materials_variants"))return null;const e=o.extensions.KHR_materials_variants.variants,t={};for(let s=0;s<e.length;s++)t[e[s].name]=s;return t},KG=(o,e,t,s)=>{if(!o.hasOwnProperty("animations")||o.animations.length===0)return[];const i=s?.animation?.preprocess,r=s?.animation?.postprocess;return o.animations.map((a,n)=>{i&&i(a);const l=HG(a,n,o.accessors,t,e,o.meshes,o.nodes);return r&&r(a,l),l})},ZG=(o,e,t,s)=>{const i=e.accessors;t.forEach((r,a)=>{const n=r.ext.attributes;let l;if(n.hasOwnProperty("TRANSLATION")){const f=i[n.TRANSLATION];l=Un(f,s)}let h;if(n.hasOwnProperty("ROTATION")){const f=i[n.ROTATION];h=Un(f,s)}let c;if(n.hasOwnProperty("SCALE")){const f=i[n.SCALE];c=Un(f,s)}const d=(l?l.length/3:0)||(h?h.length/4:0)||(c?c.length/3:0);if(d){const f=new Float32Array(d*16),u=new x,p=new Q,m=new x(1,1,1),_=new $;let g=0;for(let y=0;y<d;y++){const A=y*3;if(l&&u.set(l[A],l[A+1],l[A+2]),h){const v=y*4;p.set(h[v],h[v+1],h[v+2],h[v+3])}c&&m.set(c[A],c[A+1],c[A+2]),_.setTRS(u,p,m);for(let v=0;v<16;v++)f[g++]=_.data[v]}r.matrices=f}})},QG=(o,e,t)=>{if(!o.hasOwnProperty("nodes")||o.nodes.length===0)return[];const s=e?.node?.preprocess,i=e?.node?.process??GG,r=e?.node?.postprocess,a=o.nodes.map((n,l)=>{s&&s(n);const h=i(n,l,t);return r&&r(n,h),h});for(let n=0;n<o.nodes.length;++n){const l=o.nodes[n];if(l.hasOwnProperty("children")){const h=a[n],c={};for(let d=0;d<l.children.length;++d){const f=a[l.children[d]];f.parent||(c.hasOwnProperty(f.name)?f.name+=c[f.name]++:c[f.name]=1,h.addChild(f))}}}return a},JG=(o,e)=>{const t=[],s=o.scenes.length;if(s===1&&o.scenes[0].nodes?.length===1){const i=o.scenes[0].nodes[0];t.push(e[i])}else for(let i=0;i<s;i++){const r=o.scenes[i];if(r.nodes){const a=new ze(r.name);for(let n=0;n<r.nodes.length;n++){const l=e[r.nodes[n]];a.addChild(l)}t.push(a)}}return t},e4=(o,e,t)=>{let s=null;if(o.hasOwnProperty("nodes")&&o.hasOwnProperty("cameras")&&o.cameras.length>0){const i=t?.camera?.preprocess,r=t?.camera?.process??WG,a=t?.camera?.postprocess;o.nodes.forEach((n,l)=>{if(n.hasOwnProperty("camera")){const h=o.cameras[n.camera];if(h){i&&i(h);const c=r(h,e[l]);a&&a(h,c),c&&(s||(s=new Map),s.set(n,c))}}})}return s},t4=(o,e,t)=>{let s=null;if(o.hasOwnProperty("nodes")&&o.hasOwnProperty("extensions")&&o.extensions.hasOwnProperty("KHR_lights_punctual")&&o.extensions.KHR_lights_punctual.hasOwnProperty("lights")){const i=o.extensions.KHR_lights_punctual.lights;if(i.length){const r=t?.light?.preprocess,a=t?.light?.process??$G,n=t?.light?.postprocess;o.nodes.forEach((l,h)=>{if(l.hasOwnProperty("extensions")&&l.extensions.hasOwnProperty("KHR_lights_punctual")&&l.extensions.KHR_lights_punctual.hasOwnProperty("light")){const c=l.extensions.KHR_lights_punctual.light,d=i[c];if(d){r&&r(d);const f=a(d,e[h]);n&&n(d,f),f&&(s||(s=new Map),s.set(l,f))}}})}}return s},s4=(o,e,t)=>{o.nodes.forEach(s=>{s.hasOwnProperty("mesh")&&s.hasOwnProperty("skin")&&e[s.mesh].meshes.forEach(r=>{r.skin=t[s.skin]})})},i4=async(o,e,t,s,i)=>{const r=i?.global?.preprocess,a=i?.global?.postprocess;r&&r(e),e.asset&&e.asset.generator;const n=new Map,l=QG(e,i,n),h=JG(e,l),c=t4(e,l,i),d=e4(e,l,i),f=jG(e),u=await Promise.all(t),{meshes:p,meshVariants:m,meshDefaultMaterials:_,promises:g}=qG(o,e,u,i),y=KG(e,l,u,i);ZG(o,e,n,u);const A=await Promise.all(s),v=A.map(w=>w.resource),S=YG(e,v,i),b=XG(o,e,l,u),E=[];for(let w=0;w<p.length;w++)E[w]=new Kc,E[w].meshes=p[w];s4(e,E,b);const T=new _G;return T.gltf=e,T.nodes=l,T.scenes=h,T.animations=y,T.textures=A,T.materials=S,T.variants=f,T.meshVariants=m,T.meshDefaultMaterials=_,T.renders=E,T.skins=b,T.lights=c,T.cameras=d,T.nodeInstancingMap=n,a&&a(e,T),await Promise.all(g),T},r4=(o,e)=>{const t=(i,r)=>{switch(i){case 9728:return pe;case 9729:return Ze;case 9984:return wd;case 9985:return Pd;case 9986:return Cd;case 9987:return ha;default:return r}},s=(i,r)=>{switch(i){case 33071:return te;case 33648:return Bm;case 10497:return ot;default:return r}};o&&(e=e??{},o.minFilter=t(e.minFilter,ha),o.magFilter=t(e.magFilter,Ze),o.addressU=s(e.wrapS,ot),o.addressV=s(e.wrapT,ot))};let a4=0;const fn=o=>o.extensions?.KHR_texture_basisu?.source??o.extensions?.EXT_texture_webp?.source??o.source,n4=(o,e,t,s,i)=>{if(!o.images||o.images.length===0)return[];const r=i?.image?.preprocess,a=i?.image?.processAsync,n=i?.image?.postprocess,l={"image/png":"png","image/jpeg":"jpg","image/basis":"basis","image/ktx":"ktx","image/ktx2":"ktx2","image/vnd-ms.dds":"dds"},h=f=>{const u=new Set;return f.hasOwnProperty("materials")&&f.materials.forEach(p=>{if(p.hasOwnProperty("pbrMetallicRoughness")){const m=p.pbrMetallicRoughness;if(m.hasOwnProperty("baseColorTexture")){const _=f.textures[m.baseColorTexture.index];u.add(fn(_))}}if(p.hasOwnProperty("emissiveTexture")){const m=f.textures[p.emissiveTexture.index];u.add(fn(m))}if(p.hasOwnProperty("extensions")){const m=p.extensions.KHR_materials_sheen;if(m&&m.hasOwnProperty("sheenColorTexture")){const y=f.textures[m.sheenColorTexture.index];u.add(fn(y))}const _=p.extensions.KHR_materials_pbrSpecularGlossiness;if(_&&_.hasOwnProperty("specularGlossinessTexture")){const y=f.textures[_.specularGlossinessTexture.index];u.add(fn(y))}const g=p.extensions.KHR_materials_specular;if(g&&g.hasOwnProperty("specularColorTexture")){const y=f.textures[g.specularColorTexture.index];u.add(fn(y))}}}),u},c=(f,u,p,m,_,g)=>new Promise((y,A)=>{const v=S=>{const b=`${f.name||"gltf-texture"}-${a4++}`,E={url:u||b};if(S&&(E.contents=S.slice(0).buffer),m){const P=l[m];P&&(E.filename=`${E.url}.${P}`)}const T={srgb:g},w=new ie(b,"texture",E,T,_);w.on("load",P=>y(P)),w.on("error",P=>A(P)),s.add(w),s.load(w)};p?p.then(S=>v(S)):v(null)}),d=h(o);return o.images.map((f,u)=>{r&&r(f);let p;return a?p=new Promise((m,_)=>{a(f,(g,y)=>{g?_(g):m(y)})}):p=new Promise(m=>{m(null)}),p=p.then(m=>{const _=d.has(u);return m||(f.hasOwnProperty("uri")?bE(f.uri)?c(f,f.uri,null,gG(f.uri),null,_):c(f,no.test(f.uri)?f.uri:le.join(t,f.uri),null,null,{crossOrigin:"anonymous"},_):f.hasOwnProperty("bufferView")&&f.hasOwnProperty("mimeType")?c(f,null,e[f.bufferView],f.mimeType,null,_):Promise.reject(new Error(`Invalid image found in gltf (neither uri or bufferView found). index=${u}`)))}),n&&(p=p.then(m=>(n(f,m),m))),p})},o4=(o,e,t)=>{if(!o?.images?.length||!o?.textures?.length)return[];const s=t?.texture?.preprocess,i=t?.texture?.processAsync,r=t?.texture?.postprocess,a=new Set;return o.textures.map(n=>{s&&s(n);let l;return i?l=new Promise((h,c)=>{i(n,o.images,(d,f)=>{d?c(d):h(f)})}):l=new Promise(h=>{h(null)}),l=l.then(h=>{h=h??fn(n);const c=a.has(h);return a.add(h),e[h].then(d=>{const f=c?AG(d):d;return r4(f.resource,(o.samplers??[])[n.sampler]),f})}),r&&(l=l.then(h=>(r(n,h),h))),l})},l4=(o,e,t,s)=>{if(!o.buffers||o.buffers.length===0)return[];const i=s?.buffer?.preprocess,r=s?.buffer?.processAsync,a=s?.buffer?.postprocess;return o.buffers.map((n,l)=>{i&&i(n);let h;return r?h=new Promise((c,d)=>{r(n,(f,u)=>{f?d(f):c(u)})}):h=new Promise(c=>{c(null)}),h=h.then(c=>{if(c)return c;if(n.hasOwnProperty("uri")){if(bE(n.uri)){const d=atob(n.uri.split(",")[1]),f=new Uint8Array(d.length);for(let u=0;u<d.length;u++)f[u]=d.charCodeAt(u);return f}return new Promise((d,f)=>{He.get(no.test(n.uri)?n.uri:le.join(t,n.uri),{cache:!0,responseType:"arraybuffer",retry:!1},(u,p)=>{u?f(u):d(new Uint8Array(p))})})}return e}),a&&(h=h.then(c=>(a(o.buffers[l],c),c))),h})},h4=(o,e)=>{const s=JSON.parse((i=>{if(typeof TextDecoder<"u")return new TextDecoder().decode(i);let r="";for(let a=0;a<i.length;a++)r+=String.fromCharCode(i[a]);return decodeURIComponent(escape(r))})(o));if(s.asset&&s.asset.version&&parseFloat(s.asset.version)<2){e(`Invalid gltf version. Expected version 2.0 or above but found version '${s.asset.version}'.`);return}e(null,s)},c4=(o,e)=>{const t=o instanceof ArrayBuffer?new DataView(o):new DataView(o.buffer,o.byteOffset,o.byteLength),s=t.getUint32(0,!0),i=t.getUint32(4,!0),r=t.getUint32(8,!0);if(s!==1179937895){e(`Invalid magic number found in glb header. Expected 0x46546C67, found 0x${s.toString(16)}`);return}if(i!==2){e(`Invalid version number found in glb header. Expected 2, found ${i}`);return}if(r<=0||r>t.byteLength){e(`Invalid length found in glb header. Found ${r}`);return}const a=[];let n=12;for(;n<r;){const l=t.getUint32(n,!0);n+l+8>t.byteLength&&e(`Invalid chunk length found in glb. Found ${l}`);const h=t.getUint32(n+4,!0),c=new Uint8Array(t.buffer,t.byteOffset+n+8,l);a.push({length:l,type:h,data:c}),n+=l+8}if(a.length!==1&&a.length!==2){e("Invalid number of chunks found in glb file.");return}if(a[0].type!==1313821514){e(`Invalid chunk type found in glb file. Expected 0x4E4F534A, found 0x${a[0].type.toString(16)}`);return}if(a.length>1&&a[1].type!==5130562){e(`Invalid chunk type found in glb file. Expected 0x004E4942, found 0x${a[1].type.toString(16)}`);return}e(null,{gltfChunk:a[0].data,binaryChunk:a.length===2?a[1].data:null})},d4=(o,e,t)=>{const s=()=>{const i=new Uint8Array(e);return i[0]===103&&i[1]===108&&i[2]===84&&i[3]===70};o&&o.toLowerCase().endsWith(".glb")||s()?c4(e,t):t(null,{gltfChunk:e,binaryChunk:null})},f4=(o,e,t)=>{const s=[],i=t?.bufferView?.preprocess,r=t?.bufferView?.processAsync,a=t?.bufferView?.postprocess;if(!o.bufferViews?.length)return s;for(let n=0;n<o.bufferViews.length;++n){const l=o.bufferViews[n];i&&i(l);let h;r?h=new Promise((c,d)=>{r(l,e,(f,u)=>{f?d(f):c(u)})}):h=new Promise(c=>{c(null)}),h=h.then(c=>c||e[l.buffer].then(d=>new Uint8Array(d.buffer,d.byteOffset+(l.byteOffset||0),l.byteLength))),l.hasOwnProperty("byteStride")&&(h=h.then(c=>(c.byteStride=l.byteStride,c))),a&&(h=h.then(c=>(a(l,c),c))),s.push(h)}return s};class Jc{static parse(e,t,s,i,r,a,n){d4(e,s,(l,h)=>{if(l){n(l);return}h4(h.gltfChunk,(c,d)=>{if(c){n(c);return}const f=l4(d,h.binaryChunk,t,a),u=f4(d,f,a),p=n4(d,u,t,r,a),m=o4(d,p,a);i4(i,d,u,m,a).then(_=>n(null,_)).catch(_=>n(_))})})}static createDefaultMaterial(){return CE({name:"defaultGlbMaterial"},[])}}class u4 extends Ne{constructor(e){super(e,"animation"),this.device=e.graphicsDevice,this.assets=e.assets}load(e,t,s){typeof e=="string"&&(e={load:e,original:e});const i={retry:this.maxRetries>0,maxRetries:this.maxRetries};(e.load.startsWith("blob:")||e.load.startsWith("data:"))&&(le.getExtension(e.original).toLowerCase()===".glb"?i.responseType=$t.ResponseType.ARRAY_BUFFER:i.responseType=$t.ResponseType.JSON),He.get(e.load,i,(r,a)=>{r?t(`Error loading animation resource: ${e.original} [${r}]`):le.getExtension(e.original).toLowerCase()===".glb"?Jc.parse("filename.glb","",a,this.device,this.assets,s?.options??{},(n,l)=>{if(n)t(n);else{const h=l.animations;if(s?.data?.events)for(let c=0;c<h.length;c++)h[c].events=new qx(Object.values(s.data.events));l.destroy(),t(null,h)}}):t(null,this[`_parseAnimationV${a.animation.version}`](a))})}open(e,t,s){return t}_parseAnimationV3(e){const t=e.animation,s=new DS;s.name=t.name,s.duration=t.duration;for(let i=0;i<t.nodes.length;i++){const r=new MS,a=t.nodes[i];r._name=a.name;for(let n=0;n<a.keys.length;n++){const l=a.keys[n],h=l.time,c=l.pos,d=l.rot,f=l.scale,u=new x(c[0],c[1],c[2]),p=new Q().setFromEulerAngles(d[0],d[1],d[2]),m=new x(f[0],f[1],f[2]),_=new IS(h,u,p,m);r._keys.push(_)}s.addNode(r)}return s}_parseAnimationV4(e){const t=e.animation,s=new DS;s.name=t.name,s.duration=t.duration;for(let i=0;i<t.nodes.length;i++){const r=new MS,a=t.nodes[i];r._name=a.name;const n=a.defaults.p,l=a.defaults.r,h=a.defaults.s;for(let c=0;c<a.keys.length;c++){const d=a.keys[c],f=d.t,u=n||d.p,p=l||d.r,m=h||d.s,_=new x(u[0],u[1],u[2]),g=new Q().setFromEulerAngles(p[0],p[1],p[2]),y=new x(m[0],m[1],m[2]),A=new IS(f,_,g,y);r._keys.push(A)}s.addNode(r)}return s}}class p4 extends Ne{constructor(e){super(e,"animclip")}load(e,t){typeof e=="string"&&(e={load:e,original:e});const s={retry:this.maxRetries>0,maxRetries:this.maxRetries};e.load.startsWith("blob:")&&(s.responseType=$t.ResponseType.JSON),He.get(e.load,s,(i,r)=>{i?t(`Error loading animation clip resource: ${e.original} [${i}]`):t(null,r)})}open(e,t){const s=t.name,i=t.duration,r=t.inputs.map(l=>new Zc(1,l)),a=t.outputs.map(l=>new Zc(l.components,l.data)),n=t.curves.map(l=>new AE([l.path],l.inputIndex,l.outputIndex,l.interpolation));return new Di(s,i,r,a,n)}}class m4 extends Ne{constructor(e){super(e,"animstategraph")}load(e,t){typeof e=="string"&&(e={load:e,original:e});const s={retry:this.maxRetries>0,maxRetries:this.maxRetries};e.load.startsWith("blob:")&&(s.responseType=$t.ResponseType.JSON),He.get(e.load,s,(i,r)=>{i?t(`Error loading animation state graph resource: ${e.original} [${i}]`):t(null,r)})}open(e,t){return new nc(t)}}const Au=function(){if(typeof window>"u")return!1;const o=window.navigator.userAgent,e=o.indexOf("MSIE ");if(e>0)return parseInt(o.substring(e+5,o.indexOf(".",e)),10);if(o.indexOf("Trident/")>0){const s=o.indexOf("rv:");return parseInt(o.substring(s+3,o.indexOf(".",s)),10)}return!1}(),_4=[".ogg",".mp3",".wav",".mp4a",".m4a",".mp4",".aac",".opus"];class g4 extends Ne{constructor(e){super(e,"audio"),this.manager=e.soundManager}_isSupported(e){const t=le.getExtension(e);return _4.indexOf(t)>-1}load(e,t){typeof e=="string"&&(e={load:e,original:e});const s=function(r){t(null,new dM(r))},i=function(r){let a=`Error loading audio url: ${e.original}`;r&&(a+=`: ${r.message||r}`),console.warn(a),t(a)};if(this._createSound){if(!this._isSupported(e.original)){i(`Audio format for ${e.original} not supported`);return}this._createSound(e.load,s,i)}else i(null)}_createSound(e,t,s){if(Hl()){const i=this.manager;if(!i.context){s("Audio manager has no audio context");return}const r={retry:this.maxRetries>0,maxRetries:this.maxRetries};(e.startsWith("blob:")||e.startsWith("data:"))&&(r.responseType=$t.ResponseType.ARRAY_BUFFER),He.get(e,r,(a,n)=>{if(a){s(a);return}i.context.decodeAudioData(n,t,s)})}else{let i=null;try{i=new Audio}catch{s("No support for Audio element");return}Au&&document.body.appendChild(i);const r=function(){i.removeEventListener("canplaythrough",r),Au&&document.body.removeChild(i),t(i)};i.onerror=function(){i.onerror=null,Au&&document.body.removeChild(i),s()},i.addEventListener("canplaythrough",r),i.src=e}}}class v4 extends Ne{constructor(e){super(e,"binary")}load(e,t){typeof e=="string"&&(e={load:e,original:e}),He.get(e.load,{responseType:$t.ResponseType.ARRAY_BUFFER,retry:this.maxRetries>0,maxRetries:this.maxRetries},(s,i)=>{s?t(`Error loading binary resource: ${e.original} [${s}]`):t(null,i)})}openBinary(e){return e.buffer}}class sr{constructor(e,t,s,i){const r=function(h,c,d){const f=sr.createAsset(t.name,h,c,d);return s.add(f),f},a=[];for(let h=0;h<e.renders.length;++h)a.push(r("render",e.renders[h],h));const n=[];for(let h=0;h<e.materials.length;++h)n.push(r("material",e.materials[h],h));const l=[];for(let h=0;h<e.animations.length;++h)l.push(r("animation",e.animations[h],h));this.data=e,this._model=null,this._assetName=t.name,this._assets=s,this._defaultMaterial=i,this.renders=a,this.materials=n,this.textures=e.textures,this.animations=l}get model(){if(!this._model){const e=sr.createModel(this.data,this._defaultMaterial),t=sr.createAsset(this._assetName,"model",e,0);this._assets.add(t),this._model=t}return this._model}static createAsset(e,t,s,i){const r=new ie(`${e}/${t}/${i}`,t,{url:""});return r.resource=s,r.loaded=!0,r}instantiateModelEntity(e){const t=new Ve(void 0,this._assets._loader._app);return t.addComponent("model",Object.assign({type:"asset",asset:this.model},e)),t}instantiateRenderEntity(e){const t=this._defaultMaterial,s=[],i=function(n,l,h,c,d,f,u,p){const m=d[h.id],_=m===void 0?t:c[m],g=new Oe(h,_);h.morph&&(g.morphInstance=new Sa(h.morph)),u.hasOwnProperty("skin")&&s.push({meshInstance:g,rootBone:n,entity:l});const y=p.get(u);if(y){const A=y.matrices,v=Wt.getDefaultInstancingFormat(h.device),S=new si(h.device,v,A.length/16,{data:A});g.setInstancing(S),g.instancingData._destroyVertexBuffer=!0}return g},r=(n,l,h)=>{const c=new Ve(void 0,this._assets._loader._app);l._cloneInternal(c),n||(n=c);let d=null,f=null;for(let p=0;p<h.nodes.length;p++)if(h.nodes[p]===l){const _=h.gltf.nodes[p];if(_.hasOwnProperty("mesh")){const g=h.renders[_.mesh].meshes;f=this.renders[_.mesh];for(let y=0;y<g.length;y++){const A=g[y];if(A){const v=i(n,c,A,h.materials,h.meshDefaultMaterials,h.skins,_,h.nodeInstancingMap);d||(d=[]),d.push(v)}}}if(h.lights){const g=h.lights.get(_);g&&c.addChild(g.clone())}if(h.cameras){const g=h.cameras.get(_);g&&g.camera.system.cloneComponent(g,c)}}d&&(c.addComponent("render",Object.assign({type:"asset",meshInstances:d},e)),c.render.assignAsset(f));const u=l.children;for(let p=0;p<u.length;p++){const m=r(n,u[p],h);c.addChild(m)}return c},a=[];for(const n of this.data.scenes)a.push(r(null,n,this.data));return s.forEach(n=>{n.meshInstance.skinInstance=xl.createCachedSkinInstance(n.meshInstance.mesh.skin,n.rootBone,n.entity),n.meshInstance.node.render.rootBone=n.rootBone}),sr.createSceneHierarchy(a,Ve)}getMaterialVariants(){return this.data.variants?Object.keys(this.data.variants):[]}applyMaterialVariant(e,t){const s=t?this.data.variants[t]:null;if(s===void 0)return;const i=e.findComponents("render");for(let r=0;r<i.length;r++){const a=i[r];this._applyMaterialVariant(s,a.meshInstances)}}applyMaterialVariantInstances(e,t){const s=t?this.data.variants[t]:null;s!==void 0&&this._applyMaterialVariant(s,e)}_applyMaterialVariant(e,t){t.forEach(s=>{if(e===null)s.material=this._defaultMaterial;else{const i=this.data.meshVariants[s.mesh.id];i&&(s.material=this.data.materials[i[e]])}})}static createSceneHierarchy(e,t){let s=null;if(e.length===1)s=e[0];else{s=new t("SceneGroup");for(const i of e)s.addChild(i)}return s}static createModel(e,t){const s=function(a,n,l,h,c,d,f){const u=e.meshDefaultMaterials[n.id],p=u===void 0?t:c[u],m=new Oe(n,p,d);if(n.morph){const _=new Sa(n.morph);m.morphInstance=_,a.morphInstances.push(_)}if(f.hasOwnProperty("skin")){const _=f.skin,g=l[_];n.skin=g;const y=h[_];m.skinInstance=y,a.skinInstances.push(y)}a.meshInstances.push(m)},i=new Fi,r=[];for(const a of e.skins){const n=new Wl(a);n.bones=a.bones,r.push(n)}i.graph=sr.createSceneHierarchy(e.scenes,ze);for(let a=0;a<e.nodes.length;a++){const n=e.nodes[a];if(n.root===i.graph){const l=e.gltf.nodes[a];if(l.hasOwnProperty("mesh")){const h=e.renders[l.mesh].meshes;for(let c=0;c<h.length;c++){const d=h[c];d&&s(i,d,e.skins,r,e.materials,n,l)}}}}return i}destroy(){const e=this._assets,t=function(i){e.remove(i),i.unload()},s=function(i){i.forEach(r=>{t(r)})};this.animations&&(s(this.animations),this.animations=null),this.textures&&(s(this.textures),this.textures=null),this.materials&&(s(this.materials),this.materials=null),this.renders&&(s(this.renders),this.renders=null),this._model&&(t(this._model),this._model=null),this.data=null,this.assets=null}}class S4{constructor(e,t,s){this._device=e,this._assets=t,this._defaultMaterial=Jc.createDefaultMaterial(),this.maxRetries=s}_getUrlWithoutParams(e){return e.indexOf("?")>=0?e.split("?")[0]:e}load(e,t,s){ie.fetchArrayBuffer(e.load,(i,r)=>{i?t(i):Jc.parse(this._getUrlWithoutParams(e.original),le.extractPath(e.load),r,this._device,s.registry,s.options,(a,n)=>{a?t(a):t(null,new sr(n,s,this._assets,this._defaultMaterial))})},s,this.maxRetries)}open(e,t,s){return t}patch(e,t){}}class y4 extends Ne{constructor(e){super(e,"container"),this.glbContainerParser=new S4(e.graphicsDevice,e.assets,0),this.parsers={}}set maxRetries(e){this.glbContainerParser.maxRetries=e;for(const t in this.parsers)this.parsers.hasOwnProperty(t)&&(this.parsers[t].maxRetries=e)}get maxRetries(){return this.glbContainerParser.maxRetries}_getUrlWithoutParams(e){return e.indexOf("?")>=0?e.split("?")[0]:e}_getParser(e){const t=e?le.getExtension(this._getUrlWithoutParams(e)).toLowerCase().replace(".",""):null;return this.parsers[t]||this.glbContainerParser}load(e,t,s){typeof e=="string"&&(e={load:e,original:e}),this._getParser(e.original).load(e,t,s)}open(e,t,s){return this._getParser(e).open(e,t,s)}}class T4 extends Ne{constructor(e){super(e,"css"),this.decoder=null}load(e,t){typeof e=="string"&&(e={load:e,original:e}),He.get(e.load,{retry:this.maxRetries>0,maxRetries:this.maxRetries},(s,i)=>{s?t(`Error loading css resource: ${e.original} [${s}]`):t(null,i)})}openBinary(e){return this.decoder??=new TextDecoder("utf-8"),this.decoder.decode(e)}}class x4 extends Ne{constructor(e){super(e,"cubemap"),this._device=e.graphicsDevice,this._registry=e.assets,this._loader=e.loader}load(e,t,s){this.loadAssets(s,t)}open(e,t,s){return s?s.resource:null}patch(e,t){this.loadAssets(e,(s,i)=>{s&&(t.fire("error",e),t.fire(`error:${e.id}`,s,e),e.fire("error",e))})}getAssetIds(e){const t=[];if(t[0]=e.file,(e.loadFaces||!e.file)&&e.data&&e.data.textures)for(let s=0;s<6;++s)t[s+1]=e.data.textures[s];else t[1]=t[2]=t[3]=t[4]=t[5]=t[6]=null;return t}compareAssetIds(e,t){return e&&t?parseInt(e,10)===e||typeof e=="string"?e===t:e.url===t.url:e!==null==(t!==null)}update(e,t,s){const i=e.data||{},r=e._handlerState.assets,a=e._resources;let n,l,h;const c=[null,null,null,null,null,null,null],d=function(){return i.hasOwnProperty("type")?i.type:i.hasOwnProperty("rgbm")?i.rgbm?ca:ti:null};if(!e.loaded||s[0]!==r[0]){if(s[0])if(n=s[0].resource,n.cubemap)for(h=0;h<6;++h)c[h+1]=new ae(this._device,{name:`${e.name}_prelitCubemap${n.width>>h}`,cubemap:!0,type:d()||n.type,width:n.width>>h,height:n.height>>h,format:n.format,levels:[n._levels[h]],addressU:te,addressV:te,mipmaps:h===0});else c[1]=n}else c[1]=a[1]||null,c[2]=a[2]||null,c[3]=a[3]||null,c[4]=a[4]||null,c[5]=a[5]||null,c[6]=a[6]||null;const f=s.slice(1);if(!e.loaded||!this.cmpArrays(f,r.slice(1))){if(f.indexOf(null)===-1){const u=f.map(g=>g.resource),p=[];for(l=0;l<u[0]._levels.length;++l)p.push(u.map(g=>g._levels[l]));const m=u[0].format,_=new ae(this._device,{name:`${e.name}_faces`,cubemap:!0,type:d()||u[0].type,width:u[0].width,height:u[0].height,format:m===_r?Ae:m,mipmaps:i.mipmaps??!0,levels:p,minFilter:i.hasOwnProperty("minFilter")?i.minFilter:u[0].minFilter,magFilter:i.hasOwnProperty("magFilter")?i.magFilter:u[0].magFilter,anisotropy:i.hasOwnProperty("anisotropy")?i.anisotropy:1,addressU:te,addressV:te});c[0]=_}}else c[0]=a[0]||null;if(!this.cmpArrays(c,a))for(e.resources=c,e._handlerState.assetIds=t,e._handlerState.assets=s,h=0;h<a.length;++h)a[h]!==null&&c.indexOf(a[h])===-1&&a[h].destroy();for(h=0;h<r.length;++h)r[h]!==null&&s.indexOf(r[h])===-1&&r[h].unload()}cmpArrays(e,t){if(e.length!==t.length)return!1;for(let s=0;s<e.length;++s)if(e[s]!==t[s])return!1;return!0}resolveId(e){const t=parseInt(e,10);return t===e||t.toString()===e?t:e}loadAssets(e,t){e.hasOwnProperty("_handlerState")||(e._handlerState={assetIds:[null,null,null,null,null,null,null],assets:[null,null,null,null,null,null,null]});const s=this,i=s.getAssetIds(e),r=[null,null,null,null,null,null,null],a=e._handlerState.assetIds,n=e._handlerState.assets,l=s._registry;let h=7;const c=function(p,m){r[p]=m,h--,h===0&&(s.update(e,i,r),t(null,e.resources))},d=function(p,m,_){t(m)},f=function(p,m){m.loaded?c(p,m):(l.once(`load:${m.id}`,c.bind(s,p)),l.once(`error:${m.id}`,d.bind(s,p)),m.loading||l.load(m))};let u;for(let p=0;p<7;++p){const m=this.resolveId(i[p]);if(!m)c(p,null);else if(s.compareAssetIds(m,a[p]))f(p,n[p]);else if(parseInt(m,10)===m)u=l.get(m),u?f(p,u):setTimeout(((_,g)=>{const y=l.get(g);y?f(_,y):d(_,`failed to find dependent cubemap asset=${g}`)}).bind(null,p,m));else{const _=typeof m=="string"?{url:m,filename:m}:m,g=_.url.search(".dds")===-1?{type:"rgbp",addressu:"clamp",addressv:"clamp",mipmaps:!1}:null;u=new ie(`${e.name}_part_${p}`,"texture",_,g),l.add(u),f(p,u)}}}}class E4 extends Ne{constructor(e){super(e,"folder")}load(e,t){t(null,null)}}class Oy{constructor(e,t){this.type=t&&t.type||Gc,this.em=1,this.textures=e,this.intensity=0,this._data=null,this.data=t}set data(e){if(this._data=e,!!e&&(this._data.intensity!==void 0&&(this.intensity=this._data.intensity),this._data.info||(this._data.info={}),(!this._data.version||this._data.version<2)&&(this._data.info.maps=[{width:this._data.info.width,height:this._data.info.height}],this._data.chars)))for(const t in this._data.chars)this._data.chars[t].map=0}get data(){return this._data}}function bu(o){return o.version<3&&(o.version<2&&(o.info.maps=o.info.maps||[{width:o.info.width,height:o.info.height}]),o.chars=Object.keys(o.chars||{}).reduce((e,t)=>{const s=o.chars[t],i=s.letter!==void 0?s.letter:Zh.fromCodePoint(t);return o.version<2&&(s.map=s.map||0),e[i]=s,e},{}),o.version=3),o}class A4 extends Ne{constructor(e){super(e,"font"),this._loader=e.loader,this.maxRetries=0}load(e,t,s){typeof e=="string"&&(e={load:e,original:e});const i=this;le.getExtension(e.original)===".json"?He.get(e.load,{retry:this.maxRetries>0,maxRetries:this.maxRetries},(r,a)=>{if(r)t(`Error loading font resource: ${e.original} [${r}]`);else{const n=bu(a);i._loadTextures(e.load.replace(".json",".png"),n,(l,h)=>{l?t(l):t(null,{data:n,textures:h})})}}):(s&&s.data&&(s.data=bu(s.data)),this._loadTextures(e.load,s&&s.data,t))}_loadTextures(e,t,s){const i=t.info.maps.length;let r=0,a=null;const n=new Array(i),l=this._loader,h=function(c){const d=function(f,u){if(!a){if(f){a=f,s(f);return}u.upload(),n[c]=u,r++,r===i&&s(null,n)}};c===0?l.load(e,"texture",d):l.load(e.replace(".png",`${c}.png`),"texture",d)};for(let c=0;c<i;c++)h(c)}open(e,t,s){let i;return t.textures?i=new Oy(t.textures,t.data):i=new Oy(t,null),i}patch(e,t){const s=e.resource;!s.data&&e.data?s.data=e.data:!e.data&&s.data&&(e.data=s.data),e.data&&(e.data=bu(e.data))}}const wu=.28209479177387814;class b4{constructor(e,t,s,i,r,a){const n=(v,S)=>{const b=(1<<S)-1;return(v&b)/b},l=(v,S)=>{v.x=n(S>>>21,11),v.y=n(S>>>11,10),v.z=n(S,11)},h=(v,S)=>{v.x=n(S>>>24,8),v.y=n(S>>>16,8),v.z=n(S>>>8,8),v.w=n(S,8)},c=(v,S)=>{const b=1/(Math.sqrt(2)*.5),E=(n(S>>>20,10)-.5)*b,T=(n(S>>>10,10)-.5)*b,w=(n(S,10)-.5)*b,P=Math.sqrt(1-(E*E+T*T+w*w));switch(S>>>30){case 0:v.set(E,T,w,P);break;case 1:v.set(P,T,w,E);break;case 2:v.set(T,P,w,E);break;case 3:v.set(T,w,P,E);break}},d=(v,S,b)=>v*(1-b)+S*b,{chunkData:f,chunkSize:u,vertexData:p,shData0:m,shData1:_,shData2:g,shBands:y}=e,A=[3,8,15][y-1];this.read=v=>{const S=Math.floor(v/256)*u;if(t&&(l(t,p[v*4+0]),t.x=d(f[S+0],f[S+3],t.x),t.y=d(f[S+1],f[S+4],t.y),t.z=d(f[S+2],f[S+5],t.z)),s&&c(s,p[v*4+1]),i&&(l(i,p[v*4+2]),i.x=d(f[S+6],f[S+9],i.x),i.y=d(f[S+7],f[S+10],i.y),i.z=d(f[S+8],f[S+11],i.z)),r&&(h(r,p[v*4+3]),u>12&&(r.x=d(f[S+12],f[S+15],r.x),r.y=d(f[S+13],f[S+16],r.y),r.z=d(f[S+14],f[S+17],r.z))),a&&y>0){const b=[m,_,g];for(let E=0;E<3;++E)for(let T=0;T<15;++T)a[E*15+T]=T<A?b[E][v*16+T]*(8/255)-4:0}}}}class w4{createIter(e,t,s,i,r){return new b4(this,e,t,s,i,r)}calcAabb(e){const{chunkData:t,numChunks:s,chunkSize:i}=this;let r=Math.exp(Math.max(t[9],t[10],t[11])),a=t[0]-r,n=t[1]-r,l=t[2]-r,h=t[3]+r,c=t[4]+r,d=t[5]+r;for(let f=1;f<s;++f){const u=f*i;r=Math.exp(Math.max(t[u+9],t[u+10],t[u+11])),a=Math.min(a,t[u+0]-r),n=Math.min(n,t[u+1]-r),l=Math.min(l,t[u+2]-r),h=Math.max(h,t[u+3]+r),c=Math.max(c,t[u+4]+r),d=Math.max(d,t[u+5]+r)}return e.center.set((a+h)*.5,(n+c)*.5,(l+d)*.5),e.halfExtents.set((h-a)*.5,(c-n)*.5,(d-l)*.5),!0}getCenters(e){const{vertexData:t,chunkData:s,numChunks:i,chunkSize:r}=this;let a,n,l,h,c,d;for(let f=0;f<i;++f){const u=f*r;a=s[u+0],n=s[u+1],l=s[u+2],h=s[u+3],c=s[u+4],d=s[u+5];const p=Math.min(this.numSplats,(f+1)*256);for(let m=f*256;m<p;++m){const _=t[m*4],g=(_>>>21)/2047,y=(_>>>11&1023)/1023,A=(_&2047)/2047;e[m*3+0]=(1-g)*a+g*h,e[m*3+1]=(1-y)*n+y*c,e[m*3+2]=(1-A)*l+A*d}}}getChunks(e){const{chunkData:t,numChunks:s,chunkSize:i}=this;let r,a,n,l,h,c;for(let d=0;d<s;++d){const f=d*i;r=t[f+0],a=t[f+1],n=t[f+2],l=t[f+3],h=t[f+4],c=t[f+5],e[d*6+0]=r,e[d*6+1]=a,e[d*6+2]=n,e[d*6+3]=l,e[d*6+4]=h,e[d*6+5]=c}}calcFocalPoint(e){const{chunkData:t,numChunks:s,chunkSize:i}=this;e.x=0,e.y=0,e.z=0;for(let r=0;r<s;++r){const a=r*i;e.x+=t[a+0]+t[a+3],e.y+=t[a+1]+t[a+4],e.z+=t[a+2]+t[a+5]}e.mulScalar(.5/s)}get isCompressed(){return!0}get numChunks(){return Math.ceil(this.numSplats/256)}get chunkSize(){return this.chunkData.length/this.numChunks}decompress(){const e=["x","y","z","f_dc_0","f_dc_1","f_dc_2","opacity","scale_0","scale_1","scale_2","rot_0","rot_1","rot_2","rot_3"],{shBands:t}=this;if(t>0){const c=[];for(let d=0;d<45;++d)c.push(`f_rest_${d}`);e.splice(e.indexOf("f_dc_0")+1,0,...c)}const s={};e.forEach(c=>{s[c]=new Float32Array(this.numSplats)});const i=new x,r=new Q,a=new x,n=new K,l=t>0?new Float32Array(45):null,h=this.createIter(i,r,a,n,l);for(let c=0;c<this.numSplats;++c)if(h.read(c),s.x[c]=i.x,s.y[c]=i.y,s.z[c]=i.z,s.rot_1[c]=r.x,s.rot_2[c]=r.y,s.rot_3[c]=r.z,s.rot_0[c]=r.w,s.scale_0[c]=a.x,s.scale_1[c]=a.y,s.scale_2[c]=a.z,s.f_dc_0[c]=(n.x-.5)/wu,s.f_dc_1[c]=(n.y-.5)/wu,s.f_dc_2[c]=(n.z-.5)/wu,s.opacity[c]=n.w<=0?-40:n.w>=1?40:-Math.log(1/n.w-1),l)for(let d=0;d<45;++d)s[`f_rest_${d}`][c]=l[d];return new Ta([{name:"vertex",count:this.numSplats,properties:e.map(c=>({name:c,type:"float",byteSize:4,storage:s[c]}))}],this.comments)}}const C4=(o,e,t,s,i)=>{for(let r=0;r<i;++r)for(let a=0;a<s;++a)o[r*e+a]=t[r*s+a]};class P4 extends rg{constructor(e,t){super(e,t);const{chunkData:s,chunkSize:i,numChunks:r,numSplats:a,vertexData:n,shBands:l}=t;this.chunks=new Float32Array(r*6),t.getChunks(this.chunks),this.packedTexture=this.createTexture("packedData",Nt,this.evalTextureSize(a),n);const h=this.evalTextureSize(r);h.x*=5,this.chunkTexture=this.createTexture("chunkData",ft,h);const c=this.chunkTexture.lock();if(C4(c,20,s,i,r),i===12)for(let d=0;d<r;++d)c[d*20+15]=1,c[d*20+16]=1,c[d*20+17]=1;if(this.chunkTexture.unlock(),l>0){const d=this.evalTextureSize(a);this.shTexture0=this.createTexture("shTexture0",Nt,d,new Uint32Array(t.shData0.buffer)),this.shTexture1=this.createTexture("shTexture1",Nt,d,new Uint32Array(t.shData1.buffer)),this.shTexture2=this.createTexture("shTexture2",Nt,d,new Uint32Array(t.shData2.buffer))}else this.shTexture0=null,this.shTexture1=null,this.shTexture2=null}destroy(){this.packedTexture?.destroy(),this.chunkTexture?.destroy(),this.shTexture0?.destroy(),this.shTexture1?.destroy(),this.shTexture2?.destroy(),super.destroy()}configureMaterial(e){e.setDefine("GSPLAT_COMPRESSED_DATA",!0),e.setParameter("packedTexture",this.packedTexture),e.setParameter("chunkTexture",this.chunkTexture),this.shTexture0?(e.setDefine("SH_BANDS",3),e.setParameter("shTexture0",this.shTexture0),e.setParameter("shTexture1",this.shTexture1),e.setParameter("shTexture2",this.shTexture2)):e.setDefine("SH_BANDS",0)}evalTextureSize(e){const t=Math.ceil(Math.sqrt(e)),s=Math.ceil(e/t);return new z(t,s)}}const Ny=new Uint8Array([112,108,121,10]),Fy=new Uint8Array([10,101,110,100,95,104,101,97,100,101,114,10]),Jp=new Map([["char",Int8Array],["uchar",Uint8Array],["short",Int16Array],["ushort",Uint16Array],["int",Int32Array],["uint",Uint32Array],["float",Float32Array],["double",Float64Array]]);class L4{constructor(e,t){this.head=0,this.tail=0,this.reader=e,this.progressFunc=t}async read(){const{value:e,done:t}=await this.reader.read();if(t)throw new Error("Stream finished before end of header");this.push(e),this.progressFunc?.(e.byteLength)}push(e){if(!this.data)this.data=e,this.view=new DataView(this.data.buffer),this.tail=e.length;else{const t=this.tail-this.head,s=t+e.length;if(this.data.length>=s)this.head>0?(this.data.copyWithin(0,this.head,this.tail),this.data.set(e,t),this.head=0,this.tail=s):(this.data.set(e,this.tail),this.tail+=e.length);else{const i=new Uint8Array(s);this.head>0||this.tail<this.data.length?i.set(this.data.subarray(this.head,this.tail),0):i.set(this.data,0),i.set(e,t),this.data=i,this.view=new DataView(this.data.buffer),this.head=0,this.tail=s}}}compact(){this.head>0&&(this.data.copyWithin(0,this.head,this.tail),this.tail-=this.head,this.head=0)}get remaining(){return this.tail-this.head}getInt8(){const e=this.view.getInt8(this.head);return this.head++,e}getUint8(){const e=this.view.getUint8(this.head);return this.head++,e}getInt16(){const e=this.view.getInt16(this.head,!0);return this.head+=2,e}getUint16(){const e=this.view.getUint16(this.head,!0);return this.head+=2,e}getInt32(){const e=this.view.getInt32(this.head,!0);return this.head+=4,e}getUint32(){const e=this.view.getUint32(this.head,!0);return this.head+=4,e}getFloat32(){const e=this.view.getFloat32(this.head,!0);return this.head+=4,e}getFloat64(){const e=this.view.getFloat64(this.head,!0);return this.head+=8,e}}const I4=o=>{const e=[],t=[];let s;for(let i=1;i<o.length;++i){const r=o[i].split(" ");switch(r[0]){case"comment":t.push(r.slice(1).join(" "));break;case"format":s=r[1];break;case"element":e.push({name:r[1],count:parseInt(r[2],10),properties:[]});break;case"property":{if(!Jp.has(r[1]))throw new Error(`Unrecognized property data type '${r[1]}' in ply header`);e[e.length-1].properties.push({type:r[1],name:r[2],storage:null,byteSize:Jp.get(r[1]).BYTES_PER_ELEMENT});break}default:throw new Error(`Unrecognized header value '${r[0]}' in ply header`)}}return{elements:e,format:s,comments:t}},M4=o=>{const e=["min_x","min_y","min_z","max_x","max_y","max_z","min_scale_x","min_scale_y","min_scale_z","max_scale_x","max_scale_y","max_scale_z","min_r","min_g","min_b","max_r","max_g","max_b"],t=["packed_position","packed_rotation","packed_scale","packed_color"],s=new Array(45).fill("").map((a,n)=>`f_rest_${n}`),i=()=>o[0].name==="chunk"&&o[0].properties.every((a,n)=>a.name===e[n]&&a.type==="float")&&o[1].name==="vertex"&&o[1].properties.every((a,n)=>a.name===t[n]&&a.type==="uint"),r=()=>o[2].name==="sh"&&[9,24,45].indexOf(o[2].properties.length)!==-1&&o[2].properties.every((a,n)=>a.name===s[n]&&a.type==="uchar");return o.length===2&&i()||o.length===3&&i()&&r()},D4=o=>o.length===1&&o[0].name==="vertex"&&o[0].properties.every(e=>e.type==="float"),R4=async(o,e,t)=>{const s=new w4;s.comments=t;const i=e[0].count,r=e[0].properties.length,a=e[1].count,l=(c=>{const d=Math.ceil(Math.sqrt(c)),f=Math.ceil(c/d);return d*f})(a);s.numSplats=a,s.chunkData=new Float32Array(i*r),s.vertexData=new Uint32Array(l*4);const h=async(c,d)=>{const f=new Uint8Array(c);let u=0;for(;u<d;){for(;o.remaining===0;)await o.read();const p=Math.min(d-u,o.remaining),m=o.data;for(let _=0;_<p;++_)f[u++]=m[o.head++]}};if(await h(s.chunkData.buffer,i*r*4),await h(s.vertexData.buffer,a*4*4),e.length===3){const c=l*16,d=new Uint8Array(c),f=new Uint8Array(c),u=new Uint8Array(c),p=1024,m=e[2].properties.length/3,_=new Uint8Array(p*m*3);for(let g=0;g<s.numSplats;g+=p){const y=Math.min(p,s.numSplats-g);await h(_.buffer,y*m*3);for(let A=0;A<y;++A)for(let v=0;v<15;++v){const S=(g+A)*16+v;v<m?(d[S]=_[(A*3+0)*m+v],f[S]=_[(A*3+1)*m+v],u[S]=_[(A*3+2)*m+v]):(d[S]=127,f[S]=127,u[S]=127)}}s.shData0=d,s.shData1=f,s.shData2=u,s.shBands={3:1,8:2,15:3}[m]}else s.shBands=0;return s},O4=async(o,e,t)=>{const s=e[0],i=s.properties,r=i.length,a=i.map(d=>d.storage),n=i.reduce((d,f)=>d+f.byteSize,0);let l=0,h;const c=()=>{const d=o.data.buffer;h?.buffer!==d&&(h=new Float32Array(d,0,d.byteLength/4))};for(c();l<s.count;){for(;o.remaining<n;)await o.read(),c();const d=Math.min(s.count-l,Math.floor(o.remaining/n));for(let f=0;f<r;++f){const u=a[f];for(let p=0;p<d;++p)u[p+l]=h[p*r+f]}l+=d,o.head+=d*n}return new Ta(e,t)},N4=async(o,e,t)=>{for(let s=0;s<e.length;++s){const i=e[s],r=i.properties.reduce((l,h)=>l+h.byteSize,0),a=i.properties.map(l=>{if(l.storage)switch(l.type){case"char":return(h,c)=>{l.storage[c]=h.getInt8()};case"uchar":return(h,c)=>{l.storage[c]=h.getUint8()};case"short":return(h,c)=>{l.storage[c]=h.getInt16()};case"ushort":return(h,c)=>{l.storage[c]=h.getUint16()};case"int":return(h,c)=>{l.storage[c]=h.getInt32()};case"uint":return(h,c)=>{l.storage[c]=h.getUint32()};case"float":return(h,c)=>{l.storage[c]=h.getFloat32()};case"double":return(h,c)=>{l.storage[c]=h.getFloat64()};default:throw new Error(`Unsupported property data type '${l.type}' in ply header`)}else return h=>{h.head+=l.byteSize}});let n=0;for(;n<i.count;){for(;o.remaining<r;)await o.read();const l=Math.min(i.count-n,Math.floor(o.remaining/r));for(let h=0;h<l;++h){for(let c=0;c<i.properties.length;++c)a[c](o,n);n++}}}return new Ta(e,t)},F4=async(o,e=null,t=null)=>{const s=(f,u)=>{const p=f.length-u.length;let m,_;for(m=0;m<=p;++m){for(_=0;_<u.length&&f[m+_]===u[_];++_);if(_===u.length)return m}return-1},i=(f,u)=>{if(f.length<u.length)return!1;for(let p=0;p<u.length;++p)if(f[p]!==u[p])return!1;return!0},r=new L4(o,t);let a;for(;;){if(await r.read(),r.tail>=Ny.length&&!i(r.data,Ny))throw new Error("Invalid ply header");if(a=s(r.data,Fy),a!==-1)break}const n=new TextDecoder("ascii").decode(r.data.subarray(0,a)).split(`
`),{elements:l,format:h,comments:c}=I4(n);if(h!=="binary_little_endian")throw new Error("Unsupported ply format");return r.head=a+Fy.length,r.compact(),await(async()=>M4(l)?await R4(r,l,c):(l.forEach(f=>{f.properties.forEach(u=>{const p=Jp.get(u.type);if(p){const m=!e||e(u.name)?new p(f.count):null;u.storage=m}})}),D4(l)?await O4(r,l,c):await N4(r,l,c)))()},k4=o=>!0;class U4{constructor(e,t){this.app=e,this.maxRetries=t}async load(e,t,s){try{const i=await(s.file?.contents??fetch(e.load));if(!i||!i.body)t("Error loading resource",null);else{const r=parseInt(i.headers.get("content-length")??"0",10);let a=0;const n=await F4(i.body.getReader(),s.data.elementFilter??k4,h=>{a+=h,s&&s.fire("progress",a,r)});s.fire("load:data",n),n.isCompressed||(s.data.reorder??!0)&&n.reorderData();const l=n.isCompressed&&!s.data.decompress?new P4(this.app.graphicsDevice,n):new Fx(this.app.graphicsDevice,n.isCompressed?n.decompress():n);t(null,l)}}catch(i){t(i,null)}}open(e,t){return t}}const B4=(o,e)=>{const t=new Map,s=()=>{let i=0,r=0;t.forEach(a=>{i+=a.loaded,r+=a.total}),o.fire("progress",i,r)};e.forEach(i=>{const r=(n,l)=>{t.set(i,{loaded:n,total:l}),s()},a=()=>{i.off("progress",r),i.off("load",a),i.off("error",a)};i.on("progress",r),i.on("load",a),i.on("error",a)})};class V4{constructor(e,t){this.app=e,this.maxRetries=t}async loadTextures(e,t,s,i){const{assets:r}=this.app,a=["means","quats","scales","sh0","shN"],n={},l=[];a.forEach(u=>{const p=i[u]?.files??[];n[u]=p.map(m=>{const _=new ie(m,"texture",{url:s.options?.mapUrl?.(m)??new URL(m,new URL(e.load,window.location.href).toString()).toString(),filename:m},{mipmaps:!1}),g=new Promise((y,A)=>{_.on("load",()=>y(null)),_.on("error",v=>A(v))});return r.add(_),l.push(g),_})});const h=a.map(u=>n[u]).flat();B4(s,h),h.forEach(u=>r.load(u)),await Promise.allSettled(l);const c=new kx;c.meta=i,c.numSplats=i.means.shape[0],c.means_l=n.means[0].resource,c.means_u=n.means[1].resource,c.quats=n.quats[0].resource,c.scales=n.scales[0].resource,c.sh0=n.sh0[0].resource,c.sh_centroids=n.shN?.[0]?.resource,c.sh_labels=n.shN?.[1]?.resource;const d=s.data?.decompress;d||await c.prepareGpuData();const f=d?new Fx(this.app.graphicsDevice,await c.decompress()):new jR(this.app.graphicsDevice,c);t(null,f)}load(e,t,s){if(s.data?.means)this.loadTextures(e,t,s,s.data);else{typeof e=="string"&&(e={load:e,original:e});const i={retry:this.maxRetries>0,maxRetries:this.maxRetries,responseType:$t.ResponseType.JSON};He.get(e.load,i,(r,a)=>{r?t(`Error loading gsplat meta: ${e.original} [${r}]`):this.loadTextures(e,t,s,a)})}}}class z4 extends Ne{constructor(e){super(e,"gsplat"),this.parsers={ply:new U4(e,3),json:new V4(e,3)}}_getUrlWithoutParams(e){return e.indexOf("?")>=0?e.split("?")[0]:e}_getParser(e){const t=le.getExtension(this._getUrlWithoutParams(e)).toLowerCase().replace(".","");return this.parsers[t]||this.parsers.ply}load(e,t,s){typeof e=="string"&&(e={load:e,original:e}),this._getParser(e.original).load(e,t,s)}open(e,t,s){return t}}class em{static setCompressedPRS(e,t,s){const i=s.singleVecs;let r,a;const n=t.___1;n||(r=s.tripleVecs,a=t.___2);let l=n?n[0]:r[a];e.setLocalPosition(i[l],i[l+1],i[l+2]),l=n?n[1]:r[a+1],e.setLocalEulerAngles(i[l],i[l+1],i[l+2]),l=n?n[2]:r[a+2],e.setLocalScale(i[l],i[l+1],i[l+2])}static oneCharToKey(e,t){const s=e.charCodeAt(0)-t.fieldFirstCode;return t.fieldArray[s]}static multCharToKey(e,t){let s=0;for(let i=0;i<e.length;i++)s=s*t.fieldCodeBase+e.charCodeAt(i)-t.fieldFirstCode;return t.fieldArray[s]}}class ed{constructor(e,t){this._node=e,this._data=t}run(){const e=Object.prototype.toString.call(this._node);return e==="[object Object]"?this._handleMap():e==="[object Array]"?this._handleArray():this._result=this._node,this._result}_handleMap(){this._result={},Object.keys(this._node).forEach(this._handleKey,this)}_handleKey(e){let t=e;const s=e.length;s===1?t=em.oneCharToKey(e,this._data):s===2&&(t=em.multCharToKey(e,this._data)),this._result[t]=new ed(this._node[e],this._data).run()}_handleArray(){this._result=[],this._node.forEach(this._handleArElt,this)}_handleArElt(e){const t=new ed(e,this._data).run();this._result.push(t)}}class hg{constructor(e,t){this._app=e,this._isTemplate=t}parse(e){const t={};let s=null;const i=e.compressedFormat;i&&!e.entDecompressed&&(e.entDecompressed=!0,e.entities=new ed(e.entities,i).run());for(const r in e.entities){const a=e.entities[r],n=this._createEntity(a,i);t[r]=n,a.parent===null&&(s=n)}for(const r in e.entities){const a=t[r],n=e.entities[r].children,l=n.length;for(let h=0;h<l;h++){const c=t[n[h]];c&&a.addChild(c)}}return this._openComponentData(s,e.entities),s}_createEntity(e,t){const s=new Ve(e.name,this._app);if(s.setGuid(e.resource_id),this._setPosRotScale(s,e,t),s._enabled=e.enabled??!0,this._isTemplate?s._template=!0:s._enabledInHierarchy=s._enabled,s.template=e.template,e.tags)for(let i=0;i<e.tags.length;i++)s.tags.add(e.tags[i]);return s}_setPosRotScale(e,t,s){if(s)em.setCompressedPRS(e,t,s);else{const i=t.position,r=t.rotation,a=t.scale;e.setLocalPosition(i[0],i[1],i[2]),e.setLocalEulerAngles(r[0],r[1],r[2]),e.setLocalScale(a[0],a[1],a[2])}}_openComponentData(e,t){const s=this._app.systems.list;let i=s.length;const r=t[e.getGuid()];for(let n=0;n<i;n++){const l=s[n],h=r.components[l.id];h&&l.addComponent(e,h)}i=r.children.length;const a=e._children;for(let n=0;n<i;n++)a[n]&&(a[n]=this._openComponentData(a[n],t));return e}}class PE{static load(e,t,s){typeof e=="string"&&(e={load:e,original:e}),He.get(e.load,{retry:t>0,maxRetries:t},(i,r)=>{if(!i)s(i,r);else{let a=`Error while loading scene JSON ${e.original}`;i.message?(a+=`: ${i.message}`,i.stack&&(a+=`
${i.stack}`)):a+=`: ${i}`,s(a)}})}}class H4 extends Ne{constructor(e){super(e,"hierarchy")}load(e,t){PE.load(e,this.maxRetries,t)}open(e,t){this._app.systems.script.preloading=!0;const i=new hg(this._app,!1).parse(t);return this._app.systems.script.preloading=!1,i}}class G4 extends Ne{constructor(e){super(e,"html"),this.decoder=null}load(e,t){typeof e=="string"&&(e={load:e,original:e}),He.get(e.load,{retry:this.maxRetries>0,maxRetries:this.maxRetries},(s,i)=>{s?t(`Error loading html resource: ${e.original} [${s}]`):t(null,i)})}openBinary(e){return this.decoder??=new TextDecoder("utf-8"),this.decoder.decode(e)}}class W4 extends Ne{constructor(e){super(e,"json"),this.decoder=null}load(e,t){typeof e=="string"&&(e={load:e,original:e});const s={retry:this.maxRetries>0,maxRetries:this.maxRetries};e.load.startsWith("blob:")&&(s.responseType=$t.ResponseType.JSON),He.get(e.load,s,(i,r)=>{i?t(`Error loading JSON resource: ${e.original} [${i}]`):t(null,r)})}openBinary(e){return this.decoder??=new TextDecoder("utf-8"),JSON.parse(this.decoder.decode(e))}}class $4{constructor(){this.removeInvalid=!0,this.valid=!0,this.enumValidators={occludeSpecular:this._createEnumValidator([hx,rf,cx]),cull:this._createEnumValidator([lt,la,qo,dL]),blendType:this._createEnumValidator([P_,L_,ii,ts,pa,I_,M_,D_,R_,O_,N_]),depthFunc:this._createEnumValidator([fL,Tc,xc,Xu,uL,pL,mL,Ei])}}setInvalid(e,t){this.valid=!1,this.removeInvalid&&delete t[e]}validate(e){const t=ao,s=SR,i=e.mappingFormat==="path";for(const r in e){const a=t[r];if(!a){s[r]?delete e[r]:this.valid=!1;continue}if(a.startsWith("enum")){const n=a.split(":")[1];this.enumValidators[n]&&(this.enumValidators[n](e[r])||this.setInvalid(r,e))}else if(a==="number")typeof e[r]!="number"&&this.setInvalid(r,e);else if(a==="boolean")typeof e[r]!="boolean"&&this.setInvalid(r,e);else if(a==="string")typeof e[r]!="string"&&this.setInvalid(r,e);else if(a==="vec2")e[r]instanceof Array&&e[r].length===2||this.setInvalid(r,e);else if(a==="rgb")e[r]instanceof Array&&e[r].length===3||this.setInvalid(r,e);else if(a==="texture")i?typeof e[r]=="string"||e[r]===null||e[r]instanceof ae||this.setInvalid(r,e):typeof e[r]=="number"||e[r]===null||e[r]instanceof ae||this.setInvalid(r,e);else if(a==="boundingbox")e[r].center&&e[r].center instanceof Array&&e[r].center.length===3||this.setInvalid(r,e),e[r].halfExtents&&e[r].halfExtents instanceof Array&&e[r].halfExtents.length===3||this.setInvalid(r,e);else if(a==="cubemap")typeof e[r]=="number"||e[r]===null||e[r]===void 0||e[r]instanceof ae&&e[r].cubemap||this.setInvalid(r,e);else if(a==="chunks"){const n=Object.keys(e[r]);for(let l=0;l<n.length;l++)typeof e[r][n[l]]!="string"&&this.setInvalid(n[l],e[r])}else console.error(`Unknown material type: ${a}`)}return e.validated=!0,this.valid}_createEnumValidator(e){return function(t){return e.indexOf(t)>=0}}}class X4{constructor(){this._validator=null}parse(e){const t=this.migrate(e),s=this._validate(t),i=new bs;return this.initialize(i,s),i}initialize(e,t){if(t.validated||(t=this._validate(t)),t.chunks&&t.chunks&&Object.keys(t.chunks).length>0){const s=e.shaderChunks.glsl;Object.entries(t.chunks).forEach(([i,r])=>s.set(i,r))}for(const s in t){const i=ao[s],r=t[s];if(i==="vec2")e[s]=new z(r[0],r[1]);else if(i==="rgb")e[s]=new q(r[0],r[1],r[2]);else if(i==="texture")r instanceof ae?e[s]=r:e[s]instanceof ae&&typeof r=="number"&&r>0||(e[s]=null);else if(i==="cubemap")r instanceof ae?e[s]=r:e[s]instanceof ae&&typeof r=="number"&&r>0||(e[s]=null),s==="cubeMap"&&!r&&(e.prefilteredCubemaps=null);else if(i==="boundingbox"){const a=new x(r.center[0],r.center[1],r.center[2]),n=new x(r.halfExtents[0],r.halfExtents[1],r.halfExtents[2]);e[s]=new fe(a,n)}else e[s]=t[s]}e.update()}migrate(e){e.shader&&delete e.shader,e.mapping_format&&(e.mappingFormat=e.mapping_format,delete e.mapping_format);let t;const s=[["bumpMapFactor","bumpiness"],["aoUvSet","aoMapUv"],["aoMapVertexColor","aoVertexColor"],["diffuseMapVertexColor","diffuseVertexColor"],["emissiveMapVertexColor","emissiveVertexColor"],["specularMapVertexColor","specularVertexColor"],["metalnessMapVertexColor","metalnessVertexColor"],["opacityMapVertexColor","opacityVertexColor"],["glossMapVertexColor","glossVertexColor"],["lightMapVertexColor","lightVertexColor"],["specularMapTint","specularTint"],["metalnessMapTint","metalnessTint"],["clearCoatGlossiness","clearCoatGloss"]];for(t=0;t<s.length;t++){const r=s[t][0],a=s[t][1];e[r]!==void 0&&(e[a]===void 0&&(e[a]=e[r]),delete e[r])}const i=["fresnelFactor","shadowSampleType"];for(t=0;t<i.length;t++){const r=i[t];e.hasOwnProperty(r)&&delete e[r]}return e}_validate(e){return e.validated||(this._validator||(this._validator=new $4),this._validator.validate(e)),e}}const q4={aoMap:"white",aoDetailMap:"white",diffuseMap:"gray",diffuseDetailMap:"gray",specularMap:"gray",specularityFactorMap:"white",metalnessMap:"black",glossMap:"gray",sheenMap:"black",sheenGlossMap:"gray",clearCoatMap:"black",clearCoatGlossMap:"gray",clearCoatNormalMap:"normal",refractionMap:"white",emissiveMap:"gray",normalMap:"normal",normalDetailMap:"normal",heightMap:"gray",opacityMap:"gray",sphereMap:"gray",lightMap:"white",thicknessMap:"black",iridescenceMap:"black",iridescenceThicknessMap:"black",envAtlas:"black",anisotropyMap:"black"};class Y4 extends Ne{constructor(e){super(e,"material"),this._assets=e.assets,this._device=e.graphicsDevice,this._parser=new X4}load(e,t){typeof e=="string"&&(e={load:e,original:e}),He.get(e.load,{retry:this.maxRetries>0,maxRetries:this.maxRetries},(s,i)=>{s?t&&t(`Error loading material: ${e.original} [${s}]`):t&&(i._engine=!0,t(null,i))})}open(e,t){const s=this._parser.parse(t);return t._engine&&(s._data=t,delete t._engine),s}patch(e,t){e.resource._data&&(e._data=e.resource._data,delete e.resource._data),e.data.name=e.name,e.resource.name=e.name,this._bindAndAssignAssets(e,t),e.off("unload",this._onAssetUnload,this),e.on("unload",this._onAssetUnload,this)}_onAssetUnload(e){delete e.data.parameters,delete e.data.chunks,delete e.data.name}_assignTexture(e,t,s){t.resource[e]=s}_getPlaceholderTexture(e){const t=q4[e];return ta(this._device,t)}_assignPlaceholderTexture(e,t){t.resource[e]=this._getPlaceholderTexture(e)}_onTextureLoad(e,t,s){this._assignTexture(e,t,s.resource),t.resource.update()}_onTextureAdd(e,t,s){this._assets.load(s)}_onTextureRemoveOrUnload(e,t,s){const i=t.resource;i&&t.resource[e]===s.resource&&(this._assignPlaceholderTexture(e,t),i.update())}_assignCubemap(e,t,s){if(t.resource[e]=s[0],e==="cubeMap"){const i=s.slice(1);i.every(r=>r)?t.resource.prefilteredCubemaps=i:i[0]&&(t.resource.envAtlas=i[0])}}_onCubemapLoad(e,t,s){this._assignCubemap(e,t,s.resources),this._parser.initialize(t.resource,t.data)}_onCubemapAdd(e,t,s){this._assets.load(s)}_onCubemapRemoveOrUnload(e,t,s){const i=t.resource;t.data.prefilteredCubeMap128===s.resources[1]&&(this._assignCubemap(e,t,[null,null,null,null,null,null,null]),i.update())}_bindAndAssignAssets(e,t){const s=this._parser.migrate(e.data),i=e.resource,r=s.mappingFormat==="path",a=pf;let n,l,h;for(n=0;n<a.length;n++){l=a[n],h=i._assetReferences[l];const d=s[l],f=i[l],u=f===this._getPlaceholderTexture(l),p=s.validated;d&&(!f||!p||u)?(h||(h=new El(l,e,t,{load:this._onTextureLoad,add:this._onTextureAdd,remove:this._onTextureRemoveOrUnload,unload:this._onTextureRemoveOrUnload},this),i._assetReferences[l]=h),r?h.url=e.getAbsoluteUrl(d):h.id=d,h.asset&&(h.asset.resource?this._assignTexture(l,e,h.asset.resource):this._assignPlaceholderTexture(l,e),t.load(h.asset))):h&&(r?h.url=null:h.id=null)}const c=tg;for(n=0;n<c.length;n++)l=c[n],h=i._assetReferences[l],s[l]&&!e.data.prefilteredCubeMap128&&(h||(h=new El(l,e,t,{load:this._onCubemapLoad,add:this._onCubemapAdd,remove:this._onCubemapRemoveOrUnload,unload:this._onCubemapRemoveOrUnload},this),i._assetReferences[l]=h),r?h.url=s[l]:h.id=s[l],h.asset&&(h.asset.loaded&&this._assignCubemap(l,e,h.asset.resources),t.load(h.asset)));this._parser.initialize(i,s)}}class j4{constructor(e){this._device=e.device,this._defaultMaterial=e.defaultMaterial,this._assets=e.assets}parse(e,t,s){Jc.parse("filename.glb","",e,this._device,this._assets,s?.options??{},(i,r)=>{if(i)t(i);else{const a=sr.createModel(r,this._defaultMaterial);r.destroy(),t(null,a)}})}}const K4={points:Vd,lines:zd,lineloop:ST,linestrip:yT,triangles:Ci,trianglestrip:dr,trianglefan:Kr},Z4={int8:Hd,uint8:Zr,int16:Gd,uint16:zl,int32:ET,uint32:Wd,float32:Le};class Q4{constructor(e){this._device=e.device,this._defaultMaterial=e.defaultMaterial}parse(e,t){const s=e.model;if(!s){t(null,null);return}if(s.version<=1){t("JsonModelParser#parse: Trying to parse unsupported model format.");return}const i=this._parseNodes(e),r=this._parseSkins(e,i),a=this._parseVertexBuffers(e),n=this._parseIndexBuffers(e,a),l=this._parseMorphs(e,i,a),h=this._parseMeshes(e,r.skins,l.morphs,a,n.buffer,n.data),c=this._parseMeshInstances(e,i,h,r.skins,r.instances,l.morphs,l.instances),d=new Fi;d.graph=i[0],d.meshInstances=c,d.skinInstances=r.instances,d.morphInstances=l.instances,d.getGraph().syncHierarchy(),t(null,d)}_parseNodes(e){const t=e.model,s=[];let i;for(i=0;i<t.nodes.length;i++){const r=t.nodes[i],a=new ze(r.name);a.setLocalPosition(r.position[0],r.position[1],r.position[2]),a.setLocalEulerAngles(r.rotation[0],r.rotation[1],r.rotation[2]),a.setLocalScale(r.scale[0],r.scale[1],r.scale[2]),a.scaleCompensation=!!r.scaleCompensation,s.push(a)}for(i=1;i<t.parents.length;i++)s[t.parents[i]].addChild(s[i]);return s}_parseSkins(e,t){const s=e.model,i=[],r=[];let a,n;for(a=0;a<s.skins.length;a++){const l=s.skins[a],h=[];for(n=0;n<l.inverseBindMatrices.length;n++){const u=l.inverseBindMatrices[n];h[n]=new $().set(u)}const c=new Rx(this._device,h,l.boneNames);i.push(c);const d=new Wl(c),f=[];for(n=0;n<c.boneNames.length;n++){const u=c.boneNames[n],p=t[0].findByName(u);f.push(p)}d.bones=f,r.push(d)}return{skins:i,instances:r}}_getMorphVertexCount(e,t,s){for(let i=0;i<e.meshes.length;i++){const r=e.meshes[i];if(r.morph===t)return s[r.vertices].numVertices}}_parseMorphs(e,t,s){const i=e.model,r=[],a=[];let n,l,h,c,d,f;if(i.morphs){const u=function(p,m,_){const g=new Float32Array(_*3);for(let y=0;y<m.length;y++){const A=m[y]*3;g[A]=p[y*3],g[A+1]=p[y*3+1],g[A+2]=p[y*3+2]}return g};for(n=0;n<i.morphs.length;n++){for(c=i.morphs[n].targets,f=[],h=this._getMorphVertexCount(i,n,s),l=0;l<c.length;l++){const _=c[l].aabb,g=_.min,y=_.max,A=new fe(new x((y[0]+g[0])*.5,(y[1]+g[1])*.5,(y[2]+g[2])*.5),new x((y[0]-g[0])*.5,(y[1]-g[1])*.5,(y[2]-g[2])*.5)),v=c[l].indices;let S=c[l].deltaPositions,b=c[l].deltaNormals;v&&(S=u(S,v,h),b=u(b,v,h)),d=new uf({deltaPositions:S,deltaNormals:b,name:c[l].name,aabb:A}),f.push(d)}const p=new Cx(f,this._device);r.push(p);const m=new Sa(p);a.push(m)}}return{morphs:r,instances:a}}_parseVertexBuffers(e){const t=e.model,s=[],i={position:ue,normal:Ht,tangent:ei,blendWeight:Qs,blendIndices:Ft,color:gt,texCoord0:as,texCoord1:ba,texCoord2:Nl,texCoord3:Fl,texCoord4:kl,texCoord5:Ul,texCoord6:Bl,texCoord7:Vl};for(let r=0;r<t.vertices.length;r++){const a=t.vertices[r],n=[];for(const f in a){const u=a[f];n.push({semantic:i[f],components:u.components,type:Z4[u.type],normalize:i[f]===gt})}const l=new Wt(this._device,n),h=a.position.data.length/a.position.components,c=new si(this._device,l,h),d=new jo(c);for(let f=0;f<h;f++){for(const u in a){const p=a[u];switch(p.components){case 1:d.element[i[u]].set(p.data[f]);break;case 2:d.element[i[u]].set(p.data[f*2],1-p.data[f*2+1]);break;case 3:d.element[i[u]].set(p.data[f*3],p.data[f*3+1],p.data[f*3+2]);break;case 4:d.element[i[u]].set(p.data[f*4],p.data[f*4+1],p.data[f*4+2],p.data[f*4+3]);break}}d.next()}d.end(),s.push(c)}return s}_parseIndexBuffers(e,t){const s=e.model;let i=null,r=null,a,n=0;for(a=0;a<s.meshes.length;a++){const h=s.meshes[a];h.indices!==void 0&&(n+=h.indices.length)}let l=0;for(a=0;a<t.length;a++)l=Math.max(l,t[a].numVertices);return n>0&&(l>65535?(i=new ua(this._device,cr,n),r=new Uint32Array(i.lock())):(i=new ua(this._device,hr,n),r=new Uint16Array(i.lock()))),{buffer:i,data:r}}_parseMeshes(e,t,s,i,r,a){const n=e.model,l=[];let h=0;for(let c=0;c<n.meshes.length;c++){const d=n.meshes[c],f=d.aabb,u=f.min,p=f.max,m=new fe(new x((p[0]+u[0])*.5,(p[1]+u[1])*.5,(p[2]+u[2])*.5),new x((p[0]-u[0])*.5,(p[1]-u[1])*.5,(p[2]-u[2])*.5)),_=d.indices!==void 0,g=new De(this._device);g.vertexBuffer=i[d.vertices],g.indexBuffer[0]=_?r:null,g.primitive[0].type=K4[d.type],g.primitive[0].base=_?d.base+h:d.base,g.primitive[0].count=d.count,g.primitive[0].indexed=_,g.skin=d.skin!==void 0?t[d.skin]:null,g.morph=d.morph!==void 0?s[d.morph]:null,g.aabb=m,_&&(a.set(d.indices,h),h+=d.indices.length),l.push(g)}return r!==null&&r.unlock(),l}_parseMeshInstances(e,t,s,i,r,a,n){const l=e.model,h=[];let c;for(c=0;c<l.meshInstances.length;c++){const d=l.meshInstances[c],f=t[d.node],u=s[d.mesh],p=new Oe(u,this._defaultMaterial,f);if(u.skin){const m=i.indexOf(u.skin);p.skinInstance=r[m]}if(u.morph){const m=a.indexOf(u.morph);p.morphInstance=n[m]}h.push(p)}return h}}class J4 extends Ne{constructor(e){super(e,"model"),this._parsers=[],this.device=e.graphicsDevice,this.assets=e.assets,this.defaultMaterial=$l(this.device),this.addParser(new Q4(this),(t,s)=>le.getExtension(t)===".json"),this.addParser(new j4(this),(t,s)=>le.getExtension(t)===".glb")}load(e,t,s){typeof e=="string"&&(e={load:e,original:e});const i={retry:this.maxRetries>0,maxRetries:this.maxRetries};(e.load.startsWith("blob:")||e.load.startsWith("data:"))&&(le.getExtension(e.original).toLowerCase()===".glb"?i.responseType=$t.ResponseType.ARRAY_BUFFER:i.responseType=$t.ResponseType.JSON),He.get(e.load,i,(r,a)=>{if(t)if(r)t(`Error loading model: ${e.original} [${r}]`);else{for(let n=0;n<this._parsers.length;n++){const l=this._parsers[n];if(l.decider(e.original,a)){l.parser.parse(a,(h,c)=>{h?t(h):t(null,c)},s);return}}t("No parsers found")}})}open(e,t){return t}patch(e,t){if(!e.resource)return;const s=e.data,i=this;e.resource.meshInstances.forEach((r,a)=>{if(s.mapping){const n=function(d){d.resource?r.material=d.resource:(d.once("load",n),t.load(d)),d.once("remove",f=>{r.material===f.resource&&(r.material=i.defaultMaterial)})};if(!s.mapping[a]){r.material=i.defaultMaterial;return}const l=s.mapping[a].material,h=s.mapping[a].path;let c;if(l!==void 0)l?(c=t.get(l),c?n(c):t.once(`add:${l}`,n)):r.material=i.defaultMaterial;else if(h){const d=e.getAbsoluteUrl(s.mapping[a].path);c=t.getByUrl(d),c?n(c):t.once(`add:url:${d}`,n)}}})}addParser(e,t){this._parsers.push({parser:e,decider:t})}}class e5 extends Ne{constructor(e){super(e,"scene")}load(e,t){PE.load(e,this.maxRetries,t)}open(e,t){this._app.systems.script.preloading=!0;const i=new hg(this._app,!1).parse(t),r=this._app.scene;return r.root=i,this._app.applySceneSettings(t.settings),this._app.systems.script.preloading=!1,r}}const cd=class cd{static push(e){cd._types.push(e)}};cd._types=[];let qr=cd;const t5=new Set(["system","entity","create","destroy","swap","move","data","scripts","_scripts","_scriptsIndex","_scriptsData","enabled","_oldState","onEnable","onDisable","onPostStateChange","_onSetEnabled","_checkState","_onBeforeRemove","_onInitializeAttributes","_onInitialize","_onPostInitialize","_onUpdate","_onPostUpdate","_callbacks","_callbackActive","has","get","on","off","fire","once","hasEvent"]),s5={};Al.reservedNames.forEach((o,e,t)=>{s5[o]=1});function i5(o,e,t){if(typeof o!="function")throw new Error(`script class: '${o}' must be a constructor function (i.e. class).`);if(!(o.prototype instanceof lo))throw new Error(`script class: '${tl.__getScriptName(o)}' does not extend pc.Script.`);if(e=e||o.__name||tl.__getScriptName(o),t5.has(e))throw new Error(`script name: '${e}' is reserved, please change script name`);o.__name=e,Bc.getApplication().scripts.add(o),qr.push(o)}const r5=o=>o[0].toLowerCase()+o.substring(1);class a5 extends Ne{constructor(e){super(e,"script"),this._scripts={},this._cache={}}clearCache(){for(const e in this._cache){const t=this._cache[e],s=t.parentNode;s&&s.removeChild(t)}this._cache={}}load(e,t){typeof e=="string"&&(e={load:e,original:e});const s=this;this._app;const i=(e.load,(n,l,h)=>{if(n)t(n);else{const c={};for(let f=0;f<qr._types.length;f++)c[qr._types[f].name]=qr._types[f];qr._types.length=0,t(null,c,h);const d=l.split("&hash=")[0];delete s._loader._cache[Fn.makeKey(d,"script")]}}),[r]=e.load.split("?");r.endsWith(".mjs")?this._loadModule(r,i):this._loadScript(e.load,i)}open(e,t){return t}patch(e,t){}_loadScript(e,t){const s=document.head,i=document.createElement("script");this._cache[e]=i,i.async=!1,i.addEventListener("error",a=>{t(`Script: ${a.target.src} failed to load`)},!1);let r=!1;i.onload=i.onreadystatechange=function(){!r&&(!this.readyState||this.readyState==="loaded"||this.readyState==="complete")&&(r=!0,t(null,e,i))},i.src=e,s.appendChild(i)}_loadModule(e,t){const i=Se.browser&&window.location.origin!=="null"?window.location.origin+window.location.pathname:import.meta.url,r=new URL(e,i);import(r.toString()).then(a=>{const n=r.pathname.split("/").pop(),l=this._app.assets.find(n,"script")?.data?.scripts;for(const h in a){const c=a[h];if(c.prototype instanceof lo){const f=r5(c.name);c.scriptName;const u=c.scriptName??f;i5(c,u),l&&this._app.scripts.addSchema(u,l[u])}}t(null,e,null)}).catch(a=>{t(a)})}}class n5 extends Ne{constructor(e){super(e,"shader"),this.decoder=null}load(e,t){typeof e=="string"&&(e={load:e,original:e}),He.get(e.load,{retry:this.maxRetries>0,maxRetries:this.maxRetries},(s,i)=>{s?t(`Error loading shader resource: ${e.original} [${s}]`):t(null,i)})}openBinary(e){return this.decoder??=new TextDecoder("utf-8"),this.decoder.decode(e)}}function Cu(o){const e=this;e.resource&&(e.resource.atlas=o.resource)}function Pu(o){this.registry.load(o)}class o5 extends Ne{constructor(e){super(e,"sprite"),this._assets=e.assets,this._device=e.graphicsDevice}load(e,t){typeof e=="string"&&(e={load:e,original:e}),le.getExtension(e.original)===".json"&&He.get(e.load,{retry:this.maxRetries>0,maxRetries:this.maxRetries},(s,i)=>{s?t(s):t(null,i)})}open(e,t){const s=new cR(this._device);return e&&(s.__data=t),s}patch(e,t){const s=e.resource;if(s.__data&&(e.data.pixelsPerUnit=s.__data.pixelsPerUnit,e.data.renderMode=s.__data.renderMode,e.data.frameKeys=s.__data.frameKeys,s.__data.textureAtlasAsset)){const i=t.getByUrl(s.__data.textureAtlasAsset);i?e.data.textureAtlasAsset=i.id:console.warn(`Could not find textureatlas with url: ${s.__data.textureAtlasAsset}`)}s.startUpdate(),s.renderMode=e.data.renderMode,s.pixelsPerUnit=e.data.pixelsPerUnit,s.frameKeys=e.data.frameKeys,this._updateAtlas(e),s.endUpdate(),e.off("change",this._onAssetChange,this),e.on("change",this._onAssetChange,this)}_updateAtlas(e){const t=e.resource;if(!e.data.textureAtlasAsset){t.atlas=null;return}this._assets.off(`load:${e.data.textureAtlasAsset}`,Cu,e),this._assets.on(`load:${e.data.textureAtlasAsset}`,Cu,e);const s=this._assets.get(e.data.textureAtlasAsset);s&&s.resource?t.atlas=s.resource:s?this._assets.load(s):(this._assets.off(`add:${e.data.textureAtlasAsset}`,Pu,e),this._assets.on(`add:${e.data.textureAtlasAsset}`,Pu,e))}_onAssetChange(e,t,s,i){t==="data"&&s&&s.textureAtlasAsset&&i&&s.textureAtlasAsset!==i.textureAtlasAsset&&(this._assets.off(`load:${i.textureAtlasAsset}`,Cu,e),this._assets.off(`add:${i.textureAtlasAsset}`,Pu,e))}}class ky{constructor(e,t){this._templateRoot=null,this._app=e,this._data=t}instantiate(){return this._templateRoot||this._parseTemplate(),this._templateRoot.clone()}_parseTemplate(){const e=new hg(this._app,!0);this._templateRoot=e.parse(this._data)}}class l5 extends Ne{constructor(e){super(e,"template"),this.decoder=null}load(e,t){typeof e=="string"&&(e={load:e,original:e});const s={retry:this.maxRetries>0,maxRetries:this.maxRetries};He.get(e.load,s,(i,r)=>{i?t(`Error requesting template: ${e.original}`):t(i,r)})}open(e,t){return new ky(this._app,t)}openBinary(e){return this.decoder??=new TextDecoder("utf-8"),new ky(this._app,JSON.parse(this.decoder.decode(e)))}}class h5 extends Ne{constructor(e){super(e,"text"),this.decoder=null}load(e,t){typeof e=="string"&&(e={load:e,original:e}),He.get(e.load,{retry:this.maxRetries>0,maxRetries:this.maxRetries},(s,i)=>{s?t(`Error loading text resource: ${e.original} [${s}]`):t(null,i)})}openBinary(e){return this.decoder??=new TextDecoder("utf-8"),this.decoder.decode(e)}}const Wh={repeat:ot,clamp:te,mirror:Bm},$h={nearest:pe,linear:Ze,nearest_mip_nearest:wd,linear_mip_nearest:Pd,nearest_mip_linear:Cd,linear_mip_linear:ha},c5=/^data\.frames\.(\d+)$/;class d5 extends Ne{constructor(e){super(e,"textureatlas"),this._loader=e.loader}load(e,t){typeof e=="string"&&(e={load:e,original:e});const s=this,i=this._loader.getHandler("texture");le.getExtension(e.original)===".json"?He.get(e.load,{retry:this.maxRetries>0,maxRetries:this.maxRetries},(r,a)=>{if(r)t(r);else{const n=e.original.replace(".json",".png");s._loader.load(n,"texture",(l,h)=>{l?t(l):t(null,{data:a,texture:h})})}}):i.load(e,t)}open(e,t,s){const i=new dR;if(t.texture&&t.data)i.texture=t.texture,i.__data=t.data;else{const a=this._loader.getHandler("texture").open(e,t,s);if(!a)return null;i.texture=a}return i}patch(e,t){if(!e.resource)return;e.resource.__data&&(e.resource.__data.minfilter!==void 0&&(e.data.minfilter=e.resource.__data.minfilter),e.resource.__data.magfilter!==void 0&&(e.data.magfilter=e.resource.__data.magfilter),e.resource.__data.addressu!==void 0&&(e.data.addressu=e.resource.__data.addressu),e.resource.__data.addressv!==void 0&&(e.data.addressv=e.resource.__data.addressv),e.resource.__data.mipmaps!==void 0&&(e.data.mipmaps=e.resource.__data.mipmaps),e.resource.__data.anisotropy!==void 0&&(e.data.anisotropy=e.resource.__data.anisotropy),e.resource.__data.rgbm!==void 0&&(e.data.rgbm=!!e.resource.__data.rgbm),e.data.frames=e.resource.__data.frames,delete e.resource.__data);const s=e.resource.texture;if(s&&(s.name=e.name,e.data.hasOwnProperty("minfilter")&&s.minFilter!==$h[e.data.minfilter]&&(s.minFilter=$h[e.data.minfilter]),e.data.hasOwnProperty("magfilter")&&s.magFilter!==$h[e.data.magfilter]&&(s.magFilter=$h[e.data.magfilter]),e.data.hasOwnProperty("addressu")&&s.addressU!==Wh[e.data.addressu]&&(s.addressU=Wh[e.data.addressu]),e.data.hasOwnProperty("addressv")&&s.addressV!==Wh[e.data.addressv]&&(s.addressV=Wh[e.data.addressv]),e.data.hasOwnProperty("mipmaps")&&s.mipmaps!==e.data.mipmaps&&(s.mipmaps=e.data.mipmaps),e.data.hasOwnProperty("anisotropy")&&s.anisotropy!==e.data.anisotropy&&(s.anisotropy=e.data.anisotropy),e.data.hasOwnProperty("rgbm"))){const r=e.data.rgbm?ca:ti;s.type!==r&&(s.type=r)}e.resource.texture=s;const i={};for(const r in e.data.frames){const a=e.data.frames[r];i[r]={rect:new K(a.rect),pivot:new z(a.pivot),border:new K(a.border)}}e.resource.frames=i,e.off("change",this._onAssetChange,this),e.on("change",this._onAssetChange,this)}_onAssetChange(e,t,s){let i;if(t==="data"||t==="data.frames"){const r={};for(const a in s.frames)i=s.frames[a],r[a]={rect:new K(i.rect),pivot:new z(i.pivot),border:new K(i.border)};e.resource.frames=r}else{const r=t.match(c5);if(r){const a=r[1];s?(e.resource.frames[a]?(i=e.resource.frames[a],i.rect.set(s.rect[0],s.rect[1],s.rect[2],s.rect[3]),i.pivot.set(s.pivot[0],s.pivot[1]),i.border.set(s.border[0],s.border[1],s.border[2],s.border[3])):e.resource.frames[a]={rect:new K(s.rect),pivot:new z(s.pivot),border:new K(s.border)},e.resource.fire("set:frame",a,e.resource.frames[a])):e.resource.frames[a]&&(delete e.resource.frames[a],e.resource.fire("remove:frame",a))}}}}function f5(){const o={cTFETC1:0,cTFETC2:1,cTFBC1:2,cTFBC3:3,cTFPVRTC1_4_RGB:8,cTFPVRTC1_4_RGBA:9,cTFASTC_4x4:10,cTFATC_RGB:11,cTFATC_RGBA_INTERPOLATED_ALPHA:12,cTFRGBA32:13,cTFRGB565:14,cTFRGBA4444:16},e={astc:o.cTFASTC_4x4,dxt:o.cTFBC1,etc1:o.cTFETC1,etc2:o.cTFETC1,pvr:o.cTFPVRTC1_4_RGB,atc:o.cTFATC_RGB,none:o.cTFRGB565},t={astc:o.cTFASTC_4x4,dxt:o.cTFBC3,etc1:o.cTFRGBA4444,etc2:o.cTFETC2,pvr:o.cTFPVRTC1_4_RGBA,atc:o.cTFATC_RGBA_INTERPOLATED_ALPHA,none:o.cTFRGBA4444},s={ETC1:21,ETC2_RGB:22,ETC2_RGBA:23,DXT1:8,DXT5:10,PVRTC_4BPP_RGB_1:26,PVRTC_4BPP_RGBA_1:27,ASTC_4x4:28,ATC_RGB:29,ATC_RGBA:30,R8_G8_B8_A8:7,R5_G6_B5:3,R4_G4_B4_A4:5},i=(v,S)=>{switch(v){case o.cTFETC1:return S.formats.etc2?s.ETC2_RGB:s.ETC1;case o.cTFETC2:return s.ETC2_RGBA;case o.cTFBC1:return s.DXT1;case o.cTFBC3:return s.DXT5;case o.cTFPVRTC1_4_RGB:return s.PVRTC_4BPP_RGB_1;case o.cTFPVRTC1_4_RGBA:return s.PVRTC_4BPP_RGBA_1;case o.cTFASTC_4x4:return s.ASTC_4x4;case o.cTFATC_RGB:return s.ATC_RGB;case o.cTFATC_RGBA_INTERPOLATED_ALPHA:return s.ATC_RGBA;case o.cTFRGBA32:return s.R8_G8_B8_A8;case o.cTFRGB565:return s.R5_G6_B5;case o.cTFRGBA4444:return s.R4_G4_B4_A4}},r=v=>{const S=function(b,E){const T=b*.00784313725490196-1,w=E*(2/255)-1,P=Math.sqrt(1-Math.min(1,T*T+w*w));return Math.max(0,Math.min(255,Math.floor((P+1)*.5*255)))};for(let b=0;b<v.length;b+=4){const E=v[b+3],T=v[b+1];v[b+0]=E,v[b+2]=S(E,T),v[b+3]=255}return v},a=v=>{const S=new Uint16Array(v.length/4);for(let b=0;b<v.length;b+=4){const E=v[b+0],T=v[b+1],w=v[b+2];S[b/4]=(E&248)<<8|(T&252)<<3|w>>3}return S},n=(v,S)=>(v&v-1)===0&&(S&S-1)===0,l=()=>typeof performance<"u"?performance.now():0;let h,c,d;const f=(v,S,b)=>{if(b){if(v.formats.astc)return"astc"}else if(S){if(v.formats.etc2)return"etc2"}else{if(v.formats.etc2)return"etc2";if(v.formats.etc1)return"etc1"}return(T=>{for(let w=0;w<T.length;++w){const P=T[w];if(v.formats[P])return P}return"none"})(S?d:c)},u=(v,S,b)=>{switch(b){case o.cTFETC1:case o.cTFETC2:return!0;case o.cTFBC1:case o.cTFBC3:return(v&3)===0&&(S&3)===0;case o.cTFPVRTC1_4_RGB:case o.cTFPVRTC1_4_RGBA:return n(v,S);case o.cTFASTC_4x4:return!0;case o.cTFATC_RGB:case o.cTFATC_RGBA_INTERPOLATED_ALPHA:return!0}return!1},p=(v,S,b)=>{if(!h.KTX2File)throw new Error("Basis transcoder module does not include support for KTX2.");const E=l(),T=new h.KTX2File(new Uint8Array(S)),w=T.getWidth(),P=T.getHeight(),M=T.getLevels(),L=!!T.getHasAlpha(),D=T.isUASTC&&T.isUASTC();if(!w||!P||!M)throw T.close(),T.delete(),new Error(`Invalid image dimensions url=${v} width=${w} height=${P} levels=${M}`);const k=f(b.deviceDetails,L,D),G=!!b.isGGGR&&k==="pvr";let U;if(G?U=o.cTFRGBA32:(U=L?t[k]:e[k],u(w,P,U)||(U=L?o.cTFRGBA32:o.cTFRGB565)),!T.startTranscoding())throw T.close(),T.delete(),new Error(`Failed to start transcoding url=${v}`);let C;const I=[];for(let R=0;R<M;++R){const O=T.getImageTranscodedSizeInBytes(R,0,0,U),N=new Uint8Array(O);if(!T.transcodeImage(N,R,0,0,U,0,-1,-1))throw T.close(),T.delete(),new Error(`Failed to transcode image url=${v}`);const F=U===o.cTFRGB565||U===o.cTFRGBA4444;I.push(F?new Uint16Array(N.buffer):N)}if(T.close(),T.delete(),G)for(U=o.cTFRGB565,C=0;C<I.length;++C)I[C]=a(r(I[C]));return{format:i(U,b.deviceDetails),width:w,height:P,levels:I,cubemap:!1,transcodeTime:l()-E,url:v,unswizzledGGGR:G}},m=(v,S,b)=>{const E=l(),T=new h.BasisFile(new Uint8Array(S)),w=T.getImageWidth(0,0),P=T.getImageHeight(0,0),M=T.getNumImages(),L=T.getNumLevels(0),D=!!T.getHasAlpha(),k=T.isUASTC&&T.isUASTC();if(!w||!P||!M||!L)throw T.close(),T.delete(),new Error(`Invalid image dimensions url=${v} width=${w} height=${P} images=${M} levels=${L}`);const G=f(b.deviceDetails,D,k),U=!!b.isGGGR&&G==="pvr";let C;if(U?C=o.cTFRGBA32:(C=D?t[G]:e[G],u(w,P,C)||(C=D?o.cTFRGBA32:o.cTFRGB565)),!T.startTranscoding())throw T.close(),T.delete(),new Error(`Failed to start transcoding url=${v}`);let I;const R=[];for(let O=0;O<L;++O){const N=T.getImageTranscodedSizeInBytes(0,O,C),F=new Uint8Array(N);if(!T.transcodeImage(F,0,O,C,0,0))if(O===L-1&&N===R[O-1].buffer.byteLength)F.set(new Uint8Array(R[O-1].buffer)),console.warn(`Failed to transcode last mipmap level, using previous level instead url=${v}`);else throw T.close(),T.delete(),new Error(`Failed to transcode image url=${v}`);const W=C===o.cTFRGB565||C===o.cTFRGBA4444;R.push(W?new Uint16Array(F.buffer):F)}if(T.close(),T.delete(),U)for(C=o.cTFRGB565,I=0;I<R.length;++I)R[I]=a(r(R[I]));return{format:i(C,b.deviceDetails),width:w,height:P,levels:R,cubemap:!1,transcodeTime:l()-E,url:v,unswizzledGGGR:U}},_=(v,S,b)=>b.isKTX2?p(v,S,b):m(v,S,b),g=(v,S,b)=>{try{const E=_(v,S,b);E.levels=E.levels.map(T=>T.buffer),self.postMessage({url:v,data:E},E.levels)}catch(E){self.postMessage({url:v,err:E},null)}},y=(v,S)=>{const b=(E,T)=>(WebAssembly.instantiate(v.module,E).then(w=>{T(w)}).catch(w=>{console.error(`instantiate failed + ${w}`)}),{});self.BASIS(v.module?{instantiateWasm:b}:null).then(E=>{E.initializeBasis(),h=E,c=v.rgbPriority,d=v.rgbaPriority,S(null)})},A=[];self.onmessage=v=>{const S=v.data;switch(S.type){case"init":y(S.config,()=>{for(let b=0;b<A.length;++b)g(A[b].url,A[b].data,A[b].options);A.length=0});break;case"transcode":h?g(S.url,S.data,S.options):A.push(S);break}}}const u5=o=>({astc:!!o.extCompressedTextureASTC,atc:!!o.extCompressedTextureATC,dxt:!!o.extCompressedTextureS3TC,etc1:!!o.extCompressedTextureETC1,etc2:!!o.extCompressedTextureETC,pvr:!!o.extCompressedTexturePVRTC}),p5=(o,e)=>{const t=a=>{const n=["/* basis */",a,"",`(${f5.toString()})()

`].join(`
`);return new Blob([n],{type:"application/javascript"})},s=()=>{try{if(typeof WebAssembly=="object"&&typeof WebAssembly.instantiate=="function"){const a=new WebAssembly.Module(Uint8Array.of(0,97,115,109,1,0,0,0));if(a instanceof WebAssembly.Module)return new WebAssembly.Instance(a)instanceof WebAssembly.Instance}}catch{}return!1},i=(a,n)=>{e(null,{workerUrl:URL.createObjectURL(t(a)),module:n,rgbPriority:o.rgbPriority,rgbaPriority:o.rgbaPriority})},r={cache:!0,responseType:"text",retry:o.maxRetries>0,maxRetries:o.maxRetries};if(o.glueUrl&&o.wasmUrl&&s()){let a=null,n=null;He.get(o.glueUrl,r,(c,d)=>{c?e(c):n?i(d,n):a=d});const l=fetch(o.wasmUrl),h=()=>{l.then(c=>c.arrayBuffer()).then(c=>WebAssembly.compile(c)).then(c=>{a?i(a,c):n=c}).catch(c=>{e(c,null)})};WebAssembly.compileStreaming?WebAssembly.compileStreaming(l).then(c=>{a?i(a,c):n=c}).catch(c=>{h()}):h()}else He.get(o.fallbackUrl,r,(a,n)=>{a?e(a,null):i(n,null)})};class m5{constructor(){this.callbacks={},this.queue=[],this.clients=[]}enqueueJob(e,t,s,i){if(this.callbacks.hasOwnProperty(e))this.callbacks[e].push(s);else{this.callbacks[e]=[s];const r={url:e,data:t,options:i};this.clients.length>0?this.clients.shift().run(r):this.queue.push(r)}}enqueueClient(e){this.queue.length>0?e.run(this.queue.shift()):this.clients.push(e)}handleResponse(e,t,s){const i=this.callbacks[e];if(t)for(let r=0;r<i.length;++r)i[r](t);else{s.format===Ld||s.format===Id?s.levels=s.levels.map(r=>new Uint16Array(r)):s.levels=s.levels.map(r=>new Uint8Array(r));for(let r=0;r<i.length;++r)i[r](null,s)}delete this.callbacks[e]}}class _5{constructor(e,t,s){this.queue=e,this.worker=new Worker(t.workerUrl),this.worker.addEventListener("message",i=>{const r=i.data;this.queue.handleResponse(r.url,r.err,r.data),this.eager||this.queue.enqueueClient(this)}),this.worker.postMessage({type:"init",config:t}),this.eager=s}run(e){const t=[];e.data instanceof ArrayBuffer&&t.push(e.data),this.worker.postMessage({type:"transcode",url:e.url,format:e.format,data:e.data,options:e.options},t),this.eager&&this.queue.enqueueClient(this)}}const g5=1,v5=["etc2","etc1","astc","dxt","pvr","atc"],S5=["astc","dxt","etc2","pvr","atc"],y5=5,tm=new m5;let Uy=null,sm=!1;function T5(o){if(!sm){if(!o)o=Uy||{};else if(o.lazyInit){Uy=o;return}if(!o.glueUrl||!o.wasmUrl||!o.fallbackUrl){const e=eT.getConfig("BASIS");e&&(o={glueUrl:e.glueUrl,wasmUrl:e.wasmUrl,fallbackUrl:e.fallbackUrl,numWorkers:e.numWorkers})}if(o.glueUrl||o.wasmUrl||o.fallbackUrl){sm=!0;const e=Math.max(1,Math.min(16,o.numWorkers||g5)),t=o.numWorkers===1||(o.hasOwnProperty("eagerWorkers")?o.eagerWorkers:!0);o.rgbPriority=o.rgbPriority||v5,o.rgbaPriority=o.rgbaPriority||S5,o.maxRetries=o.hasOwnProperty("maxRetries")?o.maxRetries:y5,p5(o,(s,i)=>{if(s)console.error(`failed to initialize basis worker: ${s}`);else for(let r=0;r<e;++r)tm.enqueueClient(new _5(tm,i,t))})}}}let Lu=null;function LE(o,e,t,s,i){return T5(),Lu||(Lu={formats:u5(o)}),tm.enqueueJob(e,t,s,{deviceDetails:Lu,isGGGR:!!i?.isGGGR,isKTX2:!!i?.isKTX2}),sm}class _o{load(e,t,s){throw new Error("not implemented")}open(e,t,s){throw new Error("not implemented")}}class x5 extends _o{constructor(e,t){super(),this.device=t,this.maxRetries=0}load(e,t,s){const i=this.device,r=a=>{LE(i,e.load,a,t,{isGGGR:(s?.file?.variants?.basis?.opt&8)!==0})||t(`Basis module not found. Asset [${s.name}](${s.getFileUrl()}) basis texture variant will not be loaded.`)};ie.fetchArrayBuffer(e.load,(a,n)=>{a?t(a):r(n)},s,this.maxRetries)}open(e,t,s,i={}){const r=i.srgb?Bd(t.format):t.format,a=new ae(s,{name:e,addressU:t.cubemap?te:ot,addressV:t.cubemap?te:ot,width:t.width,height:t.height,format:r,cubemap:t.cubemap,levels:t.levels,...i});return a.upload(),a}}class E5 extends _o{constructor(e,t){super(),this.crossOrigin=e.prefix?"anonymous":null,this.maxRetries=0,this.device=t}load(e,t,s){const i=!!s?.file?.contents;if(i){if(this.device.supportsImageBitmap){this._loadImageBitmapFromBlob(new Blob([s.file.contents]),t);return}e={load:URL.createObjectURL(new Blob([s.file.contents])),original:e.original}}const r=(n,l)=>{i&&URL.revokeObjectURL(e.load),t(n,l)};let a;s&&s.options&&s.options.hasOwnProperty("crossOrigin")?a=s.options.crossOrigin:no.test(e.load)&&(a=this.crossOrigin),this.device.supportsImageBitmap?this._loadImageBitmap(e.load,e.original,a,r,s):this._loadImage(e.load,e.original,a,r,s)}open(e,t,s,i={}){const r=new ae(s,{name:e,width:t.width,height:t.height,format:i.srgb?zt:Ae,...i});return r.setSource(t),r}_loadImage(e,t,s,i,r){const a=new Image;s&&(a.crossOrigin=s);let n=0;const l=this.maxRetries;let h;const c=1024*1024;r?.fire("progress",0,c),a.onload=function(){r?.fire("progress",c,c),i(null,a)},a.onerror=function(){if(!h)if(l>0&&++n<=l){const d=Math.pow(2,n)*100;console.log(`Error loading Texture from: '${t}' - Retrying in ${d}ms...`);const u=e.indexOf("?")>=0?"&":"?";h=setTimeout(()=>{a.src=`${e+u}retry=${Date.now()}`,h=null},d)}else i(`Error loading Texture from: '${t}'`)},a.src=e}_loadImageBitmap(e,t,s,i,r){const a={cache:!0,responseType:"blob",retry:this.maxRetries>0,maxRetries:this.maxRetries,progress:r};He.get(e,a,(n,l)=>{n?i(n):this._loadImageBitmapFromBlob(l,i)})}_loadImageBitmapFromBlob(e,t){createImageBitmap(e,{premultiplyAlpha:"none",colorSpaceConversion:"none"}).then(s=>t(null,s)).catch(s=>t(s))}}const Iu=[1481919403,3140563232,169478669],A5={33776:Md,33778:$m,33779:Ml,36196:Od,37492:Ym,37496:jm,35840:Nd,35841:Dl,35842:Fd,35843:Rl,32849:_r,32856:Ae,35905:qm,35907:zt,35898:Xn,34843:Dd,34842:et};function b5(o,e,t,s){return o===Xn?new Uint32Array(e,t,s/4):new Uint8Array(e,t,s)}class w5 extends _o{constructor(e){super(),this.maxRetries=0}load(e,t,s){ie.fetchArrayBuffer(e.load,t,s,this.maxRetries)}open(e,t,s,i={}){const r=this.parse(t);if(!r)return null;const a=i.srgb?Bd(r.format):r.format,n=new ae(s,{name:e,addressU:r.cubemap?te:ot,addressV:r.cubemap?te:ot,width:r.width,height:r.height,format:a,cubemap:r.cubemap,levels:r.levels,...i});return n.upload(),n}parse(e){const t=new Uint32Array(e);if(Iu[0]!==t[0]||Iu[1]!==t[1]||Iu[2]!==t[2])return null;const s={endianness:t[3],glType:t[4],glTypeSize:t[5],glFormat:t[6],glInternalFormat:t[7],glBaseInternalFormat:t[8],pixelWidth:t[9],pixelHeight:t[10],pixelDepth:t[11],numberOfArrayElements:t[12],numberOfFaces:t[13],numberOfMipmapLevels:t[14],bytesOfKeyValueData:t[15]};if(s.pixelDepth>1||s.numberOfArrayElements!==0)return null;const i=A5[s.glInternalFormat];if(i===void 0)return null;let r=16+s.bytesOfKeyValueData/4;const a=s.numberOfFaces>1,n=[];for(let l=0;l<(s.numberOfMipmapLevels||1);l++){const h=t[r++];a&&n.push([]);const c=a?n[l]:n;for(let d=0;d<(a?6:1);++d)c.push(b5(i,e,r*4,h)),r+=h+3>>2}return{format:i,width:s.pixelWidth,height:s.pixelHeight,levels:n,cubemap:a}}}const C5={KHR_DF_MODEL_UASTC:166};class P5 extends _o{constructor(e,t){super(),this.maxRetries=0,this.device=t}load(e,t,s){ie.fetchArrayBuffer(e.load,(i,r)=>{i?t(i,r):this.parse(r,e,t,s)},s,this.maxRetries)}open(e,t,s,i={}){const r=i.srgb?Bd(t.format):t.format,a=new ae(s,{name:e,addressU:t.cubemap?te:ot,addressV:t.cubemap?te:ot,width:t.width,height:t.height,format:r,cubemap:t.cubemap,levels:t.levels,...i});return a.upload(),a}parse(e,t,s,i){const r=new tT(e),a=[r.readU32be(),r.readU32be(),r.readU32be()];if(a[0]!==2873840728||a[1]!==540160187||a[2]!==218765834)return null;const n={vkFormat:r.readU32(),typeSize:r.readU32(),pixelWidth:r.readU32(),pixelHeight:r.readU32(),pixelDepth:r.readU32(),layerCount:r.readU32(),faceCount:r.readU32(),levelCount:r.readU32(),supercompressionScheme:r.readU32()},l={dfdByteOffset:r.readU32(),dfdByteLength:r.readU32(),kvdByteOffset:r.readU32(),kvdByteLength:r.readU32(),sgdByteOffset:r.readU64(),sgdByteLength:r.readU64()},h=[];for(let f=0;f<Math.max(1,n.levelCount);++f)h.push({byteOffset:r.readU64(),byteLength:r.readU64(),uncompressedByteLength:r.readU64()});if(r.readU32()!==l.kvdByteOffset-l.dfdByteOffset)return null;r.skip(8);const d=r.readU8();r.skip(l.dfdByteLength-9),r.skip(l.kvdByteLength),n.supercompressionScheme===1||d===C5.KHR_DF_MODEL_UASTC?LE(this.device,t.load,e,s,{isGGGR:(i?.file?.variants?.basis?.opt&8)!==0,isKTX2:!0})||s(`Basis module not found. Asset [${i.name}](${i.getFileUrl()}) basis texture variant will not be loaded.`):s("unsupported KTX2 pixel format")}}class L5 extends _o{constructor(e){super(),this.maxRetries=0}load(e,t,s){ie.fetchArrayBuffer(e.load,t,s,this.maxRetries)}open(e,t,s,i={}){const r=new Uint32Array(t,0,32),a=r[4],n=r[3],l=Math.max(r[7],1),h=r[20]===4,c=r[21],d=r[22],f=r[28]===65024,u=827611204,p=894720068,m=113,_=116,g=826496069,y=825438800,A=825504336,v=825439312,S=825504848;let b=!1,E=!1,T=!1,w=!1,P=null,M=1,L;if(h?c===u?(P=Md,b=!0):c===p?(P=Ml,b=!0):c===m?(P=et,M=2):c===_?(P=ft,M=4):c===g?(P=Od,b=!0,E=!0):c===y||c===A?(P=c===y?Dl:Rl,b=!0,T=!0):(c===v||c===S)&&(P=c===v?Nd:Fd,b=!0,w=!0):d===32&&(P=Ae),!P)return L=new ae(s,{width:4,height:4,format:_r,name:"dds-legacy-empty"}),L;L=new ae(s,{name:e,addressU:f?te:ot,addressV:f?te:ot,width:a,height:n,format:P,cubemap:f,mipmaps:l>1,...i});let D=128;const k=f?6:1;let G;const U=4,C=4,I=c===u?8:16;let R,O,N;for(let F=0;F<k;F++){let W=a,X=n;for(let V=0;V<l;V++){b?E?G=Math.floor((W+3)/4)*Math.floor((X+3)/4)*8:T?G=Math.max(W,16)*Math.max(X,8)/4:w?G=Math.max(W,8)*Math.max(X,8)/2:(R=Math.floor((W+U-1)/U),O=Math.floor((X+C-1)/C),N=R*O,G=N*I):G=W*X*4;const Y=P===ft?new Float32Array(t,D,G):P===et?new Uint16Array(t,D,G):new Uint8Array(t,D,G);f?(L._levels[V]||(L._levels[V]=[]),L._levels[V][F]=Y):L._levels[V]=Y,D+=G*M,W=Math.max(W*.5,1),X=Math.max(X*.5,1)}}return L.upload(),L}}class I5 extends _o{constructor(e){super(),this.maxRetries=0}load(e,t,s){ie.fetchArrayBuffer(e.load,t,s,this.maxRetries),s.data&&!s.data.type&&(s.data.type=bc)}open(e,t,s,i={}){const r=this.parse(t);if(!r)return null;const a=new ae(s,{name:e,addressU:ot,addressV:te,minFilter:pe,magFilter:pe,width:r.width,height:r.height,levels:r.levels,format:Ae,type:bc,mipmaps:!1,...i});return a.upload(),a}parse(e){const t=new tT(e);if(!t.readLine().startsWith("#?RADIANCE"))return null;const i={};for(;;){const h=t.readLine();if(h.length===0)break;{const c=h.split("=");c.length===2&&(i[c[0]]=c[1])}}if(!i.hasOwnProperty("FORMAT"))return null;const r=t.readLine().split(" ");if(r.length!==4)return null;const a=parseInt(r[1],10),n=parseInt(r[3],10),l=this._readPixels(t,n,a,r[0]==="-Y");return l?{width:n,height:a,levels:[l]}:null}_readPixels(e,t,s,i){if(t<8||t>32767)return this._readPixelsFlat(e,t,s);const r=[0,0,0,0];if(e.readArray(r),r[0]!==2||r[1]!==2||(r[2]&128)!==0)return e.skip(-4),this._readPixelsFlat(e,t,s);const a=new ArrayBuffer(t*s*4),n=new Uint8Array(a);let l=i?0:t*4*(s-1),h,c,d,f,u,p;for(c=0;c<s;++c){if(c&&e.readArray(r),(r[2]<<8)+r[3]!==t)return null;for(f=0;f<4;++f)for(h=0;h<t;)if(u=e.readU8(),u>128){if(u-=128,h+u>t)return null;for(p=e.readU8(),d=0;d<u;++d)n[l+f+4*h++]=p}else{if(u===0||h+u>t)return null;for(d=0;d<u;++d)n[l+f+4*h++]=e.readU8()}l+=t*4*(i?1:-1)}return n}_readPixelsFlat(e,t,s){return e.remainingBytes===t*s*4?new Uint8Array(e.arraybuffer,e.offset):null}}const By={repeat:ot,clamp:te,mirror:Bm},Vy={nearest:pe,linear:Ze,nearest_mip_nearest:wd,linear_mip_nearest:Pd,nearest_mip_linear:Cd,linear_mip_linear:ha},M5={default:ti,rgbm:ca,rgbe:bc,rgbp:fl,swizzleGGGR:v_},D5=function(o){const e=Pi.calcMipLevelsCount(o._width,o._height),t=function(i){return i instanceof HTMLCanvasElement||i instanceof HTMLImageElement||i instanceof HTMLVideoElement};if(!(o._format===Ae||o._format===ft)||o._volume||o._compressed||o._levels.length===1||o._levels.length===e||t(o._cubemap?o._levels[0][0]:o._levels[0]))return;const s=function(i,r,a){const n=Math.max(1,i>>1),l=Math.max(1,r>>1),h=new a.constructor(n*l*4),c=Math.floor(i/n),d=Math.floor(r/l),f=c*d;for(let u=0;u<l;++u)for(let p=0;p<n;++p)for(let m=0;m<4;++m){let _=0;for(let g=0;g<d;++g)for(let y=0;y<c;++y)_+=a[(p*c+y+(u*d+g)*i)*4+m];h[(p+u*n)*4+m]=_/f}return h};for(let i=o._levels.length;i<e;++i){const r=Math.max(1,o._width>>i-1),a=Math.max(1,o._height>>i-1);if(o._cubemap){const n=[];for(let l=0;l<6;++l)n.push(s(r,a,o._levels[i-1][l]));o._levels.push(n)}else o._levels.push(s(r,a,o._levels[i-1]))}o._levelsUpdated=o._cubemap?[[!0,!0,!0,!0,!0,!0]]:[!0]};class R5 extends Ne{constructor(e){super(e,"texture");const t=e.assets,s=e.graphicsDevice;this._device=s,this._assets=t,this.imgParser=new E5(t,s),this.parsers={dds:new L5(t),ktx:new w5(t),ktx2:new P5(t,s),basis:new x5(t,s),hdr:new I5(t)}}set crossOrigin(e){this.imgParser.crossOrigin=e}get crossOrigin(){return this.imgParser.crossOrigin}set maxRetries(e){this.imgParser.maxRetries=e;for(const t in this.parsers)this.parsers.hasOwnProperty(t)&&(this.parsers[t].maxRetries=e)}get maxRetries(){return this.imgParser.maxRetries}_getUrlWithoutParams(e){return e.indexOf("?")>=0?e.split("?")[0]:e}_getParser(e){const t=le.getExtension(this._getUrlWithoutParams(e)).toLowerCase().replace(".","");return this.parsers[t]||this.imgParser}_getTextureOptions(e){const t={};if(e){e.name?.length>0&&(t.name=e.name);const s=e.data;s.hasOwnProperty("minfilter")&&(t.minFilter=Vy[s.minfilter]),s.hasOwnProperty("magfilter")&&(t.magFilter=Vy[s.magfilter]),s.hasOwnProperty("addressu")&&(t.addressU=By[s.addressu]),s.hasOwnProperty("addressv")&&(t.addressV=By[s.addressv]),s.hasOwnProperty("mipmaps")&&(t.mipmaps=s.mipmaps),s.hasOwnProperty("anisotropy")&&(t.anisotropy=s.anisotropy),s.hasOwnProperty("flipY")&&(t.flipY=!!s.flipY),s.hasOwnProperty("srgb")&&(t.srgb=!!s.srgb),t.type=ti,s.hasOwnProperty("type")?t.type=M5[s.type]:s.hasOwnProperty("rgbm")&&s.rgbm?t.type=ca:e.file&&(e.file.opt&8)!==0&&(t.type=v_)}return t}load(e,t,s){typeof e=="string"&&(e={load:e,original:e}),this._getParser(e.original).load(e,t,s)}open(e,t,s){if(!e)return;const i=this._getTextureOptions(s);let r=this._getParser(e).open(e,t,this._device,i);return r===null?r=new ae(this._device,{width:4,height:4,format:_r}):(D5(r),t.unswizzledGGGR&&(s.file.variants.basis.opt&=-9)),r}patch(e,t){const s=e.resource;if(!s)return;const i=this._getTextureOptions(e);for(const r of Object.keys(i))s[r]=i[r]}}const O5="inline",N5="immersive-vr",sl="immersive-ar",zy="viewer",F5="left",k5="cpu-optimized",IE="gpu-optimized",ME="luminance-alpha",DE="unsigned-short",RE="float32";class U5{constructor(e){this._supported=Se.browser&&!!window.XRDOMOverlayState,this._root=null,this._manager=e}get supported(){return this._supported}get available(){return this._supported&&this._manager.active&&this._manager._session.domOverlayState!==null}get state(){return!this._supported||!this._manager.active||!this._manager._session.domOverlayState?null:this._manager._session.domOverlayState.type}set root(e){!this._supported||this._manager.active||(this._root=e)}get root(){return this._root}}const Xh=[],Hy=[],dd=class dd extends ne{constructor(e,t,s,i=null){super(),this.manager=e,this._xrHitTestSource=t,this._transient=s,this._inputSource=i}remove(){if(!this._xrHitTestSource)return;const e=this.manager.hitTest.sources,t=e.indexOf(this);t!==-1&&e.splice(t,1),this.onStop()}onStop(){this._xrHitTestSource.cancel(),this._xrHitTestSource=null,this.fire("remove"),this.manager.hitTest.fire("remove",this)}update(e){if(this._transient){const t=e.getHitTestResultsForTransientInput(this._xrHitTestSource);for(let s=0;s<t.length;s++){const i=t[s];if(!i.results.length)continue;let r;i.inputSource&&(r=this.manager.input._getByInputSource(i.inputSource)),this.updateHitResults(i.results,r)}}else{const t=e.getHitTestResults(this._xrHitTestSource);if(!t.length)return;this.updateHitResults(t)}}updateHitResults(e,t){if(this._inputSource&&this._inputSource!==t)return;const s=Xh.pop()??new x;t?s.copy(t.getOrigin()):s.copy(this.manager.camera.getPosition());let i=1/0,r=null;const a=Xh.pop()??new x,n=Hy.pop()??new Q;for(let l=0;l<e.length;l++){const h=e[l].getPose(this.manager._referenceSpace),c=s.distance(h.transform.position);c>=i||(i=c,r=e[l],a.copy(h.transform.position),n.copy(h.transform.orientation))}this.fire("result",a,n,t||this._inputSource,r),this.manager.hitTest.fire("result",this,a,n,t||this._inputSource,r),Xh.push(s),Xh.push(a),Hy.push(n)}};dd.EVENT_REMOVE="remove",dd.EVENT_RESULT="result";let im=dd;const er=class er extends ne{constructor(e){super(),this._supported=Se.browser&&!!(window.XRSession&&window.XRSession.prototype.requestHitTestSource),this._available=!1,this._checkingAvailability=!1,this.sources=[],this.manager=e,this._supported&&(this.manager.on("start",this._onSessionStart,this),this.manager.on("end",this._onSessionEnd,this))}_onSessionStart(){if(this.manager.session.enabledFeatures){const e=this.manager.session.enabledFeatures.indexOf("hit-test")!==-1;if(!e)return;this._available=e,this.fire("available")}else this._checkingAvailability||(this._checkingAvailability=!0,this.manager.session.requestReferenceSpace(zy).then(e=>{this.manager.session.requestHitTestSource({space:e}).then(t=>{t.cancel(),this.manager.active&&(this._available=!0,this.fire("available"))}).catch(()=>{})}).catch(()=>{}))}_onSessionEnd(){if(this._available){this._available=!1;for(let e=0;e<this.sources.length;e++)this.sources[e].onStop();this.sources=[],this.fire("unavailable")}}start(e={}){if(!this._supported){e.callback?.(new Error("XR HitTest is not supported"),null);return}if(!this._available){e.callback?.(new Error("XR HitTest is not available"),null);return}!e.profile&&!e.spaceType&&(e.spaceType=zy);let t;const s=e.offsetRay;if(s){const r=new DOMPoint(s.origin.x,s.origin.y,s.origin.z,1),a=new DOMPoint(s.direction.x,s.direction.y,s.direction.z,0);t=new XRRay(r,a)}const i=e.callback;e.spaceType?this.manager.session.requestReferenceSpace(e.spaceType).then(r=>{if(!this.manager.session){const a=new Error("XR Session is not started (2)");i&&i(a),this.fire("error",a);return}this.manager.session.requestHitTestSource({space:r,entityTypes:e.entityTypes||void 0,offsetRay:t}).then(a=>{this._onHitTestSource(a,!1,e.inputSource,i)}).catch(a=>{i&&i(a),this.fire("error",a)})}).catch(r=>{i&&i(r),this.fire("error",r)}):this.manager.session.requestHitTestSourceForTransientInput({profile:e.profile,entityTypes:e.entityTypes||void 0,offsetRay:t}).then(r=>{this._onHitTestSource(r,!0,e.inputSource,i)}).catch(r=>{i&&i(r),this.fire("error",r)})}_onHitTestSource(e,t,s,i){if(!this.manager.session){e.cancel();const a=new Error("XR Session is not started (3)");i&&i(a),this.fire("error",a);return}const r=new im(this.manager,e,t,s??null);this.sources.push(r),i&&i(null,r),this.fire("add",r)}update(e){if(this._available)for(let t=0;t<this.sources.length;t++)this.sources[t].update(e)}get supported(){return this._supported}get available(){return this._available}};er.EVENT_AVAILABLE="available",er.EVENT_UNAVAILABLE="unavailable",er.EVENT_ADD="add",er.EVENT_REMOVE="remove",er.EVENT_RESULT="result",er.EVENT_ERROR="error";let rm=er;const fd=class fd extends ne{constructor(e,t){super(),this._bitmap=null,this._measuredWidth=0,this._trackable=!1,this._tracking=!1,this._emulated=!1,this._pose=null,this._position=new x,this._rotation=new Q,this._image=e,this._width=t}get image(){return this._image}set width(e){this._width=e}get width(){return this._width}get trackable(){return this._trackable}get tracking(){return this._tracking}get emulated(){return this._emulated}prepare(){return this._bitmap?{image:this._bitmap,widthInMeters:this._width}:createImageBitmap(this._image).then(e=>(this._bitmap=e,{image:this._bitmap,widthInMeters:this._width}))}destroy(){this._image=null,this._pose=null,this._bitmap&&(this._bitmap.close(),this._bitmap=null)}getPosition(){return this._pose&&this._position.copy(this._pose.transform.position),this._position}getRotation(){return this._pose&&this._rotation.copy(this._pose.transform.orientation),this._rotation}};fd.EVENT_TRACKED="tracked",fd.EVENT_UNTRACKED="untracked";let am=fd;const mg=class mg extends ne{constructor(e){super(),this._supported=Se.browser&&!!window.XRImageTrackingResult,this._available=!1,this._images=[],this._manager=e,this._supported&&(this._manager.on("start",this._onSessionStart,this),this._manager.on("end",this._onSessionEnd,this))}add(e,t){if(!this._supported||this._manager.active)return null;const s=new am(e,t);return this._images.push(s),s}remove(e){if(this._manager.active)return;const t=this._images.indexOf(e);t!==-1&&(e.destroy(),this._images.splice(t,1))}_onSessionStart(){this._manager.session.getTrackedImageScores().then(e=>{this._available=!0;for(let t=0;t<e.length;t++)this._images[t]._trackable=e[t]==="trackable"}).catch(e=>{this._available=!1,this.fire("error",e)})}_onSessionEnd(){this._available=!1;for(let e=0;e<this._images.length;e++){const t=this._images[e];t._pose=null,t._measuredWidth=0,t._tracking&&(t._tracking=!1,t.fire("untracked"))}}prepareImages(e){this._images.length?Promise.all(this._images.map(t=>t.prepare())).then(t=>{e(null,t)}).catch(t=>{e(t,null)}):e(null,null)}update(e){if(!this._available)return;const t=e.getImageTrackingResults(),s={};for(let i=0;i<t.length;i++){s[t[i].index]=t[i];const r=this._images[t[i].index];r._emulated=t[i].trackingState==="emulated",r._measuredWidth=t[i].measuredWidthInMeters,r._pose=e.getPose(t[i].imageSpace,this._manager._referenceSpace)}for(let i=0;i<this._images.length;i++)this._images[i]._tracking&&!s[i]?(this._images[i]._tracking=!1,this._images[i].fire("untracked")):!this._images[i]._tracking&&s[i]&&(this._images[i]._tracking=!0,this._images[i].fire("tracked"))}get supported(){return this._supported}get available(){return this._available}get images(){return this._images}};mg.EVENT_ERROR="error";let nm=mg;class B5{constructor(e,t){this._joints=[],this._tip=null,this._index=e,this._hand=t,this._hand._fingers.push(this)}get index(){return this._index}get hand(){return this._hand}get joints(){return this._joints}get tip(){return this._tip}}const Gy=Se.browser&&window.XRHand?["thumb-tip","index-finger-tip","middle-finger-tip","ring-finger-tip","pinky-finger-tip"]:[],OE={};for(let o=0;o<Gy.length;o++)OE[Gy[o]]=!0;class Wy{constructor(e,t,s,i=null){this._radius=null,this._localTransform=new $,this._worldTransform=new $,this._localPosition=new x,this._localRotation=new Q,this._position=new x,this._rotation=new Q,this._dirtyLocal=!0,this._index=e,this._id=t,this._hand=s,this._finger=i,this._wrist=t==="wrist",this._tip=this._finger&&!!OE[t]}update(e){this._dirtyLocal=!0,this._radius=e.radius,this._localPosition.copy(e.transform.position),this._localRotation.copy(e.transform.orientation)}_updateTransforms(){this._dirtyLocal&&(this._dirtyLocal=!1,this._localTransform.setTRS(this._localPosition,this._localRotation,x.ONE));const t=this._hand._manager.camera.parent;t?this._worldTransform.mul2(t.getWorldTransform(),this._localTransform):this._worldTransform.copy(this._localTransform)}getPosition(){return this._updateTransforms(),this._worldTransform.getTranslation(this._position),this._position}getRotation(){return this._updateTransforms(),this._rotation.setFromMat4(this._worldTransform),this._rotation}get id(){return this._id}get index(){return this._index}get hand(){return this._hand}get finger(){return this._finger}get wrist(){return this._wrist}get tip(){return this._tip}get radius(){return this._radius||.005}}let dc=[];const Mr=new x,qh=new x,$y=new x;Se.browser&&window.XRHand&&(dc=[["thumb-metacarpal","thumb-phalanx-proximal","thumb-phalanx-distal","thumb-tip"],["index-finger-metacarpal","index-finger-phalanx-proximal","index-finger-phalanx-intermediate","index-finger-phalanx-distal","index-finger-tip"],["middle-finger-metacarpal","middle-finger-phalanx-proximal","middle-finger-phalanx-intermediate","middle-finger-phalanx-distal","middle-finger-tip"],["ring-finger-metacarpal","ring-finger-phalanx-proximal","ring-finger-phalanx-intermediate","ring-finger-phalanx-distal","ring-finger-tip"],["pinky-finger-metacarpal","pinky-finger-phalanx-proximal","pinky-finger-phalanx-intermediate","pinky-finger-phalanx-distal","pinky-finger-tip"]]);const ud=class ud extends ne{constructor(e){super(),this._tracking=!1,this._fingers=[],this._joints=[],this._jointsById={},this._tips=[],this._wrist=null;const t=e._xrInputSource.hand;if(this._manager=e._manager,this._inputSource=e,t.get("wrist")){const s=new Wy(0,"wrist",this,null);this._wrist=s,this._joints.push(s),this._jointsById.wrist=s}for(let s=0;s<dc.length;s++){const i=new B5(s,this);for(let r=0;r<dc[s].length;r++){const a=dc[s][r];if(!t.get(a))continue;const n=new Wy(r,a,this,i);this._joints.push(n),this._jointsById[a]=n,n.tip&&(this._tips.push(n),i._tip=n),i._joints.push(n)}}}update(e){const t=this._inputSource._xrInputSource;for(let c=0;c<this._joints.length;c++){const d=this._joints[c],f=t.hand.get(d._id);if(f){let u;if(e.session.visibilityState!=="hidden"&&(u=e.getJointPose(f,this._manager._referenceSpace)),u)d.update(u),d.wrist&&!this._tracking&&(this._tracking=!0,this.fire("tracking"));else if(d.wrist){this._tracking&&(this._tracking=!1,this.fire("trackinglost"));break}}}const s=this._jointsById["thumb-metacarpal"],i=this._jointsById["thumb-tip"],r=this._jointsById["index-finger-phalanx-proximal"],a=this._jointsById["index-finger-tip"],n=this._jointsById["ring-finger-phalanx-proximal"],l=this._jointsById["pinky-finger-phalanx-proximal"];if(s&&i&&r&&a&&n&&l){this._inputSource._dirtyRay=!0,this._inputSource._rayLocal.origin.lerp(i._localPosition,a._localPosition,.5);let c=s,d=l;if(this._inputSource.handedness===F5){const f=c;c=d,d=f}Mr.sub2(c._localPosition,this._wrist._localPosition),qh.sub2(d._localPosition,this._wrist._localPosition),$y.cross(Mr,qh).normalize(),Mr.lerp(r._localPosition,n._localPosition,.5),Mr.sub(this._wrist._localPosition).normalize(),this._inputSource._rayLocal.direction.lerp($y,Mr,.5).normalize()}this._fingerIsClosed(1)&&this._fingerIsClosed(2)&&this._fingerIsClosed(3)&&this._fingerIsClosed(4)?this._inputSource._squeezing||(this._inputSource._squeezing=!0,this._inputSource.fire("squeezestart"),this._manager.input.fire("squeezestart",this._inputSource)):this._inputSource._squeezing&&(this._inputSource._squeezing=!1,this._inputSource.fire("squeeze"),this._manager.input.fire("squeeze",this._inputSource),this._inputSource.fire("squeezeend"),this._manager.input.fire("squeezeend",this._inputSource))}_fingerIsClosed(e){const t=this._fingers[e];return Mr.sub2(t.joints[0]._localPosition,t.joints[1]._localPosition).normalize(),qh.sub2(t.joints[2]._localPosition,t.joints[3]._localPosition).normalize(),Mr.dot(qh)<-.8}getJointById(e){return this._jointsById[e]||null}get fingers(){return this._fingers}get joints(){return this._joints}get tips(){return this._tips}get wrist(){return this._wrist}get tracking(){return this._tracking}};ud.EVENT_TRACKING="tracking",ud.EVENT_TRACKINGLOST="trackinglost";let om=ud;const Xy=new x,qy=new Q;let V5=0;const Qt=class Qt extends ne{constructor(e,t){super(),this._ray=new $u,this._rayLocal=new $u,this._grip=!1,this._hand=null,this._velocitiesAvailable=!1,this._velocitiesTimestamp=Mi(),this._localTransform=null,this._worldTransform=null,this._position=new x,this._rotation=new Q,this._localPosition=null,this._localPositionLast=null,this._localRotation=null,this._linearVelocity=null,this._dirtyLocal=!0,this._dirtyRay=!1,this._selecting=!1,this._squeezing=!1,this._elementInput=!0,this._elementEntity=null,this._hitTestSources=[],this._id=++V5,this._manager=e,this._xrInputSource=t,t.hand&&(this._hand=new om(this))}get id(){return this._id}get inputSource(){return this._xrInputSource}get targetRayMode(){return this._xrInputSource.targetRayMode}get handedness(){return this._xrInputSource.handedness}get profiles(){return this._xrInputSource.profiles}get grip(){return this._grip}get hand(){return this._hand}get gamepad(){return this._xrInputSource.gamepad||null}get selecting(){return this._selecting}get squeezing(){return this._squeezing}set elementInput(e){this._elementInput!==e&&(this._elementInput=e,this._elementInput||(this._elementEntity=null))}get elementInput(){return this._elementInput}get elementEntity(){return this._elementEntity}get hitTestSources(){return this._hitTestSources}update(e){if(this._hand)this._hand.update(e);else{const t=this._xrInputSource.gripSpace;if(t){const i=e.getPose(t,this._manager._referenceSpace);if(i){this._grip||(this._grip=!0,this._localTransform=new $,this._worldTransform=new $,this._localPositionLast=new x,this._localPosition=new x,this._localRotation=new Q,this._linearVelocity=new x);const r=Mi(),a=(r-this._velocitiesTimestamp)/1e3;this._velocitiesTimestamp=r,this._dirtyLocal=!0,this._localPositionLast.copy(this._localPosition),this._localPosition.copy(i.transform.position),this._localRotation.copy(i.transform.orientation),this._velocitiesAvailable=!0,this._manager.input.velocitiesSupported&&i.linearVelocity?this._linearVelocity.copy(i.linearVelocity):a>0&&(Xy.sub2(this._localPosition,this._localPositionLast).divScalar(a),this._linearVelocity.lerp(this._linearVelocity,Xy,.15))}else this._velocitiesAvailable=!1}const s=e.getPose(this._xrInputSource.targetRaySpace,this._manager._referenceSpace);s&&(this._dirtyRay=!0,this._rayLocal.origin.copy(s.transform.position),this._rayLocal.direction.set(0,0,-1),qy.copy(s.transform.orientation),qy.transformVector(this._rayLocal.direction,this._rayLocal.direction))}}_updateTransforms(){this._dirtyLocal&&(this._dirtyLocal=!1,this._localTransform.setTRS(this._localPosition,this._localRotation,x.ONE));const e=this._manager.camera.parent;e?this._worldTransform.mul2(e.getWorldTransform(),this._localTransform):this._worldTransform.copy(this._localTransform)}_updateRayTransforms(){const e=this._dirtyRay;if(this._dirtyRay=!1,this._manager.camera.parent){const s=this._manager.camera.parent.getWorldTransform();s.getTranslation(this._position),this._rotation.setFromMat4(s),this._rotation.transformVector(this._rayLocal.origin,this._ray.origin),this._ray.origin.add(this._position),this._rotation.transformVector(this._rayLocal.direction,this._ray.direction)}else e&&(this._ray.origin.copy(this._rayLocal.origin),this._ray.direction.copy(this._rayLocal.direction))}getPosition(){return this._position?(this._updateTransforms(),this._worldTransform.getTranslation(this._position),this._position):null}getLocalPosition(){return this._localPosition}getRotation(){return this._rotation?(this._updateTransforms(),this._rotation.setFromMat4(this._worldTransform),this._rotation):null}getLocalRotation(){return this._localRotation}getLinearVelocity(){return this._velocitiesAvailable?this._linearVelocity:null}getOrigin(){return this._updateRayTransforms(),this._ray.origin}getDirection(){return this._updateRayTransforms(),this._ray.direction}hitTestStart(e={}){e.inputSource=this,e.profile=this._xrInputSource.profiles[0];const t=e.callback;e.callback=(s,i)=>{i&&this.onHitTestSourceAdd(i),t&&t(s,i)},this._manager.hitTest.start(e)}onHitTestSourceAdd(e){this._hitTestSources.push(e),this.fire("hittest:add",e),e.on("result",(t,s,i,r)=>{i===this&&this.fire("hittest:result",e,t,s,r)}),e.once("remove",()=>{this.onHitTestSourceRemove(e),this.fire("hittest:remove",e)})}onHitTestSourceRemove(e){const t=this._hitTestSources.indexOf(e);t!==-1&&this._hitTestSources.splice(t,1)}};Qt.EVENT_REMOVE="remove",Qt.EVENT_SELECT="select",Qt.EVENT_SELECTSTART="selectstart",Qt.EVENT_SELECTEND="selectend",Qt.EVENT_SQUEEZE="squeeze",Qt.EVENT_SQUEEZESTART="squeezestart",Qt.EVENT_SQUEEZEEND="squeezeend",Qt.EVENT_HITTESTADD="hittest:add",Qt.EVENT_HITTESTREMOVE="hittest:remove",Qt.EVENT_HITTESTRESULT="hittest:result";let lm=Qt;const Bs=class Bs extends ne{constructor(e){super(),this._inputSources=[],this.velocitiesSupported=!1,this.manager=e,this.velocitiesSupported=!!(Se.browser&&window.XRPose?.prototype?.hasOwnProperty("linearVelocity")),this._onInputSourcesChangeEvt=t=>{this._onInputSourcesChange(t)},this.manager.on("start",this._onSessionStart,this),this.manager.on("end",this._onSessionEnd,this)}_onSessionStart(){const e=this.manager.session;e.addEventListener("inputsourceschange",this._onInputSourcesChangeEvt),e.addEventListener("select",s=>{const i=this._getByInputSource(s.inputSource);i.update(s.frame),i.fire("select",s),this.fire("select",i,s)}),e.addEventListener("selectstart",s=>{const i=this._getByInputSource(s.inputSource);i.update(s.frame),i._selecting=!0,i.fire("selectstart",s),this.fire("selectstart",i,s)}),e.addEventListener("selectend",s=>{const i=this._getByInputSource(s.inputSource);i.update(s.frame),i._selecting=!1,i.fire("selectend",s),this.fire("selectend",i,s)}),e.addEventListener("squeeze",s=>{const i=this._getByInputSource(s.inputSource);i.update(s.frame),i.fire("squeeze",s),this.fire("squeeze",i,s)}),e.addEventListener("squeezestart",s=>{const i=this._getByInputSource(s.inputSource);i.update(s.frame),i._squeezing=!0,i.fire("squeezestart",s),this.fire("squeezestart",i,s)}),e.addEventListener("squeezeend",s=>{const i=this._getByInputSource(s.inputSource);i.update(s.frame),i._squeezing=!1,i.fire("squeezeend",s),this.fire("squeezeend",i,s)});const t=e.inputSources;for(let s=0;s<t.length;s++)this._addInputSource(t[s])}_onSessionEnd(){let e=this._inputSources.length;for(;e--;){const s=this._inputSources[e];this._inputSources.splice(e,1),s.fire("remove"),this.fire("remove",s)}this.manager.session.removeEventListener("inputsourceschange",this._onInputSourcesChangeEvt)}_onInputSourcesChange(e){for(let t=0;t<e.removed.length;t++)this._removeInputSource(e.removed[t]);for(let t=0;t<e.added.length;t++)this._addInputSource(e.added[t])}_getByInputSource(e){for(let t=0;t<this._inputSources.length;t++)if(this._inputSources[t].inputSource===e)return this._inputSources[t];return null}_addInputSource(e){if(this._getByInputSource(e))return;const t=new lm(this.manager,e);this._inputSources.push(t),this.fire("add",t)}_removeInputSource(e){for(let t=0;t<this._inputSources.length;t++){if(this._inputSources[t].inputSource!==e)continue;const s=this._inputSources[t];this._inputSources.splice(t,1);let i=s.hitTestSources.length;for(;i--;)s.hitTestSources[i].remove();s.fire("remove"),this.fire("remove",s);return}}update(e){for(let t=0;t<this._inputSources.length;t++)this._inputSources[t].update(e)}get inputSources(){return this._inputSources}};Bs.EVENT_ADD="add",Bs.EVENT_REMOVE="remove",Bs.EVENT_SELECT="select",Bs.EVENT_SELECTSTART="selectstart",Bs.EVENT_SELECTEND="selectend",Bs.EVENT_SQUEEZE="squeeze",Bs.EVENT_SQUEEZESTART="squeezestart",Bs.EVENT_SQUEEZEEND="squeezeend";let hm=Bs;const nn=new x,Yy=new x,Mu=new $,jy=new $,pd=class pd extends ne{constructor(e){super(),this._supported=!1,this._available=!1,this._lightProbeRequested=!1,this._lightProbe=null,this._intensity=0,this._rotation=new Q,this._color=new q,this._sphericalHarmonics=new Float32Array(27),this._manager=e,this._manager.on("start",this._onSessionStart,this),this._manager.on("end",this._onSessionEnd,this)}_onSessionStart(){this._manager.session.requestLightProbe&&(this._supported=!0)}_onSessionEnd(){this._supported=!1,this._available=!1,this._lightProbeRequested=!1,this._lightProbe=null}start(){let e;if(this._manager.session||(e=new Error("XR session is not running")),!e&&this._manager.type!==sl&&(e=new Error("XR session type is not AR")),!e&&!this._supported&&(e=new Error("light-estimation is not supported")),(!e&&this._lightProbe||this._lightProbeRequested)&&(e=new Error("light estimation is already requested")),e){this.fire("error",e);return}this._lightProbeRequested=!0,this._manager.session.requestLightProbe().then(t=>{const s=this._lightProbeRequested;this._lightProbeRequested=!1,this._manager.active?s&&(this._lightProbe=t):this.fire("error",new Error("XR session is not active"))}).catch(t=>{this._lightProbeRequested=!1,this.fire("error",t)})}end(){this._lightProbeRequested=!1,this._lightProbe=null,this._available=!1}update(e){if(!this._lightProbe)return;const t=e.getLightEstimate(this._lightProbe);if(!t)return;this._available||(this._available=!0,this.fire("available"));const s=t.primaryLightIntensity;this._intensity=Math.max(1,Math.max(s.x,Math.max(s.y,s.z))),nn.copy(s).mulScalar(1/this._intensity),this._color.set(nn.x,nn.y,nn.z),nn.set(0,0,0),Yy.copy(t.primaryLightDirection),Mu.setLookAt(Yy,nn,x.UP),jy.setFromAxisAngle(x.RIGHT,90),Mu.mul(jy),this._rotation.setFromMat4(Mu),this._sphericalHarmonics.set(t.sphericalHarmonicsCoefficients)}get supported(){return this._supported}get available(){return this._available}get intensity(){return this._available?this._intensity:null}get color(){return this._available?this._color:null}get rotation(){return this._available?this._rotation:null}get sphericalHarmonics(){return this._available?this._sphericalHarmonics:null}};pd.EVENT_AVAILABLE="available",pd.EVENT_ERROR="error";let cm=pd,z5=0;const md=class md extends ne{constructor(e,t){super(),this._position=new x,this._rotation=new Q,this._id=++z5,this._planeDetection=e,this._xrPlane=t,this._lastChangedTime=t.lastChangedTime,this._orientation=t.orientation}destroy(){this._xrPlane&&(this._xrPlane=null,this.fire("remove"))}update(e){const t=this._planeDetection._manager,s=e.getPose(this._xrPlane.planeSpace,t._referenceSpace);s&&(this._position.copy(s.transform.position),this._rotation.copy(s.transform.orientation)),this._lastChangedTime!==this._xrPlane.lastChangedTime&&(this._lastChangedTime=this._xrPlane.lastChangedTime,this.fire("change"))}getPosition(){return this._position}getRotation(){return this._rotation}get id(){return this._id}get orientation(){return this._orientation}get points(){return this._xrPlane.polygon}get label(){return this._xrPlane.semanticLabel||""}};md.EVENT_REMOVE="remove",md.EVENT_CHANGE="change";let dm=md;const wn=class wn extends ne{constructor(e){super(),this._supported=Se.browser&&!!window.XRPlane,this._available=!1,this._planesIndex=new Map,this._planes=[],this._manager=e,this._supported&&(this._manager.on("start",this._onSessionStart,this),this._manager.on("end",this._onSessionEnd,this))}_onSessionStart(){this._manager.session.enabledFeatures&&this._manager.session.enabledFeatures.indexOf("plane-detection")!==-1&&(this._available=!0,this.fire("available"))}_onSessionEnd(){for(let e=0;e<this._planes.length;e++)this._planes[e].destroy(),this.fire("remove",this._planes[e]);this._planesIndex.clear(),this._planes.length=0,this._available&&(this._available=!1,this.fire("unavailable"))}update(e){if(!this._available)if(!this._manager.session.enabledFeatures&&e.detectedPlanes.size)this._available=!0,this.fire("available");else return;const t=e.detectedPlanes;for(const[s,i]of this._planesIndex)t.has(s)||(this._planesIndex.delete(s),this._planes.splice(this._planes.indexOf(i),1),i.destroy(),this.fire("remove",i));for(const s of t){let i=this._planesIndex.get(s);i?i.update(e):(i=new dm(this,s),this._planesIndex.set(s,i),this._planes.push(i),i.update(e),this.fire("add",i))}}get supported(){return this._supported}get available(){return this._available}get planes(){return this._planes}};wn.EVENT_AVAILABLE="available",wn.EVENT_UNAVAILABLE="unavailable",wn.EVENT_ADD="add",wn.EVENT_REMOVE="remove";let fm=wn;const Cn=class Cn extends ne{constructor(e,t,s=null){super(),this._position=new x,this._rotation=new Q,this._uuid=null,this._uuidRequests=null,this._anchors=e,this._xrAnchor=t,this._uuid=s}destroy(){if(!this._xrAnchor)return;const e=this._xrAnchor;this._xrAnchor.delete(),this._xrAnchor=null,this.fire("destroy",e,this)}update(e){if(!this._xrAnchor)return;const t=e.getPose(this._xrAnchor.anchorSpace,this._anchors.manager._referenceSpace);if(t){if(this._position.equals(t.transform.position)&&this._rotation.equals(t.transform.orientation))return;this._position.copy(t.transform.position),this._rotation.copy(t.transform.orientation),this.fire("change")}}getPosition(){return this._position}getRotation(){return this._rotation}persist(e){if(!this._anchors.persistence){e?.(new Error("Persistent Anchors are not supported"),null);return}if(this._uuid){e?.(null,this._uuid);return}if(this._uuidRequests){e&&this._uuidRequests.push(e);return}this._uuidRequests=[],this._xrAnchor.requestPersistentHandle().then(t=>{this._uuid=t,this._anchors._indexByUuid.set(this._uuid,this),e?.(null,t);for(const s of this._uuidRequests)s(null,t);this._uuidRequests=null,this.fire("persist",t)}).catch(t=>{e?.(t,null);for(const s of this._uuidRequests)s(t,null);this._uuidRequests=null})}forget(e){if(!this._uuid){e?.(new Error("Anchor is not persistent"));return}this._anchors.forget(this._uuid,t=>{this._uuid=null,e?.(t),this.fire("forget")})}get uuid(){return this._uuid}get persistent(){return!!this._uuid}};Cn.EVENT_DESTROY="destroy",Cn.EVENT_CHANGE="change",Cn.EVENT_PERSIST="persist",Cn.EVENT_FORGET="forget";let um=Cn;const Hr=class Hr extends ne{constructor(e){super(),this._supported=Se.browser&&!!window.XRAnchor,this._available=!1,this._checkingAvailability=!1,this._persistence=Se.browser&&!!window?.XRSession?.prototype.restorePersistentAnchor,this._creationQueue=[],this._index=new Map,this._indexByUuid=new Map,this._list=[],this._callbacksAnchors=new Map,this.manager=e,this._supported&&(this.manager.on("start",this._onSessionStart,this),this.manager.on("end",this._onSessionEnd,this))}_onSessionStart(){const e=this.manager.session.enabledFeatures?.indexOf("anchors")>=0;e&&(this._available=e,this.fire("available"))}_onSessionEnd(){if(!this._available)return;this._available=!1;for(let t=0;t<this._creationQueue.length;t++)this._creationQueue[t].callback&&this._creationQueue[t].callback(new Error("session ended"),null);this._creationQueue.length=0,this._index.clear(),this._indexByUuid.clear();let e=this._list.length;for(;e--;)this._list[e].destroy();this._list.length=0,this.fire("unavailable")}_createAnchor(e,t=null){const s=new um(this,e,t);return this._index.set(e,s),t&&this._indexByUuid.set(t,s),this._list.push(s),s.once("destroy",this._onAnchorDestroy,this),s}_onAnchorDestroy(e,t){this._index.delete(e),t.uuid&&this._indexByUuid.delete(t.uuid);const s=this._list.indexOf(t);s!==-1&&this._list.splice(s,1),this.fire("destroy",t)}create(e,t,s){if(!this._available){s?.(new Error("Anchors API is not available"),null);return}if(window.XRHitTestResult&&e instanceof XRHitTestResult){const i=e;if(s=t,!this._supported){s?.(new Error("Anchors API is not supported"),null);return}if(!i.createAnchor){s?.(new Error("Creating Anchor from Hit Test is not supported"),null);return}i.createAnchor().then(r=>{const a=this._createAnchor(r);s?.(null,a),this.fire("add",a)}).catch(r=>{s?.(r,null),this.fire("error",r)})}else this._creationQueue.push({transform:new XRRigidTransform(e,t),callback:s})}restore(e,t){if(!this._available){t?.(new Error("Anchors API is not available"),null);return}if(!this._persistence){t?.(new Error("Anchor Persistence is not supported"),null);return}if(!this.manager.active){t?.(new Error("WebXR session is not active"),null);return}this.manager.session.restorePersistentAnchor(e).then(s=>{const i=this._createAnchor(s,e);t?.(null,i),this.fire("add",i)}).catch(s=>{t?.(s,null),this.fire("error",s)})}forget(e,t){if(!this._available){t?.(new Error("Anchors API is not available"));return}if(!this._persistence){t?.(new Error("Anchor Persistence is not supported"));return}if(!this.manager.active){t?.(new Error("WebXR session is not active"));return}this.manager.session.deletePersistentAnchor(e).then(()=>{t?.(null)}).catch(s=>{t?.(s),this.fire("error",s)})}update(e){if(!this._available){!this.manager.session.enabledFeatures&&!this._checkingAvailability&&(this._checkingAvailability=!0,e.createAnchor(new XRRigidTransform,this.manager._referenceSpace).then(t=>{t.delete(),this.manager.active&&(this._available=!0,this.fire("available"))}).catch(()=>{}));return}if(this._creationQueue.length){for(let t=0;t<this._creationQueue.length;t++){const s=this._creationQueue[t];e.createAnchor(s.transform,this.manager._referenceSpace).then(i=>{s.callback&&this._callbacksAnchors.set(i,s.callback)}).catch(i=>{s.callback&&s.callback(i,null),this.fire("error",i)})}this._creationQueue.length=0}for(const[t,s]of this._index)e.trackedAnchors.has(t)||(this._index.delete(t),s.destroy());for(let t=0;t<this._list.length;t++)this._list[t].update(e);for(const t of e.trackedAnchors){if(this._index.has(t))continue;try{const r=t.anchorSpace}catch{continue}const s=this._createAnchor(t);s.update(e);const i=this._callbacksAnchors.get(t);i&&(this._callbacksAnchors.delete(t),i(null,s)),this.fire("add",s)}}get supported(){return this._supported}get available(){return this._available}get persistence(){return this._persistence}get uuids(){return!this._available||!this._persistence||!this.manager.active?null:this.manager.session.persistentAnchors}get list(){return this._list}};Hr.EVENT_AVAILABLE="available",Hr.EVENT_UNAVAILABLE="unavailable",Hr.EVENT_ERROR="error",Hr.EVENT_ADD="add",Hr.EVENT_DESTROY="destroy";let pm=Hr;const _d=class _d extends ne{constructor(e,t){super(),this._lastChanged=0,this._position=new x,this._rotation=new Q,this._meshDetection=e,this._xrMesh=t,this._lastChanged=this._xrMesh.lastChangedTime}get xrMesh(){return this._xrMesh}get label(){return this._xrMesh.semanticLabel||""}get vertices(){return this._xrMesh.vertices}get indices(){return this._xrMesh.indices}destroy(){this._xrMesh&&(this._xrMesh=null,this.fire("remove"))}update(e){const t=this._meshDetection._manager,s=e.getPose(this._xrMesh.meshSpace,t._referenceSpace);s&&(this._position.copy(s.transform.position),this._rotation.copy(s.transform.orientation)),this._lastChanged!==this._xrMesh.lastChangedTime&&(this._lastChanged=this._xrMesh.lastChangedTime,this.fire("change"))}getPosition(){return this._position}getRotation(){return this._rotation}};_d.EVENT_REMOVE="remove",_d.EVENT_CHANGE="change";let mm=_d;const Pn=class Pn extends ne{constructor(e){super(),this._supported=Se.browser&&!!window.XRMesh,this._available=!1,this._index=new Map,this._list=[],this._manager=e,this._supported&&(this._manager.on("start",this._onSessionStart,this),this._manager.on("end",this._onSessionEnd,this))}update(e){if(!this._available)if(!this._manager.session.enabledFeatures&&e.detectedMeshes.size)this._available=!0,this.fire("available");else return;for(const t of e.detectedMeshes){let s=this._index.get(t);s?s.update(e):(s=new mm(this,t),this._index.set(t,s),this._list.push(s),s.update(e),this.fire("add",s))}for(const t of this._index.values())e.detectedMeshes.has(t.xrMesh)||this._removeMesh(t)}_removeMesh(e){this._index.delete(e.xrMesh),this._list.splice(this._list.indexOf(e),1),e.destroy(),this.fire("remove",e)}_onSessionStart(){if(this._manager.session.enabledFeatures){const e=this._manager.session.enabledFeatures.indexOf("mesh-detection")!==-1;if(!e)return;this._available=e,this.fire("available")}}_onSessionEnd(){if(this._available){this._available=!1;for(const e of this._index.values())this._removeMesh(e);this.fire("unavailable")}}get supported(){return this._supported}get available(){return this._available}get meshes(){return this._list}};Pn.EVENT_AVAILABLE="available",Pn.EVENT_UNAVAILABLE="unavailable",Pn.EVENT_ADD="add",Pn.EVENT_REMOVE="remove";let _m=Pn;const _g=class _g extends ne{constructor(e,t,s){super(),this._positionData=new Float32Array(3),this._viewport=new K,this._projMat=new $,this._projViewOffMat=new $,this._viewMat=new $,this._viewOffMat=new $,this._viewMat3=new Ks,this._viewInvMat=new $,this._viewInvOffMat=new $,this._xrCamera=null,this._textureColor=null,this._textureDepth=null,this._depthInfo=null,this._emptyDepthBuffer=new Uint8Array(32),this._depthMatrix=new $,this._manager=e,this._xrView=t;const i=this._manager.app.graphicsDevice;if(this._manager.views.supportedColor&&(this._xrCamera=this._xrView.camera,this._manager.views.availableColor&&this._xrCamera&&(this._textureColor=new ae(i,{format:_r,mipmaps:!1,addressU:te,addressV:te,minFilter:Ze,magFilter:Ze,width:this._xrCamera.width,height:this._xrCamera.height,name:`XrView-${this._xrView.eye}-Color`}))),this._manager.views.supportedDepth&&this._manager.views.availableDepth){const r=this._manager.views.depthGpuOptimized?pe:Ze;this._textureDepth=new ae(i,{format:this._manager.views.depthPixelFormat,arrayLength:s===1?0:s,mipmaps:!1,addressU:te,addressV:te,minFilter:r,magFilter:r,width:4,height:4,name:`XrView-${this._xrView.eye}-Depth`});for(let a=0;a<this._textureDepth._levels.length;a++)this._textureDepth._levels[a]=this._emptyDepthBuffer;this._textureDepth.upload()}(this._textureColor||this._textureDepth)&&i.on("devicelost",this._onDeviceLost,this)}get textureColor(){return this._textureColor}get textureDepth(){return this._textureDepth}get depthUvMatrix(){return this._depthMatrix}get depthValueToMeters(){return this._depthInfo?.rawValueToMeters||0}get eye(){return this._xrView.eye}get viewport(){return this._viewport}get projMat(){return this._projMat}get projViewOffMat(){return this._projViewOffMat}get viewOffMat(){return this._viewOffMat}get viewInvOffMat(){return this._viewInvOffMat}get viewMat3(){return this._viewMat3}get positionData(){return this._positionData}update(e,t){this._xrView=t,this._manager.views.availableColor&&(this._xrCamera=this._xrView.camera);const i=e.session.renderState.baseLayer.getViewport(this._xrView);this._viewport.x=i.x,this._viewport.y=i.y,this._viewport.z=i.width,this._viewport.w=i.height,this._projMat.set(this._xrView.projectionMatrix),this._viewMat.set(this._xrView.transform.inverse.matrix),this._viewInvMat.set(this._xrView.transform.matrix),this._updateTextureColor(),this._updateDepth(e)}_updateTextureColor(){if(!this._manager.views.availableColor||!this._xrCamera||!this._textureColor)return;const e=this._manager.webglBinding;if(!e)return;const t=e.getCameraImage(this._xrCamera);if(!t)return;const s=this._manager.app.graphicsDevice,i=s.gl;if(!this._frameBufferSource)this._frameBufferSource=i.createFramebuffer(),this._frameBuffer=i.createFramebuffer();else{const r=i.COLOR_ATTACHMENT0,a=this._xrCamera.width,n=this._xrCamera.height;s.setFramebuffer(this._frameBufferSource),i.framebufferTexture2D(i.FRAMEBUFFER,r,i.TEXTURE_2D,t,0),s.setFramebuffer(this._frameBuffer),i.framebufferTexture2D(i.FRAMEBUFFER,r,i.TEXTURE_2D,this._textureColor.impl._glTexture,0),i.bindFramebuffer(i.READ_FRAMEBUFFER,this._frameBufferSource),i.bindFramebuffer(i.DRAW_FRAMEBUFFER,this._frameBuffer),i.blitFramebuffer(0,n,a,0,0,0,a,n,i.COLOR_BUFFER_BIT,i.NEAREST)}}_updateDepth(e){if(!this._manager.views.availableDepth||!this._textureDepth)return;const t=this._manager.views.depthGpuOptimized,s=t?this._manager.webglBinding:e;if(!s){this._depthInfo=null;return}const i=s.getDepthInformation(this._xrView);if(!i){this._depthInfo=null;return}let r=!this._depthInfo!=!i;this._depthInfo=i;const a=this._depthInfo?.width||4,n=this._depthInfo?.height||4;let l=!1;if((this._textureDepth.width!==a||this._textureDepth.height!==n)&&(this._textureDepth._width=a,this._textureDepth._height=n,r=!0,l=!0),r&&(this._depthInfo?this._depthMatrix.data.set(this._depthInfo.normDepthBufferFromNormView.matrix):this._depthMatrix.setIdentity()),this._depthInfo)if(t){if(this._depthInfo.texture){const h=this._manager.app.graphicsDevice.gl;switch(this._textureDepth.impl._glTexture=this._depthInfo.texture,this._depthInfo.textureType==="texture-array"?this._textureDepth.impl._glTarget=h.TEXTURE_2D_ARRAY:this._textureDepth.impl._glTarget=h.TEXTURE_2D,this._manager.views.depthPixelFormat){case Oi:this._textureDepth.impl._glInternalFormat=h.R32F,this._textureDepth.impl._glPixelType=h.FLOAT,this._textureDepth.impl._glFormat=h.RED;break;case wi:this._textureDepth.impl._glInternalFormat=h.DEPTH_COMPONENT16,this._textureDepth.impl._glPixelType=h.UNSIGNED_SHORT,this._textureDepth.impl._glFormat=h.DEPTH_COMPONENT;break}this._textureDepth.impl._glCreated=!0}}else this._textureDepth._levels[0]=new Uint8Array(this._depthInfo.data),this._textureDepth.upload();else this._textureDepth._levels[0]=this._emptyDepthBuffer,this._textureDepth.upload();l&&this.fire("depth:resize",a,n)}updateTransforms(e){e?(this._viewInvOffMat.mul2(e,this._viewInvMat),this.viewOffMat.copy(this._viewInvOffMat).invert()):(this._viewInvOffMat.copy(this._viewInvMat),this.viewOffMat.copy(this._viewMat)),this._viewMat3.setFromMat4(this._viewOffMat),this._projViewOffMat.mul2(this._projMat,this._viewOffMat),this._positionData[0]=this._viewInvOffMat.data[12],this._positionData[1]=this._viewInvOffMat.data[13],this._positionData[2]=this._viewInvOffMat.data[14]}_onDeviceLost(){this._frameBufferSource=null,this._frameBuffer=null,this._depthInfo=null}getDepth(e,t){return this._manager.views.depthGpuOptimized?null:this._depthInfo?.getDepthInMeters(e,t)??null}destroy(){if(this._depthInfo=null,this._textureColor&&(this._textureColor.destroy(),this._textureColor=null),this._textureDepth&&(this._textureDepth.destroy(),this._textureDepth=null),this._frameBufferSource){const e=this._manager.app.graphicsDevice.gl;e.deleteFramebuffer(this._frameBufferSource),this._frameBufferSource=null,e.deleteFramebuffer(this._frameBuffer),this._frameBuffer=null}}};_g.EVENT_DEPTHRESIZE="depth:resize";let gm=_g;const gd=class gd extends ne{constructor(e){super(),this._index=new Map,this._indexTmp=new Map,this._list=[],this._supportedColor=Se.browser&&!!window.XRCamera&&!!window.XRWebGLBinding,this._supportedDepth=Se.browser&&!!window.XRDepthInformation,this._availableColor=!1,this._availableDepth=!1,this._depthUsage="",this._depthFormat="",this._depthFormats={[ME]:Gm,[DE]:wi,[RE]:Oi},this._manager=e,this._manager.on("start",this._onSessionStart,this),this._manager.on("end",this._onSessionEnd,this)}get list(){return this._list}get supportedColor(){return this._supportedColor}get supportedDepth(){return this._supportedDepth}get availableColor(){return this._availableColor}get availableDepth(){return this._availableDepth}get depthUsage(){return this._depthUsage}get depthGpuOptimized(){return this._depthUsage===IE}get depthFormat(){return this._depthFormat}get depthPixelFormat(){return this._depthFormats[this._depthFormat]??null}update(e,t){for(let s=0;s<t.length;s++)this._indexTmp.set(t[s].eye,t[s]);for(const[s,i]of this._indexTmp){let r=this._index.get(s);r?r.update(e,i):(r=new gm(this._manager,i,t.length),this._index.set(s,r),this._list.push(r),r.update(e,i),this.fire("add",r))}for(const[s,i]of this._index){if(this._indexTmp.has(s))continue;i.destroy(),this._index.delete(s);const r=this._list.indexOf(i);r!==-1&&this._list.splice(r,1),this.fire("remove",i)}this._indexTmp.clear()}get(e){return this._index.get(e)||null}_onSessionStart(){if(this._manager.type===sl&&this._manager.session.enabledFeatures&&(this._availableColor=this._manager.session.enabledFeatures.indexOf("camera-access")!==-1,this._availableDepth=this._manager.session.enabledFeatures.indexOf("depth-sensing")!==-1,this._availableDepth)){const e=this._manager.session;this._depthUsage=e.depthUsage,this._depthFormat=e.depthDataFormat}}_onSessionEnd(){for(const e of this._index.values())e.destroy();this._index.clear(),this._availableColor=!1,this._availableDepth=!1,this._depthUsage="",this._depthFormat="",this._list.length=0}};gd.EVENT_ADD="add",gd.EVENT_REMOVE="remove";let td=gd;const Gr=class Gr extends ne{constructor(e){super(),this._supported=Se.browser&&!!navigator.xr,this._available={},this._type=null,this._spaceType=null,this._session=null,this._baseLayer=null,this.webglBinding=null,this._referenceSpace=null,this._camera=null,this._localPosition=new x,this._localRotation=new Q,this._depthNear=.1,this._depthFar=1e3,this._supportedFrameRates=null,this._width=0,this._height=0,this._framebufferScaleFactor=1,this.app=e,this._available[O5]=!1,this._available[N5]=!1,this._available[sl]=!1,this.views=new td(this),this.domOverlay=new U5(this),this.hitTest=new rm(this),this.imageTracking=new nm(this),this.planeDetection=new fm(this),this.meshDetection=new _m(this),this.input=new hm(this),this.lightEstimation=new cm(this),this.anchors=new pm(this),this.views=new td(this),this._supported&&(navigator.xr.addEventListener("devicechange",()=>{this._deviceAvailabilityCheck()}),this._deviceAvailabilityCheck(),this.app.graphicsDevice.on("devicelost",this._onDeviceLost,this),this.app.graphicsDevice.on("devicerestored",this._onDeviceRestored,this))}destroy(){}start(e,t,s,i){let r=i;if(typeof i=="object"&&(r=i.callback),!this._available[t]){r&&r(new Error("XR is not available"));return}if(this._session){r&&r(new Error("XR session is already started"));return}this._camera=e,this._camera.camera.xr=this,this._type=t,this._spaceType=s,this._framebufferScaleFactor=i?.framebufferScaleFactor??1,this._setClipPlanes(e.nearClip,e.farClip);const a={requiredFeatures:[s],optionalFeatures:[]},n=this.app.graphicsDevice;n?.isWebGPU&&a.requiredFeatures.push("webgpu");const l=n?.isWebGL2;if(t===sl){if(a.optionalFeatures.push("light-estimation"),a.optionalFeatures.push("hit-test"),i&&(i.imageTracking&&this.imageTracking.supported&&a.optionalFeatures.push("image-tracking"),i.planeDetection&&a.optionalFeatures.push("plane-detection"),i.meshDetection&&a.optionalFeatures.push("mesh-detection")),this.domOverlay.supported&&this.domOverlay.root&&(a.optionalFeatures.push("dom-overlay"),a.domOverlay={root:this.domOverlay.root}),i&&i.anchors&&this.anchors.supported&&a.optionalFeatures.push("anchors"),i&&i.depthSensing&&this.views.supportedDepth){a.optionalFeatures.push("depth-sensing");const h=[],c=[];if(h.push(IE,k5),c.push(RE,ME,DE),i.depthSensing.usagePreference){const d=h.indexOf(i.depthSensing.usagePreference);d!==-1&&h.splice(d,1),h.unshift(i.depthSensing.usagePreference)}if(i.depthSensing.dataFormatPreference){const d=c.indexOf(i.depthSensing.dataFormatPreference);d!==-1&&c.splice(d,1),c.unshift(i.depthSensing.dataFormatPreference)}a.depthSensing={usagePreference:h,dataFormatPreference:c}}l&&i&&i.cameraColor&&this.views.supportedColor&&a.optionalFeatures.push("camera-access")}a.optionalFeatures.push("hand-tracking"),i&&i.optionalFeatures&&(a.optionalFeatures=a.optionalFeatures.concat(i.optionalFeatures)),this.imageTracking.supported&&this.imageTracking.images.length?this.imageTracking.prepareImages((h,c)=>{if(h){r&&r(h),this.fire("error",h);return}c!==null&&(a.trackedImages=c),this._onStartOptionsReady(t,s,a,r)}):this._onStartOptionsReady(t,s,a,r)}_onStartOptionsReady(e,t,s,i){navigator.xr.requestSession(e,s).then(r=>{this._onSessionStart(r,t,i)}).catch(r=>{this._camera.camera.xr=null,this._camera=null,this._type=null,this._spaceType=null,i&&i(r),this.fire("error",r)})}end(e){if(!this._session){e&&e(new Error("XR Session is not initialized"));return}this.webglBinding=null,e&&this.once("end",e),this._session.end()}isAvailable(e){return this._available[e]}_deviceAvailabilityCheck(){for(const e in this._available)this._sessionSupportCheck(e)}initiateRoomCapture(e){if(!this._session){e(new Error("Session is not active"));return}if(!this._session.initiateRoomCapture){e(new Error("Session does not support manual room capture"));return}this._session.initiateRoomCapture().then(()=>{e&&e(null)}).catch(t=>{e&&e(t)})}updateTargetFrameRate(e,t){if(!this._session?.updateTargetFrameRate){t?.(new Error("unable to update frameRate"));return}this._session.updateTargetFrameRate(e).then(()=>{t?.()}).catch(s=>{t?.(s)})}_sessionSupportCheck(e){navigator.xr.isSessionSupported(e).then(t=>{this._available[e]!==t&&(this._available[e]=t,this.fire("available",e,t),this.fire(`available:${e}`,t))}).catch(t=>{this.fire("error",t)})}_onSessionStart(e,t,s){let i=!1;this._session=e;const r=()=>{this.fire("visibility:change",e.visibilityState)},a=()=>{this._setClipPlanes(this._camera.nearClip,this._camera.farClip)},n=()=>{this._camera&&(this._camera.off("set_nearClip",a),this._camera.off("set_farClip",a),this._camera.camera.xr=null,this._camera=null),e.removeEventListener("end",n),e.removeEventListener("visibilitychange",r),i||this.fire("end"),this._session=null,this._referenceSpace=null,this._width=0,this._height=0,this._type=null,this._spaceType=null,this.app.systems&&this.app.tick()};e.addEventListener("end",n),e.addEventListener("visibilitychange",r),this._camera.on("set_nearClip",a),this._camera.on("set_farClip",a),this._createBaseLayer(),this.session.supportedFrameRates?this._supportedFrameRates=Array.from(this.session.supportedFrameRates):this._supportedFrameRates=null,this._session.addEventListener("frameratechange",()=>{this.fire("frameratechange",this._session?.frameRate)}),e.requestReferenceSpace(t).then(l=>{this._referenceSpace=l,this.app.tick(),s&&s(null),this.fire("start")}).catch(l=>{i=!0,e.end(),s&&s(l),this.fire("error",l)})}_setClipPlanes(e,t){this._depthNear===e&&this._depthFar===t||(this._depthNear=e,this._depthFar=t,this._session&&this._session.updateRenderState({depthNear:this._depthNear,depthFar:this._depthFar}))}_createBaseLayer(){const e=this.app.graphicsDevice,t=e.maxPixelRatio/window.devicePixelRatio*this._framebufferScaleFactor;if(this._baseLayer=new XRWebGLLayer(this._session,e.gl,{alpha:!0,depth:!0,stencil:!0,framebufferScaleFactor:t,antialias:!1}),e?.isWebGL2&&window.XRWebGLBinding)try{this.webglBinding=new XRWebGLBinding(this._session,e.gl)}catch(s){this.fire("error",s)}this._session.updateRenderState({baseLayer:this._baseLayer,depthNear:this._depthNear,depthFar:this._depthFar})}_onDeviceLost(){this._session&&(this.webglBinding&&(this.webglBinding=null),this._baseLayer=null,this._session.updateRenderState({baseLayer:this._baseLayer,depthNear:this._depthNear,depthFar:this._depthFar}))}_onDeviceRestored(){this._session&&setTimeout(()=>{this.app.graphicsDevice.gl.makeXRCompatible().then(()=>{this._createBaseLayer()}).catch(e=>{this.fire("error",e)})},0)}update(e){if(!this._session)return!1;const t=e.session.renderState.baseLayer.framebufferWidth,s=e.session.renderState.baseLayer.framebufferHeight;(this._width!==t||this._height!==s)&&(this._width=t,this._height=s,this.app.graphicsDevice.setResolution(t,s));const i=e.getViewerPose(this._referenceSpace);if(!i)return!1;const r=this.views.list.length;this.views.update(e,i.views);const a=i.transform.position,n=i.transform.orientation;if(this._localPosition.set(a.x,a.y,a.z),this._localRotation.set(n.x,n.y,n.z,n.w),r===0&&this.views.list.length>0){const l=new $,h=this.views.list[0];l.copy(h.projMat);const c=l.data,d=2*Math.atan(1/c[5])*180/Math.PI,f=c[5]/c[0],u=c[14]/(c[10]+1),p=c[14]/(c[10]-1);this._camera.camera.setXrProperties({aspectRatio:f,farClip:u,fov:d,horizontalFov:!1,nearClip:p})}return this._camera.camera._node.setLocalPosition(this._localPosition),this._camera.camera._node.setLocalRotation(this._localRotation),this.input.update(e),this._type===sl&&(this.hitTest.supported&&this.hitTest.update(e),this.lightEstimation.supported&&this.lightEstimation.update(e),this.imageTracking.supported&&this.imageTracking.update(e),this.anchors.supported&&this.anchors.update(e),this.planeDetection.supported&&this.planeDetection.update(e),this.meshDetection.supported&&this.meshDetection.update(e)),this.fire("update",e),!0}get supported(){return this._supported}get active(){return!!this._session}get type(){return this._type}get spaceType(){return this._spaceType}get session(){return this._session}get frameRate(){return this._session?.frameRate??null}get supportedFrameRates(){return this._supportedFrameRates}get framebufferScaleFactor(){return this._framebufferScaleFactor}set fixedFoveation(e){(this._baseLayer?.fixedFoveation??null)!==null&&(this.app.graphicsDevice.samples>1,this._baseLayer.fixedFoveation=e)}get fixedFoveation(){return this._baseLayer?.fixedFoveation??null}get camera(){return this._camera?this._camera.entity:null}get visibilityState(){return this._session?this._session.visibilityState:null}};Gr.EVENT_AVAILABLE="available",Gr.EVENT_START="start",Gr.EVENT_END="end",Gr.EVENT_UPDATE="update",Gr.EVENT_ERROR="error";let vm=Gr;class H5 extends Bc{constructor(e,t={}){super(e);const s=new AU;s.graphicsDevice=t.graphicsDevice??this.createDevice(e,t),this.addComponentSystems(s),this.addResourceHandles(s),s.elementInput=t.elementInput,s.keyboard=t.keyboard,s.mouse=t.mouse,s.touch=t.touch,s.gamepads=t.gamepads,s.scriptPrefix=t.scriptPrefix,s.assetPrefix=t.assetPrefix,s.scriptsOrder=t.scriptsOrder,s.soundManager=new cM,s.lightmapper=kU,s.batchManager=dD,s.xr=vm,this.init(s)}createDevice(e,t){return t.graphicsDeviceOptions||(t.graphicsDeviceOptions={}),Se.browser&&navigator.xr&&(t.graphicsDeviceOptions.xrCompatible=!0),t.graphicsDeviceOptions.alpha=t.graphicsDeviceOptions.alpha||!1,new WI(e,t.graphicsDeviceOptions)}addComponentSystems(e){e.componentSystems=[Gp,LB,aV,sB,lB,SV,hH,WH,XH,nG,RH,cB,nH,vH,tV,pB,PH,IH,UH,mV,oV,VH,lG]}addResourceHandles(e){e.resourceHandlers=[hG,u4,p4,m4,J4,Y4,R5,h5,W4,g4,a5,e5,x4,G4,T4,n5,H4,E4,A4,v4,d5,o5,l5,y4,z4]}}class G5 extends ne{constructor(e,t){super(),this._assets=new Set,this._loadingAssets=new Set,this._waitingAssets=new Set,this._loading=!1,this._loaded=!1,this._failed=[],this._registry=t,e.forEach(s=>{if(s instanceof ie)s.registry||(s.registry=t),this._assets.add(s);else{const i=t.get(s);i?this._assets.add(i):this._waitForAsset(s)}})}destroy(){this._registry.off("load",this._onLoad),this._registry.off("error",this._onError),this._waitingAssets.forEach(e=>{this._registry.off(`add:${e}`,this._onAddAsset)}),this.off("progress"),this.off("load")}_assetHasDependencies(e){return e.type==="model"&&e.file?.url&&e.file.url&&e.file.url.match(/.json$/g)}load(e,t){if(this._loading)return;this._loading=!0,this._callback=e,this._scope=t,this._registry.on("load",this._onLoad,this),this._registry.on("error",this._onError,this);let s=!1;this._assets.forEach(i=>{i.loaded||(s=!0,this._assetHasDependencies(i)&&this._registry.loadFromUrl(i.file.url,i.type,(r,a)=>{if(r){this._onError(r,i);return}this._onLoad(i)}),this._loadingAssets.add(i),this._registry.add(i))}),this._loadingAssets.forEach(i=>{this._assetHasDependencies(i)||this._registry.load(i)}),!s&&this._waitingAssets.size===0&&this._loadingComplete()}ready(e,t=this){this._loaded?e.call(t,Array.from(this._assets)):this.once("load",s=>{e.call(t,s)})}_loadingComplete(){this._loaded||(this._loaded=!0,this._registry.off("load",this._onLoad,this),this._registry.off("error",this._onError,this),this._failed.length?(this._callback&&this._callback.call(this._scope,"Failed to load some assets",this._failed),this.fire("error",this._failed)):(this._callback&&this._callback.call(this._scope),this.fire("load",Array.from(this._assets))))}_onLoad(e){this._loadingAssets.has(e)&&(this.fire("progress",e),this._loadingAssets.delete(e)),this._loadingAssets.size===0&&setTimeout(()=>{this._loadingComplete()},0)}_onError(e,t){this._loadingAssets.has(t)&&(this._failed.push(t),this._loadingAssets.delete(t)),this._loadingAssets.size===0&&setTimeout(()=>{this._loadingComplete()},0)}_onAddAsset(e){this._waitingAssets.delete(e),this._assets.add(e),e.loaded||(this._loadingAssets.add(e),this._registry.load(e))}_waitForAsset(e){this._waitingAssets.add(e),this._registry.once(`add:${e}`,this._onAddAsset,this)}}window.addEventListener("DOMContentLoaded",async()=>{const o=document.querySelector("#large-splat"),e=document.querySelector(".container"),t=new H5(o,{graphicsDeviceOptions:{antialias:!1}}),s=()=>[o.parentElement.offsetWidth,e.offsetWidth/2];t.setCanvasFillMode(KR,...s()),t.setCanvasResolution(gp),t.start(),window.addEventListener("resize",()=>t.resizeCanvas(...s()));const i=[new ie("scene","gsplat",{url:"../assets/botanics/meta.json"})],r=new G5(i,t.assets);await new Promise(l=>r.load(l));const a=new Ve("Camera");a.addComponent("camera"),a.addComponent("script"),a.camera.clearColor=new q(102,102,102),a.camera.fov=30,t.root.addChild(a),a.setPosition(-.2589048147201538,-.525307834148407,-14.180912017822266),a.lookAt(4.376051060512836,-.7526616755988405,-15.951593063115695);const n=new Ve("Scene");n.addComponent("gsplat",{asset:i[0]}),n.setPosition(0,0,0),n.setEulerAngles(0,0,180),t.root.addChild(n)});
