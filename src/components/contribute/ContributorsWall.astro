---
/**
 * Reusable Contributors Wall component.
 *
 * Responsibilities:
 *  - Fetches contributors at build time using the shared GitHub service.
 *  - Renders a responsive "face wall" of avatars linking to each contributor's profile.
 *  - Exposes optional props for title/heading visibility and data override (for testing or custom sources).
 *
 * Notes:
 *  - Data fetch runs at build time in SSG (or at request time in SSR), per Astro data-fetching semantics.
 *  - Styles are component-scoped to avoid leakage across the app.
 */

import type { Contributor } from "@/services/github";
import { getContributors } from "@/services/github";

/** Props available to parent pages/components. */
interface Props {
  /** Optional array of contributors to display; if omitted, the component will fetch via `getContributors()`. */
  contributors?: Contributor[];

  /** Section title text; defaults to "Our Valued Contributors". */
  title?: string;

  /** Control heading visibility; defaults to true. */
  showHeading?: boolean;

  /** Optional id attribute for the section wrapper; defaults to "contributors". */
  sectionId?: string;
}

/** Resolve props with safe defaults. */
const {
  contributors: providedContributors,
  title = "Our Valued Contributors",
  showHeading = true,
  sectionId = "contributors",
} = Astro.props as Props;

/**
 * Fetch contributors only if they were not provided by the parent.
 * This keeps concerns DRY and centralizes GitHub usage in `services/github.ts`.
 */
const contributors: Contributor[] = providedContributors ?? (await getContributors());
---

{
  contributors.length > 0 && (
    <div class="container px-4 py-5" id={sectionId}>
      {showHeading && <h2 class="pb-2 border-bottom">{title}</h2>}
      <p class="mt-3">A huge thank you to everyone who has contributed to the project.</p>

      <div class="contributor-wall">
        {contributors.map((contributor: Contributor) => (
          <a
            href={contributor.html_url}
            target="_blank"
            rel="noopener noreferrer"
            class="contributor-avatar"
            title={contributor.login}
          >
            <img
              src={contributor.avatar_url}
              alt={`${contributor.login}'s avatar`}
              loading="lazy"
              width="64"
              height="64"
            />
          </a>
        ))}
      </div>
    </div>
  )
}

<style>
  /**
   * Styles for the contributor "face wall", scoped to this component.
   * These rules do not leak to other components per Astro's default scoping.
   */
  .contributor-wall {
    display: flex;
    flex-wrap: wrap;
    gap: 1rem;
    padding-top: 2.5rem;
    justify-content: center;
  }

  .contributor-avatar {
    display: block;
    width: 64px;
    height: 64px;
    border-radius: 50%;
    overflow: hidden;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    transition:
      transform 0.2s ease,
      box-shadow 0.2s ease;
  }

  .contributor-avatar:hover {
    transform: scale(1.1);
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);
    z-index: 10;
    position: relative;
  }

  .contributor-avatar img {
    width: 100%;
    height: 100%;
    object-fit: cover;
    display: block;
  }
</style>
